<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="66831e1edf18f86bb09016053bb76136737365e9" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64068395" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" /> 和 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>类，可以检查已由执行的数据操作的结果<xref:System.Web.UI.WebControls.LinqDataSource>控件。 一个<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象传递给事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，并且<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件的<xref:System.Web.UI.WebControls.LinqDataSource>控件。  
  
 如果已成功完成数据操作，生成的数据对象存储在<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性和<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性是`null`。 如果数据操作失败，数据操作期间发生的异常将存储在<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性和<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性是`null`。 如果处理所表示的异常<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性，设置<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`，以便不会引发异常。  
  
 检索从通过查询返回的数据记录总数<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件。 事件处理程序中，如果<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性是`null`，此对象中检索 ID 的产品<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性。 产品 ID 是主键的表和数据库设置，因此，完成插入操作之前，不知道值。 如果记录异常消息<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性不等于`null`。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">在数据操作过程中发生的错误。</param>
        <summary>使用数据操作所引发的异常初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在操作期间引发异常时，会使用此构造函数。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性自动设置为`null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">包含数据操作结果数据的对象。</param>
        <summary>使用包含数据操作结果数据的对象初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据操作已完成且未发生错误时，会使用此构造函数。 `result`参数包含一个对象，表示数据操作的结果。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性自动设置为`null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">包含数据操作结果数据的对象。</param>
        <param name="totalRowCount">数据检索操作返回的行数。</param>
        <summary>使用包含数据操作结果数据以及返回的行数的对象初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在数据操作过程中引发的异常。</summary>
        <value>如果出现错误，则为表示异常的 <see cref="T:System.Exception" /> 对象；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在操作期间引发异常，则该异常存储在<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性。 可以创建事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，并<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件和异常，如果有，检索通过<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件。 事件处理程序中，如果<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性是`null`，此对象中检索 ID 的产品<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性。 产品 ID 是主键的表和数据库，因此，完成插入操作之前不知道值设置。 如果记录异常消息<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性不等于`null`。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示异常是否已得到处理而不该再次引发。</summary>
        <value>如果异常已得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以创建事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，和<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件来检查这些操作期间发生的任何异常。 如果处理异常，并且不希望它再次引发设置<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`。 如果未设置<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`，异常将传播到调用堆栈中的下一个事件处理程序。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件。 事件处理程序中，如果<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性是`null`，此对象中检索 ID 的产品<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性。 产品 ID 是主键的表和数据库设置，因此，完成插入操作之前，不知道值。 如果记录异常消息<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性不等于`null`。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示数据操作结果的对象。</summary>
        <value>包含数据操作结果数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性可以检查值返回数据操作。 您可以从数据操作检索输出参数或修改从查询返回的值。  
  
 中存储的数据<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性依赖于已执行的数据操作的类型。 删除数据，当<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性包含的对象中指定的类型<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性，从数据源已删除的原始值。 在插入或更新数据时<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性包含的对象中指定的类型<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性，保存到数据源的新值。 当您选择的数据，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性包含查询的结果。  
  
 如果选择的查询涉及对数据进行分组或选择从中指定的类型的属性子集<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性包含动态创建类型的对象。 否则为<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性包含的对象中指定的类型<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件。 事件处理程序中，如果<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性是`null`，此对象中检索 ID 的产品<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性。 产品 ID 是主键的表和数据库设置，因此，完成插入操作之前，不知道值。 如果记录异常消息<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性不等于`null`。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>属性设置为`true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据检索操作过程中在某个数据集中检索的总行数。</summary>
        <value>数据检索操作过程中在某个数据集中检索的总行数；如果 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 对象是在数据修改操作过程中创建的，则为 -1；如果通过将 <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> 设置为 <see langword="true" /> 并将 <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> 设置为 <see langword="false" /> 启用了自定义分页，则为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性数据检索操作过程中数据集获取的记录数。 通常情况下，您检索此属性时要显示的数据页并且想要显示的记录总数。  
  
 换数据时中的值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性可能会不同于实际的查询返回的行数。 这是因为查询将返回只数据的页所需的行数。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性包含查询中的记录数，仅当访问中的事件处理程序时<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件。 当从事件处理程序访问的属性<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>， <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性包含-1。  
  
 值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性依赖于<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>的属性<xref:System.Web.UI.WebControls.LinqDataSource>控件，然后在`AllowPaging`数据绑定控件的属性。 下表总结了的可能值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性。  
  
|LinqDataSource 控件 AutoPage 属性|AllowPaging 数据绑定控件属性|TotalRowCount 属性|结果|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|查询的记录数。|自动分页数据。|  
|`false`|`false`|查询的记录数。|不分页数据。|  
|`true`|`false`|-1|不分页数据。|  
|`false`|`true`|分配给的值<xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A>中的事件处理程序属性<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。|指定自定义分页时根据的值，分页数据。|  
  
   
  
## Examples  
 下面的示例演示与网页<xref:System.Web.UI.WebControls.LinqDataSource>控件，<xref:System.Web.UI.WebControls.GridView>控件，和一个<xref:System.Web.UI.WebControls.Literal>控件。 <xref:System.Web.UI.WebControls.LinqDataSource>控件定义的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 下面的示例显示了事件处理程序的代码<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件。 值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>属性分配给<xref:System.Web.UI.WebControls.Literal>控件。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dcab17400a5076f483cd5285e8f60959c4fe3b04" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69411510" /></Metadata><TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type SqlDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示数据绑定控件的 SQL 数据库。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [数据连接](#data_connections)  
  
-   [执行数据操作](#performing_data_operations)  
  
-   [数据访问接口](#data_provider)  
  
-   [缓存](#caching)  
  
-   [其他功能](#additional_features)  
  
-   [数据源视图](#data_source_view)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.SqlDataSource>数据源控件将 SQL 关系数据库中的数据表示为数据绑定控件。 您可以将<xref:System.Web.UI.WebControls.SqlDataSource>控件与数据绑定控件结合使用, 以便从关系数据库中检索数据, 并在很少或没有任何代码的情况下显示、编辑和排序网页上的数据。  
  
<a name="data_connections"></a>   
## <a name="data-connections"></a>数据连接  
 若要连接到数据库, 必须将<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为有效的连接字符串。 `OleDb` `SqlClient` `OracleClient` `Odbc`可以支持任何可使用 ADO.NET 提供程序连接到的 SQL 关系数据库, 例如、、或提供程序。 <xref:System.Web.UI.WebControls.SqlDataSource> 有关如何保护连接字符串的信息, 请参阅[如何:使用数据源控件](https://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62)时保护连接字符串。  
  
 若要从基础数据库检索数据, 请使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> SQL 查询来设置属性。 如果与关联的数据库<xref:System.Web.UI.WebControls.SqlDataSource>支持存储过程, 则可以<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>将属性设置为存储过程的名称。 指定的 SQL 查询也可以是参数化查询。 可以将与<xref:System.Web.UI.WebControls.Parameter>参数化查询关联的对象添加<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>到集合。 有关参数化 SQL 查询及其语法的详细信息, 请参阅将[参数用于筛选的数据源控件](https://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f(v=vs.100))。  
  
 每次调用<xref:System.Web.UI.WebControls.SqlDataSource> 方法时,控件都将检索数据。<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 此方法提供对由<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性指定的方法的编程访问。 调用方法时<xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> ,绑定到的控件会<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>自动调用方法。 如果设置<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>了数据绑定控件的属性, 则控件会根据需要自动绑定到数据源中的数据。 设置属性是将<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到数据绑定控件的建议方法。 `DataSourceID` 或者, 可以使用`DataSource`属性, 但随后必须显式<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>调用数据绑定控件的方法。 可<xref:System.Web.UI.WebControls.SqlDataSource>使用的数据绑定控件的一些示例包括<xref:System.Web.UI.WebControls.DataGrid>、 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.DataList>、和<xref:System.Web.UI.WebControls.DropDownList>。 您可以随时以<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>编程方式调用方法, 以便从基础数据库中检索数据。  
  
 在声明性和编程 ASP.NET 方案中, 可以将<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>数据绑定控件的属性设置为<xref:System.Web.UI.WebControls.SqlDataSource>控件的 ID。 还可以将<xref:System.Web.UI.WebControls.SqlDataSource>类的实例分配<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>给数据绑定控件的属性。 有关将数据绑定控件绑定到数据源控件的详细信息, 请参阅[ASP.NET Data Access Options](https://msdn.microsoft.com/library/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)。  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>执行数据操作  
 根据基础数据库产品的功能和<xref:System.Web.UI.WebControls.SqlDataSource>类的实例的配置, 您可以执行数据操作, 例如更新、插入和删除。 若要执行这些数据操作, 请为要执行的操作设置适当的命令文本和任何关联的参数。 例如, 对于更新操作, 请将<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>属性设置为 SQL 字符串或存储过程的名称, 并向<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合添加任何所需参数。 此更新是在调用<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法时执行的, 无论是由你的代码显式调用, 还是由数据绑定控件自动执行。 对于<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 和<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>操作, 遵循相同的常规模式。  
  
 在<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>、和<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>属性中使用的 SQL 查询和命令可以是参数化的。 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 这意味着, 查询或命令可以使用占位符而不是文本值, 并将占位符绑定到应用程序或用户定义的变量。 您可以将 SQL 查询中的参数绑定到会话变量, 传递到 Web 窗体页的查询字符串的值, 其他服务器控件的属性值等。 有关如何在 SQL 查询中使用参数的详细信息, 请<xref:System.Web.UI.WebControls.SqlDataSource>参阅将[参数与数据源控件结合使用](https://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f(v=vs.100)), 以便[通过 SqlDataSource 控件](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)进行筛选和使用参数。  
  
> [!NOTE]
>  默认情况下, 如果`null` `Select`执行命令时, 其中一个参数为, 则不会返回任何数据, 并且不会引发异常。 可以通过将<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>属性设置为来`false`更改此行为。  
  
<a name="data_provider"></a>   
## <a name="data-provider"></a>数据访问接口  
 默认情况下, <xref:System.Web.UI.WebControls.SqlDataSource>控件适用于 SQL Server 的 .NET Framework 数据提供程序, 但<xref:System.Web.UI.WebControls.SqlDataSource>并不是 Microsoft SQL Server 特定的。 可以将该<xref:System.Web.UI.WebControls.SqlDataSource>控件与具有托管 ADO.NET 提供程序的任何数据库产品连接起来。 与<xref:System.Data.OleDb?displayProperty=nameWithType>提供程序一起使用时<xref:System.Web.UI.WebControls.SqlDataSource> , 可以使用任何 OLE DB 兼容的数据库。 与<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序一起使用时<xref:System.Web.UI.WebControls.SqlDataSource> , 可用于任何 ODBC 驱动程序和数据库, 包括 IBM DB2、MySQL 和 PostgreSQL。 与<xref:System.Data.OracleClient?displayProperty=nameWithType>提供程序一起使用时<xref:System.Web.UI.WebControls.SqlDataSource> , 可以使用 Oracle 8.1.7 数据库和更高版本。 允许的提供程序的列表在配置文件`DbProviderFactories`的节中注册, 无论是在 machine.config 还是 web.config 文件中。 有关详细信息, 请参阅[使用 SqlDataSource 控件选择数据](https://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb)。  
  
<a name="caching"></a>   
## <a name="caching"></a>缓存  
 如果使用<xref:System.Web.UI.WebControls.SqlDataSource>控件在页面上显示数据, 则可以使用数据源控件的数据缓存功能提高页面的性能。 缓存会降低数据库服务器上的处理负载, 但会降低 Web 服务器上的内存量;在大多数情况下, 这是一个很好的权衡。 当属性设置为<xref:System.Web.UI.WebControls.SqlDataSource> `true` ,并且<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>属性设置为在丢弃缓存条目之前缓存存储数据的秒数时, 将自动缓存数据。 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> 还可以指定<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>和可选<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>值。  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>其他功能  
 <xref:System.Web.UI.WebControls.SqlDataSource>提供了其他功能, 如下表所示。  
  
|功能|要求|  
|----------------|------------------|  
|缓存|`true` <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>根据缓存数据所需的缓存行为, 将属性设置为值,将属性设置为,并将和属性设置为。<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>|  
|正在删除|<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>将属性设置为用于删除数据的 SQL 语句。 此语句通常是参数化的。|  
|筛选|将属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 将属性设置为在调用<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法时用于筛选数据的筛选表达式。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>|  
|插入|<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>将属性设置为用于插入数据的 SQL 语句。 此语句通常是参数化的。|  
|分页|目前不<xref:System.Web.UI.WebControls.SqlDataSource>受支持, 但是, 在<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>将<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为值时, <xref:System.Web.UI.WebControls.GridView>某些数据绑定控件 (如) 支持分页。|  
|选择|<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>将属性设置为用于检索数据的 SQL 语句。|  
|排序|将 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 属性设置为 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>。|  
|Updating|<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>将属性设置为用于更新数据的 SQL 语句。 此语句通常是参数化的。|  
  
<a name="data_source_view"></a>   
## <a name="data-source-view"></a>数据源视图  
 与所有数据源控件一样, <xref:System.Web.UI.WebControls.SqlDataSource>控件与数据源视图类相关联。 控件仅有一个关联<xref:System.Web.UI.WebControls.SqlDataSourceView>的, 并且始终命名`Table`为。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件没有可视化呈现; 它作为控件实现, 因此你可以以声明方式创建它, 还可以选择允许它参与状态管理。 因此, <xref:System.Web.UI.WebControls.SqlDataSource>不支持视觉功能, 如<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>属性提供的功能。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:SqlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    CancelSelectOnNullParameter="True|False"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConnectionString="string"  
    DataSourceMode="DataReader|DataSet"  
    DeleteCommand="string"  
    DeleteCommandType="Text|StoredProcedure"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertCommand="string"  
    InsertCommandType="Text|StoredProcedure"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
    runat="server"  
    SelectCommand="string"  
    SelectCommandType="Text|StoredProcedure"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    UpdateCommand="string"  
    UpdateCommandType="Text|StoredProcedure"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
## Examples  
 
本部分包含四个代码示例:  
  
-   第一个代码示例演示如何使用声明性语法在<xref:System.Web.UI.WebControls.GridView>控件的 SQL Server 中显示数据。  
  
-   第二个代码示例演示如何使用声明性语法在<xref:System.Web.UI.WebControls.GridView>控件中显示与 ODBC 兼容的数据库中的数据。  
  
-   第三个代码示例演示如何在<xref:System.Web.UI.WebControls.GridView>控件中显示和更新数据。  
  
-   第四个代码示例演示如何在<xref:System.Web.UI.WebControls.DropDownList>控件中显示和更新数据。  
  
    > [!NOTE]
    >  这些示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 下面的代码示例演示如何以声明方式<xref:System.Web.UI.WebControls.SqlDataSource>使用控件从 SQL Server 检索数据并<xref:System.Web.UI.WebControls.GridView>在控件中显示数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 下面的代码示例演示如何以声明方式<xref:System.Web.UI.WebControls.SqlDataSource>使用控件从与 ODBC 兼容的数据库<xref:System.Web.UI.WebControls.GridView>中检索数据并在控件中显示数据。 属性是 ODBC 的 .NET Framework 数据提供程序的名称, <xref:System.Data.Odbc?displayProperty=nameWithType>即。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]  
  
 下面的代码示例演示了与<xref:System.Web.UI.WebControls.GridView>控件一起使用的常见显示和更新方案。 与前面的示例一样, Northwind 数据库中的数据将显示在<xref:System.Web.UI.WebControls.GridView>控件中。 此外, 由于指定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>了一个属性<xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A>并且将属性设置为`true`, 因此, 您可以在不使用其他代码的情况下编辑和更新记录。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>  <xref:System.Web.UI.WebControls.GridView>当单击控件<xref:System.Web.UI.WebControls.GridView>中的 "更新" 按钮时, 控件会自动处理向集合添加参数并调用方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]  
  
 下面的代码示例演示了具有<xref:System.Web.UI.WebControls.DropDownList>和<xref:System.Web.UI.WebControls.TextBox>控件的常见显示和更新方案。 控件不会自动将更新参数添加<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>到集合中, 也不<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>会调用方法, 因此必须这样做。 <xref:System.Web.UI.WebControls.DropDownList> 更新参数以声明方式指定, 并且你可以添加一个事件处理程序, <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>以便在引发事件时执行操作。  
  
> [!IMPORTANT]
>  此示例包括一个接受用户输入的文本框, 这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <related type="Article" href="https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc">在 Visual Studio 中访问数据</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
    <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 类的新实例。</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">用于与基础数据库建立连接的连接字符串。</param>
        <param name="selectCommand">用于从基础数据库中检索数据的 SQL 查询。 如果该 SQL 查询是参数化的 SQL 字符串，可能需要将 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象添加到 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中。</param>
        <summary>使用指定的连接字符串和 Select 命令初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同种类的 SQL, 因此的`selectCommand`语法取决于当前使用的 ADO.NET 提供程序, 该提供程序<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>由属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的占位符为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType> <xref:System.Data.OleDb?displayProperty=nameWithType>或, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>数据源支持存储过程, 则值可以是 SQL 字符串或存储过程的名称。  
  
   
  
## Examples  
 下面的代码示例演示如何<xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A>使用构造函数创建控件。 该示例是异常<xref:System.Web.UI.WebControls.SqlDataSource>的, 因为控件不在 Web 窗体页上使用, 而是在中间层对象的实现中作为业务对象与数据库进行交互的简单方式。 该示例使用存储在 web.config 文件中的连接字符串。  
  
 此代码示例是为<xref:System.Web.UI.WebControls.ObjectDataSource>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ providerName, System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (providerName, connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 使用的数据提供程序的名称。 如果没有设置任何提供程序，则在默认情况下，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 使用 Microsoft SQL Server 的 ADO.NET 提供程序。</param>
        <param name="connectionString">用于与基础数据库建立连接的连接字符串。</param>
        <param name="selectCommand">用于从基础数据库中检索数据的 SQL 查询。 如果该 SQL 查询是参数化的 SQL 字符串，可能需要将 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象添加到 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中。</param>
        <summary>使用指定的连接字符串和 Select 命令初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同种类的 SQL, 因此的`selectCommand`语法依赖于当前使用的 ADO.NET 提供程序, 该提供程序`providerName`由参数标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的占位符为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType> <xref:System.Data.OleDb?displayProperty=nameWithType>或, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>数据源支持存储过程, 则属性可以是 SQL 字符串或存储过程的名称。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置以秒为单位的一段时间，它是数据源控件缓存 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法所检索到的数据的时间。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 缓存 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 操作结果的秒数。 默认值为 0。 该值不能为负数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件支持数据缓存。 在缓存数据时, <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法从缓存而不是基础数据库中检索数据。 缓存过期后, 该方法<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>将从基础数据库中检索数据, 然后再次缓存数据。  
  
 当属性设置为`true` , 并且<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>属性设置为大于0的值时,控件将自动缓存数据,指示缓存在缓存条目之前存储数据的秒数<xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>被丢弃。 值0表示无限长的缓存。  
  
 缓存的行为取决于持续时间和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>属性的组合。 如果将<xref:System.Web.UI.DataSourceCacheExpiry.Absolute> <xref:System.Web.UI.WebControls.SqlDataSource>属性设置为值, 则在第一次数据检索操作上缓存数据, 最多会将其保存在内存中, 最多可为<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>属性指定的时间量。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 如果需要内存, 则数据可能在持续时间之前释放。 然后, 在下一操作期间刷新缓存。 如果将<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>属性设置为值, 则数据源控件会在第一次数据检索操作中缓存数据, 但会重置其保存每个后续操作的缓存的时间窗口。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 如果自上一<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>次操作后, 如果时间与值相等, 则缓存过期。  
  
 只有<xref:System.Web.UI.WebControls.SqlDataSource> 在<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>模式下, 控件才能缓存数据。 如果<xref:System.NotSupportedException> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 控件设置<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>为值, 并且还启用了缓存, 则方法会引发异常。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
   
  
## Examples  
 下面的代码示例演示了如何在 Microsoft SQL Server 中从 Northwind 数据库检索数据, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据缓存。 设置为20秒, <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>因为<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>属性默认设置为值, 所以此页的用户每隔20秒就会看到最新的数据。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存的到期行为，该行为与持续时间组合在一起可以描述数据源控件所用缓存的行为。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值之一。 默认为 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件支持数据缓存。 在缓存数据时, <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法从缓存而不是基础数据库中检索数据。 缓存过期后, 该方法<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>将从基础数据库中检索数据, 然后再次缓存数据。  
  
 缓存的行为由<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>设置的组合决定。 如果将<xref:System.Web.UI.DataSourceCacheExpiry.Absolute> <xref:System.Web.UI.WebControls.SqlDataSource>属性设置为值, 则将在第一个数据检索操作上缓存数据, 并在内存中将其保存在<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>属性指定的时间量内, 然后在此时间后将其丢弃。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>失效. 然后, 在下一操作期间刷新缓存。 如果将<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>属性设置为值, 则数据源控件会在第一次数据检索操作中缓存数据, 但会重置其保存每个后续操作的缓存的时间窗口。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 如果自上一<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>次操作后, 如果时间与值相等, 则缓存过期。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> 只有<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>在模式下, 控件才能缓存数据。 如果<xref:System.NotSupportedException> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 控件设置<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>为值, 并且还启用了缓存, 则方法会引发异常。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
   
  
## Examples  
 下面的代码示例演示了如何在 Microsoft SQL Server 中从 Northwind 数据库检索数据, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据缓存。 由于属性设置<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>为值, 因此即使<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>值为20秒, 用户也不会看到新数据。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 仅当页面上没有任何活动超过20秒后, 才会刷新缓存的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用户定义的键依赖项，该键依赖项链接到数据源控件创建的所有数据缓存对象。 当键到期时，所有缓存对象都显式到期。</summary>
        <value>一个键，它标识所有由 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 创建的缓存对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件支持数据缓存。 在缓存数据时, <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法从缓存而不是基础数据库中检索数据。 缓存过期后, 该方法<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>将从基础数据库中检索数据, 然后再次缓存数据。  
  
 可以将<xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A>属性设置为在<xref:System.Web.UI.WebControls.SqlDataSource>由控件创建的所有缓存项与键之间创建依赖关系。 通过使密钥过期, 你可以通过编程方式随时终止所有缓存条目。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> 只有<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>在模式下, 控件才能缓存数据。 如果<xref:System.NotSupportedException> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 控件设置<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>为值, 并且还启用了缓存, 则方法会引发异常。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
 为<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>和属性的每个组合创建唯一的缓存条目。<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 在<xref:System.Web.UI.WebControls.SqlDataSource>控件从同一基础数据库加载相同数据的方案中, 多个控件可以使用相同的缓存条目。  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelSelectOnNullParameter : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中包含的任何一个参数为 <see langword="null" /> 时，是否取消数据检索操作。</summary>
        <value>如果当 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中包含的某个参数为 <see langword="true" /> 时将取消数据检索操作，则为 <see langword="null" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>属性的值存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置值，该值指示操作期间基础数据库中的一行数据更改时，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件如何执行更新和删除。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 值之一。 默认为 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性确定是否将旧值和新值的参数应用`Update`于方法。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 例如, <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>如果属性指定的命令返回一个<xref:System.Data.DataTable>具有列<xref:System.Web.UI.ConflictOptions.OverwriteChanges> `Name`和`Number`的<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>对象, 并且属性设置为值, 则会为`Name`方法和`Number` 。 `Update` <xref:System.Web.UI.ConflictOptions.CompareAllValues> `Name` `Number` `original_Number`如果将`original_Name`属性设置为值, 则会为、、和创建参数。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> (原始值的参数的准确名称取决于<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>属性。)然后<xref:System.Web.UI.WebControls.SqlDataSource> , 该控件确定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>属性`Update`中指定的方法是否具有匹配的参数。  
  
 并发控制是一种技术, 当多个客户端访问和操作相同数据时, 数据存储使用该技术来控制如何在存储区中读取和更改数据。 例如, 一个客户端读取数据并向用户显示数据, 而另一个客户端读取相同的数据, 并将其呈现给其他用户。 如果这两个用户更新数据并将其提交到数据存储, 则可能会发生一些意外的结果, 因为这两个客户端可能会为同一数据更新不同的值。 这被视为冲突。 通过将<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>属性设置<xref:System.Web.UI.ConflictOptions.CompareAllValues>为值, 你`Update`的方法可以将旧值和新值与原始数据源进行比较, 以检测冲突并根据需要处理它们。  
  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置特定于 ADO.NET 提供程序的连接字符串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件使用该字符串连接基础数据库。</summary>
        <value>.NET Framework 的<see cref="T:System.Web.UI.WebControls.SqlDataSource" />特定于数据访问接口的字符串, 用于连接到它所表示的 SQL 数据库。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:System.Web.UI.WebControls.SqlDataSource>控件可用于各种 ADO.NET 提供程序, 而用于连接到基础数据源的连接字符串的语法特定于提供程序。  
  
 配置<xref:System.Web.UI.WebControls.SqlDataSource>控件时, 可以<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>将属性设置为数据库类型 (默认值为<xref:System.Data.SqlClient?displayProperty=nameWithType>), 并将<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为包含连接所需信息的连接字符串。到数据库。 连接字符串的内容根据数据源控件所访问的数据库类型而有所不同。 例如, 在<xref:System.Web.UI.WebControls.SqlDataSource>连接到 SQL Server 时, 控件需要服务器名称、数据库 (目录) 名称以及有关如何对用户进行身份验证的信息。 有关连接字符串内容的信息, <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>请参阅类的属性<xref:System.Data.SqlClient.SqlConnection> <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> <xref:System.Data.OracleClient.OracleConnection> <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 、类的属性、 <xref:System.Data.OleDb.OleDbConnection>类的属性或<xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A><xref:System.Data.Odbc.OdbcConnection>类的属性。  
  
 如果更改<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性<xref:System.Web.UI.IDataSource.DataSourceChanged> , 则会引发事件, 从而导致绑定到<xref:System.Web.UI.WebControls.SqlDataSource>控件的任何控件重新绑定。  
  
> [!IMPORTANT]
>  有关存储连接字符串的信息, 请参阅[如何:使用数据源控件](https://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62)时保护连接字符串。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何将<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为连接到 Microsoft SQL Server 数据库, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性的结果。 第二个代码示例演示了更复杂的方案, <xref:System.Web.UI.WebControls.SqlDataSource>其中控件用于显示和更新受密码保护的 Microsoft Access 数据库中的数据。 在每种情况下`connectionStrings` , 首先显示 web.config 文件的元素, 后跟<xref:System.Web.UI.WebControls.SqlDataSource>包含控件的 ASP.NET 页。  
  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为连接到 SQL Server 数据库, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性的结果。  
  
  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 下面的代码示例演示了一个比前面的代码示例更复杂的方案, <xref:System.Web.UI.WebControls.SqlDataSource>其中, 控件用于显示和更新受密码保护的访问数据库中的数据。 由于与 Access 一起使用<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> , 因此<xref:System.Data.OleDb>属性设置为提供程序, 并且<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为 UNC 共享访问数据库的相应连接字符串。 <xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.GridView>控件显示具有装运日期的订单。 您可以通过选中相应的复选框, 然后单击 "**更新**" 按钮来更新订单。  
  
> [!IMPORTANT]
>  此示例包含纯文本格式的密码, 仅用于说明目的。 在生产应用程序中, 应对包含密码的连接字符串进行加密。 有关详细信息，请参阅[保护连接信息](~/docs/framework/data/adonet/protecting-connection-information.md)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDataSourceView (viewName As String) As SqlDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::SqlDataSourceView ^ CreateDataSourceView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView&#xA;override this.CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView" Usage="sqlDataSource.CreateDataSourceView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">数据源视图的名称。</param>
        <summary>创建与数据源控件关联的数据源视图对象。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从<xref:System.Web.UI.WebControls.SqlDataSource>类派生的类可以<xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A>重写方法以返回强类型化的数据源视图对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceMode As SqlDataSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceMode DataSourceMode { System::Web::UI::WebControls::SqlDataSourceMode get(); void set(System::Web::UI::WebControls::SqlDataSourceMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceMode : System.Web.UI.WebControls.SqlDataSourceMode with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件获取数据所用的数据检索模式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 值之一。 默认<see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" />值为。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据检索模式标识<xref:System.Web.UI.WebControls.SqlDataSource>控件如何从基础数据库中检索数据。  
  
 如果将<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>属性设置为值, 则会将<xref:System.Data.DataSet>数据加载到对象中, 并将其存储在服务器上的内存中。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 这可以实现用户界面控件 (例如<xref:System.Web.UI.WebControls.GridView>) 提供排序、筛选和分页功能的方案。  
  
 如果将<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>属性设置为值, 则将通过<xref:System.Data.IDataReader>对象 (只进只读游标) 来检索数据。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Data.IDataReader>对象的特定类型取决于<xref:System.Web.UI.WebControls.SqlDataSource>使用的 NET 数据提供程序, 该提供程序由<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性标识。 默认情况下, <xref:System.Web.UI.WebControls.SqlDataSource>该控件使用的提供程序用于 Microsoft SQL Server <xref:System.Data.SqlClient?displayProperty=nameWithType>、和, 数据读取器是<xref:System.Data.SqlClient.SqlDataReader>一个对象。  
  
 如果更改<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性<xref:System.Web.UI.IDataSource.DataSourceChanged> , 则会引发事件, 从而导致绑定到的<xref:System.Web.UI.WebControls.SqlDataSource>任何控件重新绑定。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性的值存储在视图状态中。  
  
   
  
## Examples  
 下面的代码<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>示例演示如何将<xref:System.Web.UI.WebControls.SqlDataSource>控件的属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> <xref:System.Web.UI.WebControls.ListBox>控件的值, 该方案中的控件不需要排序、分页和筛选。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> 属性不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 中定义的任何一个值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="sqlDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> SQL 字符串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" /> 集合中的所有参数执行删除操作。</summary>
        <returns>一个值，该值表示从基础数据库中删除的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行删除操作之前, <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>将调用方法来<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>引发事件。 您可以处理此事件以检查参数的值, 并在执行删除操作之前执行任何预处理。  
  
 操作完成后, <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>调用方法来<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>引发事件。 可以处理此事件以检查任何返回值和错误代码, 并执行任何后续处理。  
  
 提供方法以编程方式访问`Delete`方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 如果控件与数据绑定控件关联, 数据绑定控件将自动调用 Delete 方法。  <xref:System.Web.UI.WebControls.SqlDataSource>  
  
 方法委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 若要执行该操作, <xref:System.Web.UI.WebControls.SqlDataSourceView>请使用<xref:System.Data.Common.DbCommand> <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文本和<xref:System.Data.Common.DbCommand>任何关联<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>的值生成一个对象, 然后对基础数据库执行。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文本以删除 Northwind 数据库中的订单。 最初, 从 Orders 表中检索数据, 并在<xref:System.Web.UI.WebControls.DropDownList>控件中显示数据。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>使用数据绑定<xref:System.Web.UI.WebControls.GridView> <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> <xref:System.Web.UI.WebControls.DetailsView>控件 (如和) 时, 必须显式声明属性并调用方法 (与其他控件 (如和) 不同, 后者会自动填充<xref:System.Web.UI.WebControls.DropDownList>参数, 并对<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>数据源控件调用方法)。 在此示例中, <xref:System.Web.UI.WebControls.Button.OnClick%2A>将事件委托给专用`OnDelete`事件处理程序, 该处理程序显式<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> <xref:System.Web.UI.WebControls.SqlDataSource>调用控件的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件从基础数据库删除数据所用的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 删除数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示 SQL 查询或存储过程的名称, <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>由方法使用。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>  
  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是参数化的查询或命令, 则该参数的语法还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的语法为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>数据库支持存储过程, 则该属性可以是 SQL 字符串或存储过程的名称。  
  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>  
  
> [!IMPORTANT]
>  出于安全考虑, <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>属性不会存储在视图状态中。 由于可以对客户端上的视图状态的内容进行解码, 因此在视图状态中存储有关数据库结构的敏感信息可能会导致信息泄露漏洞。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文本以从 Northwind 数据库 Orders 表中删除订单。 将从 Orders 表中检索数据, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据。 当<xref:System.Web.UI.WebControls.GridView> <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>属性设置 为`true`时, 自动呈现删除按钮。 此外, 当单击 "**删除**" 按钮时, <xref:System.Web.UI.WebControls.GridView>控件将自动填充<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>该集合并调用<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。 最后, 由于此代码示例删除数据, 因此添加了一个事件处理程序, 以便在执行<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>操作之前尝试将数据库备份到磁盘。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成删除操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完成删除操作后, 处理事件以检查输出参数的值。<xref:System.Web.UI.WebControls.SqlDataSource.Deleted> 输出参数适用于<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件关联的对象。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从与 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象获取包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 属性所使用的参数的参数集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性包含参数化 sql 查询, 则<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合包含与 SQL <xref:System.Web.UI.WebControls.Parameter>字符串中的参数占位符对应的任何对象。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>  
  
> [!NOTE]
>  请确保绑定<xref:System.Web.UI.WebControls.SqlDataSource>到<xref:System.Web.UI.WebControls.BoundField>控件的数据绑定控件中的控件的名称与<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合中的任何参数名称都不匹配。 与绑定字段具有相同名称的参数将从 SQL 命令中排除, 并且可能会导致 "未提供参数" 错误。  
  
 如果将<xref:System.Web.UI.ConflictOptions.CompareAllValues>属性设置为值, 则会为数据的旧值和新值创建参数。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 旧值的参数根据<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>属性进行命名。  
  
 根据 ADO.NET 提供程序, <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合中参数的顺序可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType> 和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序根据参数在参数化 SQL 查询中的显示顺序来关联集合中的参数。 提供程序是<xref:System.Web.UI.WebControls.SqlDataSource>控件的默认 ADO.NET 提供程序, 它通过将参数名称与 SQL 查询中的占位符匹配来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType> 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>属性检索与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象所包含的属性。<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文本以删除 Northwind 数据库中的订单。 最初, 从 Orders 表中检索数据, 并在<xref:System.Web.UI.WebControls.DropDownList>控件中显示数据。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>使用数据<xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> <xref:System.Web.UI.WebControls.GridView>绑定控件 (如和) 时, 必须显式声明属性并调用方法 (与其他控件不同, 如和), 后者会自动填充参数和<xref:System.Web.UI.WebControls.DropDownList>对<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>数据源控件进行调用)。 在此示例中, <xref:System.Web.UI.WebControls.Button.OnClick%2A>将事件委托给专用`OnDelete`事件处理程序, 该处理程序显式<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> <xref:System.Web.UI.WebControls.SqlDataSource>调用控件的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行删除操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理事件以执行其他特定于应用程序的初始化操作, 验证参数的值, 或者在<xref:System.Web.UI.WebControls.SqlDataSource>控件执行删除操作之前更改参数值。 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>  
  
 在调用事件处理程序委托时, 与基础数据源的连接尚未打开。 因此, 您不能直接通过<xref:System.Data.Common.DbCommand.Cancel%2A> <xref:System.Data.Common.DbCommand>对<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象公开的对象调用方法来取消操作。 但是, 您可以通过将<xref:System.ComponentModel.CancelEventArgs.Cancel%2A> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象的属性设置为来`true`取消数据库操作。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理在<xref:System.Web.UI.WebControls.SqlDataSource.Deleting> <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>操作发生前引发的事件。 由于此示例删除 Northwind 数据库中的数据, 因此<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>添加了处理程序以尝试在执行<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>操作之前将数据库备份到磁盘。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件是否启用数据缓存。</summary>
        <value>如果为数据源控件启用数据缓存，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件支持数据缓存。 在缓存数据时, <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法从缓存而不是基础数据库中检索数据。 缓存过期后, 该方法<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>将从基础数据库中检索数据, 然后再次缓存数据。  
  
 当属性设置为`true` , 并且<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>属性设置为大于0的值时,控件将自动缓存数据,这表示缓存在检索之前存储数据的秒数<xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>全新集。  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
   
  
## Examples  
 下面的代码示例演示了如何在 Microsoft SQL Server 中从 Northwind 数据库检索数据, 并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据缓存。 属性设置为`true` , 并且<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>设置为20秒。 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> 由于默认<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>情况下, 此属性<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>设置为字段, 此页的用户每隔20秒就会看到最新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" /> 不支持缓存时，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置调用 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法时应用的筛选表达式。</summary>
        <value>表示使用 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法检索数据时应用的筛选表达式的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性值是格式字符串表达式 ( <xref:System.String.Format%2A?displayProperty=nameWithType>由方法处理的字符串), 该表达式<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>使用集合中包含在字符串中的任何替换参数的值。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 筛选<xref:System.Data.DataView.RowFilter%2A>表达式语法与属性接受的语法相同, 因为筛选器表达式应用<xref:System.Data.DataView.RowFilter%2A>于从执行<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法返回的<xref:System.Data.DataView>对象的属性。 有关详细信息，请参阅 <xref:System.Data.DataColumn.Expression%2A>。  
  
 如果将参数添加到<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合, 则还可以`"{0}")`在表达式中包含格式字符串占位符以替换参数值。 根据<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合中参数的索引替换占位符。 如果<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合中的某个对象为`null`, 则该对象将替换为空字符串。  
  
 可以在<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性中包含参数。 如果参数为字符串或字符类型, 则将参数括在单引号内。 如果参数是数值类型, 则不需要引号。 集合包含为<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性中的占位符计算的参数。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> 只有<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>在模式下, 控件才支持筛选数据。  
  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>  
  
   
  
## Examples  
 下面的代码示例演示如何从 Northwind 数据库检索数据, 并使用<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>字符串和集合对<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>其进行筛选。 只要执行方法来检索数据, 就会应用属性。<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 在此示例中, <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>包含一个筛选器参数的占位符, 该参数包含<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>在集合中。 此外, 筛选器参数是一个<xref:System.Web.UI.WebControls.ControlParameter>对象, 该对象绑定<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>到<xref:System.Web.UI.WebControls.DropDownList>控件的属性。 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> `true` <xref:System.Web.UI.WebControls.DropDownList>由于控件将其属性设置为, 因此, 对控件所做的任何更改都将导致该页将信息发布回服务器, 并将<xref:System.Web.UI.WebControls.GridView>控件重新绑定到数据源<xref:System.Web.UI.WebControls.DropDownList>用新筛选器进行控制。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已设置 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 属性，且 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 处于 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> 模式。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行筛选操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理事件, 在<xref:System.Web.UI.WebControls.SqlDataSource>控件执行筛选器操作之前对筛选器参数值执行验证操作。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 可以通过<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>将对象`true`的<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性设置为来取消方法。 仅当<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>设置了属性时才引发事件。  
  
 事件委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=nameWithType>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的事件。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=nameWithType>  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 字符串中的任何参数占位符关联的参数的集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含与在 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 属性中找到的任何参数占位符相关联的一组参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合中的参数与<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性中指定的任何参数相关联。 调用<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 方法<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>时, 属性中指定的参数占位符按顺序与集合中的<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>参数对象匹配。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>属性检索与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象所包含的属性。<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性从 Northwind 数据库中检索数据并对其进行筛选。 只要<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>执行<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法来<xref:System.Web.UI.WebControls.SqlDataSource>检索数据, 就会应用控件的属性。 在此示例中, <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性包含一个筛选器参数的占位符, 该参数包含<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>在集合中。 此外, 筛选器参数是一个<xref:System.Web.UI.WebControls.ControlParameter>对象, 该对象绑定<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>到<xref:System.Web.UI.WebControls.DropDownList>控件的属性。 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> `true` <xref:System.Web.UI.WebControls.DropDownList>由于控件将其属性设置为, 因此, 所选内容中的任何更改都会导致页面将信息发送回服务器, <xref:System.Web.UI.WebControls.GridView>并将控件重新绑定到数据源控件<xref:System.Web.UI.WebControls.DropDownList>新建筛选器。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbProviderFactory () As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DbProviderFactory ^ GetDbProviderFactory();" />
      <MemberSignature Language="F#" Value="abstract member GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory&#xA;override this.GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory" Usage="sqlDataSource.GetDbProviderFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回与 <see cref="T:System.Data.Common.DbProviderFactory" /> 属性所标识的 ADO.NET 提供程序相关联的 <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" /> 对象。</summary>
        <returns>一个表示已标识的 ADO.NET 提供程序的 <see cref="T:System.Data.Common.DbProviderFactory" />；如果没有设置任何提供程序，则为 <see cref="N:System.Data.SqlClient" /> 的一个实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:System.Data.Common.DbProviderFactory>属性由<xref:System.Web.UI.WebControls.SqlDataSource>控件用于在与数据库交互时创建正确的 ADO.NET 连接、命令和参数对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="sqlDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图的名称。 由于 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 只支持一个视图，因此 <paramref name="viewName" /> 被忽略。</param>
        <summary>获取与数据源控件关联的命名的数据源视图。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 相关联的名为“Table”的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控件仅支持一个数据源视图。 与所有数据源视图对象一样, 与<xref:System.Web.UI.WebControls.SqlDataSourceView>数据源控件关联的对象定义其功能, 执行从基础数据库检索数据所需的所有工作, 并执行排序等操作。插入、删除和更新。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="viewName" /> 为 <see langword="null" /> 或 <c>Table</c> 以外的值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="sqlDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件关联的视图对象的列表。</summary>
        <returns>包含视图名称的 <see cref="T:System.Collections.ICollection" />，这些视图与 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 关联。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件在其基础数据上仅支持一个名为`"Table"`的视图。 <xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A>方法返回这一个视图名称的单元素集合。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="sqlDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> SQL 字符串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" /> 集合中的所有参数执行插入操作。</summary>
        <returns>一个值，该值表示插入到基础数据库中的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行插入操作之前, <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>将调用方法来<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>引发事件。 可以处理此事件以检查参数的值并在<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>操作之前执行任何预处理。 若要执行插入操作, 对象<xref:System.Web.UI.WebControls.SqlDataSourceView>将使用<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>文本<xref:System.Data.Common.DbCommand>和<xref:System.Data.Common.DbCommand>任何关联<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>的属性生成对象, 然后对基础数据库执行对象。  
  
 操作完成后, <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>调用方法来<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>引发事件。 可以处理此事件以检查任何返回值和错误代码, 并执行任何后续处理。  
  
 提供方法以编程方式访问`Insert`方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 如果控件与数据绑定控件关联, 则数据绑定控件会自动`Insert`调用方法。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
 方法委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件和简单的 Web 窗体页将数据插入到数据库中。 数据表中的当前数据显示在<xref:System.Web.UI.WebControls.DropDownList>控件中。 您可以通过在<xref:System.Web.UI.WebControls.TextBox>控件中输入值, 然后单击 "**插入**" 按钮来添加新记录。 单击 "**插入**" 按钮时, 会将指定的值插入到数据库中, 然后<xref:System.Web.UI.WebControls.DropDownList>刷新。  
  
> [!IMPORTANT]
>  此示例包括一个接受用户输入的文本框, 这是一个潜在的安全威胁, 并且无需验证即可将值插入到参数中, 这也是潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
> [!NOTE]
>  此示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件将数据插入基础数据库所用的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 插入数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示 SQL 查询或存储过程的名称, 并<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>由方法使用。 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>  
  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的占位符为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>数据源支持存储过程, 则可以是 SQL 字符串或存储过程的名称。  
  
 此属性委托给<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>与<xref:System.Web.UI.WebControls.SqlDataSource>控件关联的<xref:System.Web.UI.WebControls.SqlDataSourceView>的属性。  
  
> [!IMPORTANT]
>  出于安全目的, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>未存储属性是视图状态。 由于可以对客户端上的视图状态的内容进行解码, 因此在视图状态中存储有关数据库结构的敏感信息可能会导致信息泄露漏洞。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件和简单的 Web 窗体页将数据插入到数据库中。 第二个代码示例演示如何从 Microsoft SQL Server 检索数据并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据, 以及如何<xref:System.Web.UI.WebControls.DetailsView>使用控件查看<xref:System.Web.UI.WebControls.GridView>控件中选定行的详细信息, 以及如何使用窗体来插入新记录。  
  
> [!NOTE]
>  这些示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件和简单的 Web 窗体页将数据插入到数据库中。 数据表中的当前数据显示在<xref:System.Web.UI.WebControls.DropDownList>控件中。 您可以通过在<xref:System.Web.UI.WebControls.TextBox>控件中输入值, 然后单击 "**插入**" 按钮来添加新记录。 单击 "**插入**" 按钮时, 会将指定的值插入到数据库中, 并<xref:System.Web.UI.WebControls.DropDownList>刷新控件。  
  
> [!IMPORTANT]
>  此示例包括一个文本框, 该文本框接受用户输入 (这是一个潜在的安全威胁), 而将值插入到无验证的参数中, 这也是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 下面的代码示例演示如何从 SQL Server 检索数据并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据, 以及如何<xref:System.Web.UI.WebControls.DetailsView>使用控件查看<xref:System.Web.UI.WebControls.GridView>控件中选定行的详细信息, 以及如何使用窗体来插入新记录。  
  
 最初, 数据显示在<xref:System.Web.UI.WebControls.GridView>控件中, 所选行<xref:System.Web.UI.WebControls.GridView>还显示在<xref:System.Web.UI.WebControls.DetailsView>控件中。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> <xref:System.Web.UI.WebControls.GridView>和控件使用不同的数据源控件; 与关联的控件具有和属性, 这可确保的选定行为<xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.GridView>会.  
  
 如果单击<xref:System.Web.UI.WebControls.DetailsView>控件的自动生成的**插入**按钮, 则<xref:System.Web.UI.WebControls.DetailsView>会显示一个不同的用户界面, 用于插入新记录。 该示例使用存储过程插入记录, 并返回插入行的主键。 如果插入记录, 将<xref:System.Web.UI.WebControls.DetailsView>使用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>绑定列中的<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>值自动填充集合, 并调用方法。 当<xref:System.Web.UI.WebControls.DetailsView>使用 ASP.NET 双向数据绑定语法时<xref:System.Web.UI.WebControls.BoundField> , 可以从任何对象推断<xref:System.Web.UI.WebControls.TemplateField>正确的参数, 并从对象中推断出参数。 在此示例中, 会在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序中添加一个附加参数, 用于处理存储过程返回的主键。  
  
 最后, 在<xref:System.Web.UI.WebControls.DetailsView>控件将数据插入到数据库<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>中后, 将调用事件处理程序来处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件, 并显示插入行的主键的值以及<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView>显式调用控件来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 数据库中检索数据并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据。 它还演示了如何使用<xref:System.Web.UI.WebControls.DetailsView>控件查看<xref:System.Web.UI.WebControls.GridView>中所选行的详细信息, 以及如何使用窗体来插入新记录。  
  
 控件显示一组数据<xref:System.Web.UI.WebControls.DetailsView> , 并显示特定行的详细信息。 <xref:System.Web.UI.WebControls.GridView> 如果单击<xref:System.Web.UI.WebControls.DetailsView>控件的自动生成的**插入**按钮, 则<xref:System.Web.UI.WebControls.DetailsView>会显示一个不同的用户界面, 用于插入新记录。 该示例使用存储过程插入记录, 并返回插入行的主键。 存储过程名称设置在<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>属性中, 并通过<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>将属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值, 将其标识为存储过程。  
  
 <xref:System.Web.UI.WebControls.DetailsView>控件将数据插入到数据库<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>中后, 将调用事件处理程序来处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件, 并显示<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>所插入行的主键的值以及<xref:System.Web.UI.WebControls.GridView>显式调用控件来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成插入操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted>处理事件, 以便在插入操作完成后检查输出参数的值。 输出参数适用于<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件关联的对象。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据, 以及如何<xref:System.Web.UI.WebControls.DetailsView>使用控件以窗体的形式查看所选行<xref:System.Web.UI.WebControls.GridView>的详细信息, 并将其作为插入新记录的窗体。  
  
> [!NOTE]
>  此示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 最初, 数据显示在<xref:System.Web.UI.WebControls.GridView>控件中, 所选行<xref:System.Web.UI.WebControls.GridView>还显示在<xref:System.Web.UI.WebControls.DetailsView>控件中。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> <xref:System.Web.UI.WebControls.GridView>和控件使用不同的数据源控件; 与关联的控件具有和属性, 这可确保的选定行为<xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.GridView>会.  
  
 如果单击<xref:System.Web.UI.WebControls.DetailsView>控件的自动生成的**插入**按钮, 则<xref:System.Web.UI.WebControls.DetailsView>会显示一个不同的用户界面, 用于插入新记录。 该示例使用存储过程插入记录, 并返回插入行的主键。 如果插入记录, 将<xref:System.Web.UI.WebControls.DetailsView>使用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>绑定列中的<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>值自动填充集合, 并调用方法。 当<xref:System.Web.UI.WebControls.DetailsView>使用 ASP.NET 双向数据绑定语法时<xref:System.Web.UI.WebControls.BoundField> , 可以从任何对象推断<xref:System.Web.UI.WebControls.TemplateField>正确的参数, 并从对象中推断出参数。 在此示例中, 会在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序中添加一个附加参数, 用于处理存储过程返回的主键。  
  
 最后, 在<xref:System.Web.UI.WebControls.DetailsView>控件将数据插入到数据库<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>中后, 将调用事件处理程序来处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件, 插入行的主键的值将显示, 并使用<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView>显式调用控件来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行插入操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理事件以执行其他特定于应用程序的初始化操作, 验证参数的值, 或者在<xref:System.Web.UI.WebControls.SqlDataSource>控件执行插入操作之前更改参数值。 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> 在调用事件处理程序委托时, 与基础数据源的连接尚未打开。 因此, 您不能直接通过<xref:System.Data.Common.DbCommand.Cancel%2A> <xref:System.Data.Common.DbCommand>对<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>属性公开的对象调用方法来取消操作。 但是, 您可以通过将<xref:System.ComponentModel.CancelEventArgs.Cancel%2A> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象的属性设置为来`true`取消数据库操作。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据并在<xref:System.Web.UI.WebControls.GridView>控件中显示数据, 以及如何<xref:System.Web.UI.WebControls.DetailsView>使用控件以窗体的形式查看所选行<xref:System.Web.UI.WebControls.GridView>的详细信息, 并将其作为插入新记录的窗体。  
  
> [!NOTE]
>  此示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 最初, 数据显示在<xref:System.Web.UI.WebControls.GridView>控件中, 所选行<xref:System.Web.UI.WebControls.GridView>还显示在<xref:System.Web.UI.WebControls.DetailsView>控件中。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> <xref:System.Web.UI.WebControls.GridView>和控件使用不同的数据源控件; 与关联的控件具有和属性, 这可确保的选定行为<xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.GridView>会.  
  
 如果单击<xref:System.Web.UI.WebControls.DetailsView>控件的自动生成的**插入**按钮, 则<xref:System.Web.UI.WebControls.DetailsView>会显示一个不同的用户界面, 用于插入新记录。 该示例使用存储过程插入记录, 并返回插入行的主键。 如果插入记录, 将<xref:System.Web.UI.WebControls.DetailsView>使用<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>绑定列中的<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>值自动填充集合, 并调用方法。 当使用 ASP.NET 双向数据绑定语法时<xref:System.Web.UI.WebControls.BoundField> ,可以从任何对象推断正确的参数,并为提供一个参数。<xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.TemplateField> 在此示例中, 会在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件处理程序中添加一个附加参数, 用于处理存储过程返回的主键。  
  
 最后, 在<xref:System.Web.UI.WebControls.DetailsView>控件将数据插入到数据库<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>中后, 将调用事件处理程序来处理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件, 插入行的主键的值将显示, 并使用`DataBind` <xref:System.Web.UI.WebControls.GridView>显式调用控件来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从与 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象获取包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 属性所使用的参数的参数集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>属性检索与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象所包含的属性。<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>  
  
 如果属性包含参数化 sql 查询, 则<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合包含与 SQL <xref:System.Web.UI.WebControls.Parameter>字符串中的参数占位符对应的任何对象。 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>  
  
 根据 ADO.NET 提供程序, <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合中参数的顺序可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType> 和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序根据参数在参数化 SQL 查询中出现的顺序来关联集合中的参数。 提供程序是<xref:System.Web.UI.WebControls.SqlDataSource>控件的默认 ADO.NET 提供程序, 它通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType> 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件和简单的 Web 窗体页将数据插入到数据库中。 数据表中的当前数据显示在<xref:System.Web.UI.WebControls.DropDownList>控件中。 您可以通过在<xref:System.Web.UI.WebControls.TextBox>控件中输入值, 然后单击 "**插入**" 按钮来添加新记录。 单击 "**插入**" 按钮时, 会将指定的值插入到数据库中, 并<xref:System.Web.UI.WebControls.DropDownList>刷新控件。  
  
> [!IMPORTANT]
>  此示例包括一个文本框, 该文本框接受用户输入 (这是一个潜在的安全威胁), 而将值插入到无验证的参数中, 这也是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
> [!NOTE]
>  此示例演示如何使用声明性语法进行数据访问。 有关如何使用代码而不是标记访问数据的信息, 请参阅[在 Visual Studio 中访问数据](https://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="sqlDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个表示 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 的状态的对象。</param>
        <summary>加载 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件中需要保留的属性的状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法用于加载以前保存的<xref:System.Web.UI.WebControls.SqlDataSource>控件视图状态。 <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个格式字符串，该字符串应用于传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> 方法的所有参数的名称。</summary>
        <value>一个表示格式的字符串，该格式字符串应用于传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> 方法的所有 <paramref name="oldValues" /> 参数的名称。 默认值为“{0}”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式字符串仅应用于主键 (如关联的数据绑定控件的`DataKeyNames`属性标识的主键), 或者应用于删除和更新方案中的<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> <xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一组`oldValues`传递给相应的数据方法。 在这种情况下, 格式字符串将应用于`oldValues`集合中的每个参数名称。  
  
 下面是两种可能更改属性的<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>常见方案:  
  
-   区分更新中的旧值和新值。 如果将<xref:System.Web.UI.ConflictOptions.CompareAllValues>属性设置为值, 则会将原始<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>值和新值的参数添加到集合中。 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 如果没有格式字符串, 则将为每个数据字段创建两个具有相同名称的参数。 通过更改原始值参数的名称, 可以将数据与原始数据源进行比较, 以检测冲突并比较键值。  
  
-   某些可视化设计器为原始值和键实现了特定的命名方案。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="sqlDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>将 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件处理程序添加到包含 <see cref="T:System.Web.UI.Page" /> 控件的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由<xref:System.Web.UI.WebControls.SqlDataSource>对象添加的事件处理程序<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>更新和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>值。 如果更新值, <xref:System.Web.UI.IDataSource.DataSourceChanged>则引发事件, 从而导致绑定<xref:System.Web.UI.WebControls.SqlDataSource>到控件的任何控件重新绑定。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 .NET Framework 数据提供程序的名称，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件使用该提供程序来连接基础数据源。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 所使用的数据提供程序的名称；如果没有设置任何提供程序，则为 Microsoft SQL Server 的 ADO.NET 提供程序的名称。 默认值为 Microsoft SQL Server 的 ADO.NET 提供程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 包括以下数据访问接口:  
  
-   <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序是 SQL Server 的默认 .NET Framework 数据提供程序。  
  
-   <xref:System.Data.OleDb?displayProperty=nameWithType>提供程序是用于 OLE DB 的 .NET Framework 数据提供程序。  
  
-   <xref:System.Data.Odbc?displayProperty=nameWithType>提供程序是 ODBC 的 .NET Framework 数据提供程序。  
  
-   <xref:System.Data.OracleClient?displayProperty=nameWithType>提供程序是用于 Oracle 的 .NET Framework 数据提供程序。  
  
 属性永远不会设置为非托管 ADO.NET 提供程序的名称, `MSDAORA`例如。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 有关详细信息, 请参阅[使用 SqlDataSource 控件选择数据](https://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb)。  
  
 如果更改<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性<xref:System.Web.UI.IDataSource.DataSourceChanged> , 则会引发事件, 从而导致绑定到的<xref:System.Web.UI.WebControls.SqlDataSource>任何控件重新绑定。  
  
 在 machine.config 文件的`DbProviderFactories` `system.data`节的子节中指定了可用提供程序的列表。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件的 SQL Server 的默认 .NET Framework 数据提供程序连接到 SQL Server 数据库<xref:System.Data.SqlClient?displayProperty=nameWithType>,。 第二个代码示例演示如何使用适用于 ODBC <xref:System.Data.Odbc?displayProperty=nameWithType>的 .NET Framework 数据提供程序连接到 odbc 数据库。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件<xref:System.Data.SqlClient?displayProperty=nameWithType>的默认数据提供程序连接到 SQL Server 数据库。 只要未显式设置属性,就会使用默认提供程序。<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性是特定于提供程序的。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 下面的代码示例在功能上与前面的代码示例相同, 演示了如何使用 ODBC <xref:System.Data.Odbc?displayProperty=nameWithType>的 .NET Framework 数据提供程序连接到 odbc 数据库。 该<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为用于连接到 odbc 数据库的 odbc 数据源名称 (DSN) 的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="sqlDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件的当前视图状态。</summary>
        <returns>一个包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 的已保存状态的对象。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="member this.Select : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSource.Select arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">用于请求对数据执行基本数据检索操作以外操作的 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 对象。</param>
        <summary>通过使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> SQL 字符串以及 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中的任何参数，从基础数据库中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在页生命周期的<xref:System.Web.UI.Control.PreRender>阶段, 会自动调用方法。<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 它由已通过其<xref:System.Web.UI.WebControls.SqlDataSource> <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>属性附加到控件的数据绑定控件调用。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> <xref:System.Data.DataView> 将属性设置<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>为值, 则方法返回对象。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> <xref:System.Data.IDataReader> 将属性设置<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>为值, 则方法返回对象。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 读取完数据后, 关闭对象。<xref:System.Data.IDataReader>  
  
 在执行<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>操作之前, 将调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 可以处理此事件以检查参数的值并在<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>操作之前执行任何处理。  
  
 操作完成后<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> , 调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 可以处理此事件以检查任何返回值和错误代码, 并执行任何后续处理。  
  
 如果将<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> <xref:System.Web.UI.WebControls.SqlDataSource>属性设置为并且启用了缓存, 则对象将在<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>操作期间从缓存中检索数据并将数据保存到缓存中。 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 根据<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>属性的组合指定的缓存行为, 创建、放弃或刷新缓存。  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
 如果将<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType> <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性设置为并指定了属性, 则使用任何提供<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>的属性来计算筛选器表达式, 并将生成的筛选器应用到<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>操作。  
  
 方法委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 若要执行数据检索操作, 请<xref:System.Web.UI.WebControls.SqlDataSourceView>使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本<xref:System.Data.Common.DbCommand>和<xref:System.Data.Common.DbCommand>任何关联<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>的值生成一个对象, 然后对基础数据库执行。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的示例演示如何以编程方式调用<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法, 并根据查询结果设置值。 下面的示例演示 Web 控件的声明性代码。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]  
  
 下面的示例演示如何以编程方式调用<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。 <xref:System.Web.UI.WebControls.SqlDataSource>控件返回整数。 整数的值用于设置<xref:System.Web.UI.WebControls.Label>控件的文本, 并用于确定是否<xref:System.Web.UI.WebControls.HyperLink>显示控件。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象无法与基础数据源建立连接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件从基础数据库检索数据所用的 SQL 字符串。</summary>
        <value>一个 SQL 字符串或存储过程的名称，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 使用它检索数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性表示 SQL 查询或存储过程的名称, <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法使用它来检索 SQL Server 数据库中的数据。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 如果使用 Select 命令中的星号 (*) 来选择所有列, 并且如果使用自动代码生成来执行更新或删除操作, 请确保名称中没有列包含空格。  
  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的占位符为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>数据源支持存储过程, 则属性可以是 SQL 字符串或存储过程的名称。  
  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>  
  
> [!IMPORTANT]
>  出于安全目的, <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>未存储属性是视图状态。 由于可以对客户端上的视图状态的内容进行解码, 因此在视图状态中存储有关数据库结构的敏感信息可能会导致信息泄露漏洞。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何将<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本设置为基本的 SQL 查询, 以从与 ODBC 兼容的数据库<xref:System.Web.UI.WebControls.GridView>中检索数据并在控件中显示数据。 第二个代码示例演示如何<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>将文本设置为存储过程的名称<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> , 并将属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值, 以便从 Microsoft SQL Server 数据库中检索数据并在<xref:System.Web.UI.WebControls.DropDownList>控件中显示数据。  
  
 在这两个示例中, 无需显式调用<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法, 因为<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>通过<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>属性附加到数据源控件的数据绑定控件将在<xref:System.Web.UI.Control.PreRender>阶段。  
  
 下面的代码示例演示如何将<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本设置为基本的 SQL 查询, 以从与 ODBC 兼容的数据库<xref:System.Web.UI.WebControls.GridView>中检索数据并在控件中显示数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]  
  
 下面的代码示例演示如何<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>将文本设置为存储过程的名称<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> , 并将属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值, 以便从 SQL Server 数据库中检索数据并将其显示在<xref:System.Web.UI.WebControls.DropDownList>控件中。 如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>数据源支持存储过程, 则该属性可以是 SQL 查询或存储过程的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295">在 SqlDataSource 控件中使用参数</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 属性中的文本是 SQL 查询还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>  
  
   
  
## Examples  
 下面的代码示例<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>演示如何将文本设置为存储过程的名称, <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>并将属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值, 以便从 Microsoft SQL Server 数据库中检索数据并将其显示在<xref:System.Web.UI.WebControls.DropDownList>控件.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数据检索操作完成后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.Selected>处理事件, 以在数据检索操作完成后检查输出参数的值。 输出参数适用于<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件关联的对象。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行数据检索操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理事件以执行其他特定于应用程序的初始化操作, 验证参数的值, 或者在<xref:System.Web.UI.WebControls.SqlDataSource>控件执行选择操作之前更改参数值。 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> 可以从与事件关联的<xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>对象中使用 select 自变量。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从与 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象获取包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 属性所使用的参数的参数集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性包含参数化 sql 查询, 则<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合包含与 SQL <xref:System.Web.UI.WebControls.Parameter>字符串中的参数占位符对应的任何对象。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>  
  
 根据 ADO.NET 提供程序, <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合中参数的顺序可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType> 和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序根据参数在参数化 SQL 查询中出现的顺序来关联集合中的参数。 提供程序是<xref:System.Web.UI.WebControls.SqlDataSource>控件的默认 ADO.NET 提供程序, 它通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType> 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>属性检索与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象所包含的属性。<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何通过将<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性设置为 SQL 查询, 在 Microsoft SQL Server 中检索 Northwind 数据库中的数据。 SQL 查询已参数化, 并且<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性中的占位符与添加到<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合<xref:System.Web.UI.WebControls.ControlParameter>中的对象匹配。 绑定到的<xref:System.Web.UI.WebControls.ControlParameter> <xref:System.Web.UI.WebControls.ListBox>控件充当控件中显示的内容的筛选器。 <xref:System.Web.UI.WebControls.DropDownList>  
  
 有关可以使用的其他类型参数的信息, 请参阅<xref:System.Web.UI.WebControls.Parameter>类概述。  
  
> [!NOTE]
>  由于参数在 WHERE 子句中使用, 因此, 在代码示例中<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>使用属性的功能等效于<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>使用和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置存储过程参数的名称，在使用存储过程执行数据检索时，该存储过程参数用于对检索到的数据进行排序。</summary>
        <value>在使用存储过程执行数据检索时用于排序检索数据的存储过程参数的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>当<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性包含的 SQL 命令是存储过程的名称时, 才计算属性。 在这种情况下, <xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A>如果设置了属性, 它将包含用于对存储过程的结果进行排序的参数的名称。  
  
 如果设置<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>了属性, 则会将其预置<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>到属性上。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用分号分隔的字符串，指示用于 Microsoft SQL Server 缓存依赖项的数据库和表。</summary>
        <value>一个字符串，指示用于 SQL Server 缓存依赖项的数据库和表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件支持基于<xref:System.Web.Caching.SqlCacheDependency>数据缓存的对象的可选过期策略 (必须为数据库服务器配置服务)。 <xref:System.Web.UI.WebControls.SqlDataSource>  
  
 字符串根据`@ Page`指令使用的相同格式标识数据库和表, 其中字符串的第一部分是 Microsoft SQL Server 数据库的连接字符串, 后跟冒号分隔符, <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>最后是数据库表的名称 (例如`"connectionstring1:table1"`)。 如果属性依赖于多个表, 则连接字符串和表名称对由分号分隔 ( `"connectionstring1:table1";connectionstring2:table2"`例如)。 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>  
  
> [!IMPORTANT]
>  使用 Microsoft Windows 身份验证下的客户端模拟时, 将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据, 则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限, 不会检索数据。 如果希望有多个用户访问数据, 并且希望数据库的安全配置验证每个数据的检索, 请不要使用缓存。  
  
   
  
## Examples  
 下面的代码示例演示如何创建 SQL Server 缓存依赖项并设置<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> <xref:System.Web.UI.WebControls.SqlDataSource>控件的属性。 在此示例中, 数据库每120秒轮询一次。 如果 Northwind 商贸 Employees 表中的数据在这段时间内发生更改, 则由该控件缓存<xref:System.Web.UI.WebControls.SqlDataSource>并<xref:System.Web.UI.WebControls.GridView>由控件显示的任何数据将在下<xref:System.Web.UI.WebControls.SqlDataSource>一次数据库轮询时由控件刷新。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="sqlDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>跟踪对 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件的视图状态的更改，以便可将这些更改存储在该控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重<xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A>写方法, 以将起始点标记为开始跟踪, 并将更改保存为控件的视图状态的一部分。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="sqlDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> SQL 字符串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" /> 集合中的所有参数执行更新操作。</summary>
        <returns>一个值，该值表示基础数据库中被更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果数据已更改<xref:System.Web.UI.WebControls.GridView>, 则、 <xref:System.Web.UI.WebControls.DetailsView>和<xref:System.Web.UI.WebControls.FormView>控件会自动调用方法。<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 对于在其他控件中已更改的数据, 可以<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>在<xref:System.Windows.Forms.Form.Load>事件期间的回发中显式调用方法。  
  
 在执行<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>操作之前, 将调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 你可以处理此事件以检查参数的值并在<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>操作之前执行任何预处理。  
  
 操作完成后<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> , 调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件。 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 可以处理此事件以检查任何返回值和错误代码, 并执行任何后续处理。  
  
 方法委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的方法。 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 若要执行更新操作, 请<xref:System.Web.UI.WebControls.SqlDataSourceView>使用<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>文本<xref:System.Data.Common.DbCommand>和<xref:System.Data.Common.DbCommand>任何关联<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>的属性生成对象, 然后对基础数据库执行对象。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Updating>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件<xref:System.Web.UI.WebControls.DropDownList>在控件中显示数据, 并在单击 "**提交**" 按钮时更新数据。 第二个代码示例演示如何显示从<xref:System.Web.UI.WebControls.DropDownList>控件中的 Microsoft SQL Server 数据库检索的数据, 以及如何<xref:System.Web.UI.WebControls.TextBox>使用控件更新记录。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件<xref:System.Web.UI.WebControls.DropDownList>在控件中显示数据, 并在单击 "**提交**" 按钮时更新数据。 使用参数化 SQL 语句设置<xref:System.Web.UI.WebControls.ControlParameter> <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 属性,并将两个参数添加<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>到集合中。 单击 "**提交**" 按钮时, 将<xref:System.Web.UI.WebControls.Button.OnClick%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>处理该事件以显式调用方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 下面的代码示例演示如何显示从<xref:System.Web.UI.WebControls.DropDownList>控件中的 SQL Server 数据库检索的数据, 以及如何<xref:System.Web.UI.WebControls.TextBox>使用控件更新记录。 该示例演示如何在<xref:System.Data.Common.DbTransaction> <xref:System.Web.UI.WebControls.SqlDataSource>使用控件更新数据时使用对象添加事务上下文。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件更新基础数据库中的数据所用的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 更新数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表示 SQL 查询或存储过程的名称, <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>由方法使用。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>  
  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如, 如果提供程序是<xref:System.Data.SqlClient?displayProperty=nameWithType>, 它是<xref:System.Web.UI.WebControls.SqlDataSource>类的默认提供程序, 则参数的占位符为`'@parameterName'`。 但是, 如果提供程序设置为<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>, 则参数的占位符为`'?'`。 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>数据源支持存储过程, 则属性可以是 SQL 字符串或存储过程的名称。  
  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>  
  
> [!IMPORTANT]
>  出于安全目的, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>未存储属性是视图状态。 由于可以对客户端上的视图状态的内容进行解码, 因此在视图状态中存储有关数据库结构的敏感信息可能会导致信息泄露漏洞。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> <xref:System.Web.UI.WebControls.GridView>控件设置<xref:System.Web.UI.WebControls.SqlDataSource>控件的属性和更新 Microsoft SQL Server 数据库中的数据。 第二个代码示例演示如何使用<xref:System.Web.UI.WebControls.GridView>控件更新 ODBC 数据库中的数据。  
  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> <xref:System.Web.UI.WebControls.GridView>控件设置<xref:System.Web.UI.WebControls.SqlDataSource>控件的属性和更新 SQL Server 数据库中的数据。 <xref:System.Web.UI.WebControls.BoundField>  <xref:System.Web.UI.WebControls.GridView>自动填充集合, 从对象推断参数, 并在选择可编辑的更新<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>链接时调用方法。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> <xref:System.Web.UI.WebControls.GridView> 此示例还包括一些后期处理: 更新记录后, 将发送一封通知电子邮件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 下面的代码示例在功能上与前面的代码示例相同, 演示了如何使用<xref:System.Web.UI.WebControls.GridView>控件更新 ODBC 数据库中的数据。 设置为 odbc 的 ADO.NET 提供程序<xref:System.Data.Odbc?displayProperty=nameWithType>, 并且<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>属性设置为 odbc 数据源名称 (DSN) 的名称。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性委托<xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>给与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象的属性。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成更新操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.Updated>处理事件, 以便在更新操作完成后检查输出参数的值。 输出参数适用于<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件关联的对象。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示和更新从<xref:System.Web.UI.WebControls.GridView>控件中的 ODBC 数据库检索的数据。 成功更新记录后, 事件处理程序<xref:System.Web.UI.WebControls.SqlDataSource.Updated>会处理事件, 以执行在其中发送电子邮件通知的后处理步骤。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从与 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件获取包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 属性所使用的参数的参数集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性包含参数化 sql 查询, 则<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合包含与 SQL <xref:System.Web.UI.WebControls.Parameter>字符串中的参数占位符对应的任何对象。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>  
  
 参数名称可能会受<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>属性的影响, 尤其是在名称标识主键 (如`DataKeyNames`使用数据绑定控件的属性指定的键, 或在<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>将属性设置为<xref:System.Web.UI.ConflictOptions.CompareAllValues>值, 并将一`oldValues`组传递给相应的数据方法。 在这种情况下, 格式字符串将应用于`oldValues`集合中的每个参数名称。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合中参数的顺序可能很重要, 具体取决于 ADO.NET 提供程序。 <xref:System.Data.OleDb?displayProperty=nameWithType> 和<xref:System.Data.Odbc?displayProperty=nameWithType>提供程序根据参数在参数化 SQL 查询中出现的顺序来关联集合中的参数。 提供程序是<xref:System.Web.UI.WebControls.SqlDataSource>控件的默认 ADO.NET 提供程序, 它通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType> 有关参数化 SQL 查询和命令的详细信息, 请参阅[将参数与 SqlDataSource 控件一起使用](https://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>属性检索与<xref:System.Web.UI.WebControls.SqlDataSource>控件相关联的对象所包含的属性。<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控件<xref:System.Web.UI.WebControls.DropDownList>在控件中显示数据, 并在单击 "**提交**" 按钮时更新数据。 使用参数化 SQL 语句设置, 并将两<xref:System.Web.UI.WebControls.ControlParameter>个<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>参数添加到集合中。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 单击 "**提交**" 按钮时, 将<xref:System.Web.UI.WebControls.Button.OnClick%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>处理该事件以显式调用方法。  
  
> [!IMPORTANT]
>  此示例包括一个文本框, 该文本框接受用户输入 (这是一个潜在的安全威胁), 而将值插入到无验证的参数中, 这也是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行更新操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理事件以执行其他特定于应用程序的初始化操作, 验证参数的值, 或者在<xref:System.Web.UI.WebControls.SqlDataSource>控件执行更新操作之前更改参数值。 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> 在调用事件处理程序委托时, 与基础数据源的连接尚未打开。 因此, 您不能通过对<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> <xref:System.Data.Common.DbCommand> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象公开的对象<xref:System.Data.Common.DbCommand.Cancel%2A>调用方法来直接取消数据库操作。 但是, 可以通过将的<xref:System.ComponentModel.CancelEventArgs.Cancel%2A> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>属性设置为来`true`取消数据库操作。  
  
 有关如何处理事件的详细信息, 请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
> [!IMPORTANT]
>  无需验证即可将值插入到参数中, 这是一个潜在的安全威胁。 <xref:System.Web.UI.WebControls.SqlDataSource.Updating>使用事件在执行查询之前验证参数值。 有关详细信息，请参阅[脚本侵入概述](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示从<xref:System.Web.UI.WebControls.DropDownList>控件中的 Microsoft SQL Server 数据库检索的数据, 以及如何<xref:System.Web.UI.WebControls.TextBox>使用控件更新记录。 该示例演示如何在<xref:System.Data.Common.DbTransaction> <xref:System.Web.UI.WebControls.SqlDataSource>使用控件更新数据时使用对象添加事务上下文。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">数据源 Web 服务器控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34779c84-3512-49d9-8e6f-643aaae216ce">SqlDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991">ASP.NET 页生命周期概述</related>
      </Docs>
    </Member>
  </Members>
</Type>

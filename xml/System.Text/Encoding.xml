<Type Name="Encoding" FullName="System.Text.Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a39b38507f408edbec59ee4906a6ca9bc4b314fb" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70409373" /></Metadata><TypeSignature Language="C#" Value="public abstract class Encoding : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Encoding extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Encoding" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Encoding&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Encoding abstract : ICloneable" />
  <TypeSignature Language="F#" Value="type Encoding = class&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="82c05-101">表示字符编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-101">Represents a character encoding.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="82c05-103">相反，解码是将编码字节序列转换为一组 Unicode 字符的过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-103">In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span> <span data-ttu-id="82c05-104">有关 Unicode 转换格式（UTFs）和支持<xref:System.Text.Encoding>的其他编码的信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="82c05-104">For information about the Unicode Transformation Formats (UTFs) and other encodings supported by <xref:System.Text.Encoding>, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="82c05-105"><xref:System.Text.Encoding>请注意，旨在对 Unicode 字符而不是任意二进制数据（如字节数组）进行操作。</span><span class="sxs-lookup"><span data-stu-id="82c05-105">Note that <xref:System.Text.Encoding> is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="82c05-106">如果必须将任意二进制数据编码为文本，则应使用诸如 uuencode 这样的协议，该协议是由等方法<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>实现的。</span><span class="sxs-lookup"><span data-stu-id="82c05-106">If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-107">.Net 提供<xref:System.Text.Encoding>类的以下实现来支持当前的 Unicode 编码和其他编码：</span><span class="sxs-lookup"><span data-stu-id="82c05-107">.NET provides the following implementations of the <xref:System.Text.Encoding> class to support current Unicode encodings and other encodings:</span></span>  
  
-   <span data-ttu-id="82c05-108"><xref:System.Text.ASCIIEncoding>将 Unicode 字符编码为单个7位 ASCII 字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-108"><xref:System.Text.ASCIIEncoding> encodes Unicode characters as single 7-bit ASCII characters.</span></span> <span data-ttu-id="82c05-109">此编码仅支持 U + 0000 到 U + 007F 之间的字符值。</span><span class="sxs-lookup"><span data-stu-id="82c05-109">This encoding only supports character values between U+0000 and U+007F.</span></span> <span data-ttu-id="82c05-110">代码页20127。</span><span class="sxs-lookup"><span data-stu-id="82c05-110">Code page 20127.</span></span> <span data-ttu-id="82c05-111">还可通过<xref:System.Text.Encoding.ASCII%2A>属性获得。</span><span class="sxs-lookup"><span data-stu-id="82c05-111">Also available through the <xref:System.Text.Encoding.ASCII%2A> property.</span></span>  
  
-   <span data-ttu-id="82c05-112"><xref:System.Text.UTF7Encoding>使用 UTF-7 编码对 Unicode 字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-112"><xref:System.Text.UTF7Encoding> encodes Unicode characters using the UTF-7 encoding.</span></span> <span data-ttu-id="82c05-113">此编码支持所有 Unicode 字符值。</span><span class="sxs-lookup"><span data-stu-id="82c05-113">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="82c05-114">代码页65000。</span><span class="sxs-lookup"><span data-stu-id="82c05-114">Code page 65000.</span></span> <span data-ttu-id="82c05-115">还可通过<xref:System.Text.Encoding.UTF7%2A>属性获得。</span><span class="sxs-lookup"><span data-stu-id="82c05-115">Also available through the <xref:System.Text.Encoding.UTF7%2A> property.</span></span>  
  
-   <span data-ttu-id="82c05-116"><xref:System.Text.UTF8Encoding>使用 UTF-8 编码对 Unicode 字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-116"><xref:System.Text.UTF8Encoding> encodes Unicode characters using the UTF-8 encoding.</span></span> <span data-ttu-id="82c05-117">此编码支持所有 Unicode 字符值。</span><span class="sxs-lookup"><span data-stu-id="82c05-117">This encoding supports all Unicode character values.</span></span> <span data-ttu-id="82c05-118">代码页65001。</span><span class="sxs-lookup"><span data-stu-id="82c05-118">Code page 65001.</span></span> <span data-ttu-id="82c05-119">还可通过<xref:System.Text.Encoding.UTF8%2A>属性获得。</span><span class="sxs-lookup"><span data-stu-id="82c05-119">Also available through the <xref:System.Text.Encoding.UTF8%2A> property.</span></span>  
  
-   <span data-ttu-id="82c05-120"><xref:System.Text.UnicodeEncoding>使用 UTF-16 编码对 Unicode 字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-120"><xref:System.Text.UnicodeEncoding> encodes Unicode characters using the UTF-16 encoding.</span></span> <span data-ttu-id="82c05-121">支持 little endian 和大型 endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="82c05-121">Both little endian and big endian byte orders are supported.</span></span> <span data-ttu-id="82c05-122">还可通过<xref:System.Text.Encoding.Unicode%2A>属性<xref:System.Text.Encoding.BigEndianUnicode%2A>和属性获取。</span><span class="sxs-lookup"><span data-stu-id="82c05-122">Also available through the <xref:System.Text.Encoding.Unicode%2A> property and the <xref:System.Text.Encoding.BigEndianUnicode%2A> property.</span></span>  
  
-   <span data-ttu-id="82c05-123"><xref:System.Text.UTF32Encoding>使用 32 UTF-8 编码对 Unicode 字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-123"><xref:System.Text.UTF32Encoding> encodes Unicode characters using the UTF-32 encoding.</span></span> <span data-ttu-id="82c05-124">支持 little endian （代码页12000）和大型 endian （代码页12001）字节顺序。</span><span class="sxs-lookup"><span data-stu-id="82c05-124">Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported.</span></span> <span data-ttu-id="82c05-125">还可通过<xref:System.Text.Encoding.UTF32%2A>属性获得。</span><span class="sxs-lookup"><span data-stu-id="82c05-125">Also available through the <xref:System.Text.Encoding.UTF32%2A> property.</span></span>  
  
 <span data-ttu-id="82c05-126"><xref:System.Text.Encoding>类主要用于在不同的编码和 Unicode 之间转换。</span><span class="sxs-lookup"><span data-stu-id="82c05-126">The <xref:System.Text.Encoding> class is primarily intended to convert between different encodings and Unicode.</span></span> <span data-ttu-id="82c05-127">通常，其中一个派生的 Unicode 类是适用于你的应用程序的正确选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-127">Often one of the derived Unicode classes is the correct choice for your app.</span></span>  
  
 <span data-ttu-id="82c05-128">使用方法可获取其他编码，并<xref:System.Text.Encoding.GetEncodings%2A>调用方法来获取所有编码的列表。 <xref:System.Text.Encoding.GetEncoding%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-128">Use the <xref:System.Text.Encoding.GetEncoding%2A> method to obtain other encodings, and call the <xref:System.Text.Encoding.GetEncodings%2A> method to get a list of all encodings.</span></span>  
  
 <span data-ttu-id="82c05-129">下表列出了 .NET Framework 和 .NET Core 支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-129">The following table lists the encodings supported by .NET Framework and .NET Core.</span></span> <span data-ttu-id="82c05-130">它列出了每个编码的代码页编号以及编码的<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>和<xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType>属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-130">It lists each encoding's code page number and the values of the encoding's <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> and <xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="82c05-131">" **.NET Framework 支持**" 和 " **.net Core 支持**" 列中的复选标记指示该 .net 实现本机支持代码页，而不考虑基础平台。</span><span class="sxs-lookup"><span data-stu-id="82c05-131">A check mark in the **.NET Framework support** and **.NET Core support** columns indicates that the code page is natively supported by that .NET implementation, regardless of the underlying platform.</span></span> <span data-ttu-id="82c05-132">对于 .NET Framework，表中列出的其他编码的可用性取决于操作系统。</span><span class="sxs-lookup"><span data-stu-id="82c05-132">For .NET Framework, the availability of other encodings listed in the table depends on the operating system.</span></span> <span data-ttu-id="82c05-133">对于 .net Core，可以通过使用<xref:System.Text.CodePagesEncodingProvider?displayProperty=nameWithType>类或<xref:System.Text.EncodingProvider?displayProperty=nameWithType>从类派生来使用其他编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-133">For .NET Core, other encodings are available by using the <xref:System.Text.CodePagesEncodingProvider?displayProperty=nameWithType> class or by deriving from the <xref:System.Text.EncodingProvider?displayProperty=nameWithType> class.</span></span>  

> [!NOTE]
> <span data-ttu-id="82c05-134"><xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>属性对应于国际标准的代码页不一定完全符合该标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-134">Code pages whose <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> property corresponds to an international standard do not necessarily comply in full with that standard.</span></span> 

|<span data-ttu-id="82c05-135">代码页</span><span class="sxs-lookup"><span data-stu-id="82c05-135">Code page</span></span>|<span data-ttu-id="82c05-136">name</span><span class="sxs-lookup"><span data-stu-id="82c05-136">Name</span></span>|<span data-ttu-id="82c05-137">显示名称</span><span class="sxs-lookup"><span data-stu-id="82c05-137">Display name</span></span>|<span data-ttu-id="82c05-138">.NET Framework 支持</span><span class="sxs-lookup"><span data-stu-id="82c05-138">.NET Framework support</span></span>| <span data-ttu-id="82c05-139">.NET Core 支持</span><span class="sxs-lookup"><span data-stu-id="82c05-139">.NET Core support</span></span> | 
|---------|----|------------|----------------------|-------------------|    
|<span data-ttu-id="82c05-140">37</span><span class="sxs-lookup"><span data-stu-id="82c05-140">37</span></span>|<span data-ttu-id="82c05-141">IBM037</span><span class="sxs-lookup"><span data-stu-id="82c05-141">IBM037</span></span>|<span data-ttu-id="82c05-142">IBM EBCDIC （美国-加拿大）</span><span class="sxs-lookup"><span data-stu-id="82c05-142">IBM EBCDIC (US-Canada)</span></span>|||  
|<span data-ttu-id="82c05-143">437</span><span class="sxs-lookup"><span data-stu-id="82c05-143">437</span></span>|<span data-ttu-id="82c05-144">IBM437</span><span class="sxs-lookup"><span data-stu-id="82c05-144">IBM437</span></span>|<span data-ttu-id="82c05-145">OEM 美国</span><span class="sxs-lookup"><span data-stu-id="82c05-145">OEM United States</span></span>|||  
|<span data-ttu-id="82c05-146">500</span><span class="sxs-lookup"><span data-stu-id="82c05-146">500</span></span>|<span data-ttu-id="82c05-147">IBM500</span><span class="sxs-lookup"><span data-stu-id="82c05-147">IBM500</span></span>|<span data-ttu-id="82c05-148">IBM EBCDIC （国际）</span><span class="sxs-lookup"><span data-stu-id="82c05-148">IBM EBCDIC (International)</span></span>|||  
|<span data-ttu-id="82c05-149">708</span><span class="sxs-lookup"><span data-stu-id="82c05-149">708</span></span>|<span data-ttu-id="82c05-150">ASMO-708</span><span class="sxs-lookup"><span data-stu-id="82c05-150">ASMO-708</span></span>|<span data-ttu-id="82c05-151">阿拉伯语（ASMO 708）</span><span class="sxs-lookup"><span data-stu-id="82c05-151">Arabic (ASMO 708)</span></span>|||  
|<span data-ttu-id="82c05-152">720</span><span class="sxs-lookup"><span data-stu-id="82c05-152">720</span></span>|<span data-ttu-id="82c05-153">DOS-720</span><span class="sxs-lookup"><span data-stu-id="82c05-153">DOS-720</span></span>|<span data-ttu-id="82c05-154">阿拉伯语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-154">Arabic (DOS)</span></span>|||  
|<span data-ttu-id="82c05-155">737</span><span class="sxs-lookup"><span data-stu-id="82c05-155">737</span></span>|<span data-ttu-id="82c05-156">ibm737</span><span class="sxs-lookup"><span data-stu-id="82c05-156">ibm737</span></span>|<span data-ttu-id="82c05-157">希腊语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-157">Greek (DOS)</span></span>|||  
|<span data-ttu-id="82c05-158">775</span><span class="sxs-lookup"><span data-stu-id="82c05-158">775</span></span>|<span data-ttu-id="82c05-159">ibm775</span><span class="sxs-lookup"><span data-stu-id="82c05-159">ibm775</span></span>|<span data-ttu-id="82c05-160">波罗的语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-160">Baltic (DOS)</span></span>|||  
|<span data-ttu-id="82c05-161">850</span><span class="sxs-lookup"><span data-stu-id="82c05-161">850</span></span>|<span data-ttu-id="82c05-162">ibm850</span><span class="sxs-lookup"><span data-stu-id="82c05-162">ibm850</span></span>|<span data-ttu-id="82c05-163">西欧（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-163">Western European (DOS)</span></span>|||  
|<span data-ttu-id="82c05-164">852</span><span class="sxs-lookup"><span data-stu-id="82c05-164">852</span></span>|<span data-ttu-id="82c05-165">ibm852</span><span class="sxs-lookup"><span data-stu-id="82c05-165">ibm852</span></span>|<span data-ttu-id="82c05-166">中欧语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-166">Central European (DOS)</span></span>|||  
|<span data-ttu-id="82c05-167">855</span><span class="sxs-lookup"><span data-stu-id="82c05-167">855</span></span>|<span data-ttu-id="82c05-168">IBM855</span><span class="sxs-lookup"><span data-stu-id="82c05-168">IBM855</span></span>|<span data-ttu-id="82c05-169">OEM 西里尔语</span><span class="sxs-lookup"><span data-stu-id="82c05-169">OEM Cyrillic</span></span>|||  
|<span data-ttu-id="82c05-170">857</span><span class="sxs-lookup"><span data-stu-id="82c05-170">857</span></span>|<span data-ttu-id="82c05-171">ibm857</span><span class="sxs-lookup"><span data-stu-id="82c05-171">ibm857</span></span>|<span data-ttu-id="82c05-172">土耳其语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-172">Turkish (DOS)</span></span>|||  
|<span data-ttu-id="82c05-173">858</span><span class="sxs-lookup"><span data-stu-id="82c05-173">858</span></span>|<span data-ttu-id="82c05-174">IBM00858</span><span class="sxs-lookup"><span data-stu-id="82c05-174">IBM00858</span></span>|<span data-ttu-id="82c05-175">OEM 多语言拉丁语 I</span><span class="sxs-lookup"><span data-stu-id="82c05-175">OEM Multilingual Latin I</span></span>|||  
|<span data-ttu-id="82c05-176">860</span><span class="sxs-lookup"><span data-stu-id="82c05-176">860</span></span>|<span data-ttu-id="82c05-177">IBM860</span><span class="sxs-lookup"><span data-stu-id="82c05-177">IBM860</span></span>|<span data-ttu-id="82c05-178">葡萄牙语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-178">Portuguese (DOS)</span></span>|||  
|<span data-ttu-id="82c05-179">861</span><span class="sxs-lookup"><span data-stu-id="82c05-179">861</span></span>|<span data-ttu-id="82c05-180">ibm861</span><span class="sxs-lookup"><span data-stu-id="82c05-180">ibm861</span></span>|<span data-ttu-id="82c05-181">冰岛语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-181">Icelandic (DOS)</span></span>|||  
|<span data-ttu-id="82c05-182">862</span><span class="sxs-lookup"><span data-stu-id="82c05-182">862</span></span>|<span data-ttu-id="82c05-183">DOS-862</span><span class="sxs-lookup"><span data-stu-id="82c05-183">DOS-862</span></span>|<span data-ttu-id="82c05-184">希伯来语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-184">Hebrew (DOS)</span></span>|||  
|<span data-ttu-id="82c05-185">863</span><span class="sxs-lookup"><span data-stu-id="82c05-185">863</span></span>|<span data-ttu-id="82c05-186">IBM863</span><span class="sxs-lookup"><span data-stu-id="82c05-186">IBM863</span></span>|<span data-ttu-id="82c05-187">加拿大法语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-187">French Canadian (DOS)</span></span>|||  
|<span data-ttu-id="82c05-188">864</span><span class="sxs-lookup"><span data-stu-id="82c05-188">864</span></span>|<span data-ttu-id="82c05-189">IBM864</span><span class="sxs-lookup"><span data-stu-id="82c05-189">IBM864</span></span>|<span data-ttu-id="82c05-190">阿拉伯语（864）</span><span class="sxs-lookup"><span data-stu-id="82c05-190">Arabic (864)</span></span>|||  
|<span data-ttu-id="82c05-191">865</span><span class="sxs-lookup"><span data-stu-id="82c05-191">865</span></span>|<span data-ttu-id="82c05-192">IBM865</span><span class="sxs-lookup"><span data-stu-id="82c05-192">IBM865</span></span>|<span data-ttu-id="82c05-193">北欧语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-193">Nordic (DOS)</span></span>|||  
|<span data-ttu-id="82c05-194">866</span><span class="sxs-lookup"><span data-stu-id="82c05-194">866</span></span>|<span data-ttu-id="82c05-195">cp866</span><span class="sxs-lookup"><span data-stu-id="82c05-195">cp866</span></span>|<span data-ttu-id="82c05-196">西里尔语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-196">Cyrillic (DOS)</span></span>|||  
|<span data-ttu-id="82c05-197">869</span><span class="sxs-lookup"><span data-stu-id="82c05-197">869</span></span>|<span data-ttu-id="82c05-198">ibm869</span><span class="sxs-lookup"><span data-stu-id="82c05-198">ibm869</span></span>|<span data-ttu-id="82c05-199">现代希腊语（DOS）</span><span class="sxs-lookup"><span data-stu-id="82c05-199">Greek, Modern (DOS)</span></span>|||  
|<span data-ttu-id="82c05-200">870</span><span class="sxs-lookup"><span data-stu-id="82c05-200">870</span></span>|<span data-ttu-id="82c05-201">IBM870</span><span class="sxs-lookup"><span data-stu-id="82c05-201">IBM870</span></span>|<span data-ttu-id="82c05-202">IBM EBCDIC （多语言拉丁语-2）</span><span class="sxs-lookup"><span data-stu-id="82c05-202">IBM EBCDIC (Multilingual Latin-2)</span></span>|||  
|<span data-ttu-id="82c05-203">874</span><span class="sxs-lookup"><span data-stu-id="82c05-203">874</span></span>|<span data-ttu-id="82c05-204">windows-874</span><span class="sxs-lookup"><span data-stu-id="82c05-204">windows-874</span></span>|<span data-ttu-id="82c05-205">泰语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-205">Thai (Windows)</span></span>|||  
|<span data-ttu-id="82c05-206">875</span><span class="sxs-lookup"><span data-stu-id="82c05-206">875</span></span>|<span data-ttu-id="82c05-207">cp875</span><span class="sxs-lookup"><span data-stu-id="82c05-207">cp875</span></span>|<span data-ttu-id="82c05-208">IBM EBCDIC （现代希腊语）</span><span class="sxs-lookup"><span data-stu-id="82c05-208">IBM EBCDIC (Greek Modern)</span></span>|||  
|<span data-ttu-id="82c05-209">932</span><span class="sxs-lookup"><span data-stu-id="82c05-209">932</span></span>|<span data-ttu-id="82c05-210">shift_jis</span><span class="sxs-lookup"><span data-stu-id="82c05-210">shift_jis</span></span>|<span data-ttu-id="82c05-211">日语（Shift-jis）</span><span class="sxs-lookup"><span data-stu-id="82c05-211">Japanese (Shift-JIS)</span></span>|||  
|<span data-ttu-id="82c05-212">936</span><span class="sxs-lookup"><span data-stu-id="82c05-212">936</span></span>|<span data-ttu-id="82c05-213">gb2312</span><span class="sxs-lookup"><span data-stu-id="82c05-213">gb2312</span></span>|<span data-ttu-id="82c05-214">简体中文（GB2312）</span><span class="sxs-lookup"><span data-stu-id="82c05-214">Chinese Simplified (GB2312)</span></span>|<span data-ttu-id="82c05-215">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-215">✓</span></span>||  
|<span data-ttu-id="82c05-216">949</span><span class="sxs-lookup"><span data-stu-id="82c05-216">949</span></span>|<span data-ttu-id="82c05-217">ks_c_5601-1987 年</span><span class="sxs-lookup"><span data-stu-id="82c05-217">ks_c_5601-1987</span></span>|<span data-ttu-id="82c05-218">朝鲜语</span><span class="sxs-lookup"><span data-stu-id="82c05-218">Korean</span></span>|||  
|<span data-ttu-id="82c05-219">950</span><span class="sxs-lookup"><span data-stu-id="82c05-219">950</span></span>|<span data-ttu-id="82c05-220">big5</span><span class="sxs-lookup"><span data-stu-id="82c05-220">big5</span></span>|<span data-ttu-id="82c05-221">繁体中文（Big5）</span><span class="sxs-lookup"><span data-stu-id="82c05-221">Chinese Traditional (Big5)</span></span>|||  
|<span data-ttu-id="82c05-222">1026</span><span class="sxs-lookup"><span data-stu-id="82c05-222">1026</span></span>|<span data-ttu-id="82c05-223">IBM1026</span><span class="sxs-lookup"><span data-stu-id="82c05-223">IBM1026</span></span>|<span data-ttu-id="82c05-224">IBM EBCDIC （土耳其拉丁语-5）</span><span class="sxs-lookup"><span data-stu-id="82c05-224">IBM EBCDIC (Turkish Latin-5)</span></span>|||  
|<span data-ttu-id="82c05-225">1047</span><span class="sxs-lookup"><span data-stu-id="82c05-225">1047</span></span>|<span data-ttu-id="82c05-226">IBM01047</span><span class="sxs-lookup"><span data-stu-id="82c05-226">IBM01047</span></span>|<span data-ttu-id="82c05-227">IBM 拉丁语-1</span><span class="sxs-lookup"><span data-stu-id="82c05-227">IBM Latin-1</span></span>|||  
|<span data-ttu-id="82c05-228">1140</span><span class="sxs-lookup"><span data-stu-id="82c05-228">1140</span></span>|<span data-ttu-id="82c05-229">IBM01140</span><span class="sxs-lookup"><span data-stu-id="82c05-229">IBM01140</span></span>|<span data-ttu-id="82c05-230">IBM EBCDIC （美国-加拿大-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-230">IBM EBCDIC (US-Canada-Euro)</span></span>|||  
|<span data-ttu-id="82c05-231">1141</span><span class="sxs-lookup"><span data-stu-id="82c05-231">1141</span></span>|<span data-ttu-id="82c05-232">IBM01141</span><span class="sxs-lookup"><span data-stu-id="82c05-232">IBM01141</span></span>|<span data-ttu-id="82c05-233">IBM EBCDIC （德国-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-233">IBM EBCDIC (Germany-Euro)</span></span>|||  
|<span data-ttu-id="82c05-234">1142</span><span class="sxs-lookup"><span data-stu-id="82c05-234">1142</span></span>|<span data-ttu-id="82c05-235">IBM01142</span><span class="sxs-lookup"><span data-stu-id="82c05-235">IBM01142</span></span>|<span data-ttu-id="82c05-236">IBM EBCDIC （丹麦-挪威-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-236">IBM EBCDIC (Denmark-Norway-Euro)</span></span>|||  
|<span data-ttu-id="82c05-237">1143</span><span class="sxs-lookup"><span data-stu-id="82c05-237">1143</span></span>|<span data-ttu-id="82c05-238">IBM01143</span><span class="sxs-lookup"><span data-stu-id="82c05-238">IBM01143</span></span>|<span data-ttu-id="82c05-239">IBM EBCDIC （芬兰-瑞典-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-239">IBM EBCDIC (Finland-Sweden-Euro)</span></span>|||  
|<span data-ttu-id="82c05-240">1144</span><span class="sxs-lookup"><span data-stu-id="82c05-240">1144</span></span>|<span data-ttu-id="82c05-241">IBM01144</span><span class="sxs-lookup"><span data-stu-id="82c05-241">IBM01144</span></span>|<span data-ttu-id="82c05-242">IBM EBCDIC （意大利-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-242">IBM EBCDIC (Italy-Euro)</span></span>|||  
|<span data-ttu-id="82c05-243">1145</span><span class="sxs-lookup"><span data-stu-id="82c05-243">1145</span></span>|<span data-ttu-id="82c05-244">IBM01145</span><span class="sxs-lookup"><span data-stu-id="82c05-244">IBM01145</span></span>|<span data-ttu-id="82c05-245">IBM EBCDIC （西班牙-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-245">IBM EBCDIC (Spain-Euro)</span></span>|||  
|<span data-ttu-id="82c05-246">1146</span><span class="sxs-lookup"><span data-stu-id="82c05-246">1146</span></span>|<span data-ttu-id="82c05-247">IBM01146</span><span class="sxs-lookup"><span data-stu-id="82c05-247">IBM01146</span></span>|<span data-ttu-id="82c05-248">IBM EBCDIC （英国-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-248">IBM EBCDIC (UK-Euro)</span></span>|||  
|<span data-ttu-id="82c05-249">1147</span><span class="sxs-lookup"><span data-stu-id="82c05-249">1147</span></span>|<span data-ttu-id="82c05-250">IBM01147</span><span class="sxs-lookup"><span data-stu-id="82c05-250">IBM01147</span></span>|<span data-ttu-id="82c05-251">IBM EBCDIC （法国-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-251">IBM EBCDIC (France-Euro)</span></span>|||  
|<span data-ttu-id="82c05-252">1148</span><span class="sxs-lookup"><span data-stu-id="82c05-252">1148</span></span>|<span data-ttu-id="82c05-253">IBM01148</span><span class="sxs-lookup"><span data-stu-id="82c05-253">IBM01148</span></span>|<span data-ttu-id="82c05-254">IBM EBCDIC （国际-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-254">IBM EBCDIC (International-Euro)</span></span>|||  
|<span data-ttu-id="82c05-255">1149</span><span class="sxs-lookup"><span data-stu-id="82c05-255">1149</span></span>|<span data-ttu-id="82c05-256">IBM01149</span><span class="sxs-lookup"><span data-stu-id="82c05-256">IBM01149</span></span>|<span data-ttu-id="82c05-257">IBM EBCDIC （冰岛语-欧洲）</span><span class="sxs-lookup"><span data-stu-id="82c05-257">IBM EBCDIC (Icelandic-Euro)</span></span>|||  
|<span data-ttu-id="82c05-258">1200</span><span class="sxs-lookup"><span data-stu-id="82c05-258">1200</span></span>|<span data-ttu-id="82c05-259">utf-16</span><span class="sxs-lookup"><span data-stu-id="82c05-259">utf-16</span></span>|<span data-ttu-id="82c05-260">Unicode</span><span class="sxs-lookup"><span data-stu-id="82c05-260">Unicode</span></span>|<span data-ttu-id="82c05-261">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-261">✓</span></span>|<span data-ttu-id="82c05-262">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-262">✓</span></span>|  
|<span data-ttu-id="82c05-263">1201</span><span class="sxs-lookup"><span data-stu-id="82c05-263">1201</span></span>|<span data-ttu-id="82c05-264">unicodeFFFE</span><span class="sxs-lookup"><span data-stu-id="82c05-264">unicodeFFFE</span></span>|<span data-ttu-id="82c05-265">Unicode （大字节序）</span><span class="sxs-lookup"><span data-stu-id="82c05-265">Unicode (Big endian)</span></span>|<span data-ttu-id="82c05-266">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-266">✓</span></span>|<span data-ttu-id="82c05-267">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-267">✓</span></span>|  
|<span data-ttu-id="82c05-268">1250</span><span class="sxs-lookup"><span data-stu-id="82c05-268">1250</span></span>|<span data-ttu-id="82c05-269">windows-1250</span><span class="sxs-lookup"><span data-stu-id="82c05-269">windows-1250</span></span>|<span data-ttu-id="82c05-270">中欧语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-270">Central European (Windows)</span></span>|||  
|<span data-ttu-id="82c05-271">1251</span><span class="sxs-lookup"><span data-stu-id="82c05-271">1251</span></span>|<span data-ttu-id="82c05-272">windows-1251</span><span class="sxs-lookup"><span data-stu-id="82c05-272">windows-1251</span></span>|<span data-ttu-id="82c05-273">西里尔语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-273">Cyrillic (Windows)</span></span>|||  
|<span data-ttu-id="82c05-274">1252</span><span class="sxs-lookup"><span data-stu-id="82c05-274">1252</span></span>|<span data-ttu-id="82c05-275">Windows-1252</span><span class="sxs-lookup"><span data-stu-id="82c05-275">Windows-1252</span></span>|<span data-ttu-id="82c05-276">西欧（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-276">Western European (Windows)</span></span>|<span data-ttu-id="82c05-277">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-277">✓</span></span>||  
|<span data-ttu-id="82c05-278">1253</span><span class="sxs-lookup"><span data-stu-id="82c05-278">1253</span></span>|<span data-ttu-id="82c05-279">windows-1253</span><span class="sxs-lookup"><span data-stu-id="82c05-279">windows-1253</span></span>|<span data-ttu-id="82c05-280">希腊语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-280">Greek (Windows)</span></span>|||  
|<span data-ttu-id="82c05-281">1254</span><span class="sxs-lookup"><span data-stu-id="82c05-281">1254</span></span>|<span data-ttu-id="82c05-282">windows-1254</span><span class="sxs-lookup"><span data-stu-id="82c05-282">windows-1254</span></span>|<span data-ttu-id="82c05-283">土耳其语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-283">Turkish (Windows)</span></span>|||  
|<span data-ttu-id="82c05-284">1255</span><span class="sxs-lookup"><span data-stu-id="82c05-284">1255</span></span>|<span data-ttu-id="82c05-285">windows-1255</span><span class="sxs-lookup"><span data-stu-id="82c05-285">windows-1255</span></span>|<span data-ttu-id="82c05-286">希伯来语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-286">Hebrew (Windows)</span></span>|||  
|<span data-ttu-id="82c05-287">1256</span><span class="sxs-lookup"><span data-stu-id="82c05-287">1256</span></span>|<span data-ttu-id="82c05-288">windows-1256</span><span class="sxs-lookup"><span data-stu-id="82c05-288">windows-1256</span></span>|<span data-ttu-id="82c05-289">阿拉伯语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-289">Arabic (Windows)</span></span>|||  
|<span data-ttu-id="82c05-290">1257</span><span class="sxs-lookup"><span data-stu-id="82c05-290">1257</span></span>|<span data-ttu-id="82c05-291">windows-1257</span><span class="sxs-lookup"><span data-stu-id="82c05-291">windows-1257</span></span>|<span data-ttu-id="82c05-292">波罗的语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-292">Baltic (Windows)</span></span>|||  
|<span data-ttu-id="82c05-293">1258</span><span class="sxs-lookup"><span data-stu-id="82c05-293">1258</span></span>|<span data-ttu-id="82c05-294">windows-1258</span><span class="sxs-lookup"><span data-stu-id="82c05-294">windows-1258</span></span>|<span data-ttu-id="82c05-295">越南语（Windows）</span><span class="sxs-lookup"><span data-stu-id="82c05-295">Vietnamese (Windows)</span></span>|||  
|<span data-ttu-id="82c05-296">1361</span><span class="sxs-lookup"><span data-stu-id="82c05-296">1361</span></span>|<span data-ttu-id="82c05-297">Johab</span><span class="sxs-lookup"><span data-stu-id="82c05-297">Johab</span></span>|<span data-ttu-id="82c05-298">韩语（Johab）</span><span class="sxs-lookup"><span data-stu-id="82c05-298">Korean (Johab)</span></span>|||  
|<span data-ttu-id="82c05-299">10000</span><span class="sxs-lookup"><span data-stu-id="82c05-299">10000</span></span>|<span data-ttu-id="82c05-300">macintosh</span><span class="sxs-lookup"><span data-stu-id="82c05-300">macintosh</span></span>|<span data-ttu-id="82c05-301">西欧（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-301">Western European (Mac)</span></span>|||  
|<span data-ttu-id="82c05-302">10001</span><span class="sxs-lookup"><span data-stu-id="82c05-302">10001</span></span>|<span data-ttu-id="82c05-303">x-mac-日语</span><span class="sxs-lookup"><span data-stu-id="82c05-303">x-mac-japanese</span></span>|<span data-ttu-id="82c05-304">日语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-304">Japanese (Mac)</span></span>|||  
|<span data-ttu-id="82c05-305">10002</span><span class="sxs-lookup"><span data-stu-id="82c05-305">10002</span></span>|<span data-ttu-id="82c05-306">x-mac-chinesetrad</span><span class="sxs-lookup"><span data-stu-id="82c05-306">x-mac-chinesetrad</span></span>|<span data-ttu-id="82c05-307">繁体中文（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-307">Chinese Traditional (Mac)</span></span>|||  
|<span data-ttu-id="82c05-308">10003</span><span class="sxs-lookup"><span data-stu-id="82c05-308">10003</span></span>|<span data-ttu-id="82c05-309">x-mac-韩语</span><span class="sxs-lookup"><span data-stu-id="82c05-309">x-mac-korean</span></span>|<span data-ttu-id="82c05-310">朝鲜语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-310">Korean (Mac)</span></span>|<span data-ttu-id="82c05-311">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-311">✓</span></span>||  
|<span data-ttu-id="82c05-312">10004</span><span class="sxs-lookup"><span data-stu-id="82c05-312">10004</span></span>|<span data-ttu-id="82c05-313">x-mac-阿拉伯语</span><span class="sxs-lookup"><span data-stu-id="82c05-313">x-mac-arabic</span></span>|<span data-ttu-id="82c05-314">阿拉伯语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-314">Arabic (Mac)</span></span>|||  
|<span data-ttu-id="82c05-315">10005</span><span class="sxs-lookup"><span data-stu-id="82c05-315">10005</span></span>|<span data-ttu-id="82c05-316">x-mac-希伯来语</span><span class="sxs-lookup"><span data-stu-id="82c05-316">x-mac-hebrew</span></span>|<span data-ttu-id="82c05-317">希伯来语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-317">Hebrew (Mac)</span></span>|||  
|<span data-ttu-id="82c05-318">10006</span><span class="sxs-lookup"><span data-stu-id="82c05-318">10006</span></span>|<span data-ttu-id="82c05-319">x-mac-希腊语</span><span class="sxs-lookup"><span data-stu-id="82c05-319">x-mac-greek</span></span>|<span data-ttu-id="82c05-320">希腊语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-320">Greek (Mac)</span></span>|||  
|<span data-ttu-id="82c05-321">10007</span><span class="sxs-lookup"><span data-stu-id="82c05-321">10007</span></span>|<span data-ttu-id="82c05-322">x-mac-西里尔文</span><span class="sxs-lookup"><span data-stu-id="82c05-322">x-mac-cyrillic</span></span>|<span data-ttu-id="82c05-323">西里尔语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-323">Cyrillic (Mac)</span></span>|||  
|<span data-ttu-id="82c05-324">10008</span><span class="sxs-lookup"><span data-stu-id="82c05-324">10008</span></span>|<span data-ttu-id="82c05-325">x-mac-chinesesimp</span><span class="sxs-lookup"><span data-stu-id="82c05-325">x-mac-chinesesimp</span></span>|<span data-ttu-id="82c05-326">简体中文（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-326">Chinese Simplified (Mac)</span></span>|<span data-ttu-id="82c05-327">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-327">✓</span></span>||  
|<span data-ttu-id="82c05-328">10010</span><span class="sxs-lookup"><span data-stu-id="82c05-328">10010</span></span>|<span data-ttu-id="82c05-329">x-mac</span><span class="sxs-lookup"><span data-stu-id="82c05-329">x-mac-romanian</span></span>|<span data-ttu-id="82c05-330">罗马尼亚语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-330">Romanian (Mac)</span></span>|||  
|<span data-ttu-id="82c05-331">10017</span><span class="sxs-lookup"><span data-stu-id="82c05-331">10017</span></span>|<span data-ttu-id="82c05-332">x-mac-乌克兰语</span><span class="sxs-lookup"><span data-stu-id="82c05-332">x-mac-ukrainian</span></span>|<span data-ttu-id="82c05-333">乌克兰语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-333">Ukrainian (Mac)</span></span>|||  
|<span data-ttu-id="82c05-334">10021</span><span class="sxs-lookup"><span data-stu-id="82c05-334">10021</span></span>|<span data-ttu-id="82c05-335">x-mac-泰语</span><span class="sxs-lookup"><span data-stu-id="82c05-335">x-mac-thai</span></span>|<span data-ttu-id="82c05-336">泰语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-336">Thai (Mac)</span></span>|||  
|<span data-ttu-id="82c05-337">10029</span><span class="sxs-lookup"><span data-stu-id="82c05-337">10029</span></span>|<span data-ttu-id="82c05-338">x-mac-ce</span><span class="sxs-lookup"><span data-stu-id="82c05-338">x-mac-ce</span></span>|<span data-ttu-id="82c05-339">中欧语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-339">Central European (Mac)</span></span>|||  
|<span data-ttu-id="82c05-340">10079</span><span class="sxs-lookup"><span data-stu-id="82c05-340">10079</span></span>|<span data-ttu-id="82c05-341">x-mac-冰岛语</span><span class="sxs-lookup"><span data-stu-id="82c05-341">x-mac-icelandic</span></span>|<span data-ttu-id="82c05-342">冰岛语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-342">Icelandic (Mac)</span></span>|||  
|<span data-ttu-id="82c05-343">10081</span><span class="sxs-lookup"><span data-stu-id="82c05-343">10081</span></span>|<span data-ttu-id="82c05-344">x-mac-土耳其语</span><span class="sxs-lookup"><span data-stu-id="82c05-344">x-mac-turkish</span></span>|<span data-ttu-id="82c05-345">土耳其语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-345">Turkish (Mac)</span></span>|||  
|<span data-ttu-id="82c05-346">10082</span><span class="sxs-lookup"><span data-stu-id="82c05-346">10082</span></span>|<span data-ttu-id="82c05-347">x-mac-克罗地亚语</span><span class="sxs-lookup"><span data-stu-id="82c05-347">x-mac-croatian</span></span>|<span data-ttu-id="82c05-348">克罗地亚语（Mac）</span><span class="sxs-lookup"><span data-stu-id="82c05-348">Croatian (Mac)</span></span>|||  
|<span data-ttu-id="82c05-349">12000</span><span class="sxs-lookup"><span data-stu-id="82c05-349">12000</span></span>|<span data-ttu-id="82c05-350">utf-32</span><span class="sxs-lookup"><span data-stu-id="82c05-350">utf-32</span></span>|<span data-ttu-id="82c05-351">Unicode （UTF-32）</span><span class="sxs-lookup"><span data-stu-id="82c05-351">Unicode (UTF-32)</span></span>|<span data-ttu-id="82c05-352">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-352">✓</span></span>|<span data-ttu-id="82c05-353">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-353">✓</span></span>|  
|<span data-ttu-id="82c05-354">12001</span><span class="sxs-lookup"><span data-stu-id="82c05-354">12001</span></span>|<span data-ttu-id="82c05-355">32BE</span><span class="sxs-lookup"><span data-stu-id="82c05-355">utf-32BE</span></span>|<span data-ttu-id="82c05-356">Unicode （UTF-16 32 大字节序）</span><span class="sxs-lookup"><span data-stu-id="82c05-356">Unicode (UTF-32 Big endian)</span></span>|<span data-ttu-id="82c05-357">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-357">✓</span></span>|<span data-ttu-id="82c05-358">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-358">✓</span></span>|  
|<span data-ttu-id="82c05-359">20000</span><span class="sxs-lookup"><span data-stu-id="82c05-359">20000</span></span>|<span data-ttu-id="82c05-360">x-中文-CNS</span><span class="sxs-lookup"><span data-stu-id="82c05-360">x-Chinese-CNS</span></span>|<span data-ttu-id="82c05-361">繁体中文（CNS）</span><span class="sxs-lookup"><span data-stu-id="82c05-361">Chinese Traditional (CNS)</span></span>|||  
|<span data-ttu-id="82c05-362">20001</span><span class="sxs-lookup"><span data-stu-id="82c05-362">20001</span></span>|<span data-ttu-id="82c05-363">x-cp20001</span><span class="sxs-lookup"><span data-stu-id="82c05-363">x-cp20001</span></span>|<span data-ttu-id="82c05-364">TCA 台湾</span><span class="sxs-lookup"><span data-stu-id="82c05-364">TCA Taiwan</span></span>|||  
|<span data-ttu-id="82c05-365">20002</span><span class="sxs-lookup"><span data-stu-id="82c05-365">20002</span></span>|<span data-ttu-id="82c05-366">x-中文-Eten</span><span class="sxs-lookup"><span data-stu-id="82c05-366">x-Chinese-Eten</span></span>|<span data-ttu-id="82c05-367">繁体中文（Eten）</span><span class="sxs-lookup"><span data-stu-id="82c05-367">Chinese Traditional (Eten)</span></span>|||  
|<span data-ttu-id="82c05-368">20003</span><span class="sxs-lookup"><span data-stu-id="82c05-368">20003</span></span>|<span data-ttu-id="82c05-369">x-cp20003</span><span class="sxs-lookup"><span data-stu-id="82c05-369">x-cp20003</span></span>|<span data-ttu-id="82c05-370">IBM5550 台湾</span><span class="sxs-lookup"><span data-stu-id="82c05-370">IBM5550 Taiwan</span></span>|||  
|<span data-ttu-id="82c05-371">20004</span><span class="sxs-lookup"><span data-stu-id="82c05-371">20004</span></span>|<span data-ttu-id="82c05-372">x-cp20004</span><span class="sxs-lookup"><span data-stu-id="82c05-372">x-cp20004</span></span>|<span data-ttu-id="82c05-373">TeleText 台湾</span><span class="sxs-lookup"><span data-stu-id="82c05-373">TeleText Taiwan</span></span>|||  
|<span data-ttu-id="82c05-374">20005</span><span class="sxs-lookup"><span data-stu-id="82c05-374">20005</span></span>|<span data-ttu-id="82c05-375">x-cp20005</span><span class="sxs-lookup"><span data-stu-id="82c05-375">x-cp20005</span></span>|<span data-ttu-id="82c05-376">Wang 台湾</span><span class="sxs-lookup"><span data-stu-id="82c05-376">Wang Taiwan</span></span>|||  
|<span data-ttu-id="82c05-377">20105</span><span class="sxs-lookup"><span data-stu-id="82c05-377">20105</span></span>|<span data-ttu-id="82c05-378">x-IA5</span><span class="sxs-lookup"><span data-stu-id="82c05-378">x-IA5</span></span>|<span data-ttu-id="82c05-379">西欧（IA5）</span><span class="sxs-lookup"><span data-stu-id="82c05-379">Western European (IA5)</span></span>|||  
|<span data-ttu-id="82c05-380">20106</span><span class="sxs-lookup"><span data-stu-id="82c05-380">20106</span></span>|<span data-ttu-id="82c05-381">x-IA5-德语</span><span class="sxs-lookup"><span data-stu-id="82c05-381">x-IA5-German</span></span>|<span data-ttu-id="82c05-382">德语（IA5）</span><span class="sxs-lookup"><span data-stu-id="82c05-382">German (IA5)</span></span>|||  
|<span data-ttu-id="82c05-383">20107</span><span class="sxs-lookup"><span data-stu-id="82c05-383">20107</span></span>|<span data-ttu-id="82c05-384">x IA5-瑞典语</span><span class="sxs-lookup"><span data-stu-id="82c05-384">x-IA5-Swedish</span></span>|<span data-ttu-id="82c05-385">瑞典语（IA5）</span><span class="sxs-lookup"><span data-stu-id="82c05-385">Swedish (IA5)</span></span>|||  
|<span data-ttu-id="82c05-386">20108</span><span class="sxs-lookup"><span data-stu-id="82c05-386">20108</span></span>|<span data-ttu-id="82c05-387">x IA5-挪威语</span><span class="sxs-lookup"><span data-stu-id="82c05-387">x-IA5-Norwegian</span></span>|<span data-ttu-id="82c05-388">挪威语（IA5）</span><span class="sxs-lookup"><span data-stu-id="82c05-388">Norwegian (IA5)</span></span>|||  
|<span data-ttu-id="82c05-389">20127</span><span class="sxs-lookup"><span data-stu-id="82c05-389">20127</span></span>|<span data-ttu-id="82c05-390">us-ascii</span><span class="sxs-lookup"><span data-stu-id="82c05-390">us-ascii</span></span>|<span data-ttu-id="82c05-391">US-ASCII</span><span class="sxs-lookup"><span data-stu-id="82c05-391">US-ASCII</span></span>|<span data-ttu-id="82c05-392">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-392">✓</span></span>|<span data-ttu-id="82c05-393">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-393">✓</span></span>|  
|<span data-ttu-id="82c05-394">20261</span><span class="sxs-lookup"><span data-stu-id="82c05-394">20261</span></span>|<span data-ttu-id="82c05-395">x-cp20261</span><span class="sxs-lookup"><span data-stu-id="82c05-395">x-cp20261</span></span>|<span data-ttu-id="82c05-396">不是61</span><span class="sxs-lookup"><span data-stu-id="82c05-396">T.61</span></span>|||  
|<span data-ttu-id="82c05-397">20269</span><span class="sxs-lookup"><span data-stu-id="82c05-397">20269</span></span>|<span data-ttu-id="82c05-398">x-cp20269</span><span class="sxs-lookup"><span data-stu-id="82c05-398">x-cp20269</span></span>|<span data-ttu-id="82c05-399">ISO-6937</span><span class="sxs-lookup"><span data-stu-id="82c05-399">ISO-6937</span></span>|||  
|<span data-ttu-id="82c05-400">20273</span><span class="sxs-lookup"><span data-stu-id="82c05-400">20273</span></span>|<span data-ttu-id="82c05-401">IBM273</span><span class="sxs-lookup"><span data-stu-id="82c05-401">IBM273</span></span>|<span data-ttu-id="82c05-402">IBM EBCDIC （德国）</span><span class="sxs-lookup"><span data-stu-id="82c05-402">IBM EBCDIC (Germany)</span></span>|||  
|<span data-ttu-id="82c05-403">20277</span><span class="sxs-lookup"><span data-stu-id="82c05-403">20277</span></span>|<span data-ttu-id="82c05-404">IBM277</span><span class="sxs-lookup"><span data-stu-id="82c05-404">IBM277</span></span>|<span data-ttu-id="82c05-405">IBM EBCDIC （丹麦-挪威）</span><span class="sxs-lookup"><span data-stu-id="82c05-405">IBM EBCDIC (Denmark-Norway)</span></span>|||  
|<span data-ttu-id="82c05-406">20278</span><span class="sxs-lookup"><span data-stu-id="82c05-406">20278</span></span>|<span data-ttu-id="82c05-407">IBM278</span><span class="sxs-lookup"><span data-stu-id="82c05-407">IBM278</span></span>|<span data-ttu-id="82c05-408">IBM EBCDIC （芬兰-瑞典）</span><span class="sxs-lookup"><span data-stu-id="82c05-408">IBM EBCDIC (Finland-Sweden)</span></span>|||  
|<span data-ttu-id="82c05-409">20280</span><span class="sxs-lookup"><span data-stu-id="82c05-409">20280</span></span>|<span data-ttu-id="82c05-410">IBM280</span><span class="sxs-lookup"><span data-stu-id="82c05-410">IBM280</span></span>|<span data-ttu-id="82c05-411">IBM EBCDIC （意大利）</span><span class="sxs-lookup"><span data-stu-id="82c05-411">IBM EBCDIC (Italy)</span></span>|||  
|<span data-ttu-id="82c05-412">20284</span><span class="sxs-lookup"><span data-stu-id="82c05-412">20284</span></span>|<span data-ttu-id="82c05-413">IBM284</span><span class="sxs-lookup"><span data-stu-id="82c05-413">IBM284</span></span>|<span data-ttu-id="82c05-414">IBM EBCDIC （西班牙）</span><span class="sxs-lookup"><span data-stu-id="82c05-414">IBM EBCDIC (Spain)</span></span>|||  
|<span data-ttu-id="82c05-415">20285</span><span class="sxs-lookup"><span data-stu-id="82c05-415">20285</span></span>|<span data-ttu-id="82c05-416">IBM285</span><span class="sxs-lookup"><span data-stu-id="82c05-416">IBM285</span></span>|<span data-ttu-id="82c05-417">IBM EBCDIC （英国）</span><span class="sxs-lookup"><span data-stu-id="82c05-417">IBM EBCDIC (UK)</span></span>|||  
|<span data-ttu-id="82c05-418">20290</span><span class="sxs-lookup"><span data-stu-id="82c05-418">20290</span></span>|<span data-ttu-id="82c05-419">IBM290</span><span class="sxs-lookup"><span data-stu-id="82c05-419">IBM290</span></span>|<span data-ttu-id="82c05-420">IBM EBCDIC （日语片假名）</span><span class="sxs-lookup"><span data-stu-id="82c05-420">IBM EBCDIC (Japanese katakana)</span></span>|||  
|<span data-ttu-id="82c05-421">20297</span><span class="sxs-lookup"><span data-stu-id="82c05-421">20297</span></span>|<span data-ttu-id="82c05-422">IBM297</span><span class="sxs-lookup"><span data-stu-id="82c05-422">IBM297</span></span>|<span data-ttu-id="82c05-423">IBM EBCDIC （法国）</span><span class="sxs-lookup"><span data-stu-id="82c05-423">IBM EBCDIC (France)</span></span>|||  
|<span data-ttu-id="82c05-424">20420</span><span class="sxs-lookup"><span data-stu-id="82c05-424">20420</span></span>|<span data-ttu-id="82c05-425">IBM420</span><span class="sxs-lookup"><span data-stu-id="82c05-425">IBM420</span></span>|<span data-ttu-id="82c05-426">IBM EBCDIC （阿拉伯语）</span><span class="sxs-lookup"><span data-stu-id="82c05-426">IBM EBCDIC (Arabic)</span></span>|||  
|<span data-ttu-id="82c05-427">20423</span><span class="sxs-lookup"><span data-stu-id="82c05-427">20423</span></span>|<span data-ttu-id="82c05-428">IBM423</span><span class="sxs-lookup"><span data-stu-id="82c05-428">IBM423</span></span>|<span data-ttu-id="82c05-429">IBM EBCDIC （希腊语）</span><span class="sxs-lookup"><span data-stu-id="82c05-429">IBM EBCDIC (Greek)</span></span>|||  
|<span data-ttu-id="82c05-430">20424</span><span class="sxs-lookup"><span data-stu-id="82c05-430">20424</span></span>|<span data-ttu-id="82c05-431">IBM424</span><span class="sxs-lookup"><span data-stu-id="82c05-431">IBM424</span></span>|<span data-ttu-id="82c05-432">IBM EBCDIC （希伯来语）</span><span class="sxs-lookup"><span data-stu-id="82c05-432">IBM EBCDIC (Hebrew)</span></span>|||  
|<span data-ttu-id="82c05-433">20833</span><span class="sxs-lookup"><span data-stu-id="82c05-433">20833</span></span>|<span data-ttu-id="82c05-434">x-EBCDIC-KoreanExtended</span><span class="sxs-lookup"><span data-stu-id="82c05-434">x-EBCDIC-KoreanExtended</span></span>|<span data-ttu-id="82c05-435">IBM EBCDIC （朝鲜语扩展）</span><span class="sxs-lookup"><span data-stu-id="82c05-435">IBM EBCDIC (Korean Extended)</span></span>|||  
|<span data-ttu-id="82c05-436">20838</span><span class="sxs-lookup"><span data-stu-id="82c05-436">20838</span></span>|<span data-ttu-id="82c05-437">IBM-泰语</span><span class="sxs-lookup"><span data-stu-id="82c05-437">IBM-Thai</span></span>|<span data-ttu-id="82c05-438">IBM EBCDIC （泰语）</span><span class="sxs-lookup"><span data-stu-id="82c05-438">IBM EBCDIC (Thai)</span></span>|||  
|<span data-ttu-id="82c05-439">20866</span><span class="sxs-lookup"><span data-stu-id="82c05-439">20866</span></span>|<span data-ttu-id="82c05-440">koi8-ru-r</span><span class="sxs-lookup"><span data-stu-id="82c05-440">koi8-r</span></span>|<span data-ttu-id="82c05-441">西里尔语（KOI8-RU-R）</span><span class="sxs-lookup"><span data-stu-id="82c05-441">Cyrillic (KOI8-R)</span></span>|||  
|<span data-ttu-id="82c05-442">20871</span><span class="sxs-lookup"><span data-stu-id="82c05-442">20871</span></span>|<span data-ttu-id="82c05-443">IBM871</span><span class="sxs-lookup"><span data-stu-id="82c05-443">IBM871</span></span>|<span data-ttu-id="82c05-444">IBM EBCDIC （冰岛语）</span><span class="sxs-lookup"><span data-stu-id="82c05-444">IBM EBCDIC (Icelandic)</span></span>|||  
|<span data-ttu-id="82c05-445">20880</span><span class="sxs-lookup"><span data-stu-id="82c05-445">20880</span></span>|<span data-ttu-id="82c05-446">IBM880</span><span class="sxs-lookup"><span data-stu-id="82c05-446">IBM880</span></span>|<span data-ttu-id="82c05-447">IBM EBCDIC （西里尔语俄语）</span><span class="sxs-lookup"><span data-stu-id="82c05-447">IBM EBCDIC (Cyrillic Russian)</span></span>|||  
|<span data-ttu-id="82c05-448">20905</span><span class="sxs-lookup"><span data-stu-id="82c05-448">20905</span></span>|<span data-ttu-id="82c05-449">IBM905</span><span class="sxs-lookup"><span data-stu-id="82c05-449">IBM905</span></span>|<span data-ttu-id="82c05-450">IBM EBCDIC （土耳其语）</span><span class="sxs-lookup"><span data-stu-id="82c05-450">IBM EBCDIC (Turkish)</span></span>|||  
|<span data-ttu-id="82c05-451">20924</span><span class="sxs-lookup"><span data-stu-id="82c05-451">20924</span></span>|<span data-ttu-id="82c05-452">IBM00924</span><span class="sxs-lookup"><span data-stu-id="82c05-452">IBM00924</span></span>|<span data-ttu-id="82c05-453">IBM 拉丁语-1</span><span class="sxs-lookup"><span data-stu-id="82c05-453">IBM Latin-1</span></span>|||  
|<span data-ttu-id="82c05-454">20932</span><span class="sxs-lookup"><span data-stu-id="82c05-454">20932</span></span>|<span data-ttu-id="82c05-455">EUC-JP</span><span class="sxs-lookup"><span data-stu-id="82c05-455">EUC-JP</span></span>|<span data-ttu-id="82c05-456">日语（JIS 0208-1990 和0212-1990）</span><span class="sxs-lookup"><span data-stu-id="82c05-456">Japanese (JIS 0208-1990 and 0212-1990)</span></span>|||  
|<span data-ttu-id="82c05-457">20936</span><span class="sxs-lookup"><span data-stu-id="82c05-457">20936</span></span>|<span data-ttu-id="82c05-458">x-cp20936</span><span class="sxs-lookup"><span data-stu-id="82c05-458">x-cp20936</span></span>|<span data-ttu-id="82c05-459">简体中文（GB2312-80）</span><span class="sxs-lookup"><span data-stu-id="82c05-459">Chinese Simplified (GB2312-80)</span></span>|<span data-ttu-id="82c05-460">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-460">✓</span></span>||  
|<span data-ttu-id="82c05-461">20949</span><span class="sxs-lookup"><span data-stu-id="82c05-461">20949</span></span>|<span data-ttu-id="82c05-462">x-cp20949</span><span class="sxs-lookup"><span data-stu-id="82c05-462">x-cp20949</span></span>|<span data-ttu-id="82c05-463">韩语 Wansung</span><span class="sxs-lookup"><span data-stu-id="82c05-463">Korean Wansung</span></span>|<span data-ttu-id="82c05-464">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-464">✓</span></span>||  
|<span data-ttu-id="82c05-465">21025</span><span class="sxs-lookup"><span data-stu-id="82c05-465">21025</span></span>|<span data-ttu-id="82c05-466">cp1025</span><span class="sxs-lookup"><span data-stu-id="82c05-466">cp1025</span></span>|<span data-ttu-id="82c05-467">IBM EBCDIC （西里尔语塞尔维亚语-保加利亚语）</span><span class="sxs-lookup"><span data-stu-id="82c05-467">IBM EBCDIC (Cyrillic Serbian-Bulgarian)</span></span>|||  
|<span data-ttu-id="82c05-468">21866</span><span class="sxs-lookup"><span data-stu-id="82c05-468">21866</span></span>|<span data-ttu-id="82c05-469">koi8-ru-u</span><span class="sxs-lookup"><span data-stu-id="82c05-469">koi8-u</span></span>|<span data-ttu-id="82c05-470">西里尔语（KOI8-RU）</span><span class="sxs-lookup"><span data-stu-id="82c05-470">Cyrillic (KOI8-U)</span></span>|||  
|<span data-ttu-id="82c05-471">28591</span><span class="sxs-lookup"><span data-stu-id="82c05-471">28591</span></span>|<span data-ttu-id="82c05-472">iso-8859-1</span><span class="sxs-lookup"><span data-stu-id="82c05-472">iso-8859-1</span></span>|<span data-ttu-id="82c05-473">西欧（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-473">Western European (ISO)</span></span>|<span data-ttu-id="82c05-474">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-474">✓</span></span>|<span data-ttu-id="82c05-475">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-475">✓</span></span>|  
|<span data-ttu-id="82c05-476">28592</span><span class="sxs-lookup"><span data-stu-id="82c05-476">28592</span></span>|<span data-ttu-id="82c05-477">iso-8859-2</span><span class="sxs-lookup"><span data-stu-id="82c05-477">iso-8859-2</span></span>|<span data-ttu-id="82c05-478">中欧语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-478">Central European (ISO)</span></span>|||  
|<span data-ttu-id="82c05-479">28593</span><span class="sxs-lookup"><span data-stu-id="82c05-479">28593</span></span>|<span data-ttu-id="82c05-480">iso-8859-3</span><span class="sxs-lookup"><span data-stu-id="82c05-480">iso-8859-3</span></span>|<span data-ttu-id="82c05-481">拉丁语3（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-481">Latin 3 (ISO)</span></span>|||  
|<span data-ttu-id="82c05-482">28594</span><span class="sxs-lookup"><span data-stu-id="82c05-482">28594</span></span>|<span data-ttu-id="82c05-483">iso-8859-4</span><span class="sxs-lookup"><span data-stu-id="82c05-483">iso-8859-4</span></span>|<span data-ttu-id="82c05-484">波罗的语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-484">Baltic (ISO)</span></span>|||  
|<span data-ttu-id="82c05-485">28595</span><span class="sxs-lookup"><span data-stu-id="82c05-485">28595</span></span>|<span data-ttu-id="82c05-486">iso-8859-5</span><span class="sxs-lookup"><span data-stu-id="82c05-486">iso-8859-5</span></span>|<span data-ttu-id="82c05-487">西里尔语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-487">Cyrillic (ISO)</span></span>|||  
|<span data-ttu-id="82c05-488">28596</span><span class="sxs-lookup"><span data-stu-id="82c05-488">28596</span></span>|<span data-ttu-id="82c05-489">iso-8859-6</span><span class="sxs-lookup"><span data-stu-id="82c05-489">iso-8859-6</span></span>|<span data-ttu-id="82c05-490">阿拉伯语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-490">Arabic (ISO)</span></span>|||  
|<span data-ttu-id="82c05-491">28597</span><span class="sxs-lookup"><span data-stu-id="82c05-491">28597</span></span>|<span data-ttu-id="82c05-492">iso-8859-7</span><span class="sxs-lookup"><span data-stu-id="82c05-492">iso-8859-7</span></span>|<span data-ttu-id="82c05-493">希腊语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-493">Greek (ISO)</span></span>|||  
|<span data-ttu-id="82c05-494">28598</span><span class="sxs-lookup"><span data-stu-id="82c05-494">28598</span></span>|<span data-ttu-id="82c05-495">iso-8859-8</span><span class="sxs-lookup"><span data-stu-id="82c05-495">iso-8859-8</span></span>|<span data-ttu-id="82c05-496">希伯来语（ISO-视觉对象）</span><span class="sxs-lookup"><span data-stu-id="82c05-496">Hebrew (ISO-Visual)</span></span>|<span data-ttu-id="82c05-497">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-497">✓</span></span>||  
|<span data-ttu-id="82c05-498">28599</span><span class="sxs-lookup"><span data-stu-id="82c05-498">28599</span></span>|<span data-ttu-id="82c05-499">iso-8859-9</span><span class="sxs-lookup"><span data-stu-id="82c05-499">iso-8859-9</span></span>|<span data-ttu-id="82c05-500">土耳其语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-500">Turkish (ISO)</span></span>|||  
|<span data-ttu-id="82c05-501">28603</span><span class="sxs-lookup"><span data-stu-id="82c05-501">28603</span></span>|<span data-ttu-id="82c05-502">iso-8859-13</span><span class="sxs-lookup"><span data-stu-id="82c05-502">iso-8859-13</span></span>|<span data-ttu-id="82c05-503">爱沙尼亚语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-503">Estonian (ISO)</span></span>|||  
|<span data-ttu-id="82c05-504">28605</span><span class="sxs-lookup"><span data-stu-id="82c05-504">28605</span></span>|<span data-ttu-id="82c05-505">iso-8859-15</span><span class="sxs-lookup"><span data-stu-id="82c05-505">iso-8859-15</span></span>|<span data-ttu-id="82c05-506">拉丁语9（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-506">Latin 9 (ISO)</span></span>|||  
|<span data-ttu-id="82c05-507">29001</span><span class="sxs-lookup"><span data-stu-id="82c05-507">29001</span></span>|<span data-ttu-id="82c05-508">x-欧洲</span><span class="sxs-lookup"><span data-stu-id="82c05-508">x-Europa</span></span>|<span data-ttu-id="82c05-509">欧洲</span><span class="sxs-lookup"><span data-stu-id="82c05-509">Europa</span></span>|||  
|<span data-ttu-id="82c05-510">38598</span><span class="sxs-lookup"><span data-stu-id="82c05-510">38598</span></span>|<span data-ttu-id="82c05-511">iso-8859-8-i</span><span class="sxs-lookup"><span data-stu-id="82c05-511">iso-8859-8-i</span></span>|<span data-ttu-id="82c05-512">希伯来语（ISO-逻辑）</span><span class="sxs-lookup"><span data-stu-id="82c05-512">Hebrew (ISO-Logical)</span></span>|<span data-ttu-id="82c05-513">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-513">✓</span></span>||  
|<span data-ttu-id="82c05-514">50220</span><span class="sxs-lookup"><span data-stu-id="82c05-514">50220</span></span>|<span data-ttu-id="82c05-515">iso-2022-日本</span><span class="sxs-lookup"><span data-stu-id="82c05-515">iso-2022-jp</span></span>|<span data-ttu-id="82c05-516">日语（JIS）</span><span class="sxs-lookup"><span data-stu-id="82c05-516">Japanese (JIS)</span></span>|<span data-ttu-id="82c05-517">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-517">✓</span></span>||  
|<span data-ttu-id="82c05-518">50221</span><span class="sxs-lookup"><span data-stu-id="82c05-518">50221</span></span>|<span data-ttu-id="82c05-519">csISO2022JP</span><span class="sxs-lookup"><span data-stu-id="82c05-519">csISO2022JP</span></span>|<span data-ttu-id="82c05-520">日语（JIS-允许1字节假名）</span><span class="sxs-lookup"><span data-stu-id="82c05-520">Japanese (JIS-Allow 1 byte Kana)</span></span>|<span data-ttu-id="82c05-521">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-521">✓</span></span>||  
|<span data-ttu-id="82c05-522">50222</span><span class="sxs-lookup"><span data-stu-id="82c05-522">50222</span></span>|<span data-ttu-id="82c05-523">iso-2022-日本</span><span class="sxs-lookup"><span data-stu-id="82c05-523">iso-2022-jp</span></span>|<span data-ttu-id="82c05-524">日语（JIS-允许1字节假名-SO/SI）</span><span class="sxs-lookup"><span data-stu-id="82c05-524">Japanese (JIS-Allow 1 byte Kana - SO/SI)</span></span>|<span data-ttu-id="82c05-525">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-525">✓</span></span>||  
|<span data-ttu-id="82c05-526">50225</span><span class="sxs-lookup"><span data-stu-id="82c05-526">50225</span></span>|<span data-ttu-id="82c05-527">iso-2022-kr</span><span class="sxs-lookup"><span data-stu-id="82c05-527">iso-2022-kr</span></span>|<span data-ttu-id="82c05-528">朝鲜语（ISO）</span><span class="sxs-lookup"><span data-stu-id="82c05-528">Korean (ISO)</span></span>|<span data-ttu-id="82c05-529">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-529">✓</span></span>||  
|<span data-ttu-id="82c05-530">50227</span><span class="sxs-lookup"><span data-stu-id="82c05-530">50227</span></span>|<span data-ttu-id="82c05-531">x-cp50227</span><span class="sxs-lookup"><span data-stu-id="82c05-531">x-cp50227</span></span>|<span data-ttu-id="82c05-532">简体中文（ISO-2022）</span><span class="sxs-lookup"><span data-stu-id="82c05-532">Chinese Simplified (ISO-2022)</span></span>|<span data-ttu-id="82c05-533">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-533">✓</span></span>||  
|<span data-ttu-id="82c05-534">51932</span><span class="sxs-lookup"><span data-stu-id="82c05-534">51932</span></span>|<span data-ttu-id="82c05-535">euc-jp</span><span class="sxs-lookup"><span data-stu-id="82c05-535">euc-jp</span></span>|<span data-ttu-id="82c05-536">日语（EUC）</span><span class="sxs-lookup"><span data-stu-id="82c05-536">Japanese (EUC)</span></span>|<span data-ttu-id="82c05-537">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-537">✓</span></span>||  
|<span data-ttu-id="82c05-538">51936</span><span class="sxs-lookup"><span data-stu-id="82c05-538">51936</span></span>|<span data-ttu-id="82c05-539">EUC-CN</span><span class="sxs-lookup"><span data-stu-id="82c05-539">EUC-CN</span></span>|<span data-ttu-id="82c05-540">简体中文（EUC）</span><span class="sxs-lookup"><span data-stu-id="82c05-540">Chinese Simplified (EUC)</span></span>|<span data-ttu-id="82c05-541">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-541">✓</span></span>||  
|<span data-ttu-id="82c05-542">51949</span><span class="sxs-lookup"><span data-stu-id="82c05-542">51949</span></span>|<span data-ttu-id="82c05-543">euc-kr</span><span class="sxs-lookup"><span data-stu-id="82c05-543">euc-kr</span></span>|<span data-ttu-id="82c05-544">韩语（EUC）</span><span class="sxs-lookup"><span data-stu-id="82c05-544">Korean (EUC)</span></span>|<span data-ttu-id="82c05-545">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-545">✓</span></span>||  
|<span data-ttu-id="82c05-546">52936</span><span class="sxs-lookup"><span data-stu-id="82c05-546">52936</span></span>|<span data-ttu-id="82c05-547">hz-gb-2312</span><span class="sxs-lookup"><span data-stu-id="82c05-547">hz-gb-2312</span></span>|<span data-ttu-id="82c05-548">简体中文（HZ）</span><span class="sxs-lookup"><span data-stu-id="82c05-548">Chinese Simplified (HZ)</span></span>|<span data-ttu-id="82c05-549">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-549">✓</span></span>||  
|<span data-ttu-id="82c05-550">54936</span><span class="sxs-lookup"><span data-stu-id="82c05-550">54936</span></span>|<span data-ttu-id="82c05-551">含</span><span class="sxs-lookup"><span data-stu-id="82c05-551">GB18030</span></span>|<span data-ttu-id="82c05-552">简体中文（GB18030）</span><span class="sxs-lookup"><span data-stu-id="82c05-552">Chinese Simplified (GB18030)</span></span>|<span data-ttu-id="82c05-553">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-553">✓</span></span>||  
|<span data-ttu-id="82c05-554">57002</span><span class="sxs-lookup"><span data-stu-id="82c05-554">57002</span></span>|<span data-ttu-id="82c05-555">x-iscii-de</span><span class="sxs-lookup"><span data-stu-id="82c05-555">x-iscii-de</span></span>|<span data-ttu-id="82c05-556">ISCII 梵文</span><span class="sxs-lookup"><span data-stu-id="82c05-556">ISCII Devanagari</span></span>|<span data-ttu-id="82c05-557">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-557">✓</span></span>||  
|<span data-ttu-id="82c05-558">57003</span><span class="sxs-lookup"><span data-stu-id="82c05-558">57003</span></span>|<span data-ttu-id="82c05-559">x-iscii</span><span class="sxs-lookup"><span data-stu-id="82c05-559">x-iscii-be</span></span>|<span data-ttu-id="82c05-560">ISCII 孟加拉语</span><span class="sxs-lookup"><span data-stu-id="82c05-560">ISCII Bengali</span></span>|<span data-ttu-id="82c05-561">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-561">✓</span></span>||  
|<span data-ttu-id="82c05-562">57004</span><span class="sxs-lookup"><span data-stu-id="82c05-562">57004</span></span>|<span data-ttu-id="82c05-563">x-iscii-ta</span><span class="sxs-lookup"><span data-stu-id="82c05-563">x-iscii-ta</span></span>|<span data-ttu-id="82c05-564">ISCII 泰米尔语</span><span class="sxs-lookup"><span data-stu-id="82c05-564">ISCII Tamil</span></span>|<span data-ttu-id="82c05-565">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-565">✓</span></span>||  
|<span data-ttu-id="82c05-566">57005</span><span class="sxs-lookup"><span data-stu-id="82c05-566">57005</span></span>|<span data-ttu-id="82c05-567">x-iscii-te</span><span class="sxs-lookup"><span data-stu-id="82c05-567">x-iscii-te</span></span>|<span data-ttu-id="82c05-568">ISCII 泰卢固语</span><span class="sxs-lookup"><span data-stu-id="82c05-568">ISCII Telugu</span></span>|<span data-ttu-id="82c05-569">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-569">✓</span></span>||  
|<span data-ttu-id="82c05-570">57006</span><span class="sxs-lookup"><span data-stu-id="82c05-570">57006</span></span>|<span data-ttu-id="82c05-571">x-iscii-as</span><span class="sxs-lookup"><span data-stu-id="82c05-571">x-iscii-as</span></span>|<span data-ttu-id="82c05-572">ISCII 阿萨姆语</span><span class="sxs-lookup"><span data-stu-id="82c05-572">ISCII Assamese</span></span>|<span data-ttu-id="82c05-573">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-573">✓</span></span>||  
|<span data-ttu-id="82c05-574">57007</span><span class="sxs-lookup"><span data-stu-id="82c05-574">57007</span></span>|<span data-ttu-id="82c05-575">x-iscii-或</span><span class="sxs-lookup"><span data-stu-id="82c05-575">x-iscii-or</span></span>|<span data-ttu-id="82c05-576">ISCII 奥里雅语</span><span class="sxs-lookup"><span data-stu-id="82c05-576">ISCII Oriya</span></span>|<span data-ttu-id="82c05-577">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-577">✓</span></span>||  
|<span data-ttu-id="82c05-578">57008</span><span class="sxs-lookup"><span data-stu-id="82c05-578">57008</span></span>|<span data-ttu-id="82c05-579">x-iscii-ka</span><span class="sxs-lookup"><span data-stu-id="82c05-579">x-iscii-ka</span></span>|<span data-ttu-id="82c05-580">ISCII 埃纳德文</span><span class="sxs-lookup"><span data-stu-id="82c05-580">ISCII Kannada</span></span>|<span data-ttu-id="82c05-581">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-581">✓</span></span>||  
|<span data-ttu-id="82c05-582">57009</span><span class="sxs-lookup"><span data-stu-id="82c05-582">57009</span></span>|<span data-ttu-id="82c05-583">x-iscii-ma</span><span class="sxs-lookup"><span data-stu-id="82c05-583">x-iscii-ma</span></span>|<span data-ttu-id="82c05-584">ISCII 马拉雅拉姆语</span><span class="sxs-lookup"><span data-stu-id="82c05-584">ISCII Malayalam</span></span>|<span data-ttu-id="82c05-585">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-585">✓</span></span>||  
|<span data-ttu-id="82c05-586">57010</span><span class="sxs-lookup"><span data-stu-id="82c05-586">57010</span></span>|<span data-ttu-id="82c05-587">x-iscii-gu</span><span class="sxs-lookup"><span data-stu-id="82c05-587">x-iscii-gu</span></span>|<span data-ttu-id="82c05-588">ISCII 古吉拉特语</span><span class="sxs-lookup"><span data-stu-id="82c05-588">ISCII Gujarati</span></span>|<span data-ttu-id="82c05-589">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-589">✓</span></span>||  
|<span data-ttu-id="82c05-590">57011</span><span class="sxs-lookup"><span data-stu-id="82c05-590">57011</span></span>|<span data-ttu-id="82c05-591">x-iscii-pa</span><span class="sxs-lookup"><span data-stu-id="82c05-591">x-iscii-pa</span></span>|<span data-ttu-id="82c05-592">ISCII 旁遮普语</span><span class="sxs-lookup"><span data-stu-id="82c05-592">ISCII Punjabi</span></span>|<span data-ttu-id="82c05-593">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-593">✓</span></span>||  
|<span data-ttu-id="82c05-594">65000</span><span class="sxs-lookup"><span data-stu-id="82c05-594">65000</span></span>|<span data-ttu-id="82c05-595">utf-7</span><span class="sxs-lookup"><span data-stu-id="82c05-595">utf-7</span></span>|<span data-ttu-id="82c05-596">Unicode （UTF-7）</span><span class="sxs-lookup"><span data-stu-id="82c05-596">Unicode (UTF-7)</span></span>|<span data-ttu-id="82c05-597">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-597">✓</span></span>|<span data-ttu-id="82c05-598">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-598">✓</span></span>|  
|<span data-ttu-id="82c05-599">65001</span><span class="sxs-lookup"><span data-stu-id="82c05-599">65001</span></span>|<span data-ttu-id="82c05-600">utf-8</span><span class="sxs-lookup"><span data-stu-id="82c05-600">utf-8</span></span>|<span data-ttu-id="82c05-601">Unicode (UTF-8)</span><span class="sxs-lookup"><span data-stu-id="82c05-601">Unicode (UTF-8)</span></span>|<span data-ttu-id="82c05-602">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-602">✓</span></span>|<span data-ttu-id="82c05-603">✓</span><span class="sxs-lookup"><span data-stu-id="82c05-603">✓</span></span>|  
  
 <span data-ttu-id="82c05-604">下面的示例调用<xref:System.Text.Encoding.GetEncoding%28System.Int32%29>和<xref:System.Text.Encoding.GetEncoding%28System.String%29>方法以获取希腊语（Windows）代码页编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-604">The following example calls the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> and <xref:System.Text.Encoding.GetEncoding%28System.String%29> methods to get the Greek (Windows) code page encoding.</span></span> <span data-ttu-id="82c05-605">它将方法<xref:System.Text.Encoding>调用返回的对象进行比较，以显示它们相等，然后 maps 显示每个字符在希腊语字母表中的 Unicode 码位和相应的代码页值。</span><span class="sxs-lookup"><span data-stu-id="82c05-605">It compares the <xref:System.Text.Encoding> objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.</span></span>  
  
 [!code-csharp[System.Text.Encoding#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding/cs/getencoding1.cs#1)]
 [!code-vb[System.Text.Encoding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding/vb/getencoding1.vb#1)]  
  
 <span data-ttu-id="82c05-606">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-606">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-607">UTF-16 和32编码器可以使用大 endian 字节顺序（首先是最重要的字节），也可以是 little endian 字节顺序（首先是最不重要的字节）。</span><span class="sxs-lookup"><span data-stu-id="82c05-607">The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</span></span> <span data-ttu-id="82c05-608">例如，拉丁文大写字母 A （U + 0041）按以下方式序列化（十六进制）：</span><span class="sxs-lookup"><span data-stu-id="82c05-608">For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="82c05-609">UTF-16 大 endian 字节顺序： 00 41</span><span class="sxs-lookup"><span data-stu-id="82c05-609">UTF-16 big endian byte order: 00 41</span></span>  
  
-   <span data-ttu-id="82c05-610">UTF-16 little endian 字节顺序： 41 00</span><span class="sxs-lookup"><span data-stu-id="82c05-610">UTF-16 little endian byte order: 41 00</span></span>  
  
-   <span data-ttu-id="82c05-611">32大 endian 字节顺序： 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="82c05-611">UTF-32 big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="82c05-612">32 little endian 字节顺序： 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="82c05-612">UTF-32 little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="82c05-613">使用本机字节顺序存储 Unicode 字符通常更有效。</span><span class="sxs-lookup"><span data-stu-id="82c05-613">It is generally more efficient to store Unicode characters using the native byte order.</span></span> <span data-ttu-id="82c05-614">例如，最好使用 little endian 平台（如 Intel 计算机）上的 little endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="82c05-614">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span>  
  
 <span data-ttu-id="82c05-615"><xref:System.Text.Encoding.GetPreamble%2A>方法检索包含字节顺序标记（BOM）的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-615">The <xref:System.Text.Encoding.GetPreamble%2A> method retrieves an array of bytes that includes the byte order mark (BOM).</span></span> <span data-ttu-id="82c05-616">如果此字节数组的前缀为编码的流，则它有助于解码器识别所使用的编码格式。</span><span class="sxs-lookup"><span data-stu-id="82c05-616">If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.</span></span>  
  
 <span data-ttu-id="82c05-617">有关字节顺序和字节顺序标记的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-617">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="82c05-618">请注意，编码类允许错误：</span><span class="sxs-lookup"><span data-stu-id="82c05-618">Note that the encoding classes allow errors to:</span></span>  
  
-   <span data-ttu-id="82c05-619">以无提示方式更改为 "？" 字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-619">Silently change to a "?" character.</span></span>  
  
-   <span data-ttu-id="82c05-620">使用 "最佳匹配" 字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-620">Use a "best fit" character.</span></span>  
  
-   <span data-ttu-id="82c05-621">通过将<xref:System.Text.EncoderFallback>和类与 U + FFFD Unicode 替换字符一起<xref:System.Text.DecoderFallback>使用，更改为应用程序特定的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-621">Change to an application-specific behavior through use of the <xref:System.Text.EncoderFallback> and <xref:System.Text.DecoderFallback> classes with the U+FFFD Unicode replacement character.</span></span>  
  
 <span data-ttu-id="82c05-622">应在出现任何数据流错误时引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-622">You should throw an exception on any data stream error.</span></span> <span data-ttu-id="82c05-623">应用在适用或使用<xref:System.Text.EncoderExceptionFallback>和类时， <xref:System.Text.DecoderExceptionFallback>使用 "throwonerror" 标志。</span><span class="sxs-lookup"><span data-stu-id="82c05-623">An app either uses a "throwonerror" flag when applicable or uses the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> classes.</span></span> <span data-ttu-id="82c05-624">通常不建议使用最佳回退，因为这可能会导致数据丢失或混乱，并比简单字符替换慢。</span><span class="sxs-lookup"><span data-stu-id="82c05-624">Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements.</span></span> <span data-ttu-id="82c05-625">对于 ANSI 编码，最佳行为是默认值。</span><span class="sxs-lookup"><span data-stu-id="82c05-625">For ANSI encodings, the best fit behavior is the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-626">下面的示例将字符串从一种编码转换为另一种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-626">The following example converts a string from one encoding to another.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-627">在此示例中，byte [] 数组是包含编码数据的唯一类型。</span><span class="sxs-lookup"><span data-stu-id="82c05-627">The byte[] array is the only type in this example that contains the encoded data.</span></span> <span data-ttu-id="82c05-628">.Net Char 和 String 类型本身是 unicode，因此<xref:System.Text.Encoding.GetChars%2A>调用会将数据解码回 unicode。</span><span class="sxs-lookup"><span data-stu-id="82c05-628">The .NET Char and String types are themselves Unicode, so the <xref:System.Text.Encoding.GetChars%2A> call decodes the data back to Unicode.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-629">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-629">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-630">初始化 <see cref="T:System.Text.Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-630">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-631">初始化 <see cref="T:System.Text.Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-631">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-632">派生类重写此构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-632">Derived classes override this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (codePage As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage);" />
      <MemberSignature Language="F#" Value="new System.Text.Encoding : int -&gt; System.Text.Encoding" Usage="new System.Text.Encoding codePage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codePage"><span data-ttu-id="82c05-633">首选编码的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-633">The code page identifier of the preferred encoding.</span></span>  
  
 <span data-ttu-id="82c05-634">或</span><span class="sxs-lookup"><span data-stu-id="82c05-634">-or-</span></span>  
  
 <span data-ttu-id="82c05-635">0，使用默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-635">0, to use the default encoding.</span></span></param>
        <summary><span data-ttu-id="82c05-636">初始化对应于指定代码页的 <see cref="T:System.Text.Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-636">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-637">派生类重写此构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-637">Derived classes override this constructor.</span></span>  
  
 <span data-ttu-id="82c05-638">从派生类调用此构造函数将创建一个<xref:System.Text.Encoding>对象，该对象使用最佳回退来执行编码和解码操作。</span><span class="sxs-lookup"><span data-stu-id="82c05-638">Calls to this constructor from a derived class create an <xref:System.Text.Encoding> object that uses best-fit fallback for both encoding and decoding operations.</span></span> <span data-ttu-id="82c05-639"><xref:System.Text.Encoding.DecoderFallback%2A> 和 <xref:System.Text.Encoding.EncoderFallback%2A> 属性都是只读的，不能修改。</span><span class="sxs-lookup"><span data-stu-id="82c05-639">Both the <xref:System.Text.Encoding.DecoderFallback%2A> and <xref:System.Text.Encoding.EncoderFallback%2A> properties are read-only and cannot be modified.</span></span> <span data-ttu-id="82c05-640">若要控制从<xref:System.Text.Encoding>派生的类的回退策略，请<xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-640">To control the fallback strategy for a class derived from <xref:System.Text.Encoding>, call the <xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-641"><paramref name="codePage" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-641"><paramref name="codePage" /> is less than zero.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 codePage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Encoding(int codePage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="new System.Text.Encoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="new System.Text.Encoding (codePage, encoderFallback, decoderFallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codePage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codePage"><span data-ttu-id="82c05-642">编码的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-642">The encoding code page identifier.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="82c05-643">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-643">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="82c05-644">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-644">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="82c05-645">使用指定编码器和解码器回退策略初始化对应于指定代码页的 <see cref="T:System.Text.Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-645">Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-646">此构造函数`protected`为; 派生类重写它。</span><span class="sxs-lookup"><span data-stu-id="82c05-646">This constructor is `protected`; derived classes override it.</span></span>  
  
 <span data-ttu-id="82c05-647">从派生类调用此构造函数以控制回退编码和解码策略。</span><span class="sxs-lookup"><span data-stu-id="82c05-647">You call this constructor from a derived class to control the fallback encoding and decoding strategies.</span></span> <span data-ttu-id="82c05-648"><xref:System.Text.Encoding>类构造函数创建只读编码对象，这些对象在创建对象之后不允许编码器或解码器回退设置。</span><span class="sxs-lookup"><span data-stu-id="82c05-648">The <xref:System.Text.Encoding> class constructors create read-only encoding objects that don't allow encoder or decoder fallback to be set after the object is created.</span></span>  
  
 <span data-ttu-id="82c05-649">`encoderFallback`如果或`decoderFallback`为 null，则最佳回退将用作相应的回退策略。</span><span class="sxs-lookup"><span data-stu-id="82c05-649">If either `encoderFallback` or `decoderFallback` is null, best-fit fallback is used as the corresponding fallback strategy.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-650"><paramref name="codePage" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-650"><paramref name="codePage" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ASCII">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding ASCII { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding ASCII" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.ASCII" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ASCII As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ ASCII { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ASCII : System.Text.Encoding" Usage="System.Text.Encoding.ASCII" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-651">获取 ASCII（7 位）字符集的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-651">Gets an encoding for the ASCII (7-bit) character set.</span></span></summary>
        <value><span data-ttu-id="82c05-652">ASCII（7 位）字符集的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-652">An  encoding for the ASCII (7-bit) character set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-653">ASCII 字符限制为128个 Unicode 字符（从 U + 0000 到 U + 007F）。</span><span class="sxs-lookup"><span data-stu-id="82c05-653">ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.</span></span>  
  
 <span data-ttu-id="82c05-654">为应用选择 ASCII 编码时，请考虑以下事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-654">When selecting the ASCII encoding for your app, consider the following:</span></span>  
  
-   <span data-ttu-id="82c05-655">ASCII 编码通常适用于需要 ASCII 的协议。</span><span class="sxs-lookup"><span data-stu-id="82c05-655">The ASCII encoding is usually appropriate for protocols that require ASCII.</span></span>  
  
-   <span data-ttu-id="82c05-656">如果需要8位编码（有时错误地称为 "ASCII"），建议使用 UTF-8 编码，而不是 ASCII 编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-656">If you requires 8-bit encoding (which is sometimes incorrectly referred to as "ASCII"), the UTF-8 encoding is recommended over the ASCII encoding.</span></span> <span data-ttu-id="82c05-657">对于字符 0-7F，结果完全相同，但使用 UTF-8 可通过允许表示所有可表示的 Unicode 字符来避免数据丢失。</span><span class="sxs-lookup"><span data-stu-id="82c05-657">For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable.</span></span> <span data-ttu-id="82c05-658">请注意，ASCII 编码具有可允许恶意使用的第8位歧义，但 UTF-8 编码消除了有关第8位的歧义。</span><span class="sxs-lookup"><span data-stu-id="82c05-658">Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.</span></span>  
  
-   <span data-ttu-id="82c05-659">在 .NET Framework 版本2.0 之前，.NET Framework 将忽略第8位，从而允许欺骗。</span><span class="sxs-lookup"><span data-stu-id="82c05-659">Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit.</span></span> <span data-ttu-id="82c05-660">从 .NET Framework 2.0 开始，在解码过程中，非 ASCII 码位将回退。</span><span class="sxs-lookup"><span data-stu-id="82c05-660">Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.</span></span>  
  
 <span data-ttu-id="82c05-661">此<xref:System.Text.ASCIIEncoding>属性返回的对象可能没有适用于你的应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-661">The <xref:System.Text.ASCIIEncoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span> <span data-ttu-id="82c05-662">它使用替换回退来替换每个不能进行编码的字符串，以及无法使用问号（"？"）字符解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-662">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="82c05-663">相反， <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>您可以调用方法来<xref:System.Text.ASCIIEncoding>实例化<xref:System.Text.EncoderFallbackException>其回退为或的<xref:System.Text.DecoderFallbackException>对象，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-663">Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> method to instantiate an <xref:System.Text.ASCIIEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.ASCII#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.ascii/cs/encoding.ascii2.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.ascii/vb/encoding.ascii2.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="82c05-664">下面的示例演示 ASCII 编码对 ASCII 范围外的字符的影响。</span><span class="sxs-lookup"><span data-stu-id="82c05-664">The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.</span></span>  
  
 [!code-cpp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CPP/ascii.cpp#1)]
 [!code-csharp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CS/ascii.cs#1)]
 [!code-vb[System.Text.Encoding.ASCII Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/VB/ascii.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.ASCIIEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-665">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-665">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BigEndianUnicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding BigEndianUnicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding BigEndianUnicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BigEndianUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BigEndianUnicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ BigEndianUnicode { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BigEndianUnicode : System.Text.Encoding" Usage="System.Text.Encoding.BigEndianUnicode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-666">获取使用 Big Endian 字节顺序的 UTF-16 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-666">Gets an encoding for the UTF-16 format that uses the big endian byte order.</span></span></summary>
        <value><span data-ttu-id="82c05-667">使用 Big Endian 字节顺序的 UTF-16 格式的编码对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-667">An encoding object for the UTF-16 format that uses the big endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-668">此<xref:System.Text.UnicodeEncoding>属性返回的对象可能没有适用于你的应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-668">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="82c05-669">它使用替换回退来替换每个不能进行编码的字符串，以及无法使用问号（"？"）字符解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-669">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="82c05-670">相反<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> ，你可以调用构造函数来实例化一个大的 endian <xref:System.Text.UnicodeEncoding>对象<xref:System.Text.DecoderFallbackException>， <xref:System.Text.EncoderFallbackException>其回退为或，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-670">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a big endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode1.cs#2)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode1.vb#2)]  
  
 <span data-ttu-id="82c05-671">返回<xref:System.Text.UnicodeEncoding>的对象具有<xref:System.Text.Encoding.BodyName%2A>、 <xref:System.Text.Encoding.HeaderName%2A>和<xref:System.Text.Encoding.WebName%2A>属性，这将生成名称 "unicodeFFFE"。</span><span class="sxs-lookup"><span data-stu-id="82c05-671">The returned <xref:System.Text.UnicodeEncoding> object has <xref:System.Text.Encoding.BodyName%2A>, <xref:System.Text.Encoding.HeaderName%2A>, and <xref:System.Text.Encoding.WebName%2A> properties, which yield the name "unicodeFFFE".</span></span> <span data-ttu-id="82c05-672">尽管 UTF-16 大 endian 字节顺序标记是十六进制 FEFF，但却选择了名称 "unicodeFFFE"，因为字节顺序标记在 little endian Windows 计算机上显示为十六进制 FFFE。</span><span class="sxs-lookup"><span data-stu-id="82c05-672">Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name "unicodeFFFE" was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-673">下面的示例使用大字节序字节顺序读取带有 UTF-16 编码的文本文件。</span><span class="sxs-lookup"><span data-stu-id="82c05-673">The following example reads a text file with a UTF-16 encoding using the big endian byte order.</span></span>  
  
 [!code-cpp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CPP/bigendianunicode.cpp#1)]
 [!code-csharp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode.cs#1)]
 [!code-vb[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode.vb#1)]  
  
 <span data-ttu-id="82c05-674">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-674">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-675">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-675">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BodyName">
      <MemberSignature Language="C#" Value="public virtual string BodyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BodyName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.BodyName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BodyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BodyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BodyName : string" Usage="System.Text.Encoding.BodyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-676">在派生类中重写时，获取可与邮件代理正文标记一起使用的当前编码的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-676">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</span></span></summary>
        <value><span data-ttu-id="82c05-677">可与邮件代理正文标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-677">A name for the current <see cref="T:System.Text.Encoding" /> that can be used with mail agent body tags.</span></span>  
  
<span data-ttu-id="82c05-678">或</span><span class="sxs-lookup"><span data-stu-id="82c05-678">-or-</span></span> 
<span data-ttu-id="82c05-679">如果当前 <see cref="T:System.Text.Encoding" /> 无法使用，则为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="82c05-679">An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-680">如果需要主体名称的编码，则应<xref:System.Text.Encoding.GetEncoding%2A> <xref:System.Text.Encoding.BodyName%2A>使用属性调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-680">If you need an encoding for a body name, you should call <xref:System.Text.Encoding.GetEncoding%2A> with the <xref:System.Text.Encoding.BodyName%2A> property.</span></span> <span data-ttu-id="82c05-681">通常，方法从调用中提供的测试编码检索不同的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-681">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="82c05-682">通常，电子邮件应用程序通常只需检索这样一种编码;需要描述编码的其他大多数应用程序应使用其<xref:System.Text.Encoding.WebName%2A>。</span><span class="sxs-lookup"><span data-stu-id="82c05-682">Generally only email applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <xref:System.Text.Encoding.WebName%2A>.</span></span>  
  
 <span data-ttu-id="82c05-683">在某些情况下， <xref:System.Text.Encoding.BodyName%2A>属性的值对应于定义该编码的国际标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-683">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="82c05-684">这并不意味着实现完全符合该标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-684">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-685">下面的示例检索每个编码的不同名称，并显示一个或多个名称不同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-685">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-686">它将<xref:System.Text.Encoding.EncodingName%2A>显示，但不会对其进行比较。</span><span class="sxs-lookup"><span data-stu-id="82c05-686">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="encoding.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-687">当在派生类中重写时，创建当前 <see cref="T:System.Text.Encoding" /> 对象的一个卷影副本。</span><span class="sxs-lookup"><span data-stu-id="82c05-687">When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="82c05-688">当前 <see cref="T:System.Text.Encoding" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="82c05-688">A copy of the current <see cref="T:System.Text.Encoding" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-689">即使原始<xref:System.Text.Encoding>对象是只读的，克隆也是可写的。</span><span class="sxs-lookup"><span data-stu-id="82c05-689">The clone is writable even if the original <xref:System.Text.Encoding> object is read-only.</span></span> <span data-ttu-id="82c05-690">因此，可以修改克隆的属性。</span><span class="sxs-lookup"><span data-stu-id="82c05-690">Therefore, the properties of the clone can be modified.</span></span>  
  
 <span data-ttu-id="82c05-691">对象的浅表副本只是对象的副本。</span><span class="sxs-lookup"><span data-stu-id="82c05-691">A shallow copy of an object is a copy of the object only.</span></span> <span data-ttu-id="82c05-692">如果对象包含对其他对象的引用，则浅表副本不会创建所引用对象的副本。</span><span class="sxs-lookup"><span data-stu-id="82c05-692">If the object contains references to other objects, the shallow copy does not create copies of the referred objects.</span></span> <span data-ttu-id="82c05-693">改为引用原始对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-693">It refers to the original objects instead.</span></span> <span data-ttu-id="82c05-694">与此相反，对象的深层副本将创建对象的副本和该对象直接或间接引用的所有内容的副本。</span><span class="sxs-lookup"><span data-stu-id="82c05-694">In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public virtual int CodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CodePage { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CodePage : int" Usage="System.Text.Encoding.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-695">在派生类中重写时，获取当前 <see cref="T:System.Text.Encoding" /> 的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-695">When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</span></span></summary>
        <value><span data-ttu-id="82c05-696">当前 <see cref="T:System.Text.Encoding" /> 的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-696">The code page identifier of the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-697">下面的示例检索每个编码的不同名称，并显示一个或多个名称不同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-697">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-698">它将<xref:System.Text.Encoding.EncodingName%2A>显示，但不会对其进行比较。</span><span class="sxs-lookup"><span data-stu-id="82c05-698">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
        <altmember cref="P:System.Text.Encoding.WindowsCodePage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-699">将字节数组从一种编码转换为另一种。</span><span class="sxs-lookup"><span data-stu-id="82c05-699">Converts a byte array from one encoding to another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoding * System.Text.Encoding * byte[] -&gt; byte[]" Usage="System.Text.Encoding.Convert (srcEncoding, dstEncoding, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="srcEncoding"><span data-ttu-id="82c05-700"><paramref name="bytes" /> 的编码格式。</span><span class="sxs-lookup"><span data-stu-id="82c05-700">The encoding format of <paramref name="bytes" />.</span></span></param>
        <param name="dstEncoding"><span data-ttu-id="82c05-701">目标编码格式。</span><span class="sxs-lookup"><span data-stu-id="82c05-701">The target encoding format.</span></span></param>
        <param name="bytes"><span data-ttu-id="82c05-702">要转换的字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-702">The bytes to convert.</span></span></param>
        <summary><span data-ttu-id="82c05-703">将整个字节数组从一种编码转换为另一种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-703">Converts an entire byte array from one encoding to another.</span></span></summary>
        <returns><span data-ttu-id="82c05-704"><see cref="T:System.Byte" /> 类型的数组，其中包含将 <paramref name="bytes" /> 从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-704">An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-705">下面的示例将 Unicode 编码的字符串转换为 ASCII 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-705">The following example converts a Unicode-encoded string to an ASCII-encoded string.</span></span> <span data-ttu-id="82c05-706">由于<xref:System.Text.Encoding.ASCII%2A>属性返回的 ascii 编码对象使用替换回退，并且 pi 字符不是 ASCII 字符集的一部分，因此 pi 字符将替换为问号，如示例中的输出所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-706">Because the ASCII encoding object returned by the <xref:System.Text.Encoding.ASCII%2A> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-707"><paramref name="srcEncoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-707"><paramref name="srcEncoding" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-708">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-708">-or-</span></span> 
 <span data-ttu-id="82c05-709"><paramref name="dstEncoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-709"><paramref name="dstEncoding" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-710">或</span><span class="sxs-lookup"><span data-stu-id="82c05-710">-or-</span></span> 
 <span data-ttu-id="82c05-711"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-711"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-712">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-712">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-713">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-713">-and-</span></span> 
 <span data-ttu-id="82c05-714">**srcEncoding.**</span><span class="sxs-lookup"><span data-stu-id="82c05-714">**srcEncoding.**</span></span> <span data-ttu-id="82c05-715">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-715"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-716">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-716">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-717">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-717">-and-</span></span> 
 <span data-ttu-id="82c05-718">**dstEncoding.**</span><span class="sxs-lookup"><span data-stu-id="82c05-718">**dstEncoding.**</span></span> <span data-ttu-id="82c05-719">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-719"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert (srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Convert(System::Text::Encoding ^ srcEncoding, System::Text::Encoding ^ dstEncoding, cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoding * System.Text.Encoding * byte[] * int * int -&gt; byte[]" Usage="System.Text.Encoding.Convert (srcEncoding, dstEncoding, bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcEncoding" Type="System.Text.Encoding" />
        <Parameter Name="dstEncoding" Type="System.Text.Encoding" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcEncoding"><span data-ttu-id="82c05-720">源数组 <paramref name="bytes" /> 的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-720">The encoding of the source array, <paramref name="bytes" />.</span></span></param>
        <param name="dstEncoding"><span data-ttu-id="82c05-721">输出数组的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-721">The encoding of the output array.</span></span></param>
        <param name="bytes"><span data-ttu-id="82c05-722">要转换的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-722">The array of bytes to convert.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-723">要转换的 <paramref name="bytes" /> 中第一个元素的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-723">The index of the first element of <paramref name="bytes" /> to convert.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-724">要转换的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-724">The number of bytes to convert.</span></span></param>
        <summary><span data-ttu-id="82c05-725">将字节数组内某个范围的字节从一种编码转换为另一种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-725">Converts a range of bytes in a byte array from one encoding to another.</span></span></summary>
        <returns><span data-ttu-id="82c05-726">一个 <see cref="T:System.Byte" /> 类型的数组，其中包含将 <paramref name="bytes" /> 中某个范围的字节从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-726">An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-727"><paramref name="srcEncoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-727"><paramref name="srcEncoding" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-728">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-728">-or-</span></span> 
 <span data-ttu-id="82c05-729"><paramref name="dstEncoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-729"><paramref name="dstEncoding" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-730">或</span><span class="sxs-lookup"><span data-stu-id="82c05-730">-or-</span></span> 
 <span data-ttu-id="82c05-731"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-731"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-732"><paramref name="index" /> 和 <paramref name="count" /> 不指定字节数组中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-732"><paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-733">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-733">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-734">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-734">-and-</span></span> 
 <span data-ttu-id="82c05-735">**srcEncoding.**</span><span class="sxs-lookup"><span data-stu-id="82c05-735">**srcEncoding.**</span></span> <span data-ttu-id="82c05-736">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-736"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-737">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-737">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-738">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-738">-and-</span></span> 
 <span data-ttu-id="82c05-739">**dstEncoding.**</span><span class="sxs-lookup"><span data-stu-id="82c05-739">**dstEncoding.**</span></span> <span data-ttu-id="82c05-740">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-740"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DecoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback DecoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback DecoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.DecoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property DecoderFallback As DecoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::DecoderFallback ^ DecoderFallback { System::Text::DecoderFallback ^ get(); void set(System::Text::DecoderFallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DecoderFallback : System.Text.DecoderFallback with get, set" Usage="System.Text.Encoding.DecoderFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-741">获取或设置当前 <see cref="T:System.Text.DecoderFallback" /> 对象的 <see cref="T:System.Text.Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-741">Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <value><span data-ttu-id="82c05-742">当前 <see cref="T:System.Text.Encoding" /> 对象的解码器回退对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-742">The decoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-743"><xref:System.Text.DecoderFallback>对象表示一个错误处理程序，当无法将编码的字节序列解码为一个字符时，将调用该处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-743">The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character.</span></span> <span data-ttu-id="82c05-744">支持以下处理程序类型之一：</span><span class="sxs-lookup"><span data-stu-id="82c05-744">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="82c05-745">最佳回退处理程序，它将不能解码的字节替换为某些合适的替换字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-745">A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="82c05-746">替换回退处理程序，它将不能解码的字节替换为任意替换字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-746">A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character.</span></span> <span data-ttu-id="82c05-747">.Net 包含一个替换回退处理程序<xref:System.Text.DecoderFallback>，默认情况下，它会替换无法使用问号（"？"）字符解码的字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-747">.NET includes one replacement fallback handler, <xref:System.Text.DecoderFallback>, which by default replaces bytes that cannot be decoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="82c05-748">异常回退处理程序，如果无法对字节进行解码，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-748">An exception fallback handler, which throws an exception when bytes cannot be decoded.</span></span> <span data-ttu-id="82c05-749">.Net 包含一个异常回退处理程序<xref:System.Text.DecoderExceptionFallback>，该处理程序<xref:System.Text.DecoderFallbackException>在无法解码时将引发。</span><span class="sxs-lookup"><span data-stu-id="82c05-749">.NET includes one exception fallback handler, <xref:System.Text.DecoderExceptionFallback>, which throws a <xref:System.Text.DecoderFallbackException> when bytes cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-750">设置操作中的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-750">The value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="82c05-751">由于当前 <see cref="T:System.Text.Encoding" /> 对象为只读，所以无法在设置操作中赋值。</span><span class="sxs-lookup"><span data-stu-id="82c05-751">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span></span></exception>
        <altmember cref="T:System.Text.DecoderFallback" />
        <altmember cref="T:System.Text.DecoderFallbackBuffer" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-752">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-752">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Default" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Default { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Text.Encoding" Usage="System.Text.Encoding.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-753">获取此 .NET 实现的默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-753">Gets the default encoding for this .NET implementation.</span></span></summary>
        <value><span data-ttu-id="82c05-754">此 .NET 实现的默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-754">The default encoding for this .NET implementation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="82c05-755">不同的计算机可以使用不同的编码作为默认编码，并且在一台计算机上可以更改默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-755">Different computers can use different encodings as the default, and the default encoding can change on a single computer.</span></span> <span data-ttu-id="82c05-756">如果在同一台<xref:System.Text.Encoding.Default%2A>计算机上使用编码对在计算机之间传输的数据进行编码和解码，或在同一台计算机上的不同时间进行检索，则可能会错误地转换该数据。</span><span class="sxs-lookup"><span data-stu-id="82c05-756">If you use the <xref:System.Text.Encoding.Default%2A> encoding to encode and decode data streamed between computers or retrieved at different times on the same computer, it may translate that data incorrectly.</span></span> <span data-ttu-id="82c05-757">此外， <xref:System.Text.Encoding.Default%2A>属性返回的编码使用最佳回退将不支持的字符映射到代码页支持的字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-757">In addition, the encoding returned by the <xref:System.Text.Encoding.Default%2A> property uses best-fit fallback to map unsupported characters to characters supported by the code page.</span></span> <span data-ttu-id="82c05-758">由于这些原因，不建议使用默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-758">For these reasons, using the default encoding is not recommended.</span></span> <span data-ttu-id="82c05-759">若要确保编码的字节解码正确，应使用 Unicode 编码，例如<xref:System.Text.UTF8Encoding>或。 <xref:System.Text.UnicodeEncoding></span><span class="sxs-lookup"><span data-stu-id="82c05-759">To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <xref:System.Text.UTF8Encoding> or <xref:System.Text.UnicodeEncoding>.</span></span> <span data-ttu-id="82c05-760">你还可以使用较高级别的协议来确保用于编码和解码的格式相同。</span><span class="sxs-lookup"><span data-stu-id="82c05-760">You could also use a higher-level protocol to ensure that the same format is used for encoding and decoding.</span></span>  

### <a name="the-default-property-in-the-net-framework"></a><span data-ttu-id="82c05-761">.NET Framework 中的默认属性</span><span class="sxs-lookup"><span data-stu-id="82c05-761">The Default property in the .NET Framework</span></span>

<span data-ttu-id="82c05-762">在 Windows 桌面上的 .NET Framework 中， <xref:System.Text.Encoding.Default%2A>属性始终获取系统的活动代码页并<xref:System.Text.Encoding>创建与其对应的对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-762">In the .NET Framework on the Windows desktop, the <xref:System.Text.Encoding.Default%2A> property always gets the system's active code page and creates a <xref:System.Text.Encoding> object that corresponds to it.</span></span> <span data-ttu-id="82c05-763">活动代码页可能是 ANSI 代码页，其中包括 ASCII 字符集以及不同于代码页的其他字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-763">The active code page may be an ANSI code page, which includes the ASCII character set along with additional characters that vary by code page.</span></span> <span data-ttu-id="82c05-764">由于所有<xref:System.Text.Encoding.Default%2A>基于 ANSI 代码页的编码都将丢失数据，因此<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>请考虑改用编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-764">Because all <xref:System.Text.Encoding.Default%2A> encodings based on ANSI code pages lose data, consider using the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> encoding instead.</span></span> <span data-ttu-id="82c05-765">在 U + 00 到 U + 7F 范围内，UTF-8 通常是相同的，但可以在不丢失的情况下在 ASCII 范围外对字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-765">UTF-8 is often identical in the U+00 to U+7F range, but can encode characters outside the ASCII range without loss.</span></span>

## <a name="the-default-property-on-net-core"></a><span data-ttu-id="82c05-766">.NET Core 上的默认属性</span><span class="sxs-lookup"><span data-stu-id="82c05-766">The Default property on .NET Core</span></span>

<span data-ttu-id="82c05-767">在 .net Core 中， <xref:System.Text.Encoding.Default%2A>属性始终<xref:System.Text.UTF8Encoding>返回。</span><span class="sxs-lookup"><span data-stu-id="82c05-767">On .NET Core, the <xref:System.Text.Encoding.Default%2A> property always returns the <xref:System.Text.UTF8Encoding>.</span></span> <span data-ttu-id="82c05-768">在运行 .NET Core 应用程序的所有操作系统（Windows、Linux 和 Max OS X）上都支持 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="82c05-768">UTF-8 is supported on all the operating systems (Windows, Linux, and Max OS X) on which .NET Core applications run.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderFallback">
      <MemberSignature Language="C#" Value="public System.Text.EncoderFallback EncoderFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.EncoderFallback EncoderFallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncoderFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EncoderFallback As EncoderFallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::EncoderFallback ^ EncoderFallback { System::Text::EncoderFallback ^ get(); void set(System::Text::EncoderFallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncoderFallback : System.Text.EncoderFallback with get, set" Usage="System.Text.Encoding.EncoderFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.EncoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-769">获取或设置当前 <see cref="T:System.Text.EncoderFallback" /> 对象的 <see cref="T:System.Text.Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-769">Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <value><span data-ttu-id="82c05-770">当前 <see cref="T:System.Text.Encoding" /> 对象的编码器回退对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-770">The encoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-771"><xref:System.Text.EncoderFallback>对象表示一个错误处理程序，当不能将字符转换为编码的字节序列时，将调用该处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-771">The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</span></span> <span data-ttu-id="82c05-772">支持以下处理程序类型之一：</span><span class="sxs-lookup"><span data-stu-id="82c05-772">Any one of the following handler types is supported:</span></span>  
  
-   <span data-ttu-id="82c05-773">最佳回退处理程序，该处理程序将替换无法使用某些合适的替换字符编码的字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-773">A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.</span></span>  
  
-   <span data-ttu-id="82c05-774">替换回退处理程序，它将替换不能用一些任意替换字符编码的字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-774">A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character.</span></span> <span data-ttu-id="82c05-775">.Net 包含一个替换回退处理程序<xref:System.Text.EncoderFallback>，默认情况下，此处理程序将替换不能用问号（"？"）字符编码的字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-775">.NET includes one replacement fallback handler, <xref:System.Text.EncoderFallback>, which by default replaces characters that cannot be encoded with a question mark ("?") character.</span></span>  
  
-   <span data-ttu-id="82c05-776">异常回退处理程序，当无法对字符进行编码时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-776">An exception fallback handler, which throws an exception when characters cannot be encoded.</span></span> <span data-ttu-id="82c05-777">.Net 包含一个异常回退处理程序<xref:System.Text.EncoderExceptionFallback>，该处理程序<xref:System.Text.EncoderFallbackException>在无法解码字符时引发。</span><span class="sxs-lookup"><span data-stu-id="82c05-777">.NET includes one exception fallback handler, <xref:System.Text.EncoderExceptionFallback>, which throws an <xref:System.Text.EncoderFallbackException> when characters cannot be decoded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-778">设置操作中的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-778">The value in a set operation is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="82c05-779">由于当前 <see cref="T:System.Text.Encoding" /> 对象为只读，所以无法在设置操作中赋值。</span><span class="sxs-lookup"><span data-stu-id="82c05-779">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</span></span></exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallbackBuffer" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-780">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-780">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EncodingName">
      <MemberSignature Language="C#" Value="public virtual string EncodingName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncodingName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.EncodingName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EncodingName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EncodingName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EncodingName : string" Usage="System.Text.Encoding.EncodingName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-781">在派生类中重写时，获取当前编码的用户可读说明。</span><span class="sxs-lookup"><span data-stu-id="82c05-781">When overridden in a derived class, gets the human-readable description of the current encoding.</span></span></summary>
        <value><span data-ttu-id="82c05-782">当前 <see cref="T:System.Text.Encoding" /> 的用户可读说明。</span><span class="sxs-lookup"><span data-stu-id="82c05-782">The human-readable description of the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-783"><xref:System.Text.Encoding.EncodingName%2A>属性用于显示。</span><span class="sxs-lookup"><span data-stu-id="82c05-783">The <xref:System.Text.Encoding.EncodingName%2A> property is intended for display.</span></span> <span data-ttu-id="82c05-784">若要查找可传递给<xref:System.Text.Encoding.GetEncoding%2A>方法的名称，请<xref:System.Text.Encoding.WebName%2A>使用属性。</span><span class="sxs-lookup"><span data-stu-id="82c05-784">To find a name that can be passed to the <xref:System.Text.Encoding.GetEncoding%2A> method, use the <xref:System.Text.Encoding.WebName%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-785">下面的示例检索每个编码的不同名称，并显示一个或多个名称不同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-785">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-786">它将<xref:System.Text.Encoding.EncodingName%2A>显示，但不会对其进行比较。</span><span class="sxs-lookup"><span data-stu-id="82c05-786">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.DisplayName" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="82c05-787">与当前实例进行比较的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-787">The <see cref="T:System.Object" /> to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="82c05-788">确定指定的 <see cref="T:System.Object" /> 是否等同于当前实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-788">Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</span></span></summary>
        <returns><span data-ttu-id="82c05-789">如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的一个实例并且等于当前实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-789"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-790">如果两个<xref:System.Text.Encoding>实例对应于同一个代码页并且它们`EncoderFallback`和`DecoderFallback`对象相等，则这两个实例被视为相等。</span><span class="sxs-lookup"><span data-stu-id="82c05-790">Two instances of <xref:System.Text.Encoding> are considered equal if they correspond to the same code page and their `EncoderFallback` and `DecoderFallback` objects are equal.</span></span> <span data-ttu-id="82c05-791">具体而言，派生代码页的代码页都为0，并且它们的回退通常`null`为`Nothing` （在 Visual Basic .net 中）。</span><span class="sxs-lookup"><span data-stu-id="82c05-791">In particular, derived code pages all have a code page of 0 and their fallbacks are normally `null` (`Nothing` in Visual Basic .NET).</span></span> <span data-ttu-id="82c05-792">因此，它们被视为彼此相等。</span><span class="sxs-lookup"><span data-stu-id="82c05-792">Thus they are all considered equal to one another.</span></span> <span data-ttu-id="82c05-793">一种结果是， <xref:System.Text.Encoding.Equals%2A>当使用来填充哈希表时，所有派生的编码都相等并属于同一哈希表槽。</span><span class="sxs-lookup"><span data-stu-id="82c05-793">One consequence is that when <xref:System.Text.Encoding.Equals%2A> is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-794">下面的示例获取相同编码的两个实例（一个按代码页，另一个按名称），并检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="82c05-794">The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Text.Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-795">在派生类中重写时，计算对一组字符进行编码所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-795">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : char[] -&gt; int&#xA;override this.GetByteCount : char[] -&gt; int" Usage="encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-796">包含要编码的字符的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-796">The character array containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-797">在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-797">When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</span></span></summary>
        <returns><span data-ttu-id="82c05-798">对指定字符数组中的所有字符进行编码后产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-798">The number of bytes produced by encoding all the characters in the specified character array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-799">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，请<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-799">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-800">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-800">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-801">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-801">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-802">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-802">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-803">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-803">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-804">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-804">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-805">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-805">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-806">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-806">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-807">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-807">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="82c05-808">如果你的应用程序处理字符串输入，则应使用该<xref:System.Text.Encoding.GetBytes%2A>方法的字符串版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-808">If your app handles string inputs, you should use the string versions of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="82c05-809">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-809">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-810">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-810">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-811">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-811">If your app must convert a large amount of data, you should reuse the output buffer.</span></span> <span data-ttu-id="82c05-812">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-812">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-813">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-813">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-814">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-814">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-815">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-815">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-816">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-816">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-817"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-817"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-818">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-818">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-819">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-819">-and-</span></span> 
 <span data-ttu-id="82c05-820">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-820"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int&#xA;override this.GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : string -&gt; int&#xA;override this.GetByteCount : string -&gt; int" Usage="encoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="82c05-821">包含要编码的字符集的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-821">The string containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-822">在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-822">When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</span></span></summary>
        <returns><span data-ttu-id="82c05-823">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-823">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-824">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，请<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-824">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-825">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-825">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-826">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-826">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-827">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-827">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-828">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-828">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-829">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-829">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-830">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-830">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-831">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-831">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-832">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-832">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="82c05-833">如果你的应用程序处理字符串输入，则建议<xref:System.Text.Encoding.GetBytes%2A>使用的字符串版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-833">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="82c05-834">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-834">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-835">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-835">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-836">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-836">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-837">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-837">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-838">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-838">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-839">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-839">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-840">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-840">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-841">下面的示例确定了对字符串中的字符串或范围进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-841">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-842"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-842"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-843">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-843">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-844">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-844">-and-</span></span> 
 <span data-ttu-id="82c05-845">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-845"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public virtual int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : nativeptr&lt;char&gt; * int -&gt; int&#xA;override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-846">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-846">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-847">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-847">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-848">在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-848">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="82c05-849">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-849">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-850">若要计算存储生成的字节<xref:System.Text.Encoding.GetBytes%2A>所需的确切数组大小，应<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-850">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-851">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-851">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-852">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-852">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-853">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="82c05-853">The <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-854">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-854">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-855">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-855">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-856">下面是使用这些方法时的一些注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-856">The following are some considerations for using these methods:</span></span>  
  
-   <span data-ttu-id="82c05-857">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-857">Your app may need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-858">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-858">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="82c05-859">如果你的应用程序处理字符串输入，则应使用该<xref:System.Text.Encoding.GetBytes%2A>方法的字符串版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-859">If your app handles string inputs, you should use the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="82c05-860">的<xref:System.Text.Encoding.GetBytes%2A> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-860">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%2A> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-861">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-861">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-862">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-862">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-863">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-863">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-864">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-864">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-865">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-865">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-866">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-866">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-867"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-867"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-868"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-868"><paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-869">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-869">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-870">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-870">-and-</span></span> 
 <span data-ttu-id="82c05-871">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-871"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="82c05-872">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="82c05-872">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="82c05-873">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="82c05-873">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetByteCount : char[] * int * int -&gt; int" Usage="encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-874">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-874">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-875">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-875">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-876">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-876">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-877">在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-877">When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="82c05-878">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-878">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-879">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，请<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-879">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-880">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-880">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-881">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-881">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-882">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-882">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-883">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-883">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-884">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-884">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-885">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-885">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-886">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-886">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-887">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-887">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span>  
  
-   <span data-ttu-id="82c05-888">如果你的应用程序处理字符串输入，则建议<xref:System.Text.Encoding.GetBytes%2A>使用的字符串版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-888">If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.</span></span>  
  
-   <span data-ttu-id="82c05-889">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-889">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-890">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-890">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-891">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-891">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-892">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-892">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-893">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-893">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-894">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-894">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-895">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-895">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-896">下面的示例确定对字符数组中的三个字符进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-896">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-897"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-897"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-898"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-898"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-899">或</span><span class="sxs-lookup"><span data-stu-id="82c05-899">-or-</span></span> 
 <span data-ttu-id="82c05-900"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-900"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-901">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-901">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-902">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-902">-and-</span></span> 
 <span data-ttu-id="82c05-903">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-903"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public int GetByteCount (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetByteCount(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteCount (s As String, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetByteCount(System::String ^ s, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetByteCount : string * int * int -&gt; int" Usage="encoding.GetByteCount (s, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-904">在派生类中重写时，将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-904">When overridden in a derived class, encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] -&gt; byte[]&#xA;override this.GetBytes : char[] -&gt; byte[]" Usage="encoding.GetBytes chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-905">包含要编码的字符的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-905">The character array containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-906">在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-906">When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="82c05-907">一个字节数组，包含对指定的字符集进行编码的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-907">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-908">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-908">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-909">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-909">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-910">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-910">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-911">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-911">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-912">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-912">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-913">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-913">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-914">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-914">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-915">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-915">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-916"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-916">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-917"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-917"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-918">如果你的应用程序处理字符串输入，则应调用该<xref:System.Text.Encoding.GetBytes%2A>方法的字符串版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-918">If your app handles string inputs, you should call the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.</span></span>  
  
-   <span data-ttu-id="82c05-919">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-919">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-920">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-920">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-921">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-921">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-922">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-922">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-923">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-923">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-924">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-924">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-925">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-925">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-926">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-926">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-927"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-927"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-928">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-928">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-929">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-929">-and-</span></span> 
 <span data-ttu-id="82c05-930">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-930"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : string -&gt; byte[]&#xA;override this.GetBytes : string -&gt; byte[]" Usage="encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="82c05-931">包含要编码的字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-931">The string containing the characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-932">在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-932">When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="82c05-933">一个字节数组，包含对指定的字符集进行编码的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-933">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-934">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-934">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-935">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-935">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-936">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-936">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-937">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-937">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-938">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-938">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-939">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-939">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-940">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-940">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-941">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-941">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-942"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-942">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-943"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-943"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-944">如果你的应用程序处理字符串输入，则应使用的字符串<xref:System.Text.Encoding.GetBytes%2A>版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-944">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="82c05-945">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-945">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-946">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-946">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-947">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-947">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-948">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-948">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-949">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-949">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-950">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-950">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-951">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-951">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-952">下面的示例确定了对字符串中的字符串或范围进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-952">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-953"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-953"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-954">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-954">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-955">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-955">-and-</span></span> 
 <span data-ttu-id="82c05-956">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-956"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int&#xA;override this.GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int" Usage="encoding.GetBytes (chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] GetBytes (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetBytes(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (chars As Char(), index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetBytes(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] * int * int -&gt; byte[]&#xA;override this.GetBytes : char[] * int * int -&gt; byte[]" Usage="encoding.GetBytes (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-957">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-957">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-958">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-958">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-959">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-959">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-960">在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-960">When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="82c05-961">一个字节数组，包含对指定的字符集进行编码的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-961">A byte array containing the results of encoding the specified set of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-962">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-962">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-963">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-963">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-964">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-964">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-965">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-965">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-966">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-966">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-967">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-967">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-968">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-968">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-969">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-969">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-970"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-970">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-971"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-971"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-972">如果你的应用程序处理字符串输入，则应使用的字符串<xref:System.Text.Encoding.GetBytes%2A>版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-972">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="82c05-973">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-973">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-974">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-974">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-975">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-975">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-976">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-976">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-977">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-977">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-978">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-978">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-979">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-979">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-980">下面的示例确定对字符数组中的三个字符进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-980">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-981"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-981"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-982"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-982"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-983">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-983">-or-</span></span> 
 <span data-ttu-id="82c05-984"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-984"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-985">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-985">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-986">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-986">-and-</span></span> 
 <span data-ttu-id="82c05-987">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-987"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes (string s, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes(string s, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes (s As String, index As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetBytes : string * int * int -&gt; byte[]" Usage="encoding.GetBytes (s, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="index">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int&#xA;override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-988">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-988">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="82c05-989">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-989">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="82c05-990">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="82c05-990">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="82c05-991">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-991">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="82c05-992">在派生类中重写时，将一组字符（从指定的字符指针开始）编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-992">When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="82c05-993">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-993">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-994">若要计算存储生成的字节<xref:System.Text.Encoding.GetBytes%2A>所需的确切数组大小，请<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-994">To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-995">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-995">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-996">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-996">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-997">如果要转换的数据仅在 （如从流中读取的数据） 的顺序块中可用，或者如果数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="82c05-997">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-998">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-998">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-999">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-999">The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1000">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1000">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-1001">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1001">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1002">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1002">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-1003">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1003">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-1004">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-1004">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-1005"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-1005">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-1006"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1006"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-1007">如果你的应用程序处理字符串输入，则应使用的字符串<xref:System.Text.Encoding.GetBytes%2A>版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1007">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="82c05-1008">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1008">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-1009">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1009">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1010">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1010">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1011">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1011">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1012">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1012">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-1013">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1013">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1014">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1014">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1015"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1015"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-1016">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1016">-or-</span></span> 
 <span data-ttu-id="82c05-1017"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1017"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1018"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1018"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1019"><paramref name="byteCount" /> 少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1019"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-1020">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1020">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1021">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1021">-and-</span></span> 
 <span data-ttu-id="82c05-1022">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1022"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="82c05-1023">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="82c05-1023">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="82c05-1024">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="82c05-1024">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="82c05-1025">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1025">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="82c05-1026">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1026">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="82c05-1027">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-1027">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="82c05-1028">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1028">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="82c05-1029">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="82c05-1029">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="82c05-1030">在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1030">When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="82c05-1031">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1031">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1032">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，应<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1032">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1033">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1033">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1034">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1034">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1035">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1035">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1036">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1036">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-1037">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1037">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1038">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1038">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-1039">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1039">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1040">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1040">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-1041">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1041">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-1042">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-1042">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-1043"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-1043">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-1044"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1044"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-1045">如果你的应用程序处理字符串输入，则应使用的字符串<xref:System.Text.Encoding.GetBytes%2A>版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1045">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="82c05-1046">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1046">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-1047">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1047">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1048">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1048">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1049">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1049">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1050">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1050">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-1051">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1051">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1052">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1052">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1053">下面的示例确定对字符数组中的三个字符进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1053">The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1054"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1054"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-1055">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1055">-or-</span></span> 
 <span data-ttu-id="82c05-1056"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1056"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1057"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1057"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1058">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1058">-or-</span></span> 
 <span data-ttu-id="82c05-1059"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1059"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="82c05-1060">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1060">-or-</span></span> 
 <span data-ttu-id="82c05-1061"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1061"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1062"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1062"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-1063">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1063">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1064">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1064">-and-</span></span> 
 <span data-ttu-id="82c05-1065">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1065"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : string * int * int * byte[] * int -&gt; int&#xA;override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="82c05-1066">包含要编码的字符集的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1066">The string containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="82c05-1067">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1067">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="82c05-1068">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-1068">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="82c05-1069">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1069">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="82c05-1070">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="82c05-1070">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="82c05-1071">在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1071">When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="82c05-1072">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1072">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1073">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，应<xref:System.Text.Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1073">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1074">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1074">To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1075">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1075">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1076">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1076">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1077">方法确定导致对一组 Unicode 字符进行编码的字节数， <xref:System.Text.Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1077">The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding.</span></span> <span data-ttu-id="82c05-1078">方法需要离散转换，这<xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个转换。 <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1078">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method, which handles multiple conversions on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1079">支持和<xref:System.Text.Encoding.GetByteCount%2A> <xref:System.Text.Encoding.GetBytes%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1079">Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported.</span></span> <span data-ttu-id="82c05-1080">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1080">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1081">您的应用程序可能需要将许多输入字符编码为代码页，并使用多个调用处理这些字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1081">Your app might need to encode many input characters to a code page and process the characters using multiple calls.</span></span> <span data-ttu-id="82c05-1082">在这种情况下，您可能需要维护两次调用之间的状态，同时考虑所使用的<xref:System.Text.Encoder>对象保留的状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1082">In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.</span></span> <span data-ttu-id="82c05-1083">（例如，包含代理项对的字符序列可能以高代理项结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-1083">(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</span></span> <span data-ttu-id="82c05-1084"><xref:System.Text.Encoder>将记住高代理项，以便可以在以下调用开始时将其与低代理项组合在一起。</span><span class="sxs-lookup"><span data-stu-id="82c05-1084">The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</span></span> <span data-ttu-id="82c05-1085"><xref:System.Text.Encoding>无法维护状态，因此字符将发送到<xref:System.Text.EncoderFallback>。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1085"><xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)</span></span>  
  
-   <span data-ttu-id="82c05-1086">如果你的应用程序处理字符串输入，则应使用的字符串<xref:System.Text.Encoding.GetBytes%2A>版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1086">If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.</span></span>  
  
-   <span data-ttu-id="82c05-1087">的<xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> Unicode 字符缓冲区版本允许一些快速的技巧，尤其是使用对象的<xref:System.Text.Encoder>多个调用或插入现有缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1087">The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers.</span></span> <span data-ttu-id="82c05-1088">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1088">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1089">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1089">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1090">在这种情况下<xref:System.Text.Encoding.GetBytes%2A> ，支持字节数组的版本是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1090">In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1091">请考虑使用<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetByteCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1091">Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="82c05-1092">转换方法可转换尽可能多的数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1092">The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1093">对于流的连续编码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1093">For continuous encoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1094">下面的示例确定了对字符串中的字符串或范围进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1094">The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1095"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1095"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-1096">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1096">-or-</span></span> 
 <span data-ttu-id="82c05-1097"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1097"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1098"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1098"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1099">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1099">-or-</span></span> 
 <span data-ttu-id="82c05-1100"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1100"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="82c05-1101">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1101">-or-</span></span> 
 <span data-ttu-id="82c05-1102"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1102"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1103"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1103"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-1104">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1104">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1105">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1105">-and-</span></span> 
 <span data-ttu-id="82c05-1106">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1106"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-1107">在派生类中重写时，计算对字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1107">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] -&gt; int&#xA;override this.GetCharCount : byte[] -&gt; int" Usage="encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1108">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1108">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1109">在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1109">When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="82c05-1110">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1110">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1111">若要计算存储所生成的字符<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1111">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method.</span></span> <span data-ttu-id="82c05-1112">若要计算最大数组大小，应使用<xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1112">To calculate the maximum array size, you should use the <xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29> method.</span></span> <span data-ttu-id="82c05-1113">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29></span><span class="sxs-lookup"><span data-stu-id="82c05-1113">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1114">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29></span><span class="sxs-lookup"><span data-stu-id="82c05-1114">The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method determines how many characters result in decoding a sequence of bytes, and the  <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1115">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1115">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1116">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1116">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1117">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1117">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1118">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1118">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1119">在这种情况下，可能需要在调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1119">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="82c05-1120">如果你的应用程序处理字符串输出，则应<xref:System.Text.Encoding.GetString%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1120">If your app handles string outputs, you should use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="82c05-1121">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1121">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1122">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1122">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1123">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1123">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1124">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1124">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1125">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1125">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1126">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1126">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1127">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1127">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1128">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1128">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1129">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1129">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1130"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1130"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1131">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1131">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1132">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1132">-and-</span></span> 
 <span data-ttu-id="82c05-1133">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1133"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int&#xA;override this.GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int&#xA;override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1134">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-1134">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-1135">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1135">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1136">在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1136">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="82c05-1137">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1137">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1138">若要计算存储所生成的<xref:System.Text.Encoding.GetChars%2A>字符所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1138">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1139">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1139">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1140">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1140">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1141">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1141">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1142">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1142">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1143">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1143">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1144">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1144">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1145">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1145">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1146">在这种情况下，可能需要在调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1146">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="82c05-1147">如果你的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1147">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="82c05-1148">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1148">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1149">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1149">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1150">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1150">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1151">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1151">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1152">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1152">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1153">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1153">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1154">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1154">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1155">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1155">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1156"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1156"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1157"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1157"><paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1158">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1158">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1159">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1159">-and-</span></span> 
 <span data-ttu-id="82c05-1160">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1160"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="82c05-1161">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="82c05-1161">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="82c05-1162">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="82c05-1162">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetCharCount : byte[] * int * int -&gt; int" Usage="encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1163">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1163">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-1164">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1164">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-1165">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1165">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1166">在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1166">When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="82c05-1167">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1167">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1168">若要计算存储所生成的字符<xref:System.Text.Encoding.GetChars%2A>所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1168">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1169">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1169">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1170">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1170">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1171">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1171">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1172">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1172">The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1173">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1173">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1174">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1174">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1175">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1175">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1176">在这种情况下，可能需要在调用之间维护状态。</span><span class="sxs-lookup"><span data-stu-id="82c05-1176">In this case, you probably need to maintain state between calls.</span></span>  
  
-   <span data-ttu-id="82c05-1177">如果你的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1177">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="82c05-1178">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1178">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1179">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1179">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1180">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1180">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1181">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1181">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1182">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1182">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1183">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1183">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1184">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1184">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1185">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1185">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1186">下面的示例将字符串从一种编码转换为另一种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1186">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="82c05-1187">下面的示例将字符串编码为一个字节数组，然后将一系列字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1187">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1188"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1188"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1189"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1189"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1190">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1190">-or-</span></span> 
 <span data-ttu-id="82c05-1191"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1191"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1192">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1192">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1193">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1193">-and-</span></span> 
 <span data-ttu-id="82c05-1194">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1194"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.Encoding.GetChars" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-1195">在派生类中重写时，将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1195">When overridden in a derived class, decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte()) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] -&gt; char[]&#xA;override this.GetChars : byte[] -&gt; char[]" Usage="encoding.GetChars bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1196">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1196">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1197">在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1197">When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</span></span></summary>
        <returns><span data-ttu-id="82c05-1198">一个字节数组，包含对指定的字节序列进行解码的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-1198">A character array containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1199"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>从输入字节序列中获取字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1199"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="82c05-1200"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> ，因为<xref:System.Text.Encoding>需要离散转换，而<xref:System.Text.Decoder>为单个输入流上的多个传递设计。</span><span class="sxs-lookup"><span data-stu-id="82c05-1200"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1201">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1201">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1202">**注意**此方法用于对 Unicode 字符进行操作，而不是针对任意二进制数据（如字节数组）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1202">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="82c05-1203">如果需要将任意二进制数据编码为文本，应使用诸如 uuencode 这样的协议，该协议是由等方法<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>实现的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1203">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1204">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1204">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1205">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1205">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1206">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1206">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1207">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1207">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1208">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1208">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1209">在这种情况下，您可能需要维护两次调用之间的状态，因为在分批处理时，字节序列可能会中断。</span><span class="sxs-lookup"><span data-stu-id="82c05-1209">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="82c05-1210">（例如，ISO-2022 移位序列的一部分可能结束一个<xref:System.Text.Encoding.GetChars%2A>调用并在下一次<xref:System.Text.Encoding.GetChars%2A>调用开始时继续。</span><span class="sxs-lookup"><span data-stu-id="82c05-1210">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="82c05-1211"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>将为那些不完整的序列调用回退， <xref:System.Text.Decoder>但会记住这些序列的后续调用。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1211"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="82c05-1212">如果你的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1212">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="82c05-1213">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1213">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1214">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1214">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1215">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1215">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1216">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1216">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1217">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1217">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1218">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1218">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1219">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1219">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1220">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1220">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1221">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1221">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1222"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1222"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1223">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1223">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1224">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1224">-and-</span></span> 
 <span data-ttu-id="82c05-1225">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1225"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int&#xA;override this.GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int" Usage="encoding.GetChars (bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual char[] GetChars (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetChars(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChars (bytes As Byte(), index As Integer, count As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int -&gt; char[]&#xA;override this.GetChars : byte[] * int * int -&gt; char[]" Usage="encoding.GetChars (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1226">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1226">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-1227">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1227">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-1228">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1228">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1229">在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1229">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</span></span></summary>
        <returns><span data-ttu-id="82c05-1230">一个字节数组，包含对指定的字节序列进行解码的结果。</span><span class="sxs-lookup"><span data-stu-id="82c05-1230">A character array containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1231"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>从输入字节序列中获取字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1231"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="82c05-1232"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> ，因为<xref:System.Text.Encoding>需要离散转换，而<xref:System.Text.Decoder>为单个输入流上的多个传递设计。</span><span class="sxs-lookup"><span data-stu-id="82c05-1232"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1233">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1233">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1234">**注意**此方法用于对 Unicode 字符进行操作，而不是针对任意二进制数据（如字节数组）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1234">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="82c05-1235">如果需要将任意二进制数据编码为文本，应使用诸如 uuencode 这样的协议，该协议是由等方法<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>实现的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1235">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1236">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1236">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1237">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1237">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1238">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1238">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1239">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1239">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1240">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1240">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1241">在这种情况下，您可能需要维护两次调用之间的状态，因为在分批处理时，字节序列可能会中断。</span><span class="sxs-lookup"><span data-stu-id="82c05-1241">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="82c05-1242">（例如，ISO-2022 移位序列的一部分可能结束一个<xref:System.Text.Encoding.GetChars%2A>调用并在下一次<xref:System.Text.Encoding.GetChars%2A>调用开始时继续。</span><span class="sxs-lookup"><span data-stu-id="82c05-1242">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="82c05-1243"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>将为那些不完整的序列调用回退， <xref:System.Text.Decoder>但会记住这些序列的后续调用。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1243"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="82c05-1244">如果你的应用程序处理字符串输出，则建议使用<xref:System.Text.Encoding.GetString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1244">If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method.</span></span> <span data-ttu-id="82c05-1245">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1245">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1246">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1246">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1247">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1247">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1248">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1248">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1249">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1249">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1250">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1250">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1251">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1251">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1252">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1252">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1253">下面的示例将字符串编码为一个字节数组，然后将一系列字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1253">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1254"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1254"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1255"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1255"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1256">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1256">-or-</span></span> 
 <span data-ttu-id="82c05-1257"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1257"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1258">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1258">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1259">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1259">-and-</span></span> 
 <span data-ttu-id="82c05-1260">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1260"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int&#xA;override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1261">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-1261">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="82c05-1262">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1262">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="82c05-1263">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="82c05-1263">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="82c05-1264">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1264">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="82c05-1265">在派生类中重写时，将一个字节序列（从指定的字节指针开始）解码为一组字符，并从指定的字符指针开始存储该组字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1265">When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="82c05-1266">在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1266">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1267">若要计算存储所生成的<xref:System.Text.Encoding.GetChars%2A>字符所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1267">To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1268">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1268">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1269">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1269">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1270"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>从输入字节序列中获取字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1270"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="82c05-1271"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> ，因为<xref:System.Text.Encoding>需要离散转换，而<xref:System.Text.Decoder>为单个输入流上的多个传递设计。</span><span class="sxs-lookup"><span data-stu-id="82c05-1271"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1272">如果要转换的数据仅在 （如从流中读取的数据） 的顺序块中可用，或者如果数据量很大，它需要划分为较小的块，则应使用<xref:System.Text.Decoder>或<xref:System.Text.Encoder>提供对象<xref:System.Text.Encoding.GetDecoder%2A>或<xref:System.Text.Encoding.GetEncoder%2A>方法，分别的派生类。</span><span class="sxs-lookup"><span data-stu-id="82c05-1272">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1273">**注意**此方法用于对 Unicode 字符进行操作，而不是针对任意二进制数据（如字节数组）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1273">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="82c05-1274">如果需要将任意二进制数据编码为文本，应使用诸如 uuencode 这样的协议，该协议是由等方法<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>实现的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1274">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1275">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1275">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1276">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1276">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1277">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1277">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1278">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1278">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1279">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1279">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1280">在这种情况下，您可能需要维护两次调用之间的状态，因为在分批处理时，字节序列可能会中断。</span><span class="sxs-lookup"><span data-stu-id="82c05-1280">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="82c05-1281">（例如，ISO-2022 移位序列的一部分可能结束一个<xref:System.Text.Encoding.GetChars%2A>调用并在下一次<xref:System.Text.Encoding.GetChars%2A>调用开始时继续。</span><span class="sxs-lookup"><span data-stu-id="82c05-1281">(For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="82c05-1282"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>将为那些不完整的序列调用回退， <xref:System.Text.Decoder>但会记住这些序列的后续调用。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1282"><xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="82c05-1283">如果你的<xref:System.Text.Encoding.GetString%2A>应用程序处理字符串输出，则建议使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1283">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="82c05-1284">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1284">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1285">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1285">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1286">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1286">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1287">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1287">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1288">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1288">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1289">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1289">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1290">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1290">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1291">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1291">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1292"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1292"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-1293">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1293">-or-</span></span> 
 <span data-ttu-id="82c05-1294"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1294"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1295"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1295"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1296"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1296"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1297">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1297">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1298">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1298">-and-</span></span> 
 <span data-ttu-id="82c05-1299">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1299"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="82c05-1300">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="82c05-1300">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="82c05-1301">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="82c05-1301">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1302">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1302">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="82c05-1303">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1303">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="82c05-1304">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1304">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="82c05-1305">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1305">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="82c05-1306">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="82c05-1306">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="82c05-1307">在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1307">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="82c05-1308">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1308">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1309">若要计算存储所生成的字符<xref:System.Text.Encoding.GetChars%2A>所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1309">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1310">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1310">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1311">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1311">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1312">[\]，Int32，int32，Char\<x： GetChars% 2a？ displayProperty = namewithtype> > 从输入字节序列获取字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1312">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> gets characters from an input byte sequence.</span></span> <span data-ttu-id="82c05-1313">[\]，Int32，int32，Char\<x： GetChars% 2a？ displayProperty = namewithtype> > 不同于<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> ，因为<xref:System.Text.Encoding>需要离散转换，而<xref:System.Text.Decoder>设计用于单个输入流上的多个传递。</span><span class="sxs-lookup"><span data-stu-id="82c05-1313">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1314">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1314">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1315">**注意**此方法用于对 Unicode 字符进行操作，而不是针对任意二进制数据（如字节数组）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1315">**Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</span></span> <span data-ttu-id="82c05-1316">如果需要将任意二进制数据编码为文本，应使用诸如 uuencode 这样的协议，该协议是由等方法<xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>实现的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1316">If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1317">方法确定多少个字符会导致对一个字节序列进行解码，并且该<xref:System.Text.Encoding.GetChars%2A>方法执行实际解码。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1317">The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding.</span></span> <span data-ttu-id="82c05-1318">方法需要分离转换，这<xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType>与方法不同，后者处理单个输入流上的多个传递。 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1318">The <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method, which handles multiple passes on a single input stream.</span></span>  
  
 <span data-ttu-id="82c05-1319">支持和<xref:System.Text.Encoding.GetCharCount%2A> <xref:System.Text.Encoding.GetChars%2A>的多个版本。</span><span class="sxs-lookup"><span data-stu-id="82c05-1319">Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported.</span></span> <span data-ttu-id="82c05-1320">下面是有关使用这些方法的一些编程注意事项：</span><span class="sxs-lookup"><span data-stu-id="82c05-1320">The following are some programming considerations for use of these methods:</span></span>  
  
-   <span data-ttu-id="82c05-1321">您的应用程序可能需要从代码页解码多个输入字节，并使用多个调用处理这些字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1321">Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</span></span> <span data-ttu-id="82c05-1322">在这种情况下，您可能需要维护两次调用之间的状态，因为在分批处理时，字节序列可能会中断。</span><span class="sxs-lookup"><span data-stu-id="82c05-1322">In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</span></span> <span data-ttu-id="82c05-1323">（例如，ISO-2022 移位序列的一部分\]可能结束一个 [，int32，int32，char\<x： GetChars% 2a > 调用，并在下一个 [\]，int32，int32，char\<x： GetChars% 2A > 调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1323">(For example, part of an ISO-2022 shift sequence may end one [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A> call.</span></span> <span data-ttu-id="82c05-1324">[\]，Int32，int32，Char\<x： GetChars% 2a？ displayProperty = namewithtype> > 将为这些不完整的序列调用回退，但<xref:System.Text.Decoder>会记住这些序列的后续调用。）</span><span class="sxs-lookup"><span data-stu-id="82c05-1324">[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)</span></span>  
  
-   <span data-ttu-id="82c05-1325">如果你的<xref:System.Text.Encoding.GetString%2A>应用程序处理字符串输出，则建议使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1325">If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended.</span></span> <span data-ttu-id="82c05-1326">由于此方法必须检查字符串长度并分配一个缓冲区，因此它稍慢一些，但生成<xref:System.String>的类型是首选的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1326">Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.</span></span>  
  
-   <span data-ttu-id="82c05-1327">的<xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29>字节版本允许一些快速的方法，尤其是对大缓冲区的多个调用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1327">The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers.</span></span> <span data-ttu-id="82c05-1328">但请记住，此方法版本有时不安全，因为指针是必需的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1328">Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</span></span>  
  
-   <span data-ttu-id="82c05-1329">如果你的应用程序必须转换大量数据，则应重新使用输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1329">If your app must convert a large amount of data, it should reuse the output buffer.</span></span> <span data-ttu-id="82c05-1330">在这种情况下，\]在支持输出字符的 [\<，int32，int32，Char x： GetChars% 28system.object% 2csystem.string% 2csystem.string% 2csystem.string%%% 29%% 29 > 版本中，缓冲区是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1330">In this case, the [\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.</span></span>  
  
-   <span data-ttu-id="82c05-1331">请考虑使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法<xref:System.Text.Encoding.GetCharCount%2A>而不是。</span><span class="sxs-lookup"><span data-stu-id="82c05-1331">Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method instead of <xref:System.Text.Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="82c05-1332">转换方法尽可能多地转换数据，如果输出缓冲区太小，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1332">The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</span></span> <span data-ttu-id="82c05-1333">对于流的连续解码，此方法通常是最佳选择。</span><span class="sxs-lookup"><span data-stu-id="82c05-1333">For continuous decoding of a stream, this method is often the best choice.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1334">下面的示例将字符串从一种编码转换为另一种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1334">The following example converts a string from one encoding to another.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]
 [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]
 [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  
  
 <span data-ttu-id="82c05-1335">下面的示例将字符串编码为一个字节数组，然后将一系列字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1335">The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]
 [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1336"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1336"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="82c05-1337">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1337">-or-</span></span> 
 <span data-ttu-id="82c05-1338"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1338"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1339"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1339"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1340">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1340">-or-</span></span> 
 <span data-ttu-id="82c05-1341"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1341"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="82c05-1342">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1342">-or-</span></span> 
 <span data-ttu-id="82c05-1343"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1343"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1344"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1344"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1345">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1345">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1346">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1346">-and-</span></span> 
 <span data-ttu-id="82c05-1347">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1347"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="abstract member GetDecoder : unit -&gt; System.Text.Decoder&#xA;override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1348">在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1348">When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</span></span></summary>
        <returns><span data-ttu-id="82c05-1349">一个 <see cref="T:System.Text.Decoder" />，它将已编码的字节序列转换为字符序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1349">A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1350">方法使用类似于此类的<xref:System.Text.Encoding.GetChars%2A>方法的方式将连续字节块转换为连续的字符块。 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1350">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="82c05-1351">但是，会<xref:System.Text.Decoder>在调用之间维护状态信息，使其正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1351">However, a <xref:System.Text.Decoder> maintains state information between calls so it correctly decodes byte sequences that span blocks.</span></span> <span data-ttu-id="82c05-1352"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节，并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1352">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="82c05-1353">因此， <xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>对于网络传输和文件操作非常有用，因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="82c05-1353">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c05-1354">默认实现返回<see cref="T:System.Text.Decoder" /> ，它<see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />调用当前<see cref="T:System.Text.Encoding" />的和<see cref="M:System.Text.Encoding.GetChars(System.Byte[])" />方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1354">The default implementation returns a <see cref="T:System.Text.Decoder" /> that calls the <see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" /> and <see cref="M:System.Text.Encoding.GetChars(System.Byte[])" /> methods of the current <see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="82c05-1355">必须重写此方法才能返回在<see cref="T:System.Text.Decoder" />调用之间保持其状态的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1355">You must override this method to return a <see cref="T:System.Text.Decoder" /> that maintains its state between calls.</span></span></para></block>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1356">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1356">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="abstract member GetEncoder : unit -&gt; System.Text.Encoder&#xA;override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1357">在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1357">When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="82c05-1358">一个 <see cref="T:System.Text.Encoder" />，它将 Unicode 字符序列转换为已编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1358">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1359">方法使用类似于此类的<xref:System.Text.Encoding.GetBytes%2A>方法的方式将顺序块字符转换为顺序字节块。 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1359">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.Encoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="82c05-1360">但是，会<xref:System.Text.Encoder>在调用之间维护状态信息，使其正确地对跨块的字符序列进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1360">However, a <xref:System.Text.Encoder> maintains state information between calls so it correctly encodes character sequences that span blocks.</span></span> <span data-ttu-id="82c05-1361"><xref:System.Text.Encoder>还保留数据块末尾的尾随字符，并在下一编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1361">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="82c05-1362">例如，数据块可能以不匹配的高代理项结束，并且匹配的低代理项可能位于下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="82c05-1362">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="82c05-1363">因此， <xref:System.Text.Encoding.GetDecoder%2A>和<xref:System.Text.Encoding.GetEncoder%2A>对于网络传输和文件操作非常有用，因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="82c05-1363">Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c05-1364">默认实现返回<see cref="T:System.Text.Encoder" /> ，它<see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />调用当前<see cref="T:System.Text.Encoding" />的和<see cref="M:System.Text.Encoding.GetBytes(System.Char[])" />方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1364">The default implementation returns a <see cref="T:System.Text.Encoder" /> that calls the <see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" /> and <see cref="M:System.Text.Encoding.GetBytes(System.Char[])" /> methods of the current <see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="82c05-1365">必须重写此方法才能返回在<see cref="T:System.Text.Encoder" />调用之间保持其状态的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1365">You must override this method to return a <see cref="T:System.Text.Encoder" /> that maintains its state between calls.</span></span></para></block>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1366">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1366">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-1367">返回指定代码页的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1367">Returns an encoding for the specified code page.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : int -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codepage"><span data-ttu-id="82c05-1368">首选编码的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1368">The code page identifier of the preferred encoding.</span></span> <span data-ttu-id="82c05-1369">可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“代码页”一列中列出。</span><span class="sxs-lookup"><span data-stu-id="82c05-1369">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span>  
  
<span data-ttu-id="82c05-1370">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1370">-or-</span></span> 
<span data-ttu-id="82c05-1371">0（零），使用默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1371">0 (zero), to use the default encoding.</span></span></param>
        <summary><span data-ttu-id="82c05-1372">返回与指定代码页标识符关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1372">Returns the encoding associated with the specified code page identifier.</span></span></summary>
        <returns><span data-ttu-id="82c05-1373">与指定代码页关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1373">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1374">回退处理程序依赖于的编码类型`codepage`。</span><span class="sxs-lookup"><span data-stu-id="82c05-1374">The fallback handler depends on the encoding type of `codepage`.</span></span> <span data-ttu-id="82c05-1375">如果`codepage`是代码页或双字节字符集（DBCS）编码，则使用最佳回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1375">If `codepage` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="82c05-1376">否则，将使用替代回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1376">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="82c05-1377">这些回退处理程序可能不适合您的应用程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1377">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="82c05-1378">若要指定由指定`codepage`的编码使用的回退处理程序，可以<xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>调用重载。</span><span class="sxs-lookup"><span data-stu-id="82c05-1378">To specify the fallback handler used by the encoding specified by `codepage`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  
  
 <span data-ttu-id="82c05-1379">在 .NET Framework 中， <xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1379">In the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="82c05-1380">但 .NET Framework 本身就支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1380">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="82c05-1381">有关代码页的列表，请参见<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1381">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="82c05-1382">在 .net core 中， <xref:System.Text.Encoding.GetEncoding%2A>方法返回 .net core 本机支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1382">In .NET Core, the <xref:System.Text.Encoding.GetEncoding%2A> method returns the encodings natively supported by .NET Core.</span></span> <span data-ttu-id="82c05-1383">在这两种 .net 实现上，都<xref:System.Text.Encoding.GetEncodings%2A>可以调用方法来获取<xref:System.Text.EncodingInfo>对象的数组，这些对象包含有关所有可用的编码的信息。</span><span class="sxs-lookup"><span data-stu-id="82c05-1383">On both .NET implementations, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all available encodings.</span></span> 

 <span data-ttu-id="82c05-1384">除了在 .net Core 本机可用的编码或特定平台版本的 .NET Framework 中，此<xref:System.Text.Encoding.GetEncoding%2A>方法还会返回任何其他编码，通过向注册<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1384">In addition to the encodings that are natively available on .NET Core or that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="82c05-1385">如果多个<xref:System.Text.EncodingProvider>对象已注册了相同的编码，则此方法将返回最后一个注册的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1385">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="82c05-1386">还可以为`codepage`参数提供0值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1386">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="82c05-1387">其确切行为取决于是否已通过注册<xref:System.Text.EncodingProvider>对象提供了任何编码：</span><span class="sxs-lookup"><span data-stu-id="82c05-1387">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="82c05-1388">如果注册了一个或多个编码提供程序，则它会返回上次注册的提供程序的编码，该提供程序已选择<xref:System.Text.Encoding.GetEncoding%2A>在向方法`codepage`传递参数0时返回编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1388">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="82c05-1389">在 .NET Framework 上，如果没有注册任何编码提供程序，如果<xref:System.Text.CodePagesEncodingProvider>是注册的编码提供程序，或者如果没有已注册的编码提供程序`codepage`处理值0，则返回操作系统的活动代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1389">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the operating system's active code page.</span></span> <span data-ttu-id="82c05-1390">若要确定 Windows 系统上的活动代码页，请从 Windows 桌面上的 .NET Framework 调用 Windows [GetACP](https://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1390">To determine the active code page on Windows systems, call the Windows [GetACP](https://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>

- <span data-ttu-id="82c05-1391">在 .net Core 中，如果未注册任何编码提供程序，或者没有任何注册的编码`codepage`提供程序处理值0，则<xref:System.Text.UTF8Encoding>返回。</span><span class="sxs-lookup"><span data-stu-id="82c05-1391">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="82c05-1392">某些不受支持的<xref:System.ArgumentException>代码页会引发，而另一些则<xref:System.NotSupportedException>导致。</span><span class="sxs-lookup"><span data-stu-id="82c05-1392">Some unsupported code pages cause an <xref:System.ArgumentException> to be thrown, whereas others cause a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="82c05-1393">因此，您的代码必须捕获 "异常" 部分中指示的所有异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1393">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1394">ANSI 代码页在不同计算机上可能不同，并且可以在一台计算机上更改，导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="82c05-1394">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="82c05-1395">出于此原因，如果活动代码页是 ANSI 代码页， `Encoding.GetEncoding(0)`则不建议使用返回的默认代码页对数据进行编码和解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1395">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="82c05-1396">为获得最一致的结果，应使用 Unicode 编码，例如 UTF-8 （代码页65001）或 UTF-16，而不是使用特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1396">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="82c05-1397"><xref:System.Text.Encoding.GetEncoding%2A>使用默认设置返回缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1397"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="82c05-1398">应使用派生类的构造函数获取具有不同设置的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1398">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="82c05-1399">例如， <xref:System.Text.UTF32Encoding>类提供可让你启用错误检测的构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1399">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  

   
  
## Examples  
 <span data-ttu-id="82c05-1400">下面的示例获取相同编码的两个实例（一个按代码页，另一个按名称），并检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="82c05-1400">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1401"><paramref name="codepage" /> 小于零或大于 65535。</span><span class="sxs-lookup"><span data-stu-id="82c05-1401"><paramref name="codepage" /> is less than zero or greater than 65535.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1402">基础平台不支持 <paramref name="codepage" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1402"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="82c05-1403">基础平台不支持 <paramref name="codepage" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1403"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1404">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1404">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : string -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82c05-1405">首选编码的代码页名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1405">The code page name of the preferred encoding.</span></span> <span data-ttu-id="82c05-1406"><see cref="P:System.Text.Encoding.WebName" /> 属性返回的所有值均有效。</span><span class="sxs-lookup"><span data-stu-id="82c05-1406">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span></span> <span data-ttu-id="82c05-1407">可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“名称”一列中列出。</span><span class="sxs-lookup"><span data-stu-id="82c05-1407">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span></param>
        <summary><span data-ttu-id="82c05-1408">返回与指定代码页名称关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1408">Returns the encoding associated with the specified code page name.</span></span></summary>
        <returns><span data-ttu-id="82c05-1409">与指定代码页关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1409">The encoding  associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1410">回退处理程序依赖于的编码类型`name`。</span><span class="sxs-lookup"><span data-stu-id="82c05-1410">The fallback handler depends on the encoding type of `name`.</span></span> <span data-ttu-id="82c05-1411">如果`name`是代码页或双字节字符集（DBCS）编码，则使用最佳回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1411">If `name` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</span></span> <span data-ttu-id="82c05-1412">否则，将使用替代回退处理程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1412">Otherwise, a replacement fallback handler is used.</span></span> <span data-ttu-id="82c05-1413">这些回退处理程序可能不适合您的应用程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1413">These fallback handlers may not be appropriate for your app.</span></span> <span data-ttu-id="82c05-1414">若要指定由指定`name`的编码使用的回退处理程序，可以<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29>调用重载。</span><span class="sxs-lookup"><span data-stu-id="82c05-1414">To specify the fallback handler used by the encoding specified by `name`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.</span></span>  

<span data-ttu-id="82c05-1415">在 .NET Framework 中， <xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1415">In the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="82c05-1416">但 .NET Framework 本身就支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1416">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="82c05-1417">有关代码页的列表，请参见<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1417">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="82c05-1418">在 .net core 中， <xref:System.Text.Encoding.GetEncoding%2A>方法返回 .net core 本机支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1418">In .NET Core, the <xref:System.Text.Encoding.GetEncoding%2A> method returns the encodings natively supported by .NET Core.</span></span> <span data-ttu-id="82c05-1419">在这两种 .net 实现上，都<xref:System.Text.Encoding.GetEncodings%2A>可以调用方法来获取<xref:System.Text.EncodingInfo>对象的数组，这些对象包含有关所有可用的编码的信息。</span><span class="sxs-lookup"><span data-stu-id="82c05-1419">On both .NET implementations, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all available encodings.</span></span> 

 <span data-ttu-id="82c05-1420">除了在 .net Core 本机可用的编码或特定平台版本的 .NET Framework 中，此<xref:System.Text.Encoding.GetEncoding%2A>方法还会返回任何其他编码，通过向注册<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1420">In addition to the encodings that are natively available on .NET Core or that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="82c05-1421">如果多个<xref:System.Text.EncodingProvider>对象已注册了相同的编码，则此方法将返回最后一个注册的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1421">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  
   
> [!NOTE]
>  <span data-ttu-id="82c05-1422">ANSI 代码页在不同的计算机上可能不同，或者可以针对一台计算机进行更改，从而导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="82c05-1422">The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption.</span></span> <span data-ttu-id="82c05-1423">为获得最一致的结果，应使用 Unicode，如 UTF-8 （代码页65001）或 UTF-16，而不是特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1423">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
 
  
 <span data-ttu-id="82c05-1424"><xref:System.Text.Encoding.GetEncoding%2A>使用默认设置返回缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1424"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="82c05-1425">应使用派生类的构造函数获取具有不同设置的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1425">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="82c05-1426">例如， <xref:System.Text.UTF32Encoding>类提供可让你启用错误检测的构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1426">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
## Examples  
 <span data-ttu-id="82c05-1427">下面的示例获取相同编码的两个实例（一个按代码页，另一个按名称），并检查它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="82c05-1427">The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1428"><paramref name="name" /> 不是有效的代码页名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1428"><paramref name="name" /> is not a valid code page name.</span></span>  
  
<span data-ttu-id="82c05-1429">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1429">-or-</span></span> 
<span data-ttu-id="82c05-1430">基础平台不支持 <paramref name="name" /> 所指示的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1430">The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1431">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1431">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codepage"><span data-ttu-id="82c05-1432">首选编码的代码页标识符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1432">The code page identifier of the preferred encoding.</span></span> <span data-ttu-id="82c05-1433">可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“代码页”一列中列出。</span><span class="sxs-lookup"><span data-stu-id="82c05-1433">Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span>  
  
<span data-ttu-id="82c05-1434">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1434">-or-</span></span> 
<span data-ttu-id="82c05-1435">0（零），使用默认编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1435">0 (zero), to use the default encoding.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="82c05-1436">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-1436">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="82c05-1437">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-1437">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="82c05-1438">返回与指定代码页标识符关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1438">Returns the encoding associated with the specified code page identifier.</span></span> <span data-ttu-id="82c05-1439">参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1439">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span></span></summary>
        <returns><span data-ttu-id="82c05-1440">与指定代码页关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1440">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1441">某些不受支持的代码页<xref:System.ArgumentException>会引发异常，而其他代码<xref:System.NotSupportedException>页则导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1441">Some unsupported code pages cause the exception <xref:System.ArgumentException> to be thrown, whereas others cause <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="82c05-1442">因此，您的代码必须捕获 "异常" 部分中指示的所有异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1442">Therefore, your code must catch all exceptions indicated in the Exceptions section.</span></span>  

<span data-ttu-id="82c05-1443">在 .NET Framework 中， <xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1443">In the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="82c05-1444">但 .NET Framework 本身就支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1444">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="82c05-1445">有关代码页的列表，请参见<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1445">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="82c05-1446">在 .net core 中， <xref:System.Text.Encoding.GetEncoding%2A>方法返回 .net core 本机支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1446">In .NET Core, the <xref:System.Text.Encoding.GetEncoding%2A> method returns the encodings natively supported by .NET Core.</span></span> <span data-ttu-id="82c05-1447">在这两种 .net 实现上，都<xref:System.Text.Encoding.GetEncodings%2A>可以调用方法来获取<xref:System.Text.EncodingInfo>对象的数组，这些对象包含有关所有可用的编码的信息。</span><span class="sxs-lookup"><span data-stu-id="82c05-1447">On both .NET implementations, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all available encodings.</span></span> 

 <span data-ttu-id="82c05-1448">除了在 .net Core 本机可用的编码或特定平台版本的 .NET Framework 中，此<xref:System.Text.Encoding.GetEncoding%2A>方法还会返回任何其他编码，通过向注册<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1448">In addition to the encodings that are natively available on .NET Core or that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="82c05-1449">如果多个<xref:System.Text.EncodingProvider>对象已注册了相同的编码，则此方法将返回最后一个注册的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1449">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  

<span data-ttu-id="82c05-1450">还可以为`codepage`参数提供0值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1450">You can also supply a value of 0 for the `codepage` argument.</span></span> <span data-ttu-id="82c05-1451">其确切行为取决于是否已通过注册<xref:System.Text.EncodingProvider>对象提供了任何编码：</span><span class="sxs-lookup"><span data-stu-id="82c05-1451">Its precise behavior depends on whether any encodings have been made available by registering an <xref:System.Text.EncodingProvider> object:</span></span>

- <span data-ttu-id="82c05-1452">如果注册了一个或多个编码提供程序，则它会返回上次注册的提供程序的编码，该提供程序已选择<xref:System.Text.Encoding.GetEncoding%2A>在向方法`codepage`传递参数0时返回编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1452">If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <xref:System.Text.Encoding.GetEncoding%2A> method is passed a `codepage` argument of 0.</span></span>     

- <span data-ttu-id="82c05-1453">在 .NET Framework 上，如果没有注册任何编码提供程序，如果<xref:System.Text.CodePagesEncodingProvider>是注册的编码提供程序，或者如果没有已注册的编码提供程序`codepage`处理值0，则返回活动代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1453">On the .NET Framework, if no encoding provider has been registered, if the <xref:System.Text.CodePagesEncodingProvider> is the registered encoding provider, or if no registered encoding provider handles a `codepage` value of 0, it returns the active code page.</span></span>

- <span data-ttu-id="82c05-1454">在 .net Core 中，如果未注册任何编码提供程序，或者没有任何注册的编码`codepage`提供程序处理值0，则<xref:System.Text.UTF8Encoding>返回编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1454">On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a `codepage` value of 0, it returns the <xref:System.Text.UTF8Encoding> encoding.</span></span>

> [!NOTE]
>  <span data-ttu-id="82c05-1455">ANSI 代码页在不同计算机上可能不同，并且可以在一台计算机上更改，导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="82c05-1455">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="82c05-1456">出于此原因，如果活动代码页是 ANSI 代码页， `Encoding.GetEncoding(0)`则不建议使用返回的默认代码页对数据进行编码和解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1456">For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended.</span></span> <span data-ttu-id="82c05-1457">为获得最一致的结果，应使用 Unicode，如 UTF-8 （代码页65001）或 UTF-16，而不是特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1457">For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span> 
  
 <span data-ttu-id="82c05-1458">若要获取与活动代码页关联的编码，可以为`codepage`参数提供值0，如果代码在 Windows 桌面上的 .NET Framework 上运行，则检索<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1458">To get the encoding associated with the active code page, you can either supply a value of 0 for the `codepage` argument or, if your code is running on the .NET Framework on the Windows desktop, retrieve the value of the <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="82c05-1459">若要确定当前的活动代码页，请从 Windows 桌面上的 .NET Framework 调用 Windows [GetACP](https://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1459">To determine the current active code page, call the Windows [GetACP](https://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the .NET Framework on the Windows desktop.</span></span>  
  
 <span data-ttu-id="82c05-1460"><xref:System.Text.Encoding.GetEncoding%2A>使用默认设置返回缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1460"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="82c05-1461">应使用派生类的构造函数获取具有不同设置的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1461">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="82c05-1462">例如， <xref:System.Text.UTF32Encoding>类提供可让你启用错误检测的构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1462">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1463">下面的示例演示<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1463">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1464"><paramref name="codepage" /> 小于零或大于 65535。</span><span class="sxs-lookup"><span data-stu-id="82c05-1464"><paramref name="codepage" /> is less than zero or greater than 65535.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1465">基础平台不支持 <paramref name="codepage" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1465"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="82c05-1466">基础平台不支持 <paramref name="codepage" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1466"><paramref name="codepage" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1467">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1467">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="static member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="System.Text.Encoding.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="82c05-1468">首选编码的代码页名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1468">The code page name of the preferred encoding.</span></span> <span data-ttu-id="82c05-1469"><see cref="P:System.Text.Encoding.WebName" /> 属性返回的所有值均有效。</span><span class="sxs-lookup"><span data-stu-id="82c05-1469">Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid.</span></span> <span data-ttu-id="82c05-1470">可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“名称”一列中列出。</span><span class="sxs-lookup"><span data-stu-id="82c05-1470">Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</span></span></param>
        <param name="encoderFallback"><span data-ttu-id="82c05-1471">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-1471">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</span></span></param>
        <param name="decoderFallback"><span data-ttu-id="82c05-1472">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</span><span class="sxs-lookup"><span data-stu-id="82c05-1472">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</span></span></param>
        <summary><span data-ttu-id="82c05-1473">返回与指定代码页名称关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1473">Returns the encoding associated with the specified code page name.</span></span> <span data-ttu-id="82c05-1474">参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1474">Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</span></span></summary>
        <returns><span data-ttu-id="82c05-1475">与指定代码页关联的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1475">The encoding that is associated with the specified code page.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="82c05-1476">在 .NET Framework 中， <xref:System.Text.Encoding.GetEncoding%2A>方法依赖于基础平台来支持大多数代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1476">In the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages.</span></span> <span data-ttu-id="82c05-1477">但 .NET Framework 本身就支持某些编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1477">However, the .NET Framework natively supports some encodings.</span></span> <span data-ttu-id="82c05-1478">有关代码页的列表，请参见<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1478">For a list of code pages, see the <xref:System.Text.Encoding> class topic.</span></span> <span data-ttu-id="82c05-1479">在 .net core 中， <xref:System.Text.Encoding.GetEncoding%2A>方法返回 .net core 本机支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1479">In .NET Core, the <xref:System.Text.Encoding.GetEncoding%2A> method returns the encodings natively supported by .NET Core.</span></span> <span data-ttu-id="82c05-1480">在这两种 .net 实现上，都<xref:System.Text.Encoding.GetEncodings%2A>可以调用方法来获取<xref:System.Text.EncodingInfo>对象的数组，这些对象包含有关所有可用的编码的信息。</span><span class="sxs-lookup"><span data-stu-id="82c05-1480">On both .NET implementations, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all available encodings.</span></span> 

 <span data-ttu-id="82c05-1481">除了在 .net Core 本机可用的编码或特定平台版本的 .NET Framework 中，此<xref:System.Text.Encoding.GetEncoding%2A>方法还会返回任何其他编码，通过向注册<xref:System.Text.EncodingProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1481">In addition to the encodings that are natively available on .NET Core or that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%2A> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.</span></span> <span data-ttu-id="82c05-1482">如果多个<xref:System.Text.EncodingProvider>对象已注册了相同的编码，则此方法将返回最后一个注册的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1482">If the same encoding has been registered by multiple <xref:System.Text.EncodingProvider> objects, this method returns the last one registered.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1483">ANSI 代码页在不同计算机上可能不同，并且可以在一台计算机上更改，导致数据损坏。</span><span class="sxs-lookup"><span data-stu-id="82c05-1483">The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</span></span> <span data-ttu-id="82c05-1484">为获得最一致的结果，应使用 Unicode 编码，例如 UTF-8 （代码页65001）或 UTF-16，而不是使用特定的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1484">For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</span></span>  
  
 <span data-ttu-id="82c05-1485"><xref:System.Text.Encoding.GetEncoding%2A>使用默认设置返回缓存的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1485"><xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings.</span></span> <span data-ttu-id="82c05-1486">应使用派生类的构造函数获取具有不同设置的实例。</span><span class="sxs-lookup"><span data-stu-id="82c05-1486">You should use the constructors of derived classes to get an instance with different settings.</span></span> <span data-ttu-id="82c05-1487">例如， <xref:System.Text.UTF32Encoding>类提供可让你启用错误检测的构造函数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1487">For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1488">下面的示例演示<xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1488">The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]
 [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]
 [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1489"><paramref name="name" /> 不是有效的代码页名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1489"><paramref name="name" /> is not a valid code page name.</span></span>  
  
<span data-ttu-id="82c05-1490">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1490">-or-</span></span> 
<span data-ttu-id="82c05-1491">基础平台不支持 <paramref name="name" /> 所指示的代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1491">The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.EncoderFallback" />
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="M:System.Text.Encoding.GetEncodings" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1492">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1492">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncodings">
      <MemberSignature Language="C#" Value="public static System.Text.EncodingInfo[] GetEncodings ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.EncodingInfo[] GetEncodings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetEncodings" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodings () As EncodingInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Text::EncodingInfo ^&gt; ^ GetEncodings();" />
      <MemberSignature Language="F#" Value="static member GetEncodings : unit -&gt; System.Text.EncodingInfo[]" Usage="System.Text.Encoding.GetEncodings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.EncodingInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1493">返回包含所有编码的数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1493">Returns an array that contains all encodings.</span></span></summary>
        <returns><span data-ttu-id="82c05-1494">包含所有编码的数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1494">An array that contains all encodings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1495">此方法返回受支持的编码的列表，该列表由代码页唯一区分。</span><span class="sxs-lookup"><span data-stu-id="82c05-1495">This method returns a list of supported encodings, uniquely distinguished by code page.</span></span> <span data-ttu-id="82c05-1496">有关列出受支持编码的表，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1496">For a table that lists the supported encodings, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1497"><xref:System.Text.Encoding.GetEncodings%2A>方法返回的支持编码的列表不包括任何其他编码，通过对<xref:System.Text.Encoding.RegisterProvider%2A>方法的调用注册<xref:System.Text.EncodingProvider>的任何实现都提供这些编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1497">The list of supported encodings returned by the <xref:System.Text.Encoding.GetEncodings%2A> method does not include any additional encodings made available by any <xref:System.Text.EncodingProvider> implementations that were registered by calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method.</span></span>  
  
 <span data-ttu-id="82c05-1498">在 .NET Framework 中，编码50220和50222都与名称 "iso-2022-jp" 相关联，但它们不同。</span><span class="sxs-lookup"><span data-stu-id="82c05-1498">On the .NET Framework, encodings 50220 and 50222 are both associated with the name "iso-2022-jp", but they are not identical.</span></span> <span data-ttu-id="82c05-1499">编码50220将半角片假名字符转换为全角字符，而编码50222使用 "移入/移出" 序列对半角片假名字符进行编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1499">Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters.</span></span> <span data-ttu-id="82c05-1500">编码50222的显示名称为 "日语（JIS-允许1字节假名-SO/SI）"，以将其与显示名称为 "日语（JIS）" 的编码50220区分开来。</span><span class="sxs-lookup"><span data-stu-id="82c05-1500">The display name for encoding 50222 is "Japanese (JIS-Allow 1 byte Kana - SO/SI)" to distinguish it from encoding 50220, which has the display name "Japanese (JIS)".</span></span>  
  
 <span data-ttu-id="82c05-1501">如果请求编码名称 "iso-2022-jp"，则 .NET Framework 返回编码50220。</span><span class="sxs-lookup"><span data-stu-id="82c05-1501">If you request the encoding name "iso-2022-jp", the .NET Framework returns encoding 50220.</span></span> <span data-ttu-id="82c05-1502">不过，适用于应用程序的编码取决于对半角片假名字符的首选处理方式。</span><span class="sxs-lookup"><span data-stu-id="82c05-1502">However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.</span></span>  
  
 <span data-ttu-id="82c05-1503">若要获取特定的编码，应使用<xref:System.Text.Encoding.GetEncoding%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1503">To get a specific encoding, you should use the <xref:System.Text.Encoding.GetEncoding%2A> method.</span></span>  
  
 <span data-ttu-id="82c05-1504"><xref:System.Text.Encoding.GetEncodings%2A>有时用于向用户显示 "**另存为**" 对话框中的编码列表。</span><span class="sxs-lookup"><span data-stu-id="82c05-1504"><xref:System.Text.Encoding.GetEncodings%2A> is sometimes used to present the user with a list of encodings in a File **Save as** dialog box.</span></span> <span data-ttu-id="82c05-1505">但是，许多非 Unicode 编码都不完整，而是将多个字符转换为 "？"，或者在不同的平台上具有细微的不同行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-1505">However, many non-Unicode encodings are either incomplete and translate many characters to "?", or have subtly different behavior on different platforms.</span></span> <span data-ttu-id="82c05-1506">请考虑使用 UTF-8 或 UTF-16 作为默认值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1506">Consider using UTF-8 or UTF-16 as the default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1507">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1507">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1508">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1508">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1509">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1509">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="82c05-1510">当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1510">The hash code for the current instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="abstract member GetMaxByteCount : int -&gt; int" Usage="encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="82c05-1511">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="82c05-1511">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="82c05-1512">在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1512">When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="82c05-1513">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1513">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1514">参数实际上指定表示要编码的<xref:System.Char> Unicode 字符的对象数，因为 .net 内部使用 utf-16 来表示 unicode 字符。 `charCount`</span><span class="sxs-lookup"><span data-stu-id="82c05-1514">The `charCount` parameter actually specifies the number of <xref:System.Char> objects that represent the Unicode characters to encode, because .NET internally uses UTF-16 to represent Unicode characters.</span></span> <span data-ttu-id="82c05-1515">因此，大多数 Unicode 字符均可由一个<xref:System.Char>对象表示，但例如，代理项对表示的 unicode 字符需要两个<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1515">Consequently, most Unicode characters can be represented by one <xref:System.Char> object, but a Unicode character represented by a surrogate pair, for example, requires two <xref:System.Char> objects.</span></span>  
  
 <span data-ttu-id="82c05-1516">若要计算存储生成的字节所<xref:System.Text.Encoding.GetBytes%2A>需的确切数组大小，应<xref:System.Text.Encoding.GetByteCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1516">To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should use the <xref:System.Text.Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1517">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxByteCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1517">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="82c05-1518">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxByteCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1518">The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1519"><xref:System.Text.Encoding.GetMaxByteCount%2A>检索最差事例数，包括当前所选<xref:System.Text.EncoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="82c05-1519"><xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="82c05-1520">如果使用可能大的字符串选择回退， <xref:System.Text.Encoding.GetMaxByteCount%2A>则会检索较大的值，特别是在编码的最差情况涉及切换每个字符的模式的情况下。</span><span class="sxs-lookup"><span data-stu-id="82c05-1520">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character.</span></span> <span data-ttu-id="82c05-1521">例如，ISO-2022-JP 可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="82c05-1521">For example, this can happen for ISO-2022-JP.</span></span> <span data-ttu-id="82c05-1522">有关详细信息，请参阅博客文章 "[GetMaxByteCount （）和 GetMaxCharCount （）？"。](https://go.microsoft.com/fwlink/?LinkId=153702)</span><span class="sxs-lookup"><span data-stu-id="82c05-1522">For more information, see the blog entry "[What's with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?](https://go.microsoft.com/fwlink/?LinkId=153702)"</span></span> <span data-ttu-id="82c05-1523">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span><span class="sxs-lookup"><span data-stu-id="82c05-1523">(http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).</span></span>  
  
 <span data-ttu-id="82c05-1524">在大多数情况下，此方法检索小字符串的合理值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1524">In most cases, this method retrieves reasonable values for small strings.</span></span> <span data-ttu-id="82c05-1525">对于大字符串，可能需要在很少的情况下选择使用非常大的缓冲区，并在很少的情况下捕获错误。</span><span class="sxs-lookup"><span data-stu-id="82c05-1525">For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small.</span></span> <span data-ttu-id="82c05-1526">你可能还需要考虑使用<xref:System.Text.Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1526">You might also want to consider a different approach using <xref:System.Text.Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1527">使用<xref:System.Text.Encoding.GetMaxByteCount%2A>时，应根据输入缓冲区的最大大小分配输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1527">When using <xref:System.Text.Encoding.GetMaxByteCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="82c05-1528">如果输出缓冲区的大小受到限制，可以使用<xref:System.Text.Encoding.Convert%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1528">If the output buffer is constrained in size, you might use the <xref:System.Text.Encoding.Convert%2A> method.</span></span>  
  
 <span data-ttu-id="82c05-1529">请注意<xref:System.Text.Encoding.GetMaxByteCount%2A> ，会考虑以前的解码器操作的潜在遗留代理项。</span><span class="sxs-lookup"><span data-stu-id="82c05-1529">Note that <xref:System.Text.Encoding.GetMaxByteCount%2A> considers potential leftover surrogates from a previous decoder operation.</span></span> <span data-ttu-id="82c05-1530">由于解码器的原因，向方法传递值1时，将为单字节编码（如 ASCII）检索2。</span><span class="sxs-lookup"><span data-stu-id="82c05-1530">Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII.</span></span> <span data-ttu-id="82c05-1531">如果此信息是<xref:System.Text.ASCIIEncoding.IsSingleByte%2A>必需的，则应使用属性。</span><span class="sxs-lookup"><span data-stu-id="82c05-1531">You should use the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property if this information is necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1532">`GetMaxByteCount(N)`不一定与相同`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="82c05-1532">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1533">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1533">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1534"><paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1534"><paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="82c05-1535">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1535">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1536">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1536">-and-</span></span> 
 <span data-ttu-id="82c05-1537">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1537"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c05-1538">如果<see cref="T:System.Text.Encoding" />根据此方法的计算结果调整了缓冲区的大小，则所有实现都必须保证没有发生缓冲区溢出异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1538">All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</span></span></para></block>
        <altmember cref="M:System.Text.Encoding.GetBytes(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetByteCount(System.Char[])" />
        <altmember cref="M:System.Text.Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetMaxCharCount : int -&gt; int" Usage="encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="82c05-1539">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1539">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1540">在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1540">When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="82c05-1541">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1541">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1542">若要计算存储所生成的字符<xref:System.Text.Encoding.GetChars%2A>所需的确切数组大小，应<xref:System.Text.Encoding.GetCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1542">To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1543">若要计算最大数组大小，请<xref:System.Text.Encoding.GetMaxCharCount%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1543">To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="82c05-1544">方法通常允许分配较少的内存，而方法<xref:System.Text.Encoding.GetMaxCharCount%2A>的执行速度通常更快。 <xref:System.Text.Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1544">The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="82c05-1545"><xref:System.Text.Encoding.GetMaxCharCount%2A>检索最差事例数，包括当前所选<xref:System.Text.DecoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="82c05-1545"><xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="82c05-1546">如果使用可能大的字符串选择回退， <xref:System.Text.Encoding.GetMaxCharCount%2A>则会检索大型值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1546">If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="82c05-1547">在大多数情况下，此方法检索小字符串的合理数字。</span><span class="sxs-lookup"><span data-stu-id="82c05-1547">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="82c05-1548">对于大字符串，你可能需要在很少的情况下选择使用非常大的缓冲区，并捕获更合理的缓冲区太小的错误。</span><span class="sxs-lookup"><span data-stu-id="82c05-1548">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small.</span></span> <span data-ttu-id="82c05-1549">你可能还需要考虑使用<xref:System.Text.Encoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1549">You might also want to consider a different approach using <xref:System.Text.Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="82c05-1550"><xref:System.Text.Encoding.GetMaxCharCount%2A>与<xref:System.Text.Encoding.GetBytes%2A>之间没有关系。</span><span class="sxs-lookup"><span data-stu-id="82c05-1550"><xref:System.Text.Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="82c05-1551">如果需要一个与一起<xref:System.Text.Encoding.GetBytes%2A>使用的类似功能，则应使用。 <xref:System.Text.Encoding.GetMaxByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1551">If you needs a similar function to use with <xref:System.Text.Encoding.GetBytes%2A>, you should use <xref:System.Text.Encoding.GetMaxByteCount%2A>.</span></span>  
  
 <span data-ttu-id="82c05-1552">使用<xref:System.Text.Encoding.GetMaxCharCount%2A>时，应根据输入缓冲区的最大大小分配输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="82c05-1552">When using <xref:System.Text.Encoding.GetMaxCharCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer.</span></span> <span data-ttu-id="82c05-1553">如果输出缓冲区的大小受到限制，可以使用<xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1553">If the output buffer is constrained in size, you might use the <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="82c05-1554">请注意<xref:System.Text.Encoding.GetMaxCharCount%2A> ，从上一个编码器操作中考虑剩余字节的最坏情况。</span><span class="sxs-lookup"><span data-stu-id="82c05-1554">Note that <xref:System.Text.Encoding.GetMaxCharCount%2A> considers the worst case for leftover bytes from a previous encoder operation.</span></span> <span data-ttu-id="82c05-1555">对于大多数代码页，将值0传递到此方法将检索大于或等于1的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1555">For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="82c05-1556">`GetMaxCharCount(N)`不一定与相同`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="82c05-1556">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1557">下面的示例将字符串编码为一个字节数组，然后将这些字节解码为一个字符数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1557">The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1558"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1558"><paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1559">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1559">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1560">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1560">-and-</span></span> 
 <span data-ttu-id="82c05-1561">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1561"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="82c05-1562">如果<see cref="T:System.Text.Encoding" />根据此方法的计算结果调整了缓冲区的大小，则所有实现都必须保证没有发生缓冲区溢出异常。</span><span class="sxs-lookup"><span data-stu-id="82c05-1562">All <see cref="T:System.Text.Encoding" /> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</span></span></para></block>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetString(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public virtual byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="abstract member GetPreamble : unit -&gt; byte[]&#xA;override this.GetPreamble : unit -&gt; byte[]" Usage="encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1563">在派生类中重写时，返回指定所用编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1563">When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</span></span></summary>
        <returns><span data-ttu-id="82c05-1564">一个字节数组，包含指定所用编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1564">A byte array containing a sequence of bytes that specifies the encoding used.</span></span>  
  
 <span data-ttu-id="82c05-1565">- 或 -</span><span class="sxs-lookup"><span data-stu-id="82c05-1565">-or-</span></span>  
  
 <span data-ttu-id="82c05-1566">长度为零的字节数组（如果不需要前导码）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1566">A byte array of length zero, if a preamble is not required.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1567">此<xref:System.Text.Encoding>对象还可以提供前导码，它是一个字节数组，可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="82c05-1567">Optionally, the <xref:System.Text.Encoding> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="82c05-1568">如果引言包含字节顺序标记（在 Unicode、码位 U + FEFF 中），则它有助于解码器确定字节顺序和转换格式或 UTF。</span><span class="sxs-lookup"><span data-stu-id="82c05-1568">If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="82c05-1569">Unicode 字节顺序标记（BOM）按以下方式序列化（十六进制）：</span><span class="sxs-lookup"><span data-stu-id="82c05-1569">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="82c05-1570">UTF-8： EF BB BF</span><span class="sxs-lookup"><span data-stu-id="82c05-1570">UTF-8: EF BB BF</span></span>  
  
-   <span data-ttu-id="82c05-1571">UTF-16 大 endian 字节顺序： FE FF</span><span class="sxs-lookup"><span data-stu-id="82c05-1571">UTF-16 big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="82c05-1572">UTF-16 little endian 字节顺序： FF FE</span><span class="sxs-lookup"><span data-stu-id="82c05-1572">UTF-16 little endian byte order: FF FE</span></span>  
  
-   <span data-ttu-id="82c05-1573">32大 endian 字节顺序： 00 00 FE FF</span><span class="sxs-lookup"><span data-stu-id="82c05-1573">UTF-32 big endian byte order: 00 00 FE FF</span></span>  
  
-   <span data-ttu-id="82c05-1574">32 little endian 字节顺序： FF FE 00 00</span><span class="sxs-lookup"><span data-stu-id="82c05-1574">UTF-32 little endian byte order: FF FE 00 00</span></span>  
  
 <span data-ttu-id="82c05-1575">应使用 BOM，因为它为其他文件的编码提供了几乎特定的标识，否则会丢失对该<xref:System.Text.Encoding>对象的引用，例如，未标记或错误标记的 web 数据或在业务不具有国际关注点或其他数据。</span><span class="sxs-lookup"><span data-stu-id="82c05-1575">You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.Encoding> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data.</span></span> <span data-ttu-id="82c05-1576">如果数据一致且标记正确（最好是 UTF-8 或 UTF-16），通常可以避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1576">Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.</span></span>  
  
 <span data-ttu-id="82c05-1577">对于提供编码类型的标准，BOM 有些多余。</span><span class="sxs-lookup"><span data-stu-id="82c05-1577">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="82c05-1578">但是，可以使用它来帮助服务器发送正确的编码标头。</span><span class="sxs-lookup"><span data-stu-id="82c05-1578">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="82c05-1579">或者，它可以用作回退，以防编码在其他情况下丢失。</span><span class="sxs-lookup"><span data-stu-id="82c05-1579">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="82c05-1580">使用 BOM 存在一些缺点。</span><span class="sxs-lookup"><span data-stu-id="82c05-1580">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="82c05-1581">例如，了解如何限制使用 BOM 的数据库字段可能很困难。</span><span class="sxs-lookup"><span data-stu-id="82c05-1581">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="82c05-1582">文件的串联可能也是一个问题，例如，当文件以这样一种方式进行合并时，不需要的字符会在数据中间结束。</span><span class="sxs-lookup"><span data-stu-id="82c05-1582">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="82c05-1583">但尽管有几个缺点，但强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="82c05-1583">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="82c05-1584">有关字节顺序和字节顺序标记的详细信息，请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-1584">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="82c05-1585">若要确保编码的字节解码正确，应使用前导码作为编码字节的前缀。</span><span class="sxs-lookup"><span data-stu-id="82c05-1585">To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</span></span> <span data-ttu-id="82c05-1586">但是，大多数编码不提供前导码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1586">However, most encodings do not provide a preamble.</span></span> <span data-ttu-id="82c05-1587">若要确保已编码的字节解码正确，应使用 Unicode 编码，即、 <xref:System.Text.UTF8Encoding> <xref:System.Text.UnicodeEncoding>、或<xref:System.Text.UTF32Encoding>，使用前导码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1587">To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding>, with a preamble.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1588">下面的示例根据前导头确定编码的字节顺序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1588">The following example determines the byte order of the encoding based on the preamble.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CPP/preamble.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CS/preamble.cs#1)]
 [!code-vb[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/VB/preamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-1589">在派生类中重写时，将一个字节序列解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1589">When overridden in a derived class, decodes a sequence of bytes into a string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="abstract member GetString : byte[] -&gt; string&#xA;override this.GetString : byte[] -&gt; string" Usage="encoding.GetString bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1590">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1590">The byte array containing the sequence of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1591">在派生类中重写时，将指定字节数组中的所有字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1591">When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="82c05-1592">包含指定字节序列解码结果的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1592">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1593">如果要转换的数据仅适用于连续块（如从流中读取的数据），或者如果数据量太大以致需要分为更小块，则应使用<xref:System.Text.Decoder>派生<xref:System.Text.Encoding.GetDecoder%2A>方法返回的对象v) 类。</span><span class="sxs-lookup"><span data-stu-id="82c05-1593">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1594">请参阅<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>参考主题的 "备注" 部分，了解解码方法和注意事项。</span><span class="sxs-lookup"><span data-stu-id="82c05-1594">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="82c05-1595">请注意，特定<xref:System.Text.Encoding.GetString%2A> <xref:System.Text.Encoding>实现的方法的精确行为取决于为该<xref:System.Text.Encoding>对象定义的回退策略。</span><span class="sxs-lookup"><span data-stu-id="82c05-1595">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="82c05-1596">有关详细信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)主题的 "选择回退策略" 部分。</span><span class="sxs-lookup"><span data-stu-id="82c05-1596">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1597">下面的示例从<xref:System.IO.FileStream>对象表示的二进制文件中读取 utf-8 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1597">The following example reads a UTF-8 encoded string from a binary file represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="82c05-1598">对于小于2048个字节的文件，它会将整个文件的内容读入一个字节数组中，并调用<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29>方法来执行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1598">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29> method to perform the decoding.</span></span> <span data-ttu-id="82c05-1599">对于较大的文件，它一次将2048字节读取到字节数组中， <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>并调用方法来确定数组中包含的字符数，然后<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>调用方法来执行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1599">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring1.cs#2)]
 [!code-vb[System.Text.Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring1.vb#2)]  
  
 <span data-ttu-id="82c05-1600">该示例使用以下文本，该文本应保存到名为 Utf8Example 的 UTF-8 编码文件中。</span><span class="sxs-lookup"><span data-stu-id="82c05-1600">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1601">字节数组中包含无效的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="82c05-1601">The byte array contains invalid Unicode code points.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1602"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1602"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1603">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1603">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1604">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1604">-and-</span></span> 
 <span data-ttu-id="82c05-1605">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1605"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString (bytes As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.GetString : ReadOnlySpan&lt;byte&gt; -&gt; string" Usage="encoding.GetString bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="member this.GetString : nativeptr&lt;byte&gt; * int -&gt; string" Usage="encoding.GetString (bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1606">指向字节数组的指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-1606">A pointer to a byte array.</span></span></param>
        <param name="byteCount"><span data-ttu-id="82c05-1607">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1607">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1608">在派生类中重写时，将在指定地址开始的指定字节数解码为字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1608">When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</span></span></summary>
        <returns><span data-ttu-id="82c05-1609">包含指定字节序列解码结果的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1609">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1610">此<xref:System.Text.Encoding.GetString%2A>方法旨在优化到字节数组的本机指针时的性能。</span><span class="sxs-lookup"><span data-stu-id="82c05-1610">The <xref:System.Text.Encoding.GetString%2A> method is designed to optimize performance when you have a native pointer to a byte array.</span></span> <span data-ttu-id="82c05-1611">可以改为调用此方法而无需创建任何中间对象，而不是先创建托管字节数组再对其进行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1611">Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.</span></span>  
  
 <span data-ttu-id="82c05-1612">如果要转换的数据仅适用于连续块（如从流中读取的数据），或者如果数据量太大以致需要分为更小块，则应使用<xref:System.Text.Decoder>派生<xref:System.Text.Encoding.GetDecoder%2A>方法返回的对象v) 类。</span><span class="sxs-lookup"><span data-stu-id="82c05-1612">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1613">请参阅<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>参考主题的 "备注" 部分，了解解码方法和注意事项。</span><span class="sxs-lookup"><span data-stu-id="82c05-1613">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
 <span data-ttu-id="82c05-1614">请注意，特定<xref:System.Text.Encoding.GetString%2A> <xref:System.Text.Encoding>实现的方法的精确行为取决于为该<xref:System.Text.Encoding>对象定义的回退策略。</span><span class="sxs-lookup"><span data-stu-id="82c05-1614">Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object.</span></span> <span data-ttu-id="82c05-1615">有关详细信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)主题的 "选择回退策略" 部分。</span><span class="sxs-lookup"><span data-stu-id="82c05-1615">For more information, see the "Choosing a Fallback Strategy" section of the [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1616"><paramref name="bytes" /> 为 null 指针。</span><span class="sxs-lookup"><span data-stu-id="82c05-1616"><paramref name="bytes" /> is a null pointer.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1617"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1617"><paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1618">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1618">A   fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span> 
<span data-ttu-id="82c05-1619">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1619">-and-</span></span> 
 <span data-ttu-id="82c05-1620">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1620"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member GetString : byte[] * int * int -&gt; string&#xA;override this.GetString : byte[] * int * int -&gt; string" Usage="encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="82c05-1621">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="82c05-1621">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="82c05-1622">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="82c05-1622">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="82c05-1623">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1623">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="82c05-1624">在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1624">When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="82c05-1625">包含指定字节序列解码结果的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1625">A string that contains the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1626">如果要转换的数据仅在顺序块（如从流中读取的数据）中可用，或者如果数据量很大以致需要分为更小块，则应使用<xref:System.Text.Decoder>由<xref:System.Text.Encoding.GetDecoder%2A> <xref:System.Text.Encoder>派生类的<xref:System.Text.Encoding.GetEncoder%2A>方法或方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1626">If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.</span></span>  
  
 <span data-ttu-id="82c05-1627">请参阅<xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>参考主题的 "备注" 部分，了解解码方法和注意事项。</span><span class="sxs-lookup"><span data-stu-id="82c05-1627">See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType> reference topic for a discussion of decoding techniques and considerations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1628">下面的示例从由<xref:System.IO.FileStream>对象表示的二进制文件中读取 utf-8 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="82c05-1628">The following example reads a UTF-8 encoded string from a binary file that is represented by a <xref:System.IO.FileStream> object.</span></span> <span data-ttu-id="82c05-1629">对于小于2048个字节的文件，它会将整个文件的内容读入一个字节数组中，并调用<xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来执行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1629">For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to perform the decoding.</span></span> <span data-ttu-id="82c05-1630">对于较大的文件，它一次将2048字节读取到字节数组中， <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>并调用方法来确定数组中包含的字符数，然后<xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType>调用方法来执行解码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1630">For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> method to perform the decoding.</span></span>  
  
 [!code-csharp[System.Text.Encoding.GetString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring2.cs#3)]
 [!code-vb[System.Text.Encoding.GetString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring2.vb#3)]  
  
 <span data-ttu-id="82c05-1631">该示例使用以下文本，该文本应保存到名为 Utf8Example 的 UTF-8 编码文件中。</span><span class="sxs-lookup"><span data-stu-id="82c05-1631">The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</span></span>  
  
```  
  
This is a UTF-8-encoded file that contains primarily Latin text, although it   
does list the first twelve letters of the Russian (Cyrillic) alphabet:  
  
А б в г д е ё ж з и й к  
  
The goal is to save this file, then open and decode it as a binary stream.  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="82c05-1632">字节数组中包含无效的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="82c05-1632">The byte array contains invalid Unicode code points.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1633"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1633"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="82c05-1634"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="82c05-1634"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="82c05-1635">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1635">-or-</span></span> 
 <span data-ttu-id="82c05-1636"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="82c05-1636"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="82c05-1637">发生了回退（如需完整说明，请参阅 [.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="82c05-1637">A fallback occurred (see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="82c05-1638">－和－</span><span class="sxs-lookup"><span data-stu-id="82c05-1638">-and-</span></span> 
 <span data-ttu-id="82c05-1639">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1639"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetDecoder" />
        <altmember cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" />
        <altmember cref="M:System.Text.Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HeaderName">
      <MemberSignature Language="C#" Value="public virtual string HeaderName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.HeaderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HeaderName : string" Usage="System.Text.Encoding.HeaderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1640">在派生类中重写时，获取可与邮件代理头标记一起使用的当前编码的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1640">When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</span></span></summary>
        <value><span data-ttu-id="82c05-1641">与邮件代理头标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1641">A name for the current <see cref="T:System.Text.Encoding" /> to use with mail agent header tags.</span></span>  
  
<span data-ttu-id="82c05-1642">或</span><span class="sxs-lookup"><span data-stu-id="82c05-1642">-or-</span></span> 
<span data-ttu-id="82c05-1643">如果当前 <see cref="T:System.Text.Encoding" /> 无法使用，则为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="82c05-1643">An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1644">如果需要标头名称的编码，则应<xref:System.Text.Encoding.GetEncoding%2A> <xref:System.Text.Encoding.HeaderName%2A>使用属性调用方法。</span><span class="sxs-lookup"><span data-stu-id="82c05-1644">If you need an encoding for a header name, you should call the <xref:System.Text.Encoding.GetEncoding%2A> method with the <xref:System.Text.Encoding.HeaderName%2A> property.</span></span> <span data-ttu-id="82c05-1645">通常，方法从调用中提供的测试编码检索不同的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1645">Often the method retrieves a different encoding from the test encoding furnished in the call.</span></span> <span data-ttu-id="82c05-1646">通常，只有电子邮件应用程序需要检索这种编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1646">Generally only email applications need to retrieve such an encoding.</span></span>  
  
 <span data-ttu-id="82c05-1647">在某些情况下， <xref:System.Text.Encoding.BodyName%2A>属性的值对应于定义该编码的国际标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-1647">In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding.</span></span> <span data-ttu-id="82c05-1648">这并不意味着实现完全符合该标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-1648">This doesn't mean that the implementation complies in full with that standard.</span></span>  
  
 <span data-ttu-id="82c05-1649">请注意<xref:System.Text.Encoding.WebName%2A> ，返回用于描述编码的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1649">Note that <xref:System.Text.Encoding.WebName%2A> returns the name to use to describe an encoding.</span></span> <span data-ttu-id="82c05-1650">此<xref:System.Text.Encoding.HeaderName%2A>属性定义了一个可能更适用于电子邮件应用程序的不同编码，例如。</span><span class="sxs-lookup"><span data-stu-id="82c05-1650">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for an email application, for example.</span></span> <span data-ttu-id="82c05-1651">但是，不建议使用属性来定义编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1651">However, use of the property to define the encoding is not recommended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1652">下面的示例检索每个编码的不同名称，并显示一个或多个名称不同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1652">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-1653">它将<xref:System.Text.Encoding.EncodingName%2A>显示，但不会对其进行比较。</span><span class="sxs-lookup"><span data-stu-id="82c05-1653">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.WebName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAlwaysNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="82c05-1654">获取一个值，该值指示当前编码是否始终被规范化。</span><span class="sxs-lookup"><span data-stu-id="82c05-1654">Gets a value indicating whether the current encoding is always normalized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public bool IsAlwaysNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAlwaysNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAlwaysNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAlwaysNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsAlwaysNormalized : unit -&gt; bool" Usage="encoding.IsAlwaysNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="82c05-1655">使用默认范式获取一个值，该值指示当前编码是否始终被规范化。</span><span class="sxs-lookup"><span data-stu-id="82c05-1655">Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</span></span></summary>
        <returns><span data-ttu-id="82c05-1656">如果当前 <see cref="T:System.Text.Encoding" /> 始终被规范化，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1656"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="82c05-1657">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1657">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1658">默认范式为<xref:System.Text.NormalizationForm.FormC>，使用完全规范分解，然后将序列替换为其主复合（如果可能）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1658">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsAlwaysNormalized">
      <MemberSignature Language="C#" Value="public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAlwaysNormalized(valuetype System.Text.NormalizationForm form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAlwaysNormalized (form As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAlwaysNormalized(System::Text::NormalizationForm form);" />
      <MemberSignature Language="F#" Value="abstract member IsAlwaysNormalized : System.Text.NormalizationForm -&gt; bool&#xA;override this.IsAlwaysNormalized : System.Text.NormalizationForm -&gt; bool" Usage="encoding.IsAlwaysNormalized form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="form"><span data-ttu-id="82c05-1659"><see cref="T:System.Text.NormalizationForm" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="82c05-1659">One of the <see cref="T:System.Text.NormalizationForm" /> values.</span></span></param>
        <summary><span data-ttu-id="82c05-1660">在派生类中重写时，使用指定范式获取一个值，该值指示当前编码是否始终被规范化。</span><span class="sxs-lookup"><span data-stu-id="82c05-1660">When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</span></span></summary>
        <returns><span data-ttu-id="82c05-1661">如果始终使用指定的 <see langword="true" /> 值规范化当前 <see cref="T:System.Text.Encoding" /> 对象，则为 <see cref="T:System.Text.NormalizationForm" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1661"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="82c05-1662">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1662">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1663">默认范式为<xref:System.Text.NormalizationForm.FormC>，使用完全规范分解，然后将序列替换为其主复合（如果可能）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1663">The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.NormalizationForm" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserDisplay { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBrowserDisplay : bool" Usage="System.Text.Encoding.IsBrowserDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1664">在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码显示内容。</span><span class="sxs-lookup"><span data-stu-id="82c05-1664">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</span></span></summary>
        <value><span data-ttu-id="82c05-1665">如果浏览器客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 显示内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1665"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for displaying content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-1666">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1666">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserSave" />
      </Docs>
    </Member>
    <Member MemberName="IsBrowserSave">
      <MemberSignature Language="C#" Value="public virtual bool IsBrowserSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBrowserSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsBrowserSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBrowserSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsBrowserSave { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBrowserSave : bool" Usage="System.Text.Encoding.IsBrowserSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1667">在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码保存内容。</span><span class="sxs-lookup"><span data-stu-id="82c05-1667">When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</span></span></summary>
        <value><span data-ttu-id="82c05-1668">如果浏览器客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 保存内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1668"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for saving content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-1669">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1669">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsBrowserDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsDisplay">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsDisplay" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsDisplay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsDisplay { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMailNewsDisplay : bool" Usage="System.Text.Encoding.IsMailNewsDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1670">在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码显示内容。</span><span class="sxs-lookup"><span data-stu-id="82c05-1670">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</span></span></summary>
        <value><span data-ttu-id="82c05-1671">如果邮件和新闻客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 显示内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1671"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for displaying content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-1672">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1672">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsDisplay" />
      </Docs>
    </Member>
    <Member MemberName="IsMailNewsSave">
      <MemberSignature Language="C#" Value="public virtual bool IsMailNewsSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMailNewsSave" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsMailNewsSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMailNewsSave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMailNewsSave { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMailNewsSave : bool" Usage="System.Text.Encoding.IsMailNewsSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1673">在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码保存内容。</span><span class="sxs-lookup"><span data-stu-id="82c05-1673">When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</span></span></summary>
        <value><span data-ttu-id="82c05-1674">如果邮件和新闻客户端可以使用当前 <see langword="true" /> 保存内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1674"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for saving content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="82c05-1675">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1675">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.IsMailNewsSave" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.Encoding.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1676">在派生类中重写时，获取一个值，该值指示当前的编码是否为只读。</span><span class="sxs-lookup"><span data-stu-id="82c05-1676">When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</span></span></summary>
        <value><span data-ttu-id="82c05-1677">如果当前 <see langword="true" /> 为只读，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1677"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="82c05-1678">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1678">The default is <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public virtual bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.IsSingleByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSingleByte As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSingleByte { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleByte : bool" Usage="System.Text.Encoding.IsSingleByte" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1679">在派生类中重写时，获取一个值，该值指示当前的编码是否使用单字节码位。</span><span class="sxs-lookup"><span data-stu-id="82c05-1679">When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</span></span></summary>
        <value><span data-ttu-id="82c05-1680">如果当前 <see langword="true" /> 使用单字节码位，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1680"><see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> uses single-byte code points; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1681">例如<xref:System.Text.ASCIIEncoding>，对于单字节编码，此属性检索`true`。</span><span class="sxs-lookup"><span data-stu-id="82c05-1681">For a single-byte encoding, for example, <xref:System.Text.ASCIIEncoding>, this property retrieves `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="82c05-1682">你应注意应用程序对的值<xref:System.Text.Encoding.IsSingleByte%2A>的处理。</span><span class="sxs-lookup"><span data-stu-id="82c05-1682">You should be careful in what your application does with the value for <xref:System.Text.Encoding.IsSingleByte%2A>.</span></span> <span data-ttu-id="82c05-1683">如何进行编码的假设仍可能是错误的。</span><span class="sxs-lookup"><span data-stu-id="82c05-1683">An assumption of how an Encoding will proceed may still be wrong.</span></span> <span data-ttu-id="82c05-1684">例如，Windows-1252 的值`true`为<xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>，但 GetMaxByteCount （1）返回2。</span><span class="sxs-lookup"><span data-stu-id="82c05-1684">For example, Windows-1252 has a value of `true` for <xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType>, but Encoding.GetMaxByteCount(1) returns 2.</span></span> <span data-ttu-id="82c05-1685">这是因为该方法会考虑以前的解码器操作的潜在遗留代理项。</span><span class="sxs-lookup"><span data-stu-id="82c05-1685">This is because the method considers potential leftover surrogates from a previous decoder operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1686">下面的示例检查每个编码的布尔值属性的值。</span><span class="sxs-lookup"><span data-stu-id="82c05-1686">The following example checks the values of the Boolean properties of each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]
 [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]
 [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public virtual ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Encoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterProvider">
      <MemberSignature Language="C#" Value="public static void RegisterProvider (System.Text.EncodingProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterProvider(class System.Text.EncodingProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterProvider (provider As EncodingProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterProvider(System::Text::EncodingProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member RegisterProvider : System.Text.EncodingProvider -&gt; unit" Usage="System.Text.Encoding.RegisterProvider provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Text.EncodingProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="82c05-1687">提供对其他字符编码的访问权限的 <see cref="T:System.Text.EncodingProvider" /> 的子类。</span><span class="sxs-lookup"><span data-stu-id="82c05-1687">A subclass of <see cref="T:System.Text.EncodingProvider" /> that provides access to additional character encodings.</span></span></param>
        <summary><span data-ttu-id="82c05-1688">注册编码提供程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1688">Registers an encoding provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1689">方法允许注册派生自<xref:System.Text.EncodingProvider>的类，使字符编码在不支持它们的平台上可用。 <xref:System.Text.Encoding.RegisterProvider%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1689">The <xref:System.Text.Encoding.RegisterProvider%2A> method allows you to register a class derived from <xref:System.Text.EncodingProvider> that makes character encodings available on a platform that does not otherwise support them.</span></span> <span data-ttu-id="82c05-1690">注册编码提供程序后，可通过调用任何<xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>重载来检索它支持的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1690">Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> overload.</span></span> <span data-ttu-id="82c05-1691">如果有多个编码提供程序， <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>则该方法会尝试从每个提供程序中检索指定的编码（从最近注册的提供程序开始）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1691">If there are multiple encoding providers, the <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> method attempts to retrieve a specified encoding from each provider starting with the one most recently registered.</span></span>

<span data-ttu-id="82c05-1692">使用<xref:System.Text.Encoding.RegisterProvider%2A>方法注册编码提供程序还会修改[encoding.getencoding （int32）](<xref:System.Text.Encoding.GetEncoding(System.Int32)>)和[EncodingProvider （int32，EncoderFallback，DecoderFallback）](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))方法的行为。的`0`参数：</span><span class="sxs-lookup"><span data-stu-id="82c05-1692">Registering an encoding provider by using the <xref:System.Text.Encoding.RegisterProvider%2A> method also modifies the behavior of the [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) and [EncodingProvider.GetEncoding(Int32, EncoderFallback, DecoderFallback)](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)) methods when passed an argument of `0`:</span></span>

- <span data-ttu-id="82c05-1693">如果注册的提供程序为<xref:System.Text.CodePagesEncodingProvider>，则在 Windows 操作系统上运行时，方法将返回与系统活动代码页匹配的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1693">If the registered provider is the <xref:System.Text.CodePagesEncodingProvider>, the method returns the encoding that matches the system active code page when running on the Windows operating system.</span></span>

- <span data-ttu-id="82c05-1694">自定义编码提供程序可以选择在为这些<xref:System.Text.Encoding.GetEncoding%2A>方法重载之一传递`0`参数时要返回的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1694">A custom encoding provider can choose which encoding to return when either of these <xref:System.Text.Encoding.GetEncoding%2A> method overloads is passed an argument of `0`.</span></span> <span data-ttu-id="82c05-1695">提供程序还可以选择不通过<xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType>使方法返回`null`来返回编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1695">The provider can also choose to not return an encoding by having the <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> method return `null`.</span></span> 
  
<span data-ttu-id="82c05-1696">从 .NET Framework 4.6 开始，.NET Framework 包含一个编码提供程序， <xref:System.Text.CodePagesEncodingProvider>该提供程序使编码可用，该提供程序在完整 .NET Framework 中存在，但在通用 Windows 平台中不可用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1696">Starting with the .NET Framework 4.6, the .NET Framework includes one encoding provider, <xref:System.Text.CodePagesEncodingProvider>, that makes the encodings available that are present in the full .NET Framework but are not available in the Universal Windows Platform.</span></span> <span data-ttu-id="82c05-1697">默认情况下，通用 Windows 平台仅支持 Unicode 编码、ASCII 和代码页28591。</span><span class="sxs-lookup"><span data-stu-id="82c05-1697">By default, the Universal Windows Platform only supports the Unicode encodings, ASCII, and code page 28591.</span></span>  
  
 <span data-ttu-id="82c05-1698">如果对<xref:System.Text.Encoding.RegisterProvider%2A>方法的多个调用中使用了相同的编码提供程序，则只有第一个方法调用将注册该提供程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1698">If the same encoding provider is used in multiple calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method, only the first method call registers the provider.</span></span> <span data-ttu-id="82c05-1699">后续调用将被忽略。</span><span class="sxs-lookup"><span data-stu-id="82c05-1699">Subsequent calls are ignored.</span></span>  
  
 <span data-ttu-id="82c05-1700">如果调用<xref:System.Text.Encoding.RegisterProvider%2A>方法来注册处理相同编码的多个提供程序，则最后一个注册的提供程序将用于所有编码和解码操作。</span><span class="sxs-lookup"><span data-stu-id="82c05-1700">If the <xref:System.Text.Encoding.RegisterProvider%2A> method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations.</span></span> <span data-ttu-id="82c05-1701">将忽略任何以前注册的提供程序。</span><span class="sxs-lookup"><span data-stu-id="82c05-1701">Any previously registered providers are ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="82c05-1702"><paramref name="provider" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="82c05-1702"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Text.CodePagesEncodingProvider" />
        <altmember cref="T:System.Text.EncodingProvider" />
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding Unicode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding Unicode" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.Unicode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Unicode As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ Unicode { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Unicode : System.Text.Encoding" Usage="System.Text.Encoding.Unicode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1703">获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1703">Gets an encoding for the UTF-16 format using the little endian byte order.</span></span></summary>
        <value><span data-ttu-id="82c05-1704">使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1704">An encoding for the UTF-16 format using the little endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1705">有关 .NET 支持的编码以及要使用的 Unicode 编码的讨论的信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="82c05-1705">For information about the encodings supported by the .NET and a discussion of which Unicode encoding to use, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="82c05-1706">此<xref:System.Text.UnicodeEncoding>属性返回的对象可能没有适用于你的应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-1706">The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="82c05-1707">它使用替换回退来替换每个不能进行编码的字符串，以及无法使用问号（"？"）字符解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1707">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</span></span> <span data-ttu-id="82c05-1708">相反，你<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>可以调用构造函数来实例化<xref:System.Text.EncoderFallbackException>其<xref:System.Text.UnicodeEncoding>回退为或的<xref:System.Text.DecoderFallbackException>little endian 对象，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-1708">Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a little endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.Unicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.unicode/cs/unicode1.cs#2)]
 [!code-vb[System.Text.Encoding.Unicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.unicode/vb/unicode1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1709">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1709">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UnicodeEncoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1710">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1710">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UTF32">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF32 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF32" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF32" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF32 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF32 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF32 : System.Text.Encoding" Usage="System.Text.Encoding.UTF32" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1711">获取使用 Little-Endian 字节顺序的 UTF-32 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1711">Gets an encoding for the UTF-32 format using the little endian byte order.</span></span></summary>
        <value><span data-ttu-id="82c05-1712">使用 Little-Endian 字节顺序的 UTF-32 格式的编码对象。</span><span class="sxs-lookup"><span data-stu-id="82c05-1712">An  encoding object for the UTF-32 format using the little endian byte order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1713">此<xref:System.Text.UTF32Encoding>属性返回的对象可能没有适用于你的应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-1713">The <xref:System.Text.UTF32Encoding> object that is returned by this property may not have the appropriate behavior for your app.</span></span> <span data-ttu-id="82c05-1714">它使用替换回退来替换每个不能进行编码的字符串，以及无法使用 Unicode 替换字符（U + FFFE）解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1714">It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE).</span></span> <span data-ttu-id="82c05-1715">相反<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> ，你可以调用构造函数来<xref:System.Text.UTF32Encoding>实例化<xref:System.Text.EncoderFallbackException>其回退为或的<xref:System.Text.DecoderFallbackException>对象，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-1715">Instead, you can call the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF32Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf32/cs/encoding.utf32.1.cs#1)]
 [!code-vb[System.Text.Encoding.UTF32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf32/vb/encoding.utf32.1.vb#1)]  
  
 <span data-ttu-id="82c05-1716">有关 little endian 字节顺序的讨论，请参阅<xref:System.Text.Encoding>类主题。</span><span class="sxs-lookup"><span data-stu-id="82c05-1716">For a discussion of little endian byte order, see the <xref:System.Text.Encoding> class topic.</span></span>  
  
 <span data-ttu-id="82c05-1717">有关 .NET 支持的编码以及要使用的 Unicode 编码的讨论的信息，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="82c05-1717">For information about the encodings supported by .NET and a discussion of which Unicode encoding to use, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1718">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1718">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF32Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <altmember cref="P:System.Text.Encoding.Unicode" />
        <altmember cref="P:System.Text.Encoding.BigEndianUnicode" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1719">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1719">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UTF7">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF7" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF7 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF7 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF7 : System.Text.Encoding" Usage="System.Text.Encoding.UTF7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1720">获取 UTF-7 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1720">Gets an encoding for the UTF-7 format.</span></span></summary>
        <value><span data-ttu-id="82c05-1721">UTF-7 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1721">An encoding for the UTF-7 format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1722">UTF-7 编码主要用于在过去限制为7位（如 NNTP 和某些电子邮件应用程序）的环境中。</span><span class="sxs-lookup"><span data-stu-id="82c05-1722">UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications.</span></span> <span data-ttu-id="82c05-1723">由于可靠性和安全性方面的问题，不应在可改用 UTF-8 编码的8位环境中使用 UTF7 编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1723">Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1724">下面的示例确定对字符数组进行编码、对字符进行编码并显示生成的字节所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1724">The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</span></span>  
  
 [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF7Encoding" />
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1725">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1725">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UTF8">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding UTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding UTF8" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.UTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UTF8 As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ UTF8 { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UTF8 : System.Text.Encoding" Usage="System.Text.Encoding.UTF8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1726">获取 UTF-8 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1726">Gets an encoding for the UTF-8 format.</span></span></summary>
        <value><span data-ttu-id="82c05-1727">UTF-8 格式的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1727">An encoding for the UTF-8 format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1728">此属性返回一个<xref:System.Text.UTF8Encoding>对象，该对象将 Unicode （utf-16 编码的）字符编码为每个字符一至四个字节的序列，并将 utf-8 编码的字节数组解码为 Unicode （utf-16 编码的）字符。</span><span class="sxs-lookup"><span data-stu-id="82c05-1728">This property returns a <xref:System.Text.UTF8Encoding> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters.</span></span> <span data-ttu-id="82c05-1729">有关 .NET 支持的字符编码以及要使用的 Unicode 编码的讨论，请参阅[.net 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="82c05-1729">For information about the character encodings supported by .NET and a discussion of which Unicode encoding to use, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="82c05-1730">此<xref:System.Text.UTF8Encoding>属性返回的对象可能没有适用于你的应用程序的行为。</span><span class="sxs-lookup"><span data-stu-id="82c05-1730">The <xref:System.Text.UTF8Encoding> object that is returned by this property might not have the appropriate behavior for your app.</span></span>  
  
-   <span data-ttu-id="82c05-1731">它将返回<xref:System.Text.UTF8Encoding>一个对象，该对象提供一个 Unicode 字节顺序标记（BOM）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1731">It returns a <xref:System.Text.UTF8Encoding> object that provides a Unicode byte order mark (BOM).</span></span> <span data-ttu-id="82c05-1732">若要实例化不提供 BOM 的 UTF8 编码，请调用<xref:System.Text.UTF8Encoding.%23ctor%2A>构造函数的任何重载。</span><span class="sxs-lookup"><span data-stu-id="82c05-1732">To instantiate a UTF8 encoding that doesn't provide a BOM, call any overload of the <xref:System.Text.UTF8Encoding.%23ctor%2A> constructor.</span></span>  
  
-   <span data-ttu-id="82c05-1733">它将返回<xref:System.Text.UTF8Encoding>一个对象，该对象使用替换回退来替换每个无法编码的字符串，以及无法使用问号（"？"）字符解码的每个字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1733">It returns a <xref:System.Text.UTF8Encoding> object that uses replacement fallback to replace each string that it can't encode and each byte that it can't decode with a question mark ("?") character.</span></span> <span data-ttu-id="82c05-1734">相反<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> ，你可以调用构造函数来<xref:System.Text.UTF8Encoding>实例化<xref:System.Text.EncoderFallbackException>其回退为或的<xref:System.Text.DecoderFallbackException>对象，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="82c05-1734">Instead, you can call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructor to instantiate a <xref:System.Text.UTF8Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.</span></span>  
  
     [!code-csharp[System.Text.Encoding.UTF8#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/encoding.utf8.1.cs#1)]
     [!code-vb[System.Text.Encoding.UTF8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/encoding.utf8.1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1735">下面的示例定义一个包含以下字符的数组：</span><span class="sxs-lookup"><span data-stu-id="82c05-1735">The following example defines an array that consists of the following characters:</span></span>  
  
-   <span data-ttu-id="82c05-1736">拉丁文小写字母 Z （U + 007A）</span><span class="sxs-lookup"><span data-stu-id="82c05-1736">LATIN SMALL LETTER Z (U+007A)</span></span>  
  
-   <span data-ttu-id="82c05-1737">拉丁文小写字母 A （U + 0061）</span><span class="sxs-lookup"><span data-stu-id="82c05-1737">LATIN SMALL LETTER A (U+0061)</span></span>  
  
-   <span data-ttu-id="82c05-1738">组合短音符（U + 0306）</span><span class="sxs-lookup"><span data-stu-id="82c05-1738">COMBINING BREVE (U+0306)</span></span>  
  
-   <span data-ttu-id="82c05-1739">拉丁文小写字母 AE WITH 锐音符（U + 01FD）</span><span class="sxs-lookup"><span data-stu-id="82c05-1739">LATIN SMALL LETTER AE WITH ACUTE (U+01FD)</span></span>  
  
-   <span data-ttu-id="82c05-1740">希腊文小写字母 BETA （U + 03B2）</span><span class="sxs-lookup"><span data-stu-id="82c05-1740">GREEK SMALL LETTER BETA (U+03B2)</span></span>  
  
-   <span data-ttu-id="82c05-1741">构成希腊语 ACROPHONIC 阁楼 1000 STATERS （U + 10154）的代理项对（U + D800 U + DD54）。</span><span class="sxs-lookup"><span data-stu-id="82c05-1741">A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).</span></span>  
  
 <span data-ttu-id="82c05-1742">它显示每个字符的 UTF-16 代码单元，并确定 UTF-8 编码器对字符数组进行编码所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="82c05-1742">It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array.</span></span> <span data-ttu-id="82c05-1743">然后，它对字符进行编码，并显示生成的 UTF-8 编码字节。</span><span class="sxs-lookup"><span data-stu-id="82c05-1743">It then encodes the characters and displays the resulting UTF-8-encoded bytes.</span></span>  
  
 [!code-csharp[System.Text.Encoding.UTF8#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/example1.cs#2)]
 [!code-vb[System.Text.Encoding.UTF8#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.UTF8Encoding" />
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="82c05-1744">了解编码</span><span class="sxs-lookup"><span data-stu-id="82c05-1744">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WebName">
      <MemberSignature Language="C#" Value="public virtual string WebName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WebName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WebName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WebName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WebName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebName : string" Usage="System.Text.Encoding.WebName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1745">在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1745">When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</span></span></summary>
        <value><span data-ttu-id="82c05-1746">当前 <see cref="T:System.Text.Encoding" /> 的 IANA 名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1746">The IANA name for the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1747">属性与<xref:System.Text.EncodingInfo.Name%2A>属性相同。 <xref:System.Text.Encoding.WebName%2A></span><span class="sxs-lookup"><span data-stu-id="82c05-1747">The <xref:System.Text.Encoding.WebName%2A> property is the same as the <xref:System.Text.EncodingInfo.Name%2A> property.</span></span>  
  
 <span data-ttu-id="82c05-1748">请注意<xref:System.Text.Encoding.WebName%2A> ，返回编码的 IANA 注册名称。</span><span class="sxs-lookup"><span data-stu-id="82c05-1748">Note that <xref:System.Text.Encoding.WebName%2A> returns an IANA-registered name for the encoding.</span></span> <span data-ttu-id="82c05-1749">如果其值为标准的名称，则编码的实现可能不会完全符合该标准。</span><span class="sxs-lookup"><span data-stu-id="82c05-1749">When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard.</span></span> <span data-ttu-id="82c05-1750"><xref:System.Text.Encoding.HeaderName%2A>属性定义可能更适用于电子邮件标头的其他编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1750">The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for email headers.</span></span> <span data-ttu-id="82c05-1751">但是，大多数应用程序应<xref:System.Text.Encoding.WebName%2A>改用。</span><span class="sxs-lookup"><span data-stu-id="82c05-1751">However, most apps should use <xref:System.Text.Encoding.WebName%2A> instead.</span></span>  
  
 <span data-ttu-id="82c05-1752">有关 IANA 的详细信息，请参阅[www.iana.org](https://www.iana.org/)。</span><span class="sxs-lookup"><span data-stu-id="82c05-1752">For more information on the IANA, go to [www.iana.org](https://www.iana.org/).</span></span>  
  
 <span data-ttu-id="82c05-1753">与返回的 <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> 相同。 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> <xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="82c05-1753">The <xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType> is the same as the <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType> returned by <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-1754">某些 web 名称是重复的;<xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>有关详细信息，请参阅 "备注"。</span><span class="sxs-lookup"><span data-stu-id="82c05-1754">Some of the web names are duplicates; see the remarks for <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1755">下面的示例<xref:System.Text.Encoding.WebName%2A>在 HTML 标头中包含。</span><span class="sxs-lookup"><span data-stu-id="82c05-1755">The following example includes the <xref:System.Text.Encoding.WebName%2A> in an HTML header.</span></span>  
  
 [!code-cpp[System.Text.Encoding.WebName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CPP/webname.cpp#1)]
 [!code-csharp[System.Text.Encoding.WebName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CS/webname.cs#1)]
 [!code-vb[System.Text.Encoding.WebName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.WebName/VB/webname.vb#1)]  
  
 <span data-ttu-id="82c05-1756">下面的示例检索每个编码的不同名称，并显示一个或多个名称不同于<xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>的编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1756">The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="82c05-1757">它将<xref:System.Text.Encoding.EncodingName%2A>显示，但不会对其进行比较。</span><span class="sxs-lookup"><span data-stu-id="82c05-1757">It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.</span></span>  
  
 [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]
 [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]
 [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.EncodingInfo.Name" />
        <altmember cref="P:System.Text.Encoding.BodyName" />
        <altmember cref="P:System.Text.Encoding.EncodingName" />
        <altmember cref="P:System.Text.Encoding.HeaderName" />
      </Docs>
    </Member>
    <Member MemberName="WindowsCodePage">
      <MemberSignature Language="C#" Value="public virtual int WindowsCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowsCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Text.Encoding.WindowsCodePage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WindowsCodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WindowsCodePage { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsCodePage : int" Usage="System.Text.Encoding.WindowsCodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="82c05-1758">在派生类中重写时，获取与当前编码最紧密对应的 Windows 操作系统代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1758">When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</span></span></summary>
        <value><span data-ttu-id="82c05-1759">与当前 <see cref="T:System.Text.Encoding" /> 最紧密对应的 Windows 操作系统代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1759">The Windows operating system code page that most closely corresponds to the current <see cref="T:System.Text.Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82c05-1760">提供此属性是为了与 Windows 多语言（MLang） Api 兼容，例如确定字体系列。</span><span class="sxs-lookup"><span data-stu-id="82c05-1760">This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families.</span></span> <span data-ttu-id="82c05-1761">对于全球化，建议改为使用其中一个 Unicode 编码。</span><span class="sxs-lookup"><span data-stu-id="82c05-1761">For globalization, using one of the Unicode encodings is recommended instead.</span></span> <span data-ttu-id="82c05-1762">还建议使用<xref:System.Text.Encoding.WebName%2A> <xref:System.Text.Encoding.WindowsCodePage%2A>而不是来标识代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1762">It is also recommended to use <xref:System.Text.Encoding.WebName%2A> instead of <xref:System.Text.Encoding.WindowsCodePage%2A> to identify the code page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="82c05-1763">下面的示例确定与每个编码最紧密对应的 Windows 代码页。</span><span class="sxs-lookup"><span data-stu-id="82c05-1763">The following example determines the Windows code page that most closely corresponds to each encoding.</span></span>  
  
 [!code-cpp[System.Text.Encoding.CodePage#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CPP/codepage.cpp#1)]
 [!code-csharp[System.Text.Encoding.CodePage#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CS/codepage.cs#1)]
 [!code-vb[System.Text.Encoding.CodePage#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/VB/codepage.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
        <altmember cref="P:System.Text.EncodingInfo.CodePage" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="567bccf4e3679939d5849b3e1088df8da667065d" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68438742" /></Metadata><TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF8Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f001b-101">表示 Unicode 字符的 UTF-8 编码。</span><span class="sxs-lookup"><span data-stu-id="f001b-101">Represents a UTF-8 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="f001b-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="f001b-103">解码是将编码字节序列转换为一组 Unicode 字符的过程。</span><span class="sxs-lookup"><span data-stu-id="f001b-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="f001b-104">UTF-8 是一种 Unicode 编码, 它将每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-104">UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</span></span> <span data-ttu-id="f001b-105">与 UTF-16 和 UTF-32 编码不同, UTF-8 编码不需要 "endian";无论处理器是大字节序还是小型字节序, 编码方案都是相同的。</span><span class="sxs-lookup"><span data-stu-id="f001b-105">Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</span></span> <span data-ttu-id="f001b-106"><xref:System.Text.UTF8Encoding>对应于 Windows 代码页65001。</span><span class="sxs-lookup"><span data-stu-id="f001b-106"><xref:System.Text.UTF8Encoding> corresponds to the Windows code page 65001.</span></span> <span data-ttu-id="f001b-107">有关支持<xref:System.Text>的 UTFs 和其他编码的详细信息, 请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="f001b-107">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="f001b-108">您可以通过多种<xref:System.Text.UTF8Encoding>方式实例化对象, 具体取决于您是否希望它提供字节顺序标记 (BOM) 以及是否要启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-108">You can instantiate a <xref:System.Text.UTF8Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</span></span> <span data-ttu-id="f001b-109">下表列出了可<xref:System.Text.Encoding> <xref:System.Text.UTF8Encoding>返回对象的构造函数和属性。</span><span class="sxs-lookup"><span data-stu-id="f001b-109">The following table lists the constructors and the <xref:System.Text.Encoding> property that return a <xref:System.Text.UTF8Encoding> object.</span></span>  
  
|<span data-ttu-id="f001b-110">成员</span><span class="sxs-lookup"><span data-stu-id="f001b-110">Member</span></span>|<span data-ttu-id="f001b-111">BOM</span><span class="sxs-lookup"><span data-stu-id="f001b-111">BOM</span></span>|<span data-ttu-id="f001b-112">错误检测</span><span class="sxs-lookup"><span data-stu-id="f001b-112">Error detection</span></span>|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|<span data-ttu-id="f001b-113">是</span><span class="sxs-lookup"><span data-stu-id="f001b-113">Yes</span></span>|<span data-ttu-id="f001b-114">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f001b-114">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="f001b-115">No</span><span class="sxs-lookup"><span data-stu-id="f001b-115">No</span></span>|<span data-ttu-id="f001b-116">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f001b-116">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="f001b-117">可配置</span><span class="sxs-lookup"><span data-stu-id="f001b-117">Configurable</span></span>|<span data-ttu-id="f001b-118">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f001b-118">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="f001b-119">可配置</span><span class="sxs-lookup"><span data-stu-id="f001b-119">Configurable</span></span>|<span data-ttu-id="f001b-120">可配置</span><span class="sxs-lookup"><span data-stu-id="f001b-120">Configurable</span></span>|  
  
 <span data-ttu-id="f001b-121">方法确定导致对一组 Unicode 字符进行编码的字节数, <xref:System.Text.UTF8Encoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-121">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF8Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="f001b-122">同样, <xref:System.Text.UTF8Encoding.GetCharCount%2A>方法确定有多少字符导致一系列字节进行解码, <xref:System.Text.UTF8Encoding.GetChars%2A>并且和<xref:System.Text.UTF8Encoding.GetString%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="f001b-122">Likewise, the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF8Encoding.GetChars%2A> and <xref:System.Text.UTF8Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="f001b-123">对于可以在编码或解码跨多个块的数据时保存状态信息的编码器或解码器 (例如, 100000 个字符段中编码的1000000个字符), 请使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>和<xref:System.Text.UTF8Encoding.GetDecoder%2A>属性。分别.</span><span class="sxs-lookup"><span data-stu-id="f001b-123">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF8Encoding.GetEncoder%2A> and <xref:System.Text.UTF8Encoding.GetDecoder%2A> properties, respectively.</span></span>  
  
 <span data-ttu-id="f001b-124">(可选) 对象提供字节顺序标记 (BOM), 这是一个字节数组, 可以在编码过程中生成的字节流开头加上前缀。 <xref:System.Text.UTF8Encoding></span><span class="sxs-lookup"><span data-stu-id="f001b-124">Optionally, the <xref:System.Text.UTF8Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</span></span> <span data-ttu-id="f001b-125">如果 UTF-8 编码的字节流以字节顺序标记 (BOM) 开头, 则它有助于解码器确定字节顺序和转换格式或 UTF。</span><span class="sxs-lookup"><span data-stu-id="f001b-125">If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="f001b-126">但请注意, Unicode 标准既不需要也不建议使用 UTF-8 编码流中的 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-126">Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</span></span> <span data-ttu-id="f001b-127">有关字节顺序和字节顺序标记的详细信息, 请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="f001b-127">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
 <span data-ttu-id="f001b-128">如果将编码器配置为提供 BOM, 则可以通过调用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法来检索它; 否则, 该方法将返回空数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-128">If the encoder is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="f001b-129">请注意，即使<xref:System.Text.UTF8Encoding>BOM 支持的配置对象时，必须包含 BOM 将编码的字节流作为相应; 开头的编码方法<xref:System.Text.UTF8Encoding>类执行未自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="f001b-129">Note that, even if a <xref:System.Text.UTF8Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF8Encoding> class do not do this automatically.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f001b-130">若要启用错误检测并使类实例更安全, 应调用<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>构造函数并`throwOnInvalidBytes`将参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="f001b-130">To enable error detection and to make the class instance more secure, you should call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> constructor and set the `throwOnInvalidBytes` parameter to `true`.</span></span> <span data-ttu-id="f001b-131">启用错误检测后, 检测无效字符或字节序列的方法将引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-131">With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-132">如果未检测到错误, 则不会引发异常, 并且通常会忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-132">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f001b-133">如果使用不同的 .NET Framework 版本对对象进行序列化和反序列化, 则不保留 UTF-8 编码对象的状态。</span><span class="sxs-lookup"><span data-stu-id="f001b-133">The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-134">下面的示例使用<xref:System.Text.UTF8Encoding>对象对 Unicode 字符串进行编码, 并将其存储在字节数组中。</span><span class="sxs-lookup"><span data-stu-id="f001b-134">The following example uses a <xref:System.Text.UTF8Encoding> object to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="f001b-135">Unicode 字符串包含两个字符, 即 Pi (U + 03A0) 和 Sigma (U + 03A3), 它们在 ASCII 字符范围之外。</span><span class="sxs-lookup"><span data-stu-id="f001b-135">The Unicode string includes two characters, Pi (U+03A0) and Sigma (U+03A3), that are outside the ASCII character range.</span></span> <span data-ttu-id="f001b-136">编码的字节数组解码为字符串后, Pi 和 Sigma 字符仍然存在。</span><span class="sxs-lookup"><span data-stu-id="f001b-136">When the encoded byte array is decoded back to a string, the Pi and Sigma characters are still present.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="f001b-137">下面的示例使用与上一示例相同的字符串, 只不过它将已编码的字节写入文件, 并使用字节顺序标记 (BOM) 作为字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-137">The following example uses the same string as the previous example, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="f001b-138">它然后两个不同的方式读取文件： 为通过使用文本文件<xref:System.IO.StreamReader>对象; 和二进制文件。 如您所料，在两种情况下是 BOM 包括在新读取字符串。</span><span class="sxs-lookup"><span data-stu-id="f001b-138">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="f001b-139">正如您所料, 新读取的字符串都不包含 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-139">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f001b-140">了解编码</span><span class="sxs-lookup"><span data-stu-id="f001b-140">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f001b-141">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f001b-141">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f001b-142">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f001b-142">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-143">此构造函数创建一个实例, 该实例不提供 Unicode 字节顺序标记, 并且在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-143">This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f001b-144">出于安全原因, 建议通过调用具有`throwOnInvalidBytes`参数的构造函数并将其值设置为来`true`启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-144">For security reasons, we recommend that you enable error detection by calling a constructor with a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-145">下面的示例创建一个新<xref:System.Text.UTF8Encoding>的实例并显示其名称。</span><span class="sxs-lookup"><span data-stu-id="f001b-145">The following example creates a new <xref:System.Text.UTF8Encoding> instance and displays its name.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding encoderShouldEmitUTF8Identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="f001b-146">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-146"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f001b-147">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f001b-147">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="f001b-148">参数指定是否提供一个 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f001b-148">A parameter specifies whether to provide a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-149">此构造函数创建一个实例, 该实例在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-149">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f001b-150">出于安全原因, 应通过调用包含`throwOnInvalidBytes`参数的构造函数并将其值设置为来`true`启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-150">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting its value to `true`.</span></span>  
  
 <span data-ttu-id="f001b-151">参数控制<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法的操作。 `encoderShouldEmitUTF8Identifier`</span><span class="sxs-lookup"><span data-stu-id="f001b-151">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="f001b-152">如果`true`为, 则该方法返回一个字节数组, 其中包含 utf-8 格式的 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="f001b-152">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="f001b-153">如果`false`为, 则返回一个长度为零的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-153">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="f001b-154">但是，将设置`encoderShouldEmitUTF8Identifier`到`true`不会导致<xref:System.Text.UTF8Encoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法以包括中的 BOM 中的字节数的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-154">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-155">下面的示例创建一个新<xref:System.Text.UTF8Encoding>的实例, 并指定 Unicode 字节顺序标记前缀应<xref:System.Text.UTF8Encoding.GetPreamble%2A>由方法发出。</span><span class="sxs-lookup"><span data-stu-id="f001b-155">The following example creates a new <xref:System.Text.UTF8Encoding> instance and specifies that a Unicode byte order mark prefix should be emitted by the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="f001b-156">然后<xref:System.Text.UTF8Encoding.GetPreamble%2A> , 该方法返回 Unicode 字节顺序标记前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-156">The <xref:System.Text.UTF8Encoding.GetPreamble%2A> method then returns the Unicode byte order mark prefix.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool * bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><span data-ttu-id="f001b-157">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 方法应返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-157"><see langword="true" /> to specify that the <see cref="M:System.Text.UTF8Encoding.GetPreamble" /> method should return a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="f001b-158">如果为 <see langword="true" />，则在检测到无效的编码时引发异常；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-158"><see langword="true" /> to throw an exception when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f001b-159">初始化 <see cref="T:System.Text.UTF8Encoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f001b-159">Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class.</span></span> <span data-ttu-id="f001b-160">参数指定是否提供 Unicode 字节顺序标记，以及是否在检测到无效的编码时引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-160">Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-161">参数控制<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法的操作。 `encoderShouldEmitUTF8Identifier`</span><span class="sxs-lookup"><span data-stu-id="f001b-161">The `encoderShouldEmitUTF8Identifier` parameter controls the operation of the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="f001b-162">如果`true`为, 则该方法返回一个字节数组, 其中包含 utf-8 格式的 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="f001b-162">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</span></span>  <span data-ttu-id="f001b-163">如果`false`为, 则返回一个长度为零的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-163">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="f001b-164">但是，将设置`encoderShouldEmitUTF8Identifier`到`true`不会导致<xref:System.Text.UTF8Encoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法以包括中的 BOM 中的字节数的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-164">However, setting `encoderShouldEmitUTF8Identifier` to `true` does not cause the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="f001b-165">如果`throwOnInvalidBytes` <xref:System.ArgumentException?displayProperty=nameWithType>为`true`, 则检测无效字节序列的方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-165">If `throwOnInvalidBytes` is `true`, a method that detects an invalid byte sequence throws an <xref:System.ArgumentException?displayProperty=nameWithType> exception.</span></span> <span data-ttu-id="f001b-166">否则, 该方法不会引发异常, 并且忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-166">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f001b-167">出于安全原因, 应通过调用包含`throwOnInvalidBytes`参数的构造函数并将该参数设置为来`true`启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-167">For security reasons, you should enable error detection by calling a constructor that includes a `throwOnInvalidBytes` parameter and setting that parameter to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-168">下面的示例创建一个新<xref:System.Text.UTF8Encoding>的实例, 同时指定<xref:System.Text.UTF8Encoding.GetPreamble%2A>该方法不应发出 Unicode 字节顺序标记前缀, 并在检测到无效的编码时引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-168">The following example creates a new <xref:System.Text.UTF8Encoding> instance, specifying that the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method should not emit a Unicode byte order mark prefix, and an exception should be thrown when an invalid encoding is detected.</span></span> <span data-ttu-id="f001b-169">此构造函数的行为与默认构造函数进行<xref:System.Text.UTF8Encoding.%23ctor>比较, 默认构造函数在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-169">The behavior of this constructor is compared to the default <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not throw an exception when an invalid encoding is detected.</span></span> <span data-ttu-id="f001b-170">这两<xref:System.Text.UTF8Encoding>个实例在一行中对包含两个高代理项 (u + D801 和 u + D802) 的字符数组进行编码, 这是一个无效的字符序列; 高代理项应始终后跟低代理项。</span><span class="sxs-lookup"><span data-stu-id="f001b-170">The two <xref:System.Text.UTF8Encoding> instances encode a character array that contains two high surrogates (U+D801 and U+D802) in a row, which is an invalid character sequence; a high surrogate should always be followed by a low surrogate.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF8Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f001b-171">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="f001b-171">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="f001b-172">确定指定的对象是否等于当前 <see cref="T:System.Text.UTF8Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f001b-172">Determines whether the specified object is equal to the current <see cref="T:System.Text.UTF8Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="f001b-173">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-173"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-174">如果<xref:System.Text.UTF8Encoding>满足以下所有条件, 则将两个对象视为相等:</span><span class="sxs-lookup"><span data-stu-id="f001b-174">Two <xref:System.Text.UTF8Encoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="f001b-175">这两个对象都提供字节顺序标记, 或都不提供。</span><span class="sxs-lookup"><span data-stu-id="f001b-175">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="f001b-176">这两个对象都使用同一编码器回退。</span><span class="sxs-lookup"><span data-stu-id="f001b-176">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="f001b-177">这两个对象都使用同一解码器回退。</span><span class="sxs-lookup"><span data-stu-id="f001b-177">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-178">下面的示例使用<xref:System.Text.UTF8Encoding.Equals%2A>方法来测试当前<xref:System.Text.UTF8Encoding>对象是否等于另<xref:System.Text.UTF8Encoding>一个对象。</span><span class="sxs-lookup"><span data-stu-id="f001b-178">The following example uses the <xref:System.Text.UTF8Encoding.Equals%2A> method to test whether the current <xref:System.Text.UTF8Encoding> object is equal to a different <xref:System.Text.UTF8Encoding> object.</span></span> <span data-ttu-id="f001b-179">创建<xref:System.Text.UTF8Encoding>和比较四个对象, 并显示比较结果。</span><span class="sxs-lookup"><span data-stu-id="f001b-179">Four <xref:System.Text.UTF8Encoding> objects are created and compared and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f001b-180">计算对一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-180">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f001b-181">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-181">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f001b-182">计算对指定 <see cref="T:System.String" /> 中的字符进行编码时所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-182">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="f001b-183">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-183">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-184">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-184">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-185">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-185">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-186">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-186">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-187">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-187">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-188">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-188">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-189">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-189">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-190">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f001b-190">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-191">下面的示例调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>和<xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29>方法来计算编码字符串所需的最大和实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-191">The following example calls the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> and <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="f001b-192">它还显示存储具有字节顺序标记的字节流所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-192">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-193"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-193"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-194">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-194">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-195">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-195">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-196">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-196">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-197">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-197">-and-</span></span> 
 <span data-ttu-id="f001b-198">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-198"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f001b-199">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="f001b-199">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="f001b-200">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-200">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f001b-201">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-201">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="f001b-202">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-202">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-203">若要计算<xref:System.Text.UTF8Encoding.GetBytes%2A>方法存储生成的字节所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-203">To calculate the exact array size required by the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-204">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-204">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-205">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-205">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-206">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-206">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-207">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-208">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-209">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f001b-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-210"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-210"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-211"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-211"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-212">或</span><span class="sxs-lookup"><span data-stu-id="f001b-212">-or-</span></span> 
<span data-ttu-id="f001b-213">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-214">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-214">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-215">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)</span></span> 
<span data-ttu-id="f001b-216">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-216">-and-</span></span> 
 <span data-ttu-id="f001b-217">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-217"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f001b-218">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f001b-218">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f001b-219">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f001b-219">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f001b-220">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-220">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="f001b-221">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-221">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="f001b-222">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-222">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f001b-223">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-223">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="f001b-224">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-224">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-225">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请调用 uses <xref:System.Text.UTF8Encoding.GetByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-225">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the uses <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-226">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-226">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-227">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-227">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-228">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-228">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-229">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-229">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-230">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-230">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-231">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f001b-231">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-232">下面的示例使用拉丁文大写和小写字符填充数组, 并调用<xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定编码拉丁小写字符所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-232">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="f001b-233">然后, 它会显示此信息以及在添加字节顺序标记时所需的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-233">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="f001b-234">它将此数字与<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法返回的值进行比较, 此值指示编码拉丁小写字符所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-234">It compares this number with the value returned by the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-235"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-235"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-236"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-236"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-237">或</span><span class="sxs-lookup"><span data-stu-id="f001b-237">-or-</span></span> 
 <span data-ttu-id="f001b-238"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-238"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f001b-239">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-239">-or-</span></span> 
<span data-ttu-id="f001b-240">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-240">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-241">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-241">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-242">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-242">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-243">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-243">-and-</span></span> 
<span data-ttu-id="f001b-244"><see cref="P:System.Text.Encoding.EncoderFallback" /> 属性设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-244">The <see cref="P:System.Text.Encoding.EncoderFallback" /> property is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f001b-245">将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-245">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="uTF8Encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="f001b-246">要编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="f001b-246">The character string to encode.</span></span></param>
        <summary><span data-ttu-id="f001b-247">将指定的 <see cref="T:System.String" /> 对象中的字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-247">Encodes the characters in a specified <see cref="T:System.String" /> object into a sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="f001b-248">包含 s 参数指定的字符串中编码字符的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-248">A byte array that contains the encoded characters in the string specified by the s parameter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int" Usage="uTF8Encoding.GetBytes (chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f001b-249">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="f001b-249">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f001b-250">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-250">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f001b-251">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="f001b-251">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f001b-252">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-252">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="f001b-253">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-253">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="f001b-254">在由 <paramref name="bytes" /> 指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-254">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-255">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-255">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-256">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-256">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-257">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-257">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-258">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-258">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-259">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-259">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-260">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-260">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-261">在这种情况下, 或者如果数据量很大以致需要分为较小块<xref:System.Text.Decoder> , 请分别使用<xref:System.Text.Encoder>或<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法返回的。</span><span class="sxs-lookup"><span data-stu-id="f001b-261">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> returned by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="f001b-262">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-262">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-263">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f001b-263">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f001b-264"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f001b-264">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-265"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-265"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f001b-266">或</span><span class="sxs-lookup"><span data-stu-id="f001b-266">-or-</span></span> 
 <span data-ttu-id="f001b-267"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-267"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-268"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-268"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-269">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-269">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f001b-270">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-270">-or-</span></span> 
 <span data-ttu-id="f001b-271"><paramref name="byteCount" /> 少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-271"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-272">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-272">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-273">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-273">-and-</span></span> 
 <span data-ttu-id="f001b-274">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-274"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f001b-275">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f001b-275">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f001b-276">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f001b-276">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f001b-277">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-277">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f001b-278">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-278">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f001b-279">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-279">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f001b-280">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-280">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f001b-281">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f001b-281">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="f001b-282">将指定字符数组中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="f001b-282">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f001b-283">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-283">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-284">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-284">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-285">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-285">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-286">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-286">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-287">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-287">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-288">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-288">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-289">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-289">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-290">在这种情况下, 或者如果数据量很大以致需要分为较小块, 请<xref:System.Text.Decoder>分别使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f001b-290">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="f001b-291">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-291">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-292">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f001b-292">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f001b-293"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f001b-293">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-294">下面的示例使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法对字符串中的某个范围的字符进行编码, 并将已编码的字节存储在字节数组中某个范围的元素中。</span><span class="sxs-lookup"><span data-stu-id="f001b-294">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of characters from a string and stores the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-295"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-295"><paramref name="chars" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f001b-296">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-296">-or-</span></span> 
 <span data-ttu-id="f001b-297"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-297"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-298"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-298"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-299">或</span><span class="sxs-lookup"><span data-stu-id="f001b-299">-or-</span></span> 
 <span data-ttu-id="f001b-300"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-300"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f001b-301">或</span><span class="sxs-lookup"><span data-stu-id="f001b-301">-or-</span></span> 
 <span data-ttu-id="f001b-302"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-302"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-303">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-303">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f001b-304">或</span><span class="sxs-lookup"><span data-stu-id="f001b-304">-or-</span></span> 
 <span data-ttu-id="f001b-305"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="f001b-305"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-306">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-306">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-307">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-307">-and-</span></span> 
 <span data-ttu-id="f001b-308">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-308"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="f001b-309">包含要编码的字符集的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-309">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f001b-310">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-310">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f001b-311">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-311">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f001b-312">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-312">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f001b-313">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f001b-313">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="f001b-314">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="f001b-314">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f001b-315">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-315">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-316">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-316">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-317">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-317">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-318">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-318">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-319">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-319">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-320">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-320">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-321">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-321">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-322">在这种情况下, 或者如果数据量很大以致需要分为较小块, 请<xref:System.Text.Decoder>分别使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f001b-322">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="f001b-323">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-323">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-324">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f001b-324">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f001b-325"><xref:System.Text.UTF8Encoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f001b-325">The <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-326">下面的示例使用<xref:System.Text.UTF8Encoding.GetBytes%2A>方法对 Unicode 字符数组中的一系列元素进行编码, 并将已编码的字节存储在字节数组中的一系列元素中。</span><span class="sxs-lookup"><span data-stu-id="f001b-326">The following example uses the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-327"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-327"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f001b-328">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-328">-or-</span></span> 
 <span data-ttu-id="f001b-329"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-329"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-330"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-330"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-331">或</span><span class="sxs-lookup"><span data-stu-id="f001b-331">-or-</span></span> 
 <span data-ttu-id="f001b-332"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-332"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f001b-333">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-333">-or-</span></span> 
 <span data-ttu-id="f001b-334"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-334"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-335">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-335">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f001b-336">或</span><span class="sxs-lookup"><span data-stu-id="f001b-336">-or-</span></span> 
 <span data-ttu-id="f001b-337"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="f001b-337"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-338">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-338">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-339">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-339">-and-</span></span> 
 <span data-ttu-id="f001b-340">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-340"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f001b-341">计算对一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-341">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="uTF8Encoding.GetCharCount bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f001b-342">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="f001b-342">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f001b-343">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-343">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f001b-344">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-344">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="f001b-345">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-345">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-346">若要计算存储所生成的字符<xref:System.Text.UTF8Encoding.GetChars%2A>所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-346">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="f001b-347">若要计算最大数组大小, 请<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-347">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="f001b-348">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-348">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-349">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-349">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-350">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-350">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-351"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-351"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-352"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-352"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-353">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-353">-or-</span></span> 
<span data-ttu-id="f001b-354">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-354">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-355">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-355">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-356">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-356">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-357">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-357">-and-</span></span> 
 <span data-ttu-id="f001b-358">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-358"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f001b-359">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f001b-359">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f001b-360">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f001b-360">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f001b-361">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-361">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="f001b-362">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-362">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f001b-363">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-363">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f001b-364">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-364">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f001b-365">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-365">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-366">若要计算存储所生成的字符<xref:System.Text.UTF8Encoding.GetChars%2A>所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-366">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="f001b-367">若要计算最大数组大小, 请<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-367">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="f001b-368">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-368">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-369">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-369">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-370">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-370">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-371">下面的示例使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>方法返回对字节数组中的一系列元素进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-371">The following example uses the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-372"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-372"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-373"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-373"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-374">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-374">-or-</span></span> 
 <span data-ttu-id="f001b-375"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-375"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="f001b-376">或</span><span class="sxs-lookup"><span data-stu-id="f001b-376">-or-</span></span> 
<span data-ttu-id="f001b-377">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-377">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-378">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-378">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-379">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-379">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-380">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-380">-and-</span></span> 
 <span data-ttu-id="f001b-381">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-381"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f001b-382">将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="f001b-382">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(ReadOnlySpan&lt;System::Byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="override this.GetChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int" Usage="uTF8Encoding.GetChars (bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f001b-383">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="f001b-383">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f001b-384">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-384">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="f001b-385">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="f001b-385">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="f001b-386">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-386">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="f001b-387">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span><span class="sxs-lookup"><span data-stu-id="f001b-387">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="f001b-388">在由 <paramref name="chars" /> 指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-388">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-389">若要计算存储所生成的字符<xref:System.Text.UTF8Encoding.GetChars%2A>所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-389">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="f001b-390">若要计算最大数组大小, 请<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-390">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="f001b-391">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-391">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-392">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-392">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-393">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-393">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-394">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f001b-394">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f001b-395">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f001b-395">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f001b-396">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-396">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-397">在这种情况下, 或者如果数据量很大以致需要分为较小块<xref:System.Text.Decoder> , 请分别使用<xref:System.Text.Encoder>或<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法<xref:System.Text.UTF8Encoding.GetEncoder%2A>提供的对象或方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-397">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-398"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-398"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f001b-399">或</span><span class="sxs-lookup"><span data-stu-id="f001b-399">-or-</span></span> 
 <span data-ttu-id="f001b-400"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-400"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-401"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-401"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-402">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-402">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="f001b-403">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-403">-or-</span></span> 
 <span data-ttu-id="f001b-404"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-404"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-405">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-405">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-406">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-406">-and-</span></span> 
 <span data-ttu-id="f001b-407">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-407"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f001b-408">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f001b-408">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f001b-409">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f001b-409">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f001b-410">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-410">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f001b-411">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-411">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f001b-412">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-412">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="f001b-413">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-413">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f001b-414">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f001b-414">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="f001b-415">将指定字节数组中的一个字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-415">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="f001b-416">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-416">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-417">若要计算存储所生成的字符<xref:System.Text.UTF8Encoding.GetChars%2A>所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-417">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="f001b-418">若要计算最大数组大小, 请<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-418">To calculate the maximum array size, call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="f001b-419">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-419">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-420">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-420">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-421">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-421">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-422">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f001b-422">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f001b-423">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f001b-423">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f001b-424">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-424">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-425">在这种情况下, 或者如果数据量很大以致需要分为较小块, 请<xref:System.Text.Decoder>分别使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f001b-425">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-426">下面的示例使用<xref:System.Text.UTF8Encoding.GetChars%2A>方法对字节数组中的一系列元素进行解码, 并将结果存储在字符数组中。</span><span class="sxs-lookup"><span data-stu-id="f001b-426">The following example uses the <xref:System.Text.UTF8Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-427"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-427"><paramref name="bytes" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f001b-428">或</span><span class="sxs-lookup"><span data-stu-id="f001b-428">-or-</span></span> 
 <span data-ttu-id="f001b-429"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-429"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-430"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-430"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-431">或</span><span class="sxs-lookup"><span data-stu-id="f001b-431">-or-</span></span> 
 <span data-ttu-id="f001b-432"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-432"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="f001b-433">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-433">-or-</span></span> 
 <span data-ttu-id="f001b-434"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-434"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-435">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-435">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="f001b-436">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f001b-436">-or-</span></span> 
 <span data-ttu-id="f001b-437"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="f001b-437"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-438">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-438">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-439">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-439">-and-</span></span> 
 <span data-ttu-id="f001b-440">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-440"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF8Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f001b-441">获取可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="f001b-441">Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="f001b-442">可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="f001b-442">A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-443">方法使用类似于此类的<xref:System.Text.UTF8Encoding.GetChars%2A>方法的方式将连续字节块转换为连续的字符块。 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f001b-443">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF8Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="f001b-444">但是, 会<xref:System.Text.Decoder>在调用之间维护状态信息, 以便能够正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="f001b-444">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="f001b-445"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节, 并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="f001b-445">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="f001b-446">因此, <xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>对于网络传输和文件操作非常有用, 因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="f001b-446">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="f001b-447">如果启用了错误检测, 即`throwOnInvalidCharacters`构造函数的参数设置为`true`, 则也会在此方法返回的<xref:System.Text.Decoder>中启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-447">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="f001b-448">如果启用了错误检测, 并且遇到了无效的序列, 则解码器的状态不确定, 必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="f001b-448">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-449">下面的示例使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法来获取 utf-8 解码器。</span><span class="sxs-lookup"><span data-stu-id="f001b-449">The following example uses the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method to obtain a UTF-8 decoder.</span></span> <span data-ttu-id="f001b-450">解码器将字节序列转换为字符序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-450">The decoder converts a sequence of bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f001b-451">了解编码</span><span class="sxs-lookup"><span data-stu-id="f001b-451">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF8Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f001b-452">获取可将 Unicode 字符序列转换为 UTF-8 编码的字节序列的编码器。</span><span class="sxs-lookup"><span data-stu-id="f001b-452">Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="f001b-453">一个 <see cref="T:System.Text.Encoder" />，用于将 Unicode 字符序列转换为 UTF-8 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-453">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-454">方法使用与<xref:System.Text.UTF8Encoding.GetBytes%2A>方法类似的方式将顺序块字符转换为顺序字节块。 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f001b-454">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF8Encoding.GetBytes%2A> method.</span></span> <span data-ttu-id="f001b-455">但是, 会<xref:System.Text.Encoder>在调用之间维护状态信息, 以便能够正确地对跨块的字符序列进行编码。</span><span class="sxs-lookup"><span data-stu-id="f001b-455">However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="f001b-456"><xref:System.Text.Encoder>还保留数据块末尾的尾随字符, 并在下一编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="f001b-456">The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="f001b-457">例如, 数据块可能以不匹配的高代理项结束, 并且匹配的低代理项可能位于下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="f001b-457">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="f001b-458">因此, <xref:System.Text.UTF8Encoding.GetDecoder%2A>和<xref:System.Text.UTF8Encoding.GetEncoder%2A>对于网络传输和文件操作非常有用, 因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="f001b-458">Therefore, <xref:System.Text.UTF8Encoding.GetDecoder%2A> and <xref:System.Text.UTF8Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="f001b-459">如果启用了错误检测, 即`throwOnInvalidCharacters`构造函数的参数设置为`true`, 则也会在此方法返回的<xref:System.Text.Encoder>中启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f001b-459">If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method.</span></span> <span data-ttu-id="f001b-460">如果启用了错误检测, 并且遇到了无效的序列, 则编码器的状态为 "未定义", 并且必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="f001b-460">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-461">下面的示例使用<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法来获取一个编码器, 以将字符序列转换为 utf-8 编码的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-461">The following example uses the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-8 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f001b-462">了解编码</span><span class="sxs-lookup"><span data-stu-id="f001b-462">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF8Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f001b-463">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f001b-463">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="f001b-464">当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f001b-464">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f001b-465">下面的示例使用<xref:System.Text.UTF8Encoding.GetHashCode%2A>方法返回<xref:System.Text.UTF8Encoding>实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f001b-465">The following example uses the <xref:System.Text.UTF8Encoding.GetHashCode%2A> method to return a hash code for <xref:System.Text.UTF8Encoding> instances.</span></span> <span data-ttu-id="f001b-466">请注意, 此方法返回的哈希代码取决于用于创建<xref:System.Text.UTF8Encoding>对象的构造函数。</span><span class="sxs-lookup"><span data-stu-id="f001b-466">Notice that the hash code returned by this method depends on the constructor used to create the <xref:System.Text.UTF8Encoding> object.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF8Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="f001b-467">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f001b-467">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f001b-468">计算对指定数目的字符进行编码时产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-468">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="f001b-469">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-469">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-470">若要计算存储生成的字节所<xref:System.Text.UTF8Encoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-470">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f001b-471">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-471">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f001b-472">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-472">The <xref:System.Text.UTF8Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>是最差的事例数, 包括当前所选<xref:System.Text.EncoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="f001b-473"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="f001b-474">如果使用可能大的字符串选择回退, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>则可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="f001b-474">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="f001b-475">在大多数情况下, 此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="f001b-475">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="f001b-476">对于大字符串, 可能需要在超过更合理缓冲区的罕见情况下, 在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="f001b-476">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="f001b-477">你可能还需要考虑使用<xref:System.Text.UTF8Encoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-477">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f001b-478">例如, 英语和许多其他语言的文本通常只需要一个 utf-8 字节来表示一个字符, 而返回<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>的数字必须允许允许转换的字符串完全由每个字符组成需要四个字节。</span><span class="sxs-lookup"><span data-stu-id="f001b-478">For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</span></span>  
  
 <span data-ttu-id="f001b-479"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>与<xref:System.Text.UTF8Encoding.GetChars%2A>之间没有关系。</span><span class="sxs-lookup"><span data-stu-id="f001b-479"><xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetChars%2A>.</span></span> <span data-ttu-id="f001b-480">如果你的应用程序需要与一起<xref:System.Text.UTF8Encoding.GetChars%2A>使用的类似函数, 则它应使用。 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-480">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetChars%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f001b-481">`GetMaxByteCount(N)`不一定与相同`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="f001b-481">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-482">下面的示例使用<xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>方法返回对指定数目的字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-482">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-483"><paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-483"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-484">或</span><span class="sxs-lookup"><span data-stu-id="f001b-484">-or-</span></span> 
<span data-ttu-id="f001b-485">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-485">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f001b-486">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-486">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-487">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-487">-and-</span></span> 
 <span data-ttu-id="f001b-488">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-488"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF8Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="f001b-489">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-489">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f001b-490">计算对指定数目的字节进行解码时产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-490">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="f001b-491">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-491">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-492">若要计算存储所生成的字符<xref:System.Text.UTF8Encoding.GetChars%2A>所需的确切数组大小, 请<xref:System.Text.UTF8Encoding.GetCharCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-492">To calculate the exact array size required by <xref:System.Text.UTF8Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF8Encoding.GetCharCount%2A> method.</span></span> <span data-ttu-id="f001b-493">若要计算最大数组大小, 请调用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-493">To calculate the maximum array size, you call the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method.</span></span> <span data-ttu-id="f001b-494">方法通常分配较少的内存, 而<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UTF8Encoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-494">The <xref:System.Text.UTF8Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f001b-495"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>是最差的事例数, 包括当前所选<xref:System.Text.DecoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="f001b-495"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="f001b-496">如果使用可能大的字符串选择回退, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>则可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="f001b-496">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="f001b-497">在大多数情况下, 此方法为小字符串返回合理的数字。</span><span class="sxs-lookup"><span data-stu-id="f001b-497">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="f001b-498">对于大字符串, 可能需要在超过更合理缓冲区的罕见情况下, 在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="f001b-498">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span>  <span data-ttu-id="f001b-499">你可能还需要考虑使用<xref:System.Text.UTF8Encoding.GetCharCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-499">You might also want to consider a different approach using <xref:System.Text.UTF8Encoding.GetCharCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f001b-500"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>与<xref:System.Text.UTF8Encoding.GetBytes%2A>之间没有关系。</span><span class="sxs-lookup"><span data-stu-id="f001b-500"><xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF8Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="f001b-501">如果你的应用程序需要与一起<xref:System.Text.UTF8Encoding.GetBytes%2A>使用的类似函数, 则它应使用。 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f001b-501">If your application needs a similar function to use with <xref:System.Text.UTF8Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f001b-502">`GetMaxCharCount(N)`不一定与相同`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="f001b-502">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-503">下面的示例使用<xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>方法来返回对指定数量的字节进行解码所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f001b-503">The following example uses the <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-504"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-504"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-505">或</span><span class="sxs-lookup"><span data-stu-id="f001b-505">-or-</span></span> 
<span data-ttu-id="f001b-506">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f001b-506">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-507">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-507">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-508">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-508">-and-</span></span> 
 <span data-ttu-id="f001b-509">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-509"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF8Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f001b-510">返回一个采用 UTF-8 格式编码的 Unicode 字节顺序标记（如果 <see cref="T:System.Text.UTF8Encoding" /> 编码对象配置为提供一个这样的标记）。</span><span class="sxs-lookup"><span data-stu-id="f001b-510">Returns a Unicode byte order mark encoded in UTF-8 format, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span></summary>
        <returns><span data-ttu-id="f001b-511">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UTF8Encoding" /> 编码对象配置为提供一个这样的字节数组）。</span><span class="sxs-lookup"><span data-stu-id="f001b-511">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UTF8Encoding" /> encoding object is configured to supply one.</span></span> <span data-ttu-id="f001b-512">否则，此方法返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-512">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-513"><xref:System.Text.UTF8Encoding>对象可以提供前导码, 这是一个字节数组, 可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-513">The <xref:System.Text.UTF8Encoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</span></span> <span data-ttu-id="f001b-514">前面有一个字节顺序标记 (码位 U + FEFF) 的已编码字节序列, 可帮助解码器确定字节顺序和转换格式, 或 UTF。</span><span class="sxs-lookup"><span data-stu-id="f001b-514">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</span></span> <span data-ttu-id="f001b-515">Unicode 字节顺序标记 (BOM) 序列化为 0xEF 0xBB 0xBF。</span><span class="sxs-lookup"><span data-stu-id="f001b-515">The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</span></span> <span data-ttu-id="f001b-516">请注意, Unicode 标准既不需要也不建议使用 UTF-8 编码流的 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-516">Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</span></span>  
  
 <span data-ttu-id="f001b-517">可以实例化<xref:System.Text.UTF8Encoding>对象，其<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法按以下方式返回有效的 BOM：</span><span class="sxs-lookup"><span data-stu-id="f001b-517">You can instantiate a <xref:System.Text.UTF8Encoding> object whose <xref:System.Text.UTF8Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="f001b-518">通过检索<xref:System.Text.UTF8Encoding> <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>由属性返回的对象。</span><span class="sxs-lookup"><span data-stu-id="f001b-518">By retrieving the <xref:System.Text.UTF8Encoding> object returned by the <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="f001b-519">通过<xref:System.Text.UTF8Encoding> `true`使用参数调用构造函数并将其值设置为。 `encoderShouldEmitUTF8Identifier`</span><span class="sxs-lookup"><span data-stu-id="f001b-519">By calling a <xref:System.Text.UTF8Encoding> constructor with a `encoderShouldEmitUTF8Identifier` parameter and setting its value set to `true`.</span></span>  
  
 <span data-ttu-id="f001b-520">所有其他<xref:System.Text.UTF8Encoding>对象配置为返回空数组而不是有效的 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-520">All other <xref:System.Text.UTF8Encoding> objects are configured to return an empty array rather than a valid BOM.</span></span>  
  
 <span data-ttu-id="f001b-521">BOM 为某些文件提供了几乎特定的编码标识, 否则这些文件会丢失对其编码的引用, 例如未标记或标记错误的 web 数据, 或在业务不存在国际问题时存储的随机文本文件。</span><span class="sxs-lookup"><span data-stu-id="f001b-521">The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="f001b-522">如果数据一致且标记正确, 通常可以避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="f001b-522">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="f001b-523">对于提供编码类型的标准, BOM 有些多余。</span><span class="sxs-lookup"><span data-stu-id="f001b-523">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="f001b-524">但是, 可以使用它来帮助服务器发送正确的编码标头。</span><span class="sxs-lookup"><span data-stu-id="f001b-524">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="f001b-525">或者, 它可以用作回退, 以防编码在其他情况下丢失。</span><span class="sxs-lookup"><span data-stu-id="f001b-525">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="f001b-526">使用 BOM 存在一些缺点。</span><span class="sxs-lookup"><span data-stu-id="f001b-526">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="f001b-527">例如, 了解如何限制使用 BOM 的数据库字段可能很困难。</span><span class="sxs-lookup"><span data-stu-id="f001b-527">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="f001b-528">文件的串联可能也是一个问题, 例如, 当文件以这样一种方式进行合并时, 不需要的字符会在数据中间结束。</span><span class="sxs-lookup"><span data-stu-id="f001b-528">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="f001b-529">但尽管有几个缺点, 但强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-529">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
 <span data-ttu-id="f001b-530">有关字节顺序和字节顺序标记的详细信息, 请参阅[unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)上的 unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="f001b-530">For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f001b-531">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流开头的前缀。</span><span class="sxs-lookup"><span data-stu-id="f001b-531">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f001b-532">请注意, <xref:System.Text.UTF8Encoding.GetBytes%2A>该方法不会将 bom 预置到编码字节序列上; 在适当的字节流开始提供 bom 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f001b-532">Note that the <xref:System.Text.UTF8Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>
  
## Examples  
 <span data-ttu-id="f001b-533">下面的示例使用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法返回以 utf-8 格式编码的 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f001b-533">The following example uses the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to return the Unicode byte order mark encoded in UTF-8 format.</span></span> <span data-ttu-id="f001b-534">请注意, 的无参数<xref:System.Text.UTF8Encoding>构造函数不提供前导码。</span><span class="sxs-lookup"><span data-stu-id="f001b-534">Notice that the parameterless constructor for <xref:System.Text.UTF8Encoding> does not provide a preamble.</span></span>  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="f001b-535">下面的示例实例化<xref:System.Text.UTF8Encoding>两个对象, 第一个方法是<xref:System.Text.UTF8Encoding.%23ctor>调用无参数的构造函数 (该构造函数不提供 BOM), <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29>第二个`encoderShouldEmitUTF8Identifier`对象调用构造函数并将其参数设置为`true`.</span><span class="sxs-lookup"><span data-stu-id="f001b-535">The following example instantiates two <xref:System.Text.UTF8Encoding> objects, the first by calling the parameterless <xref:System.Text.UTF8Encoding.%23ctor> constructor, which does not provide a BOM, and the second by calling the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> constructor with its `encoderShouldEmitUTF8Identifier` argument set to `true`.</span></span> <span data-ttu-id="f001b-536">然后, 它调用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法, 将 BOM 写入文件, 然后再编写 UF8 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="f001b-536">It then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UF8-encoded string.</span></span> <span data-ttu-id="f001b-537">如示例中的控制台输出所示, 从第二个编码器保存字节的文件的字节数比第一个编码器要多三个。</span><span class="sxs-lookup"><span data-stu-id="f001b-537">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 <span data-ttu-id="f001b-538">你还可以通过在控制台窗口中使用`fc`命令来比较这些文件, 也可以在包含十六进制视图模式的文本编辑器中检查这些文件。</span><span class="sxs-lookup"><span data-stu-id="f001b-538">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="f001b-539">请注意, 在支持 UTF-8 的编辑器中打开文件时, 不会显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="f001b-539">Note that when the file is opened in an editor that supports UTF-8, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF8Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f001b-540">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f001b-540">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="f001b-541">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f001b-541">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f001b-542">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f001b-542">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f001b-543">将字节数组中某个范围的字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="f001b-543">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="f001b-544">包含指定字节序列解码结果的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-544">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f001b-545">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-545">With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException> exception.</span></span> <span data-ttu-id="f001b-546">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f001b-546">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f001b-547">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f001b-547">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f001b-548">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f001b-548">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f001b-549">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f001b-549">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f001b-550">在这种情况下, 或者如果数据量很大以致需要分为较小块, 请<xref:System.Text.Decoder>分别使用<xref:System.Text.UTF8Encoding.GetDecoder%2A>方法或<xref:System.Text.UTF8Encoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f001b-550">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF8Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF8Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f001b-551">下面的示例通过调用<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法来初始化一个数组, 以确定编码字符串所需的字节数, 然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="f001b-551">The following example initializes an array by calling the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="f001b-552">然后, 该示例调用<xref:System.Text.UTF8Encoding.GetPreamble%2A>方法将 BOM 存储到数组中, 然后再<xref:System.Text.UTF8Encoding.GetBytes%2A>调用方法将编码字节存储到数组中。</span><span class="sxs-lookup"><span data-stu-id="f001b-552">The example then calls the <xref:System.Text.UTF8Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF8Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="f001b-553">然后, 该示例调用<xref:System.Text.UTF8Encoding.GetString%2A>方法对字符串进行解码。</span><span class="sxs-lookup"><span data-stu-id="f001b-553">The example then calls the <xref:System.Text.UTF8Encoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="f001b-554">请注意, 在这种情况下, 解码的字符串不同于原始字符串, 因为它以16位字节顺序标记 U + FFFD 开头。</span><span class="sxs-lookup"><span data-stu-id="f001b-554">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="f001b-555">这意味着两个字符串的比较结果不相等, 并且如果字符串已输出, 则 BOM 将显示为替换字符 "？"。</span><span class="sxs-lookup"><span data-stu-id="f001b-555">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="f001b-556">若要删除的字符串的开始处的 BOM，可以调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f001b-556">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f001b-557"><paramref name="bytes" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-557"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f001b-558"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f001b-558"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f001b-559">或</span><span class="sxs-lookup"><span data-stu-id="f001b-559">-or-</span></span> 
 <span data-ttu-id="f001b-560"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f001b-560"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f001b-561">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f001b-561">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f001b-562">发生了回退（如需完整说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f001b-562">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span> 
<span data-ttu-id="f001b-563">－和－</span><span class="sxs-lookup"><span data-stu-id="f001b-563">-and-</span></span> 
 <span data-ttu-id="f001b-564">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f001b-564"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public override ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.UTF8Encoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.UTF8Encoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
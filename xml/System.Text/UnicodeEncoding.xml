<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7fa0095e2b87ad54c8fa9c769e28a678a69cf69c" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68438704" /></Metadata><TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UnicodeEncoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f1caf-101">表示 Unicode 字符的 UTF-16 编码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-101">Represents a UTF-16 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-102">编码是将一组 Unicode 字符转换为一个字节序列的过程。</span><span class="sxs-lookup"><span data-stu-id="f1caf-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="f1caf-103">解码是将编码字节序列转换为一组 Unicode 字符的过程。</span><span class="sxs-lookup"><span data-stu-id="f1caf-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="f1caf-104">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)为每个受支持脚本中的每个字符分配一个码位 (数字)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-104">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="f1caf-105">Unicode 转换格式 (UTF) 是对该码位进行编码的一种方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="f1caf-106">[Unicode 标准](https://go.microsoft.com/fwlink/?linkid=37123)使用以下 UTFs:</span><span class="sxs-lookup"><span data-stu-id="f1caf-106">The [Unicode Standard](https://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="f1caf-107">UTF-8, 它将每个码位表示为一至四个字节的序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="f1caf-108">UTF-16, 它将每个码位表示为一个到 2 16 位整数的序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="f1caf-109">32, 它将每个码位表示为32位整数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="f1caf-110">有关支持<xref:System.Text>的 UTFs 和其他编码的详细信息, 请参阅[.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="f1caf-111"><xref:System.Text.UnicodeEncoding>类表示 utf-16 编码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="f1caf-112">编码器可以使用大 endian 字节顺序 (首先是最重要的字节), 也可以是 little endian 字节顺序 (首先是最小有效字节)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="f1caf-113">例如, 拉丁文大写字母 A (码位 U + 0041) 按以下方式序列化 (十六进制):</span><span class="sxs-lookup"><span data-stu-id="f1caf-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="f1caf-114">大型 endian 字节顺序:00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="f1caf-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="f1caf-115">小 endian 字节顺序:41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="f1caf-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="f1caf-116">通常, 使用特定平台的本机字节顺序存储 Unicode 字符会更有效。</span><span class="sxs-lookup"><span data-stu-id="f1caf-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="f1caf-117">例如, 最好使用 little endian 平台 (如 Intel 计算机) 上的 little endian 字节顺序。</span><span class="sxs-lookup"><span data-stu-id="f1caf-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="f1caf-118"><xref:System.Text.UnicodeEncoding>类对应于 Windows 代码页 1200 (little endian 字节顺序) 和 1201 (大 endian 字节顺序)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="f1caf-119">可以通过调用<xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType>方法来确定特定体系结构的 "endian"。</span><span class="sxs-lookup"><span data-stu-id="f1caf-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f1caf-120">此<xref:System.Text.UnicodeEncoding>对象还可以提供字节顺序标记 (BOM), 这是一个字节数组, 可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="f1caf-121">如果引言包含字节顺序标记 (BOM), 则它有助于解码器确定字节顺序和转换格式或 UTF。</span><span class="sxs-lookup"><span data-stu-id="f1caf-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="f1caf-122">如果<xref:System.Text.UnicodeEncoding>实例配置为提供 BOM，可以通过调用检索<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法; 否则，该方法返回空数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="f1caf-123">请注意，即使<xref:System.Text.UnicodeEncoding>BOM 支持的配置对象时，必须包含 BOM 将编码的字节流作为相应; 开头的编码方法<xref:System.Text.UnicodeEncoding>类执行未自动执行此操作。</span><span class="sxs-lookup"><span data-stu-id="f1caf-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  

> [!CAUTION]
> <span data-ttu-id="f1caf-124">若要启用错误检测并使类实例更<xref:System.Text.UnicodeEncoding>安全, 应通过<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>调用构造函数并将其`throwOnInvalidBytes`参数设置为来`true`实例化对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="f1caf-125">使用错误检测时, 检测到无效字符或字节序列的方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-126">如果未检测到错误, 则不会引发异常, 并且通常会忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="f1caf-127">您可以通过多种<xref:System.Text.UnicodeEncoding>方式实例化对象, 具体取决于您是否希望它提供字节顺序标记 (BOM)、是否需要大字节序或小字节序编码, 以及是否要启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="f1caf-128">下表列出了可<xref:System.Text.UnicodeEncoding>返回<xref:System.Text.UnicodeEncoding>对象的<xref:System.Text.Encoding>构造函数和属性。</span><span class="sxs-lookup"><span data-stu-id="f1caf-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="f1caf-129">成员</span><span class="sxs-lookup"><span data-stu-id="f1caf-129">Member</span></span>|<span data-ttu-id="f1caf-130">字节排序方式</span><span class="sxs-lookup"><span data-stu-id="f1caf-130">Endianness</span></span>|<span data-ttu-id="f1caf-131">BOM</span><span class="sxs-lookup"><span data-stu-id="f1caf-131">BOM</span></span>|<span data-ttu-id="f1caf-132">错误检测</span><span class="sxs-lookup"><span data-stu-id="f1caf-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="f1caf-133">大字节序</span><span class="sxs-lookup"><span data-stu-id="f1caf-133">Big-endian</span></span>|<span data-ttu-id="f1caf-134">是</span><span class="sxs-lookup"><span data-stu-id="f1caf-134">Yes</span></span>|<span data-ttu-id="f1caf-135">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f1caf-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="f1caf-136">小字节序</span><span class="sxs-lookup"><span data-stu-id="f1caf-136">Little-endian</span></span>|<span data-ttu-id="f1caf-137">是</span><span class="sxs-lookup"><span data-stu-id="f1caf-137">Yes</span></span>|<span data-ttu-id="f1caf-138">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f1caf-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="f1caf-139">小字节序</span><span class="sxs-lookup"><span data-stu-id="f1caf-139">Little-endian</span></span>|<span data-ttu-id="f1caf-140">是</span><span class="sxs-lookup"><span data-stu-id="f1caf-140">Yes</span></span>|<span data-ttu-id="f1caf-141">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f1caf-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="f1caf-142">可配置</span><span class="sxs-lookup"><span data-stu-id="f1caf-142">Configurable</span></span>|<span data-ttu-id="f1caf-143">可配置</span><span class="sxs-lookup"><span data-stu-id="f1caf-143">Configurable</span></span>|<span data-ttu-id="f1caf-144">否 (替换回退)</span><span class="sxs-lookup"><span data-stu-id="f1caf-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="f1caf-145">可配置</span><span class="sxs-lookup"><span data-stu-id="f1caf-145">Configurable</span></span>|<span data-ttu-id="f1caf-146">可配置</span><span class="sxs-lookup"><span data-stu-id="f1caf-146">Configurable</span></span>|<span data-ttu-id="f1caf-147">可配置</span><span class="sxs-lookup"><span data-stu-id="f1caf-147">Configurable</span></span>|  
  
 <span data-ttu-id="f1caf-148">方法确定导致对一组 Unicode 字符进行编码的字节数, <xref:System.Text.UnicodeEncoding.GetBytes%2A>方法执行实际编码。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="f1caf-149">同样, <xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法确定有多少字符导致一系列字节进行解码, <xref:System.Text.UnicodeEncoding.GetChars%2A>并且和<xref:System.Text.UnicodeEncoding.GetString%2A>方法执行实际解码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="f1caf-150">对于可以在编码或解码跨多个块的数据时保存状态信息的编码器或解码器 (例如, 100000 个字符段中编码的1000000个字符), 请使用<xref:System.Text.UnicodeEncoding.GetEncoder%2A>和<xref:System.Text.UnicodeEncoding.GetDecoder%2A>属性。分别.</span><span class="sxs-lookup"><span data-stu-id="f1caf-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-151">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding>对象将 Unicode 字符的字符串编码为字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="f1caf-152">字节数组解码为字符串, 以表明不会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="f1caf-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="f1caf-153">下面的示例使用与前一个相同的字符串, 只不过它将已编码的字节写入文件, 并使用字节顺序标记 (BOM) 作为字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="f1caf-154">它然后两个不同的方式读取文件： 为通过使用文本文件<xref:System.IO.StreamReader>对象; 和二进制文件。 如您所料，在两种情况下是 BOM 包括在新读取字符串。</span><span class="sxs-lookup"><span data-stu-id="f1caf-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="f1caf-155">正如您所料, 新读取的字符串都不包含 BOM。</span><span class="sxs-lookup"><span data-stu-id="f1caf-155">As you would expect, neither newly-read string includes the BOM.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f1caf-156">了解编码</span><span class="sxs-lookup"><span data-stu-id="f1caf-156">Understanding Encodings</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1caf-157">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f1caf-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1caf-158">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f1caf-158">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-159">此构造函数创建一个使用 little endian 字节顺序的实例, 提供一个 Unicode 字节顺序标记, 并在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-159">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f1caf-160">出于安全原因, 应通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数并将其`throwOnInvalidBytes`参数设置为来`true`启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-160">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>
  
## Examples  
 <span data-ttu-id="f1caf-161">下面的示例演示如何创建新<xref:System.Text.UnicodeEncoding>的实例并显示编码的名称。</span><span class="sxs-lookup"><span data-stu-id="f1caf-161">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="f1caf-162">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="f1caf-162"><see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="f1caf-163">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-163"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f1caf-164">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f1caf-164">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="f1caf-165">参数指定是否使用 Big-Endian 字节顺序以及 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法是否返回 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f1caf-165">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-166">此构造函数创建一个实例, 该实例在检测到无效的编码时不引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-166">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f1caf-167">出于安全原因, 应通过调用<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数并将其`throwOnInvalidBytes`参数设置为来`true`启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-167">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="f1caf-168">参数控制<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法的操作。 `byteOrderMark`</span><span class="sxs-lookup"><span data-stu-id="f1caf-168">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="f1caf-169">如果`true`为, 则此方法返回一个字节数组, 其中包含采用 utf-16 格式的 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-169">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="f1caf-170">如果`false`为, 则返回一个长度为零的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-170">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="f1caf-171">但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法以包括中的 BOM 中的字节数的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-171">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-172">下面的示例演示如何创建一个新<xref:System.Text.UnicodeEncoding>实例, 该实例指定是否支持 little endian 或大字节序字节排序和 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f1caf-172">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UnicodeEncoding : bool * bool * bool -&gt; System.Text.UnicodeEncoding" Usage="new System.Text.UnicodeEncoding (bigEndian, byteOrderMark, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bigEndian"><span data-ttu-id="f1caf-173">如果为 <see langword="true" />，则使用 Big-Endian 字节顺序（从最高有效字节开始）；如果为 <see langword="false" />，则使用 Little-Endian 字节顺序（从最低有效字节开始）。</span><span class="sxs-lookup"><span data-stu-id="f1caf-173"><see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span></span></param>
        <param name="byteOrderMark"><span data-ttu-id="f1caf-174">如果为 <see langword="true" />，则指定 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 方法返回 Unicode 字节顺序标记；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-174"><see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span></span></param>
        <param name="throwOnInvalidBytes"><span data-ttu-id="f1caf-175">如果为 <see langword="true" />，则指定在检测到无效的编码时应当引发异常；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-175"><see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f1caf-176">初始化 <see cref="T:System.Text.UnicodeEncoding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f1caf-176">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span></span> <span data-ttu-id="f1caf-177">参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-177">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-178">参数控制<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法的操作。 `byteOrderMark`</span><span class="sxs-lookup"><span data-stu-id="f1caf-178">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="f1caf-179">如果`true`为, 则此方法返回一个字节数组, 其中包含采用 utf-16 格式的 Unicode 字节顺序标记 (BOM)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-179">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="f1caf-180">如果`false`为, 则返回一个长度为零的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-180">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="f1caf-181">但是，将设置`byteOrderMark`到`true`不会导致<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法以前缀开头的字节数组，BOM 也不会导致不<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法以包括中的 BOM 中的字节数的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-181">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="f1caf-182">如果参数为, `true`则会引发<xref:System.ArgumentException?displayProperty=nameWithType>检测到无效字节序列的方法。 `throwOnInvalidBytes`</span><span class="sxs-lookup"><span data-stu-id="f1caf-182">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f1caf-183">否则, 该方法不会引发异常, 并且忽略无效序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-183">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f1caf-184">出于安全原因, 应使用此构造函数创建<xref:System.Text.UnicodeEncoding>类的实例, 并通过将设置`throwOnInvalidBytes`为`true`打开错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-184">For security reasons, you should use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
## Examples  
 <span data-ttu-id="f1caf-185">下面的示例演示了的行为<xref:System.Text.UnicodeEncoding>, 同时启用了错误检测, 并且没有启用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-185">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberSignature Language="F#" Value="val mutable CharSize : int" Usage="System.Text.UnicodeEncoding.CharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="f1caf-186">表示 Unicode 字符大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f1caf-186">Represents the Unicode character size in bytes.</span></span> <span data-ttu-id="f1caf-187">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-187">This field is a constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-188">此字段的值是一个32位有符号常量, 其值为2。</span><span class="sxs-lookup"><span data-stu-id="f1caf-188">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-189">下面的示例演示如何返回的值<xref:System.Text.UnicodeEncoding.CharSize>并显示它。</span><span class="sxs-lookup"><span data-stu-id="f1caf-189">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="unicodeEncoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f1caf-190">要与当前对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-190">The object to compare with the current object.</span></span></param>
        <summary><span data-ttu-id="f1caf-191">确定指定的 <see cref="T:System.Object" /> 是否等于当前的 <see cref="T:System.Text.UnicodeEncoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-191">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="f1caf-192">如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的一个实例并且等于当前对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-192"><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-193">如果<xref:System.Text.UnicodeEncoding>满足以下所有条件, 则将两个对象视为相等:</span><span class="sxs-lookup"><span data-stu-id="f1caf-193">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="f1caf-194">这两个对象使用相同的字节顺序 (小字节序或大字节序)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-194">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="f1caf-195">这两个对象都提供字节顺序标记, 或都不提供。</span><span class="sxs-lookup"><span data-stu-id="f1caf-195">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="f1caf-196">这两个对象都使用同一编码器回退。</span><span class="sxs-lookup"><span data-stu-id="f1caf-196">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="f1caf-197">这两个对象都使用同一解码器回退。</span><span class="sxs-lookup"><span data-stu-id="f1caf-197">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-198">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.Equals%2A>方法测试当前<xref:System.Text.UnicodeEncoding>对象是否等于另<xref:System.Text.UnicodeEncoding>一个对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-198">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="f1caf-199">创建<xref:System.Text.UnicodeEncoding>和比较五个对象, 并显示比较结果。</span><span class="sxs-lookup"><span data-stu-id="f1caf-199">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1caf-200">计算对一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-200">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="unicodeEncoding.GetByteCount s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="f1caf-201">包含要编码的字符集的字符串。</span><span class="sxs-lookup"><span data-stu-id="f1caf-201">The string that contains the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f1caf-202">计算对指定字符串中的字符进行编码时所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-202">Calculates the number of bytes produced by encoding the characters in the specified string.</span></span></summary>
        <returns><span data-ttu-id="f1caf-203">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-203">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-204">若要计算存储生成的字节所<xref:System.Text.UnicodeEncoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UnicodeEncoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-204">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-205">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-205">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-206">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-206">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-207">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-207">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-208">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-208">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-209">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-209">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-210">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-210">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-211">下面的示例调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>和<xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29>方法来计算编码字符串所需的最大和实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-211">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="f1caf-212">它还显示存储具有字节顺序标记的字节流所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-212">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-213"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-213"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-214">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-214">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-215">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-215">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-216">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-216">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-217">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-217">-and-</span></span> 
 <span data-ttu-id="f1caf-218">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-218"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f1caf-219">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="f1caf-219">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="f1caf-220">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-220">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f1caf-221">计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-221">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="f1caf-222">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-222">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-223">若要计算存储生成的字节<xref:System.Text.UnicodeEncoding.GetBytes%2A>所需的确切数组大小, 请<xref:System.Text.UnicodeEncoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-223">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-224">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-224">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-225">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-225">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-226">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-226">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-227">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-227">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-228">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-228">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-229">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UTF8Encoding.GetByteCount%2A>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-229">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-230"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-230"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-231"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-231"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-232">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-232">-or-</span></span> 
<span data-ttu-id="f1caf-233">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-233">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-234">启用了错误检测，检测到 <paramref name="chars" /> 包含无效字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-234">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-235">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-235">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-236">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-236">-and-</span></span> 
 <span data-ttu-id="f1caf-237">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-237"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f1caf-238">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-238">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f1caf-239">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f1caf-239">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="unicodeEncoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f1caf-240">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-240">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="f1caf-241">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-241">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="f1caf-242">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-242">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f1caf-243">计算对指定字符数组中的一组字符进行编码时产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-243">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="f1caf-244">对指定字符进行编码后生成的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-244">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-245">若要计算存储生成的字节所<xref:System.Text.UnicodeEncoding.GetBytes%2A>需的确切数组大小, 应用程序将<xref:System.Text.UnicodeEncoding.GetByteCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-245">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="f1caf-246">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-246">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-247">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-247">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-248">启用错误检测后, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-248">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-249">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-249">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-250">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-250">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-251">将前导头插入字节流的开头 (例如, 要写入文件的字节序列的开头) 是开发人员的责任, 而前导码中的字节数不会反映在<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法返回的值中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-251">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-252">下面的示例使用拉丁文大写和小写字符填充数组, 并调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定编码拉丁小写字符所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-252">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="f1caf-253">然后, 它会显示此信息以及在添加字节顺序标记时所需的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-253">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="f1caf-254">它将此数字与<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法返回的值进行比较, 此值指示编码拉丁小写字符所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-254">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="f1caf-255">下面的示例使用希腊语和西里尔字符的组合填充数组, 并调用<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>方法来确定编码西里尔字符所需的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-255">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="f1caf-256">然后, 它会显示此信息以及在添加字节顺序标记时所需的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-256">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="f1caf-257">它将此数字与<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法返回的值进行比较, 这表示对西里尔字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-257">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-258"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-258"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-259"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-259"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-260">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-260">-or-</span></span> 
 <span data-ttu-id="f1caf-261"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-261"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f1caf-262">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-262">-or-</span></span> 
<span data-ttu-id="f1caf-263">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-263">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-264">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-264">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-265">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-265">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-266">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-266">-and-</span></span> 
 <span data-ttu-id="f1caf-267">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-267"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1caf-268">将一组字符编码为一个字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-268">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="unicodeEncoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f1caf-269">指向第一个要编码的字符的指针。</span><span class="sxs-lookup"><span data-stu-id="f1caf-269">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f1caf-270">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-270">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f1caf-271">一个指针，指向开始写入所产生的字节序列的位置。</span><span class="sxs-lookup"><span data-stu-id="f1caf-271">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f1caf-272">最多写入的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-272">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="f1caf-273">将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-273">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="f1caf-274">在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-274">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-275">若要计算存储生成的字节<xref:System.Text.UnicodeEncoding.GetBytes%2A>所需的确切数组大小, 请<xref:System.Text.UnicodeEncoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-275">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-276">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-276">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-277">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-277">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-278">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-278">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-279">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-279">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-280">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-280">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-281">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>的<xref:System.Text.Encoder>或对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-281">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-282">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-282">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-283">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-283">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f1caf-284"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f1caf-284">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-285"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-285"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="f1caf-286">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-286">-or-</span></span> 
 <span data-ttu-id="f1caf-287"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-287"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-288"><paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-288"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-289">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-289">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f1caf-290">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-290">-or-</span></span> 
 <span data-ttu-id="f1caf-291"><paramref name="byteCount" /> 少于所产生的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-291"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-292">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-292">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-293">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-293">-and-</span></span> 
 <span data-ttu-id="f1caf-294">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-294"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f1caf-295">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-295">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f1caf-296">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f1caf-296">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f1caf-297">包含要编码的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-297">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f1caf-298">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-298">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f1caf-299">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-299">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f1caf-300">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-300">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f1caf-301">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f1caf-301">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="f1caf-302">将指定字符数组中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-302">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f1caf-303">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-303">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-304">若要计算存储生成的字节所<xref:System.Text.UnicodeEncoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UnicodeEncoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-304">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-305">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-305">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-306">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-306">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-307">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-307">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-308">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-308">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-309">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-309">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-310">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f1caf-310">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-311">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-311">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-312">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-312">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f1caf-313"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f1caf-313">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-314">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法对<xref:System.String>中的某个范围的字符进行编码, 并将已编码的字节存储在字节数组中的一系列元素中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-314">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-315"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-315"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="f1caf-316">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-316">-or-</span></span> 
 <span data-ttu-id="f1caf-317"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-317"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-318"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-318"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-319">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-319">-or-</span></span> 
 <span data-ttu-id="f1caf-320"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-320"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f1caf-321">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-321">-or-</span></span> 
 <span data-ttu-id="f1caf-322"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-322"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-323">启用了错误检测，并且 <paramref name="chars" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-323">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f1caf-324">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-324">-or-</span></span> 
 <span data-ttu-id="f1caf-325"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="f1caf-325"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-326">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-326">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-327">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-327">-and-</span></span> 
 <span data-ttu-id="f1caf-328">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-328"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="unicodeEncoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="f1caf-329">包含要编码的字符集的字符串。</span><span class="sxs-lookup"><span data-stu-id="f1caf-329">The string containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f1caf-330">第一个要编码的字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-330">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="f1caf-331">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-331">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="f1caf-332">要包含所产生的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-332">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f1caf-333">要开始写入所产生的字节序列的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f1caf-333">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="f1caf-334">将指定 <see cref="T:System.String" /> 中的一组字符编码到指定的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-334">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f1caf-335">写入 <paramref name="bytes" /> 的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-335">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-336">若要计算存储生成的字节所<xref:System.Text.UnicodeEncoding.GetBytes%2A>需的确切数组大小, 请<xref:System.Text.UnicodeEncoding.GetByteCount%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-336">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-337">若要计算最大数组大小, 请调用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-337">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="f1caf-338">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-338">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-339">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-339">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-340">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-340">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-341">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-341">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-342">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f1caf-342">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-343">若要确保已编码的字节在另存为文件或流时正确解码, 可以使用前导码作为编码字节流的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-343">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-344">将前导头插入字节流的开头 (例如, 在要写入文件的字节序列的开头), 这是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-344">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="f1caf-345"><xref:System.Text.UnicodeEncoding.GetBytes%2A>方法不在编码字节序列的开头之前预置前导头。</span><span class="sxs-lookup"><span data-stu-id="f1caf-345">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-346">下面的示例演示如何对 Unicode 字符数组中的一系列元素进行编码, 并将已编码的字节存储在字节数组中的一系列元素中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-346">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-347"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-347"><paramref name="s" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="f1caf-348">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-348">-or-</span></span> 
 <span data-ttu-id="f1caf-349"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-349"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-350"><paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-350"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-351">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-351">-or-</span></span> 
 <span data-ttu-id="f1caf-352"><paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-352"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
<span data-ttu-id="f1caf-353">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-353">-or-</span></span> 
 <span data-ttu-id="f1caf-354"><paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-354"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-355">启用了错误检测，并且 <paramref name="s" /> 包含无效的字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-355">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span></span>  
  
<span data-ttu-id="f1caf-356">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-356">-or-</span></span> 
 <span data-ttu-id="f1caf-357"><paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</span><span class="sxs-lookup"><span data-stu-id="f1caf-357"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-358">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-358">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-359">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-359">-and-</span></span> 
 <span data-ttu-id="f1caf-360">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-360"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1caf-361">计算对一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-361">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f1caf-362">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="f1caf-362">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f1caf-363">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-363">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f1caf-364">计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-364">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="f1caf-365">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-365">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-366">若要计算存储所生成的<xref:System.Text.UnicodeEncoding.GetChars%2A>字符所需的确切数组大小, 应用程序<xref:System.Text.UnicodeEncoding.GetCharCount%2A>将使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-366">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="f1caf-367">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-367">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="f1caf-368">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-368">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-369">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-369">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-370">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-370">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-371"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-371"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-372"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-372"><paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-373">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-373">-or-</span></span> 
<span data-ttu-id="f1caf-374">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-374">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-375">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-375">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-376">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-376">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-377">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-377">-and-</span></span> 
 <span data-ttu-id="f1caf-378">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-378"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f1caf-379">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-379">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f1caf-380">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f1caf-380">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="unicodeEncoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f1caf-381">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-381">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="f1caf-382">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-382">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f1caf-383">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-383">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f1caf-384">计算对指定字节数组中的一个字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-384">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="f1caf-385">对指定字节序列进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-385">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-386">若要计算存储所生成的字符<xref:System.Text.UnicodeEncoding.GetChars%2A>所需的确切数组大小, 应用程序<xref:System.Text.UnicodeEncoding.GetCharCount%2A>将使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-386">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="f1caf-387">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-387">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="f1caf-388">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-388">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-389">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-389">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-390">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-390">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-391">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>方法返回使用<xref:System.Text.UnicodeEncoding>对字节数组中的一系列元素进行解码所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-391">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-392"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-392"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-393"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-393"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-394">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-394">-or-</span></span> 
 <span data-ttu-id="f1caf-395"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-395"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="f1caf-396">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-396">-or-</span></span> 
<span data-ttu-id="f1caf-397">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-397">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-398">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-398">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-399">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-399">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-400">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-400">-and-</span></span> 
 <span data-ttu-id="f1caf-401">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-401"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1caf-402">将一个字节序列解码为一组字符。</span><span class="sxs-lookup"><span data-stu-id="f1caf-402">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f1caf-403">指向第一个要解码的字节的指针。</span><span class="sxs-lookup"><span data-stu-id="f1caf-403">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f1caf-404">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-404">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="f1caf-405">一个指针，指向开始写入所产生的字符集的位置。</span><span class="sxs-lookup"><span data-stu-id="f1caf-405">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="f1caf-406">要写入的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-406">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="f1caf-407">将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。</span><span class="sxs-lookup"><span data-stu-id="f1caf-407">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="f1caf-408">在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-408">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-409">若要计算存储所生成的<xref:System.Text.UnicodeEncoding.GetChars%2A>字符所需的确切数组大小, 应用程序<xref:System.Text.UnicodeEncoding.GetCharCount%2A>将使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-409">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="f1caf-410">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-410">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="f1caf-411">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-411">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-412">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-412">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-413">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-413">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-414">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f1caf-414">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f1caf-415">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f1caf-415">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f1caf-416">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-416">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-417">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>的<xref:System.Text.Encoder>或对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-417">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-418"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-418"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="f1caf-419">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-419">-or-</span></span> 
 <span data-ttu-id="f1caf-420"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-420"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-421"><paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-421"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-422">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-422">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="f1caf-423">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-423">-or-</span></span> 
 <span data-ttu-id="f1caf-424"><paramref name="charCount" /> 少于所产生的字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-424"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-425">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-425">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-426">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-426">-and-</span></span> 
 <span data-ttu-id="f1caf-427">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-427"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f1caf-428">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-428">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f1caf-429">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f1caf-429">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="unicodeEncoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f1caf-430">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-430">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="f1caf-431">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-431">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="f1caf-432">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-432">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="f1caf-433">要用于包含所产生的字符集的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-433">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="f1caf-434">开始写入所产生的字符集的索引位置。</span><span class="sxs-lookup"><span data-stu-id="f1caf-434">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="f1caf-435">将指定字节数组中的一个字节序列解码为指定的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-435">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="f1caf-436">写入 <paramref name="chars" /> 的实际字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-436">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-437">若要计算存储所生成的字符<xref:System.Text.UnicodeEncoding.GetChars%2A>所需的确切数组大小, 应用程序<xref:System.Text.UnicodeEncoding.GetCharCount%2A>将使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-437">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="f1caf-438">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-438">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="f1caf-439">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-439">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-440">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-440">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-441">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-441">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-442">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f1caf-442">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f1caf-443">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f1caf-443">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f1caf-444">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-444">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-445">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用<xref:System.Text.UnicodeEncoding.GetDecoder%2A>方法或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法<xref:System.Text.Encoder>提供的或。</span><span class="sxs-lookup"><span data-stu-id="f1caf-445">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-446">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetChars%2A>方法对字节数组中的一系列元素进行解码, 并将结果存储在字符数组中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-446">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-447"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-447"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
<span data-ttu-id="f1caf-448">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-448">-or-</span></span> 
 <span data-ttu-id="f1caf-449"><paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-449"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-450"><paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-450"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-451">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-451">-or-</span></span> 
 <span data-ttu-id="f1caf-452"><paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-452"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
<span data-ttu-id="f1caf-453">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-453">-or-</span></span> 
 <span data-ttu-id="f1caf-454"><paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-454"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-455">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-455">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span>  
  
<span data-ttu-id="f1caf-456">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-456">-or-</span></span> 
 <span data-ttu-id="f1caf-457"><paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</span><span class="sxs-lookup"><span data-stu-id="f1caf-457"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-458">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-458">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-459">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-459">-and-</span></span> 
 <span data-ttu-id="f1caf-460">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-460"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="unicodeEncoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1caf-461">获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。</span><span class="sxs-lookup"><span data-stu-id="f1caf-461">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="f1caf-462">一个 <see cref="T:System.Text.Decoder" />，用于将 UTF-16 编码的字节序列转换为 Unicode 字符序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-462">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-463">方法将顺序块字节转换为连续的字符块, 其方式类似<xref:System.Text.UnicodeEncoding.GetChars%2A>于。 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f1caf-463">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="f1caf-464">但是, 会<xref:System.Text.Decoder>在调用之间维护状态信息, 以便能够正确地对跨块的字节序列进行解码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-464">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="f1caf-465"><xref:System.Text.Decoder>还保留数据块末尾的尾随字节, 并在下一个解码操作中使用尾随字节。</span><span class="sxs-lookup"><span data-stu-id="f1caf-465">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="f1caf-466">因此, <xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>对于网络传输和文件操作非常有用, 因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="f1caf-466">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="f1caf-467">如果启用了错误检测, 即`throwOnInvalidBytes`构造函数的参数设置为`true`, 则也会在此方法返回的<xref:System.Text.Decoder>中启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-467">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="f1caf-468">如果启用了错误检测, 并且遇到了无效的序列, 则解码器的状态不确定, 必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="f1caf-468">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-469">下面的示例使用编码器和解码器将字符串编码为字节数组, 然后将这些字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-469">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f1caf-470">了解编码</span><span class="sxs-lookup"><span data-stu-id="f1caf-470">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="unicodeEncoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1caf-471">获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。</span><span class="sxs-lookup"><span data-stu-id="f1caf-471">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="f1caf-472">将 Unicode 字符序列转换为 UTF-16 编码字节序列的 <see cref="T:System.Text.Encoder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-472">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-473">方法使用类似于此类的<xref:System.Text.UnicodeEncoding.GetBytes%2A>方法的方式将顺序块字符转换为按顺序排列的字节块。 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f1caf-473">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="f1caf-474">但是, <xref:System.Text.Encoder>对象会在调用之间维护状态信息, 以便能够正确地对跨块的字符序列进行编码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-474">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="f1caf-475"><xref:System.Text.Encoder>对象还保留数据块末尾的尾随字符, 并在下一编码操作中使用尾随字符。</span><span class="sxs-lookup"><span data-stu-id="f1caf-475">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="f1caf-476">例如, 数据块可能以不匹配的高代理项结束, 并且匹配的低代理项可能位于下一个数据块中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-476">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="f1caf-477">因此, <xref:System.Text.UnicodeEncoding.GetDecoder%2A>和<xref:System.Text.UnicodeEncoding.GetEncoder%2A>对于网络传输和文件操作非常有用, 因为这些操作经常处理数据块而不是完整的数据流。</span><span class="sxs-lookup"><span data-stu-id="f1caf-477">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="f1caf-478">如果启用了错误检测, 即`throwOnInvalidBytes`构造函数的参数设置为`true`, 则也会在此方法返回的<xref:System.Text.Encoder>对象中启用错误检测。</span><span class="sxs-lookup"><span data-stu-id="f1caf-478">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="f1caf-479">如果启用了错误检测, 并且遇到了无效的序列, 则编码器的状态为 "未定义", 并且必须停止处理。</span><span class="sxs-lookup"><span data-stu-id="f1caf-479">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-480">下面的示例使用编码器和解码器将字符串编码为字节数组, 然后将这些字节解码为字符数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-480">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md"><span data-ttu-id="f1caf-481">了解编码</span><span class="sxs-lookup"><span data-stu-id="f1caf-481">Understanding Encodings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="unicodeEncoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1caf-482">返回当前实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-482">Returns the hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="f1caf-483">当前 <see cref="T:System.Text.UnicodeEncoding" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-483">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="unicodeEncoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="f1caf-484">要编码的字符的数目。</span><span class="sxs-lookup"><span data-stu-id="f1caf-484">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="f1caf-485">计算对指定数目的字符进行编码时产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-485">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="f1caf-486">对指定数目的字符进行编码所产生的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-486">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-487">若要计算存储生成的字节所<xref:System.Text.UnicodeEncoding.GetBytes%2A>需的确切数组大小, 应用程序将<xref:System.Text.UnicodeEncoding.GetByteCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-487">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="f1caf-488">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-488">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="f1caf-489">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-489">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>检索最差事例数, 包括当前所选<xref:System.Text.EncoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="f1caf-490"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="f1caf-491">如果使用可能大的字符串选择回退, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>则可以返回大值。</span><span class="sxs-lookup"><span data-stu-id="f1caf-491">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="f1caf-492">在大多数情况下, 此方法检索小字符串的合理数字。</span><span class="sxs-lookup"><span data-stu-id="f1caf-492">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="f1caf-493">对于大字符串, 可能需要在超过更合理缓冲区的罕见情况下, 在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="f1caf-493">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="f1caf-494">你可能还需要考虑使用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>或<xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-494">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f1caf-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>与<xref:System.Text.UnicodeEncoding.GetChars%2A>之间没有关系。</span><span class="sxs-lookup"><span data-stu-id="f1caf-495"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="f1caf-496">如果你的应用程序需要与一起<xref:System.Text.UnicodeEncoding.GetChars%2A>使用的类似函数, 则它应使用。 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-496">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f1caf-497">`GetMaxByteCount(N)`不一定与相同`N* GetMaxByteCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="f1caf-497">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-498">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>方法返回对指定数目的字符进行编码所需的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-498">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-499"><paramref name="charCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-499"><paramref name="charCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-500">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-500">-or-</span></span> 
<span data-ttu-id="f1caf-501">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-501">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="f1caf-502">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-502">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-503">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-503">-and-</span></span> 
 <span data-ttu-id="f1caf-504">将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-504"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="unicodeEncoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="f1caf-505">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-505">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f1caf-506">计算对指定数目的字节进行解码时产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-506">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="f1caf-507">对指定数目的字节进行解码时所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-507">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-508">若要计算存储所生成的字符<xref:System.Text.UnicodeEncoding.GetChars%2A>所需的确切数组大小, 应用程序<xref:System.Text.UnicodeEncoding.GetCharCount%2A>将使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-508">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="f1caf-509">若要计算最大数组大小, 应用程序应<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-509">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="f1caf-510">方法通常分配较少的内存, 而<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法的执行速度通常更快。 <xref:System.Text.UnicodeEncoding.GetCharCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-510">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="f1caf-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>检索最差事例数, 包括当前所选<xref:System.Text.DecoderFallback>的最糟糕的情况。</span><span class="sxs-lookup"><span data-stu-id="f1caf-511"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="f1caf-512">如果使用可能大的字符串选择回退, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>则会检索大型值。</span><span class="sxs-lookup"><span data-stu-id="f1caf-512">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="f1caf-513">在大多数情况下, 此方法检索小字符串的合理数字。</span><span class="sxs-lookup"><span data-stu-id="f1caf-513">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="f1caf-514">对于大字符串, 可能需要在超过更合理缓冲区的罕见情况下, 在使用非常大的缓冲区和捕获错误之间进行选择。</span><span class="sxs-lookup"><span data-stu-id="f1caf-514">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="f1caf-515">你可能还需要考虑使用<xref:System.Text.UnicodeEncoding.GetCharCount%2A>或<xref:System.Text.Decoder.Convert%2A>的其他方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-515">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="f1caf-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>与<xref:System.Text.UnicodeEncoding.GetBytes%2A>之间没有关系。</span><span class="sxs-lookup"><span data-stu-id="f1caf-516"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="f1caf-517">如果你的应用程序需要与一起<xref:System.Text.UnicodeEncoding.GetBytes%2A>使用的类似函数, 则它应使用。 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A></span><span class="sxs-lookup"><span data-stu-id="f1caf-517">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f1caf-518">`GetMaxCharCount(N)`不一定与相同`N* GetMaxCharCount(1)`。</span><span class="sxs-lookup"><span data-stu-id="f1caf-518">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-519">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>方法返回通过对指定数目的字节进行解码所产生的最大字符数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-519">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-520"><paramref name="byteCount" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-520"><paramref name="byteCount" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-521">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f1caf-521">-or-</span></span> 
<span data-ttu-id="f1caf-522">得到的字节数大于可作为整数返回的最大数量。</span><span class="sxs-lookup"><span data-stu-id="f1caf-522">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-523">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-523">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-524">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-524">-and-</span></span> 
 <span data-ttu-id="f1caf-525">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-525"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="unicodeEncoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1caf-526">如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-16 格式编码的 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f1caf-526">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span></span></summary>
        <returns><span data-ttu-id="f1caf-527">一个包含 Unicode 字节顺序标记的字节数组（如果 <see cref="T:System.Text.UnicodeEncoding" /> 对象配置为提供一个这样的字节数组）。</span><span class="sxs-lookup"><span data-stu-id="f1caf-527">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span></span> <span data-ttu-id="f1caf-528">否则，此方法返回一个零长度的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-528">Otherwise, this method returns a zero-length byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-529"><xref:System.Text.UnicodeEncoding>对象可以提供前导码, 这是一个字节数组, 可以作为编码过程中所产生的字节序列的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-529">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="f1caf-530">前面有一个字节顺序标记 (码位 U + FEFF) 的已编码字节序列, 可帮助解码器确定字节顺序和转换格式。</span><span class="sxs-lookup"><span data-stu-id="f1caf-530">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="f1caf-531">Unicode 字节顺序标记 (BOM) 按以下方式序列化 (十六进制):</span><span class="sxs-lookup"><span data-stu-id="f1caf-531">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="f1caf-532">大型 endian 字节顺序:FE FF</span><span class="sxs-lookup"><span data-stu-id="f1caf-532">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="f1caf-533">小 endian 字节顺序:FF FE</span><span class="sxs-lookup"><span data-stu-id="f1caf-533">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="f1caf-534">可以实例化<xref:System.Text.UnicodeEncoding>对象，其<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法按以下方式返回有效的 BOM：</span><span class="sxs-lookup"><span data-stu-id="f1caf-534">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="f1caf-535">通过检索<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>或<xref:System.Text.UnicodeEncoding> 属性返回的对象。<xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f1caf-535">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="f1caf-536">通过调用无参数<xref:System.Text.UnicodeEncoding.%23ctor>的构造函数来<xref:System.Text.UnicodeEncoding>实例化对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-536">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="f1caf-537">通过将`true`作为`byteOrderMark`参数的值提供给<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>或<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-537">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="f1caf-538">建议使用 BOM, 因为它提供了对文件编码的几乎某些标识, 否则会丢失对其编码的引用, 例如未标记或标记错误的 web 数据, 或在业务不具有国际化问题。</span><span class="sxs-lookup"><span data-stu-id="f1caf-538">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="f1caf-539">如果数据一致且标记正确, 通常可以避免用户问题。</span><span class="sxs-lookup"><span data-stu-id="f1caf-539">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="f1caf-540">对于提供编码类型的标准, BOM 有些多余。</span><span class="sxs-lookup"><span data-stu-id="f1caf-540">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="f1caf-541">但是, 可以使用它来帮助服务器发送正确的编码标头。</span><span class="sxs-lookup"><span data-stu-id="f1caf-541">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="f1caf-542">或者, 它可以用作回退, 以防编码在其他情况下丢失。</span><span class="sxs-lookup"><span data-stu-id="f1caf-542">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="f1caf-543">使用 BOM 存在一些缺点。</span><span class="sxs-lookup"><span data-stu-id="f1caf-543">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="f1caf-544">例如, 了解如何限制使用 BOM 的数据库字段可能很困难。</span><span class="sxs-lookup"><span data-stu-id="f1caf-544">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="f1caf-545">文件的串联可能也是一个问题, 例如, 当文件以这样一种方式进行合并时, 不需要的字符会在数据中间结束。</span><span class="sxs-lookup"><span data-stu-id="f1caf-545">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="f1caf-546">但尽管有几个缺点, 但强烈建议使用 BOM。</span><span class="sxs-lookup"><span data-stu-id="f1caf-546">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1caf-547">若要确保已编码的字节正确解码, 应将编码字节流的开头作为前导码的前缀。</span><span class="sxs-lookup"><span data-stu-id="f1caf-547">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="f1caf-548">请注意, <xref:System.Text.UnicodeEncoding.GetBytes%2A>该方法不会将 bom 预置到编码字节序列上; 在适当的字节流开始提供 bom 是开发人员的责任。</span><span class="sxs-lookup"><span data-stu-id="f1caf-548">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-549">下面的示例演示如何使用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法以大字节序或 little endian 的实例<xref:System.Text.UnicodeEncoding>检索 Unicode 字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="f1caf-549">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="f1caf-550">下面的示例实例化<xref:System.Text.UnicodeEncoding>两个对象, 第一个对象未提供 BOM, 第二个对象执行。</span><span class="sxs-lookup"><span data-stu-id="f1caf-550">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="f1caf-551">然后, 它调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法, 将 BOM 写入到文件中, 然后再编写 Unicode 编码的字符串。</span><span class="sxs-lookup"><span data-stu-id="f1caf-551">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="f1caf-552">如示例中的控制台输出所示, 从第二个编码器保存字节的文件的字节数比第一个编码器要多三个。</span><span class="sxs-lookup"><span data-stu-id="f1caf-552">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="f1caf-553">你还可以通过在控制台窗口中使用`fc`命令来比较这些文件, 也可以在包含十六进制视图模式的文本编辑器中检查这些文件。</span><span class="sxs-lookup"><span data-stu-id="f1caf-553">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="f1caf-554">请注意, 在支持 UTF-16 编码的编辑器中打开文件时, 不会显示 BOM。</span><span class="sxs-lookup"><span data-stu-id="f1caf-554">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="unicodeEncoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="f1caf-555">包含要解码的字节序列的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f1caf-555">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="f1caf-556">第一个要解码的字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f1caf-556">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="f1caf-557">要解码的字节数。</span><span class="sxs-lookup"><span data-stu-id="f1caf-557">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="f1caf-558">将字节数组中某个范围的字节解码为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="f1caf-558">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="f1caf-559">包含指定字节序列解码结果的 <see cref="T:System.String" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-559">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1caf-560">使用错误检测时, 无效序列会导致此方法引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="f1caf-560">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="f1caf-561">如果未检测到错误, 将忽略无效的序列, 且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1caf-561">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="f1caf-562">如果要解码的字节范围包含字节顺序标记 (BOM), 并且字节数组由非 BOM 感知类型的方法返回, 则此方法返回的字符数组中包含字符 U + FFFE。</span><span class="sxs-lookup"><span data-stu-id="f1caf-562">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="f1caf-563">可以通过调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法将其移除。</span><span class="sxs-lookup"><span data-stu-id="f1caf-563">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f1caf-564">要转换的数据 (如从流中读取的数据) 只能在顺序块中使用。</span><span class="sxs-lookup"><span data-stu-id="f1caf-564">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="f1caf-565">在这种情况下, 或者如果数据量很大以致需要分为较小的块, 则应用程序应<xref:System.Text.Decoder>分别使用或<xref:System.Text.UnicodeEncoding.GetEncoder%2A>方法提供<xref:System.Text.UnicodeEncoding.GetDecoder%2A>的<xref:System.Text.Encoder>或对象。</span><span class="sxs-lookup"><span data-stu-id="f1caf-565">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1caf-566">下面的示例通过调用<xref:System.Text.UnicodeEncoding.GetByteCount%2A>方法来初始化一个数组, 以确定编码字符串所需的字节数, 然后添加字节顺序标记 (BOM) 的大小。</span><span class="sxs-lookup"><span data-stu-id="f1caf-566">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="f1caf-567">然后, 该示例调用<xref:System.Text.UnicodeEncoding.GetPreamble%2A>方法将 BOM 存储到数组中, 然后再<xref:System.Text.Encoding.GetBytes%2A>调用方法将编码字节存储到数组中。</span><span class="sxs-lookup"><span data-stu-id="f1caf-567">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="f1caf-568">然后, 该示例调用<xref:System.Text.UnicodeEncoding.GetString%2A>方法对字符串进行解码。</span><span class="sxs-lookup"><span data-stu-id="f1caf-568">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="f1caf-569">请注意, 在这种情况下, 解码的字符串不同于原始字符串, 因为它以16位字节顺序标记 U + FFFD 开头。</span><span class="sxs-lookup"><span data-stu-id="f1caf-569">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="f1caf-570">这意味着两个字符串的比较结果不相等, 并且如果字符串已输出, 则 BOM 将显示为替换字符 "？"。</span><span class="sxs-lookup"><span data-stu-id="f1caf-570">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="f1caf-571">若要删除的字符串的开始处的 BOM，可以调用<xref:System.String.TrimStart%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f1caf-571">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f1caf-572"><paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="f1caf-572"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f1caf-573"><paramref name="index" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="f1caf-573"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="f1caf-574">或</span><span class="sxs-lookup"><span data-stu-id="f1caf-574">-or-</span></span> 
 <span data-ttu-id="f1caf-575"><paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</span><span class="sxs-lookup"><span data-stu-id="f1caf-575"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1caf-576">启用了错误检测，并且 <paramref name="bytes" /> 包含无效的字节序列。</span><span class="sxs-lookup"><span data-stu-id="f1caf-576">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="f1caf-577">发生了回退（有关更完整的说明，请参阅 [.NET Framework 中的字符编码](~/docs/standard/base-types/character-encoding.md)）</span><span class="sxs-lookup"><span data-stu-id="f1caf-577">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span> 
<span data-ttu-id="f1caf-578">－和－</span><span class="sxs-lookup"><span data-stu-id="f1caf-578">-and-</span></span> 
 <span data-ttu-id="f1caf-579">将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</span><span class="sxs-lookup"><span data-stu-id="f1caf-579"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Preamble">
      <MemberSignature Language="C#" Value="public override ReadOnlySpan&lt;byte&gt; Preamble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; Preamble" />
      <MemberSignature Language="DocId" Value="P:System.Text.UnicodeEncoding.Preamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Preamble As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property ReadOnlySpan&lt;System::Byte&gt; Preamble { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Preamble : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.UnicodeEncoding.Preamble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
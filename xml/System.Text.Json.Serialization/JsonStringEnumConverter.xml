<Type Name="JsonStringEnumConverter" FullName="System.Text.Json.Serialization.JsonStringEnumConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed5c6f219b18f3e9c1cb1ab71e045329939c1a22" /><Meta Name="ms.sourcegitcommit" Value="0959d8d88abd48debd487e54e54df29d51634f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/02/2019" /><Meta Name="ms.locfileid" Value="68732024" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonStringEnumConverter : System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonStringEnumConverter extends System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonStringEnumConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonStringEnumConverter&#xA;Inherits JsonConverterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonStringEnumConverter sealed : System::Text::Json::Serialization::JsonConverterFactory" />
  <TypeSignature Language="F#" Value="type JsonStringEnumConverter = class&#xA;    inherit JsonConverterFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverterFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8c3d2-101">将枚举值转换为字符串以及从字符串转换为枚举值。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-101">Converts enumeration values to and from strings.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8c3d2-102">读取不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-102">Reading is case insensitive.</span></span> <span data-ttu-id="8c3d2-103">可以使用<xref:System.Text.Json.JsonNamingPolicy>自定义编写。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-103">Writing can be customized by using a <xref:System.Text.Json.JsonNamingPolicy>.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonStringEnumConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c3d2-104">使用允许整数值的默认命名策略初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-104">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with the default naming policy that allows integer values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter (System.Text.Json.JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonNamingPolicy namingPolicy, bool allowIntegerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional namingPolicy As JsonNamingPolicy = null, Optional allowIntegerValues As Boolean = true)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonStringEnumConverter : System.Text.Json.JsonNamingPolicy * bool -&gt; System.Text.Json.Serialization.JsonStringEnumConverter" Usage="new System.Text.Json.Serialization.JsonStringEnumConverter (namingPolicy, allowIntegerValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="namingPolicy" Type="System.Text.Json.JsonNamingPolicy" />
        <Parameter Name="allowIntegerValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="namingPolicy"><span data-ttu-id="8c3d2-105">用于写入枚举值的可选命名策略。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-105">The optional naming policy for writing enum values.</span></span></param>
        <param name="allowIntegerValues"><span data-ttu-id="8c3d2-106"><see langword="true" /> 表示允许未定义的枚举值；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-106"><see langword="true" /> to allow undefined enum values; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8c3d2-107">为 <see langword="true" /> 时，如果未定义枚举值，则它将输出为数字而不是字符串。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-107">When <see langword="true" />, if an enum value isn't defined, it will output as a number rather than a string.</span></span></param>
        <summary><span data-ttu-id="8c3d2-108">使用指定命名策略以及指示是否允许未定义枚举值的值初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-108">Initializes an instance of the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonStringEnumConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="8c3d2-109">要检查的类型。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-109">The type to be checked.</span></span></param>
        <summary><span data-ttu-id="8c3d2-110">确定是否可将指定类型转换为枚举。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-110">Determines whether the specified type can be converted to an enum.</span></span></summary>
        <returns><span data-ttu-id="8c3d2-111">如果可以转换类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-111"><see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="protected override System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CreateConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonStringEnumConverter.CreateConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="8c3d2-112">要转换的类型。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-112">The type to convert.</span></span></param>
        <summary><span data-ttu-id="8c3d2-113">创建指定类型的转换器。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-113">Create a converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="8c3d2-114">类型为 T 的 <see cref="T:System.Text.Json.Serialization.JsonConverter" /> 的实例，其中 T 与 <paramref name="typeToConvert" /> 兼容。</span><span class="sxs-lookup"><span data-stu-id="8c3d2-114">An instance of <see cref="T:System.Text.Json.Serialization.JsonConverter" /> of type T, where T is compatible with <paramref name="typeToConvert" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b687beab6de52a0f10dd5f6c73d526bc11521043" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185406" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于查询逻辑树中的对象的静态帮助器方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper>类提供了可用于返回子对象的集合，或从逻辑树的子节点中的特定对象的方法。 但是，大部分通常执行的对象树操作还公开了类似的方法或属性上<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。 例如，请尝试以下操作：  
  
-   而不是调用静态<xref:System.Windows.LogicalTreeHelper.GetChildren%2A>方法中，它将返回一个枚举器的逻辑子对象，使用该对象在内容模型中公开的专用的集合。 支持内容模型的几乎所有对象都公开，包含的子对象的集合，并提供有关该集合的集合接口直接支持某些属性。  
  
-   而不是调用静态<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>方法来通过指定其名称，调用获取子对象<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType>对特定对象的方法。  
  
 <xref:System.Windows.LogicalTreeHelper> 是最适用于分析情况下，您旅行时向上或向下逻辑树以递归方式将通过多个级别，并且想要使用一致的方法用于检查各种父或子对象。 在这种情况下，您可能会访问混合内容模型，并使用多个内容模型特定的 Api 可能会过于复杂。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要使其可见的 UI 元素。</param>
        <summary>尝试使所请求的 UI 元素可见，并在目标上引发 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 事件以报告结果。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常调用实例方法更加方便<xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType>而不是此静态实用工具方法。 实例方法的行为相当于静态方法的行为。  
  
 即使`current`提供的 UI 元素是<xref:System.Windows.FrameworkContentElement>，生成的事件是否仍为相同<xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>事件，具有起源<xref:System.Windows.FrameworkContentElement>身份通过检查事件的事件数据。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">从其开始搜索的对象。 此对象必须是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <param name="elementName">要查找的对象的名称。</param>
        <summary>尝试查找并返回具有指定名称的对象。 搜索从指定对象开始，并持续到逻辑树的子节点中。</summary>
        <returns>如果找到一个，则为具有匹配名称的元素；如果没有在逻辑树中找到匹配名称，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType>并<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>看起来类似于<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>，但由不同的逻辑运行：  
  
-   搜索方向<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>将是朝向 （树向下）; 的子对象的搜索方向`FindName`方法是向父对象 （向上树）。  
  
-   `FindName`方法受 XAML 名称范围的概念。 使用`FindName`保证只有一个该名称的对象存在，因为 XAML 名称范围强制实现唯一性。 与此相反，<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>在搜索过程中忽略 XAML 名称范围，并可能跨 XAML 名称范围边界。 在这种情况下，则不能保证唯一性的`elementName`命名一旦跨越边界。 有关 XAML 名称范围的详细信息，请参阅[WPF XAML 名称范围](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>通过处理逻辑树，返回指定对象的直接子对象的集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。 此元素应为 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>通过处理逻辑树返回指定的对象的即时子对象集合。</summary>
        <returns>来自指定对象逻辑树的即时子对象的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此签名和帮助程序方法主要是不确定是否`current`是<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>，并且还不确定该对象的类是否支持其自己的内容模型的集合。 如果可以确定正在查询的对象的类型，请检查您知道的特定内容属性存在于该类型上。 例如，如果您知道正在查询该对象是<xref:System.Windows.Controls.ItemsControl>，检查<xref:System.Windows.Controls.ItemsControl.Items%2A>属性来获取此集合接口支持，并可能比使用一个枚举器更有用的强类型的集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。</param>
        <summary>通过处理逻辑树，返回指定 <see cref="T:System.Windows.FrameworkContentElement" /> 的直接子对象的集合。</summary>
        <returns>逻辑树中从 <paramref name="current" /> 开始的直接子对象的可枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。</param>
        <summary>通过处理逻辑树，返回指定 <see cref="T:System.Windows.FrameworkElement" /> 的直接子对象的集合。</summary>
        <returns>逻辑树中从 <paramref name="current" /> 开始的直接子对象的可枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要查找其父对象的对象。 这应为 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>通过处理逻辑树，返回指定对象的父对象。</summary>
        <returns>所请求的父对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法是只是获取适当的类型版本的包装器 (<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>) 的<xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType>属性，除非您不能确定`current`类型，您可能需要检查在相应而是实例属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
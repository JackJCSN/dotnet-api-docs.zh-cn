<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d75f53c5f064e0cd1a345a7c3787221dbc49ccdb" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64187345" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> 实例获取依赖关系属性注册调用的方法的返回值作为<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>。  
  
 注册依赖属性的类型可以使用<xref:System.Windows.DependencyPropertyKey>对的调用中<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，调整属性的值作为类逻辑的一部分。 如果允许使用该密钥的访问级别，相关的类也可以使用的密钥和依赖项属性。 例如，可以声明为内部，密钥并在同一程序集中的其他类型还可以设置该依赖项属性。  
  
 <xref:System.Windows.DependencyPropertyKey>返回的只读依赖属性注册不应成为公共的因为公开键便可以该属性可设置，从而与将作为只读依赖属性注册。 此外，公开密钥会导致之间可用的依赖项对象的不匹配属性行为并将其[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]属性包装器实现，这是不好的类设计。  
  
 而不是公开密钥本身，而是应公开<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>的值<xref:System.Windows.DependencyPropertyKey>作为`public static readonly`<xref:System.Windows.DependencyProperty>在类上。 这样，要返回有效的依赖项属性标识符对于某些属性系统操作，如枚举本地设置的值的属性。 但是，因此获取的标识符不具有的全部功能<xref:System.Windows.DependencyProperty>的许多属性系统操作。  
  
   
  
## Examples  
 下面的示例来注册只读依赖属性和密钥还用于其他类成员中的两个用途： 实现 get"包装"，并作为标识符设置的值的受保护的确定操作根据计算其他属性值。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</summary>
        <value>相关的依赖项对象标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值启用要参与到公共属性系统操作使用一些相同的接口所用的读写依赖属性的只读属性的标识符。  
  
 为了实现只读依赖属性的 get 属性访问器，您应创建和公开<xref:System.Windows.DependencyProperty>上您的类标识符。 这有两个用途：  
  
-   您自己的类需要<xref:System.Windows.DependencyProperty>才能实现属性包装器的 get 访问器的标识符。 您使用<xref:System.Windows.DependencyProperty>的参数作为<xref:System.Windows.DependencyObject.GetValue%2A>实现 get 访问器的调用。  
  
-   <xref:System.Windows.DependencyProperty> 标识符公开为属性系统依赖项属性，依赖元数据的其他方法可以访问它的标准格式。 例如，如果您调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>某些<xref:System.Windows.DependencyObject>标识符获取本地设置的属性 （值和标识符） 的枚举和为只读依赖属性将为返回你<xref:System.Windows.DependencyProperty>值而不是该密钥。 不公开<xref:System.Windows.DependencyProperty>标识符不会增加您以任何方式的只读依赖属性的安全性，它只是使涉及更难于实现后续派生的类和类实例的属性的操作。  
  
 若要公开<xref:System.Windows.DependencyProperty>调用您的类的标识符，<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>直接在你的密钥。 使用此值来创建`public static readonly`<xref:System.Windows.DependencyProperty>上的类，便可与标识符<xref:System.Windows.DependencyPropertyKey>。  
  
   
  
## Examples  
 下面的示例调用<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>公开<xref:System.Windows.DependencyProperty>标识符 (`AquariumGraphicProperty`) 为`AquariumGraphic`类上的只读依赖属性。 该示例还演示<xref:System.Windows.DependencyPropertyKey>（作为内部成员） 创建和的 get 访问器`AquariumGraphic`。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</param>
        <param name="typeMetadata">为此类型提供的元数据。</param>
        <summary>重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写只读依赖属性上的元数据出于类似原因与重写元数据上读写依赖属性，并且仅限于关键级别的访问权限，因为指定的元数据中的行为可能会更改 (集行为默认值，例如）。  
  
 因为具有读写依赖项属性重写只读依赖属性上的元数据应仅在之前完成由属性系统将使用该属性 (这相当于时间的对象的注册该特定实例属性被实例化）。 调用<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>仅在为自己提供的类型的静态构造函数中执行`forType`此方法或等效初始化为该类的参数。  
  
 此方法有效地将转发到<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，传递<xref:System.Windows.DependencyPropertyKey>作为密钥参数的实例。  
  
   
  
## Examples  
 下面的示例将覆盖现有只读依赖属性的类继承的元数据。 在这种情况下，方案的目标是要添加的基属性元数据不具有强制值回叫。 为相应的任何重写元数据通常是其他原因无法还重写元数据 (更改默认值、 添加<xref:System.Windows.FrameworkPropertyMetadataOptions>值，等等。)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</exception>
        <exception cref="T:System.ArgumentException">当属性存在于提供的类型上时，已为该属性建立元数据。</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b5ff4f12bb122f6b323326eb8258faa81ac6af2" /><Meta Name="ms.sourcegitcommit" Value="bfce49b3a0c0685f994313d2e44a7c70def1694a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/05/2019" /><Meta Name="ms.locfileid" Value="66690900" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9f5ed-101">提供 Windows Presentation Foundation (WPF) 元素的属性、事件和方法的 WPF 框架级别集。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-101">Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</span></span> <span data-ttu-id="9f5ed-102">此类表示所提供的 WPF 框架级别实现基于 <see cref="T:System.Windows.UIElement" /> 定义的 WPF 核心级别 API。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-102">This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-103"><xref:System.Windows.FrameworkElement> 是 WPF 框架级元素类的 WPF 核心级别集之间的连接点<xref:System.Windows.UIElement>表示服务。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-103"><xref:System.Windows.FrameworkElement> is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services.</span></span> <span data-ttu-id="9f5ed-104">有关这些概念的详细信息，请参阅[WPF 体系结构](~/docs/framework/wpf/advanced/wpf-architecture.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-104">For more information about these concepts, see [WPF Architecture](~/docs/framework/wpf/advanced/wpf-architecture.md).</span></span>  
  
 <span data-ttu-id="9f5ed-105"><xref:System.Windows.FrameworkElement> 扩展了<xref:System.Windows.UIElement>和添加了以下功能：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-105"><xref:System.Windows.FrameworkElement> extends <xref:System.Windows.UIElement> and adds the following capabilities:</span></span>  
  
-   <span data-ttu-id="9f5ed-106">**布局系统定义**:<xref:System.Windows.FrameworkElement>为某些已作为中的虚拟成员定义的方法提供特定的 WPF 框架级别实现<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-106">**Layout system definition**: <xref:System.Windows.FrameworkElement> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="9f5ed-107">最值得注意的是，<xref:System.Windows.FrameworkElement>密封某些 WPF 核心级别布局重写，并改为提供 WPF 框架级别等效项的派生类应替代。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-107">Most notably, <xref:System.Windows.FrameworkElement> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</span></span> <span data-ttu-id="9f5ed-108">例如，<xref:System.Windows.FrameworkElement>封条<xref:System.Windows.UIElement.ArrangeCore%2A>但提供了<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-108">For example, <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span> <span data-ttu-id="9f5ed-109">这些更改反映这一事实，在 WPF 框架级别没有完整布局系统准备就绪，可以呈现任何<xref:System.Windows.FrameworkElement>派生的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-109">These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9f5ed-110">在 WPF 核心级别，某些成员，将构建常规[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基于的布局解决方案均已到位，但未定义的布局系统实际的引擎。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-110">At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined.</span></span> <span data-ttu-id="9f5ed-111">请参阅[布局](~/docs/framework/wpf/advanced/layout.md)以了解详细信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-111">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
-   <span data-ttu-id="9f5ed-112">**逻辑树：** 常规[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]编程模型通常表示在正在元素树的方面。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-112">**The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements.</span></span> <span data-ttu-id="9f5ed-113">支持表达为逻辑树中，元素树，同时还支持在标记中定义该树是实现在<xref:System.Windows.FrameworkElement>级别。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-113">Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <xref:System.Windows.FrameworkElement> level.</span></span> <span data-ttu-id="9f5ed-114">请注意但是该<xref:System.Windows.FrameworkElement>特意不定义内容模型，并使这一责任派生类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-114">Note however that <xref:System.Windows.FrameworkElement> deliberately does not define a content model, and leaves that responsibility to derived classes.</span></span> <span data-ttu-id="9f5ed-115">有关详细信息，请参见 [WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
-   <span data-ttu-id="9f5ed-116">**对象生存期事件：** 通常很有用，要知道当初始化元素 （称为构造函数） 或元素时首次加载到逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-116">**Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</span></span> <span data-ttu-id="9f5ed-117"><xref:System.Windows.FrameworkElement> 定义与对象生存期相关的代码隐藏涉及的操作元素，如添加更多的子元素提供有用的挂钩的多个事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-117"><xref:System.Windows.FrameworkElement> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</span></span> <span data-ttu-id="9f5ed-118">有关详细信息，请参阅[对象生存期事件](~/docs/framework/wpf/advanced/object-lifetime-events.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-118">For more information, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
-   <span data-ttu-id="9f5ed-119">**支持数据绑定和动态资源引用：** 由实现数据绑定和资源的属性级支持<xref:System.Windows.DependencyProperty>类和属性系统，但是若要解决存储为成员值的功能中体现<xref:System.Windows.Expression>（的编程构造提供同时支持数据绑定和动态资源） 由实现<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-119">**Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9f5ed-120">有关详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)并[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-120">For more information, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md) and [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="9f5ed-121">**样式：** <xref:System.Windows.FrameworkElement>定义<xref:System.Windows.FrameworkElement.Style%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-121">**Styles:** <xref:System.Windows.FrameworkElement> defines the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="9f5ed-122">但是，<xref:System.Windows.FrameworkElement>尚未定义支持模板，或支持修饰器。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-122">However, <xref:System.Windows.FrameworkElement> does not yet define support for templates, or support decorators.</span></span> <span data-ttu-id="9f5ed-123">这些功能通过控件类如引入<xref:System.Windows.Controls.Control>和<xref:System.Windows.Controls.ContentControl>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-123">These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
-   <span data-ttu-id="9f5ed-124">**动画的更多支持：** 一些动画支持已定义为在 WPF 核心级别，但<xref:System.Windows.FrameworkElement>通过实现来扩展此<xref:System.Windows.FrameworkElement.BeginStoryboard%2A>和相关的成员。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-124">**More animation support:** Some animation support was already defined at the WPF core level, but <xref:System.Windows.FrameworkElement> extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.</span></span>  
  
 <span data-ttu-id="9f5ed-125">可以看出类层次结构，许多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]类派生自<xref:System.Windows.FrameworkElement>、 直接或通过中间基类，这些类如下所述<xref:System.Windows.Controls.Panel>或<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-125">As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classes derive from <xref:System.Windows.FrameworkElement>, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.</span></span>  
  
 <span data-ttu-id="9f5ed-126">如果你想要使用<xref:System.Windows.FrameworkElement>作为基类，你可能想要首先检查现有的派生的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-126">If you intend to use <xref:System.Windows.FrameworkElement> as a base class, you might want to first examine the existing derived classes.</span></span> <span data-ttu-id="9f5ed-127"><xref:System.Windows.FrameworkElement> 提供对多种基本方案的支持，但是同样缺少数为"element"意义上的构建基块，用来创建所需的功能[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]在[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-127"><xref:System.Windows.FrameworkElement> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> <span data-ttu-id="9f5ed-128">例如，<xref:System.Windows.FrameworkElement>不定义任何真正的内容模型;<xref:System.Windows.FrameworkElement>如基的类不定义一个属性，可以创建[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-128">For instance, a <xref:System.Windows.FrameworkElement> does not define any true content model; <xref:System.Windows.FrameworkElement> as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] child elements.</span></span> <span data-ttu-id="9f5ed-129">具体而言，你可能想要看看<xref:System.Windows.Controls.Control>和<xref:System.Windows.Controls.ContentControl>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-129">In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-130">初始化 <see cref="T:System.Windows.FrameworkElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-130">Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-131">获取此元素的呈现高度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-131">Gets the rendered height of this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-132">元素的高度，这是一个采用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-132">The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-133">默认值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-133">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-134">此属性是基于其他高度输入和布局系统的计算的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-134">This property is a calculated value based on other height inputs, and the layout system.</span></span> <span data-ttu-id="9f5ed-135">值由布局系统本身基于实际呈现的传递，设置，因此可能稍微小于属性的设置值如<xref:System.Windows.FrameworkElement.Height%2A>是作为输入更改的基础。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-135">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9f5ed-136">因为<xref:System.Windows.FrameworkElement.ActualHeight%2A>是计算后的值，应注意可能有多次或递增的报告更改为它作为各种操作结果由布局系统。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-136">Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9f5ed-137">布局系统可能会计算子元素所需的测量空间、父元素的约束等。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-137">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9f5ed-138">尽管您不能设置此属性从[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，您可以基于<xref:System.Windows.Trigger>样式中其值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-138">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-139">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-139">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-140">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-140">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|<span data-ttu-id="9f5ed-141">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-141">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-142">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-142">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-143">以下示例显示各种高度属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-143">The following example displays various height properties.</span></span>  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-144">标识 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-144">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-145">获取此元素的呈现宽度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-145">Gets the rendered width of this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-146">元素的宽度，这是一个采用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-146">The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-147">默认值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-147">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-148">此属性是基于其他宽度输入和布局系统的计算的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-148">This property is a calculated value based on other width inputs, and the layout system.</span></span> <span data-ttu-id="9f5ed-149">值由布局系统本身基于实际呈现的传递，设置，因此可能稍微小于属性的设置值如<xref:System.Windows.FrameworkElement.Width%2A>是作为输入更改的基础。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-149">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9f5ed-150">因为<xref:System.Windows.FrameworkElement.ActualWidth%2A>是计算后的值，应注意可能有多次或递增的报告更改为它作为各种操作结果由布局系统。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-150">Because <xref:System.Windows.FrameworkElement.ActualWidth%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9f5ed-151">布局系统可能会计算子元素所需的测量空间、父元素的约束等。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-151">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9f5ed-152">尽管您不能设置此属性从[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，您可以基于<xref:System.Windows.Trigger>样式中其值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-152">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-153">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-153">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-154">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-154">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|<span data-ttu-id="9f5ed-155">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-155">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-156">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-156">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-157">以下示例显示各种宽度属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-157">The following example displays various width properties.</span></span>  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-158">标识 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-158">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9f5ed-159">要添加的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-159">Child element to be added.</span></span></param>
        <summary><span data-ttu-id="9f5ed-160">将提供的对象添加到此元素的逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-160">Adds the provided object to the logical tree of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-161">使用此方法的实现的对象表示的元素的逻辑子元素上的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-161">Use this method for the implementation of collections on objects that represent logical child elements of an element.</span></span> <span data-ttu-id="9f5ed-162">子元素集合的集合维护操作可能会在属性 getter 或 setter，类处理的 Changed 事件，构造函数，或在自己的集合类型。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-162">Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9f5ed-163">为控件创作者，操作逻辑树在此级别不是建议的做法，除非所有可用的基控件类的内容模型都适用于你控制的方案。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-163">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</span></span> <span data-ttu-id="9f5ed-164">子类化的级别，请考虑<xref:System.Windows.Controls.ContentControl>， <xref:System.Windows.Controls.ItemsControl>，和<xref:System.Windows.Controls.HeaderedItemsControl>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-164">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9f5ed-165">这些类提供与特定强制通过专用的逻辑树子元素的内容模型[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]，以及对其他功能中通常所需的支持[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]如通过模板设置样式的控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-165">These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span> <span data-ttu-id="9f5ed-166">有关如何使用的详细信息<xref:System.Windows.FrameworkElement.LogicalChildren%2A>并<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>，请参阅[WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-166">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 <span data-ttu-id="9f5ed-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 如果在另一个进程循环访问逻辑树时调用，可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> may throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-168">下面的示例实现`Child`的自定义属性<xref:System.Windows.FrameworkElement>执行其自己的可视化层实现的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-168">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9f5ed-169">属性 setter 被设计，以便如果的值发生更改，从逻辑树中，以及特定于类的可视集合中删除旧值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-169">The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9f5ed-170">缓存的属性值，并随后将新值添加到逻辑树和自定义可视化的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-170">The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-171">在必要时生成当前模板的可视化树，然后返回一个值，该值指示可视化树是否由此调用重新生成。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-171">Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-172">如果在树中添加了视觉对象，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-172"><see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-173">应用程序可以调用此方法，以保证元素的可视化树的已完成。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-173">Applications can call this method to guarantee that the visual tree of an element is complete.</span></span> <span data-ttu-id="9f5ed-174">如果代码将检查在树中的子元素，则可能需要采用此保证步骤。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-174">This guarantee step might be necessary if code will be checking the child elements in the tree.</span></span> <span data-ttu-id="9f5ed-175">为调用的应用程序中的典型元素逻辑<xref:System.Windows.FrameworkElement.ApplyTemplate%2A>不必要的因为模板将应用于合适的点处的元素在其生存期自动。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-175">For typical element logic within applications, calling <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</span></span>  
  
 <span data-ttu-id="9f5ed-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> 在每个度量值上调用传递由 WPF 框架级别的布局系统。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is called on every Measure pass by the WPF framework-level layout system.</span></span>  
  
 <span data-ttu-id="9f5ed-177"><xref:System.Windows.FrameworkElement> 派生的类可以使用<xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>类处理程序的情况下在其中显式调用此方法或由布局系统接收通知。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-177"><xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system.</span></span> <span data-ttu-id="9f5ed-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 模板是完全生成，并附加到逻辑树之后调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="9f5ed-179">父级中应使用此元素排列自身及其子元素的最终区域。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-179">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="9f5ed-180">实现 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />（在 <see cref="T:System.Windows.UIElement" /> 中定义为虚拟对象）并密封实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-180">Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-181">此方法被密封。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-181">This method is sealed.</span></span> <span data-ttu-id="9f5ed-182">若要重写中专门用于元素布局的排列处理你自定义元素的逻辑应用<xref:System.Windows.FrameworkElement>派生的类必须重写<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-182">In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize"><span data-ttu-id="9f5ed-183">父级中应使用此元素排列自身及其子元素的最终区域。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-183">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="9f5ed-184">在派生类中重写时，为 <see cref="T:System.Windows.FrameworkElement" /> 派生类定位子元素并确定大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-184">When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-185">使用的实际大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-185">The actual size used.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-186">想要自定义布局处理的排列处理控件作者应重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-186">Control authors who want to customize the arrange pass of layout processing should override this method.</span></span> <span data-ttu-id="9f5ed-187">实现模式应调用<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />每个可见子元素和传递的最终所需大小为每个子元素上<paramref name="finalRect" />参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-187">The implementation pattern should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each visible child element, and pass the final desired size for each child element as the <paramref name="finalRect" /> parameter.</span></span> <span data-ttu-id="9f5ed-188">父元素应调用<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />在每个的子活动，否则子元素将不会呈现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-188">Parent elements should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child, otherwise the child elements will not be rendered.</span></span>  
  
<span data-ttu-id="9f5ed-189">多个派生的类提供了此方法的实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-189">Many derived classes offer implementations of this method.</span></span> <span data-ttu-id="9f5ed-190">其中主要的包括： <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />，<see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" />和<see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-190">Prominent ones include: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-191">启动此元素的初始化过程。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-191">Starts the initialization process for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-192">如果在尚未公开，或将元素连接到任何元素树的方式调整它们，可以对单独的元素调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-192">You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</span></span> <span data-ttu-id="9f5ed-193">例如，你可能已创建一个新<xref:System.Windows.FrameworkElement>，但具有尚未将其附加到任何逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-193">For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree.</span></span> <span data-ttu-id="9f5ed-194">或者，其中您的元素是在其中一个子元素的逻辑树可能未连接到窗口或应用程序页。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-194">Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-195">实现此方法以提供您的元素在元素加载过程中在初始化之前应发生这种情况的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-195">Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="9f5ed-196">您的实现应调用基实现，因为基本 （默认值） 实现设置要跟踪的初始化一些内部标志。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-196">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span> <span data-ttu-id="9f5ed-197">一个可能的实现是使用此方法作为挂钩到自己的构造函数未已启用的私有类初始化例程。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-197">One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</span></span>  
  
<span data-ttu-id="9f5ed-198">基实现将引发异常，如果<see cref="M:System.Windows.FrameworkElement.BeginInit" />称为不止一次在同一个元素之前<see cref="M:System.Windows.FrameworkElement.EndInit" />被调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-198">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkElement.BeginInit" /> is called more than one time on the same element prior to <see cref="M:System.Windows.FrameworkElement.EndInit" /> being called.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9f5ed-199">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-199">Begins the sequence of actions contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9f5ed-200">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-200">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="9f5ed-201">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-201">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-202">动画的最典型方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-202">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9f5ed-203">通常情况下，创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将它们作为<xref:System.Windows.EventTrigger>上一个元素的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-203">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9f5ed-204">由事件触发，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-204">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9f5ed-205">控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-205">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9f5ed-206">不使用的签名`isControllable`，参数，或指定该参数时`false`，与动画相关联的时间线时钟动画到达"填充"时间段时，就立即删除。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-206">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9f5ed-207">因此不能一次运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-207">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9f5ed-208">控制动画还要求具有情节提要[X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)或可通过在代码中的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-208">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-209">下面的示例检索<xref:System.Windows.Media.Animation.Storyboard>从资源，然后运行的<xref:System.Windows.Media.Animation.Storyboard>时对内部事件进行类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-209">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9f5ed-210">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-210">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="9f5ed-211">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-211">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="9f5ed-212">开始所提供的演示图板中包含的操作序列，并指定选项来指明当已对属性进行动画处理时应发生的行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-212">Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-213">动画的最典型方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-213">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9f5ed-214">通常情况下，创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将它们作为<xref:System.Windows.EventTrigger>上一个元素的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-214">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9f5ed-215">由事件触发，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-215">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9f5ed-216">控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-216">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9f5ed-217">不使用的签名`isControllable`，参数，或指定该参数时`false`，与动画相关联的时间线时钟动画到达"填充"时间段时，就立即删除。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-217">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9f5ed-218">因此不能一次运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-218">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9f5ed-219">控制动画还要求具有情节提要[X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)或可通过在代码中的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-219">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9f5ed-220">切换行为可以指定的属性为<xref:System.Windows.Media.Animation.BeginStoryboard>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-220">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9f5ed-221">使用组合 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="9f5ed-221">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9f5ed-222">当应用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>到通过使用属性<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>，则所有<xref:System.Windows.Media.Animation.Clock>之前与该属性相关联的对象继续消耗系统资源时，计时系统将执行不自动删除时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-222">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9f5ed-223">若要避免出现性能问题，通过使用应用大量时钟时<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，它们完成后，您应该从属性的基值删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-223">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9f5ed-224">有几种方法来移除时钟：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-224">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9f5ed-225">若要从属性中删除所有时钟，请使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>经过动画处理的对象的方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-225">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9f5ed-226">指定要进行动画处理的第一个参数的属性和`null`为第二个。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-226">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9f5ed-227">这将从属性中删除所有的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-227">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9f5ed-228">若要删除特定<xref:System.Windows.Media.Animation.AnimationClock>从列表中的时钟，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性<xref:System.Windows.Media.Animation.AnimationClock>检索<xref:System.Windows.Media.Animation.ClockController>，然后调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-228">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9f5ed-229">这通常是<xref:System.Windows.Media.Animation.Clock.Completed>时钟的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-229">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9f5ed-230">请注意，只有根时钟可以受<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性的子时钟返回`null`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-230">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9f5ed-231">另请注意，<xref:System.Windows.Media.Animation.Clock.Completed>如果时钟的有效持续时间将永远不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-231">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9f5ed-232">在这种情况下，用户必须确定何时调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-232">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-233">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-233">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9f5ed-234">垃圾回收对象时，它的时钟也会断开连接和垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-234">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9f5ed-235">有关时钟对象的详细信息，请参阅[动画和计时系统概述](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-235">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-236">下面的示例检索<xref:System.Windows.Media.Animation.Storyboard>从资源，然后运行的<xref:System.Windows.Media.Animation.Storyboard>时对内部事件进行类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-236">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9f5ed-237">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-237">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="9f5ed-238">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-238">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="9f5ed-239">声明在动画开始后是否仍可以对它进行控制（可以暂停）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-239">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="9f5ed-240">开始所提供的演示图板中包含的操作序列，并使动画控件在动画开始后具有指定的状态。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-240">Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-241">动画的最典型方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-241">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9f5ed-242">通常情况下，创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将它们作为<xref:System.Windows.EventTrigger>上一个元素的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-242">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9f5ed-243">由事件触发，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-243">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9f5ed-244">控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-244">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9f5ed-245">不使用的签名`isControllable`，参数，或指定该参数时`false`，与动画相关联的时间线时钟动画到达"填充"时间段时，就立即删除。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-245">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9f5ed-246">因此不能一次运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-246">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9f5ed-247">控制动画还要求具有情节提要[X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)或可通过在代码中的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-247">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9f5ed-248">切换行为可以指定的属性为<xref:System.Windows.Media.Animation.BeginStoryboard>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-248">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9f5ed-249">使用组合 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="9f5ed-249">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9f5ed-250">当应用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>到通过使用属性<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>，则所有<xref:System.Windows.Media.Animation.Clock>之前与该属性相关联的对象继续消耗系统资源时，计时系统将执行不自动删除时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-250">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9f5ed-251">若要避免出现性能问题，通过使用应用大量时钟时<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，它们完成后，您应该从属性的基值删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-251">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9f5ed-252">有几种方法来移除时钟：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-252">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9f5ed-253">若要从属性中删除所有时钟，请使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>经过动画处理的对象的方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-253">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9f5ed-254">指定要进行动画处理的第一个参数的属性和`null`为第二个。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-254">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9f5ed-255">这将从属性中删除所有的动画时钟。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-255">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9f5ed-256">若要删除特定<xref:System.Windows.Media.Animation.AnimationClock>从列表中的时钟，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性<xref:System.Windows.Media.Animation.AnimationClock>检索<xref:System.Windows.Media.Animation.ClockController>，然后调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-256">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9f5ed-257">这通常是<xref:System.Windows.Media.Animation.Clock.Completed>时钟的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-257">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9f5ed-258">请注意，只有根时钟可以受<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性的子时钟返回`null`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-258">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9f5ed-259">另请注意，<xref:System.Windows.Media.Animation.Clock.Completed>如果时钟的有效持续时间将永远不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-259">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9f5ed-260">在这种情况下，用户必须确定何时调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-260">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-261">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-261">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9f5ed-262">垃圾回收对象时，它的时钟也会断开连接和垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-262">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9f5ed-263">有关时钟对象的详细信息，请参阅[动画和计时系统概述](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-263">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-264">获取或设置用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-264">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-265">用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-265">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-266">一个<xref:System.Windows.Data.BindingGroup>可用于验证对象的多个属性的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-266">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="9f5ed-267">例如，假设应用程序提示用户输入地址，然后填充类型的对象`Address`，其中包含属性`Street`， `City`， `ZipCode`，和`Country`，使用值的用户提供。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-267">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="9f5ed-268">应用程序必须包含四个面板<xref:System.Windows.Controls.TextBox>控件，其中每个绑定到对象的属性之一。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-268">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="9f5ed-269">可以使用<xref:System.Windows.Controls.ValidationRule>中<xref:System.Windows.Data.BindingGroup>验证`Address`对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-269">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="9f5ed-270">例如，<xref:System.Windows.Controls.ValidationRule>可以确保 zip 代码是有效的国家/地区/区域的地址。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-270">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country/region of the address.</span></span>  
  
 <span data-ttu-id="9f5ed-271">子元素继承<xref:System.Windows.Data.BindingGroup>从其父元素，就像使用任何其他可继承属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-271">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-272">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-272">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-273">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-273">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|<span data-ttu-id="9f5ed-274">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-274">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-275">下面的示例是检查用户是否已设置为相等的值的两个对象的属性的应用程序的一部分。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-275">The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</span></span> <span data-ttu-id="9f5ed-276">第一个示例创建两个<xref:System.Windows.Controls.TextBox>控件，其中每个绑定到不同的数据源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-276">The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source.</span></span> <span data-ttu-id="9f5ed-277"><xref:System.Windows.Controls.StackPanel>已<xref:System.Windows.Data.BindingGroup>，其中包含<xref:System.Windows.Controls.ValidationRule>，用于检查两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-277">The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.</span></span>  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 <span data-ttu-id="9f5ed-278">下面的示例演示<xref:System.Windows.Controls.ValidationRule>的上一个示例使用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-278">The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.</span></span>  <span data-ttu-id="9f5ed-279">在中<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法重写此示例获取的每个源对象<xref:System.Windows.Data.BindingGroup>，并检查是否相等的对象的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-279">In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 <span data-ttu-id="9f5ed-280">若要调用<xref:System.Windows.Controls.ValidationRule>，调用<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-280">To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.</span></span>  <span data-ttu-id="9f5ed-281">下面的示例调用<xref:System.Windows.Data.BindingGroup.UpdateSources%2A>按钮的 click 事件发生时。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-281">The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-282">标识 <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-282">Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9f5ed-283">尝试将此元素放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-283">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-284">尝试将此元素放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-284">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-285">通过调用此方法，你将提升<xref:System.Windows.FrameworkElement.RequestBringIntoView>源自当前元素的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-285">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9f5ed-286">以便可以通过对其进行处理，将引发此事件<xref:System.Windows.Controls.ScrollViewer>，或派生或类似的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-286">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9f5ed-287">预期的行为是由标记为已处理事件数据中的父元素处理事件和事件源放入视图中嵌入的逻辑通过<xref:System.Windows.Controls.ScrollViewer>控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-287">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9f5ed-288">既不<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件和<xref:System.Windows.FrameworkElement.BringIntoView%2A>方法不会传输有关成功或失败，以外，通常会将事件标记为已处理上成功的任何信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-288">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9f5ed-289">故障可包括元素设置中，如下所述的原因<xref:System.Windows.UIElement.Visibility%2A>以外的值<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-289">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9f5ed-290">如果使用未指定的签名`targetRectangle`，然后整个元素大小 (其<xref:System.Windows.UIElement.RenderSize%2A>) 将变为可见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-290">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9f5ed-291">通过调用此方法，你可能会调用<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>任何父可滚动区域中包含的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-291">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9f5ed-292">如果此元素未包含在可滚动区域中，<xref:System.Windows.FrameworkElement.RequestBringIntoView>仍引发事件，但因为没有事件侦听器会将不起作用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-292">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-293">下面的示例实现每当响应应用程序导航事件的处理程序[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]要导航到包含碎片。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-293">The following example implements a handler for an application navigation event that responds whenever the [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] being navigated to includes a fragment.</span></span> <span data-ttu-id="9f5ed-294">在名为片段[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]的哈希符号 （#），并且实现的行为将导致要滚动到视图的框架内的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-294">The fragment is named in the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</span></span> <span data-ttu-id="9f5ed-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> 和<xref:System.Windows.FrameworkElement.RequestBringIntoView>请求示例中的滚动行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.</span></span>  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle"><span data-ttu-id="9f5ed-296">也应放入视图中的元素的指定大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-296">Specified size of the element that should also be brought into view.</span></span></param>
        <summary><span data-ttu-id="9f5ed-297">尝试将此元素的提供区域大小放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-297">Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-298">通过调用此方法，你将提升<xref:System.Windows.FrameworkElement.RequestBringIntoView>源自当前元素的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-298">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9f5ed-299">以便可以通过对其进行处理，将引发此事件<xref:System.Windows.Controls.ScrollViewer>，或派生或类似的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-299">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9f5ed-300">预期的行为是由标记为已处理事件数据中的父元素处理事件和事件源放入视图中嵌入的逻辑通过<xref:System.Windows.Controls.ScrollViewer>控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-300">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9f5ed-301">既不<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件和<xref:System.Windows.FrameworkElement.BringIntoView%2A>方法不会传输有关成功或失败，以外，通常会将事件标记为已处理上成功的任何信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-301">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9f5ed-302">故障可包括元素设置中，如下所述的原因<xref:System.Windows.UIElement.Visibility%2A>以外的值<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-302">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9f5ed-303">如果使用未指定的签名`targetRectangle`，然后整个元素大小 (其<xref:System.Windows.UIElement.RenderSize%2A>) 将变为可见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-303">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9f5ed-304">通过调用此方法，你可能会调用<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>任何父可滚动区域中包含的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-304">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9f5ed-305">如果此元素未包含在可滚动区域中，<xref:System.Windows.FrameworkElement.RequestBringIntoView>仍引发事件，但因为没有事件侦听器会将不起作用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-305">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-306">下面的示例在受约束的滚动区域中有一幅大图。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-306">The following example has a large graphic in a constrained scrolling region.</span></span> <span data-ttu-id="9f5ed-307">在页上的按钮具有滚动到大型图形的特定区域的视图的处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-307">A button on the page has a handler that scrolls the view to a particular region of the large graphic.</span></span>  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-308">获取或设置通过 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 从此元素内部请求上下文菜单时应该显示的上下文菜单元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-308">Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-309">分配给此元素的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-309">The context menu assigned to this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-310"><xref:System.Windows.Controls.ContextMenu> 本身是<xref:System.Windows.FrameworkElement>派生的类，并从技术上讲可能<xref:System.Windows.Controls.ContextMenu>本身可以具有<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-310"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property.</span></span> <span data-ttu-id="9f5ed-311">但是，这将创建令人困惑的上下文菜单体验的用户并不推荐这样做。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-311">However, this creates a confusing context menu experience for the user and this practice is not recommended.</span></span>  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-312">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-313">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-313">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|<span data-ttu-id="9f5ed-314">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-315">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-315">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-316">在元素上的任何上下文菜单关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-316">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-317">若要取消关闭上下文菜单，该事件的处理程序应将其标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-317">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="9f5ed-318">若要将此事件用作<xref:System.Windows.EventTrigger>在样式中，必须引用事件的基础服务的定义：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-318">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="9f5ed-319">(这种用法是必需的因为上的事件实现<xref:System.Windows.FrameworkElement>，公开基础的服务事件不会映射<xref:System.Windows.FrameworkElement.ContextMenuClosing>标识符，以便可以将其用作触发器)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-319">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuClosing> identifier such that you can use it as a trigger).</span></span>  
  
 <span data-ttu-id="9f5ed-320"><xref:System.Windows.Controls.ContextMenu> 本身是<xref:System.Windows.FrameworkElement>派生的类，但<xref:System.Windows.FrameworkElement.ContextMenuClosing>不会引发事件的上下文菜单直接。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-320"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the <xref:System.Windows.FrameworkElement.ContextMenuClosing> event will not be raised by a context menu directly.</span></span> <span data-ttu-id="9f5ed-321">相反，从"拥有"作为属性的上下文菜单和仅在用户尝试关闭 UI 中的上下文菜单时引发的元素引发该事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-321">Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</span></span> <span data-ttu-id="9f5ed-322">但是有可能<xref:System.Windows.Controls.ContextMenu>本身可以具有<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性 （嵌入的上下文菜单）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-322">However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu).</span></span> <span data-ttu-id="9f5ed-323">在这种情况下<xref:System.Windows.Controls.ContextMenu>实际上确实拥有嵌套<xref:System.Windows.Controls.ContextMenu>和可能引发具有嵌入的上下文菜单上的事件源的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-323">In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.</span></span>  
  
 <span data-ttu-id="9f5ed-324"><xref:System.Windows.Controls.ContextMenu>类本身也有类似的事件 (<xref:System.Windows.Controls.ContextMenu.Closed>)，但<xref:System.Windows.Controls.ContextMenu.Closed>不，事件会向你提供取消用户操作的机会。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-324">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-325">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-326">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-326">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="9f5ed-327">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-327">Routing strategy</span></span>|<span data-ttu-id="9f5ed-328">浮升</span><span class="sxs-lookup"><span data-stu-id="9f5ed-328">Bubbling</span></span>|  
|<span data-ttu-id="9f5ed-329">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-329">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9f5ed-330">重写<xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-330">Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-331">标识 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-331">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-332">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-332">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-333">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-333">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-334">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-334">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-335">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-335">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-336">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-336">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-337">在元素上的任何上下文菜单打开时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-337">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-338">若要手动打开上下文菜单，事件的处理程序应将相关的事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-338">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="9f5ed-339">否则为现有值<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性将用于自动打开上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-339">Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="9f5ed-340">将标记处理的事件将有效地取消默认操作，并且可重置的值的机会<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性，然后打开新<xref:System.Windows.Controls.ContextMenu>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-340">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="9f5ed-341">但是，是应注意的计时问题。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-341">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="9f5ed-342">若要完全替换通过上下文菜单<xref:System.Windows.FrameworkElement.ContextMenuOpening>处理程序中，初始上下文菜单不能为 null / 空。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-342">In order to completely replace the context menu through a <xref:System.Windows.FrameworkElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="9f5ed-343">或者，您可能需要处理的事件，然后手动打开新的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-343">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="9f5ed-344">有关详细信息，请参阅[如何：处理 ContextMenuOpening 事件](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-344">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="9f5ed-345">若要将此事件用作<xref:System.Windows.EventTrigger>在样式中，必须引用基础附加的事件：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-345">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="9f5ed-346">(这种用法是必需的因为上的事件实现<xref:System.Windows.FrameworkElement>，公开基础的服务事件不会映射<xref:System.Windows.FrameworkElement.ContextMenuOpening>标识符，以便可以在触发器中使用)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-346">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuOpening> identifier such that you can use it in triggers).</span></span>  
  
 <span data-ttu-id="9f5ed-347"><xref:System.Windows.Controls.ContextMenu> 本身是<xref:System.Windows.FrameworkElement>派生的类，但不是会从上下文菜单正在打开作为源引发此事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-347"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source.</span></span> <span data-ttu-id="9f5ed-348">从"拥有"作为属性的上下文菜单和仅在用户尝试在 UI 中打开上下文菜单时引发的元素引发该事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-348">The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</span></span> <span data-ttu-id="9f5ed-349">很可能<xref:System.Windows.Controls.ContextMenu>本身可以具有<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性，但您应避免这种情况 (有关详细信息，请参阅<xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-349">It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="9f5ed-350"><xref:System.Windows.Controls.ContextMenu>类本身也有类似的事件 (<xref:System.Windows.Controls.ContextMenu.Opened>)，但<xref:System.Windows.Controls.ContextMenu.Opened>不提供取消用户操作的机会。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-350">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-351">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-352">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-352">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="9f5ed-353">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-353">Routing strategy</span></span>|<span data-ttu-id="9f5ed-354">浮升</span><span class="sxs-lookup"><span data-stu-id="9f5ed-354">Bubbling</span></span>|  
|<span data-ttu-id="9f5ed-355">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-355">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9f5ed-356">重写<xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-356">Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-357">标识 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-357">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-358">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-359">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-360">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-361">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-362">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-363">标识 <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-363">Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-364">获取或设置在鼠标指针位于此元素上时显示的光标。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-364">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-365">要显示的光标。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-365">The cursor to display.</span></span> <span data-ttu-id="9f5ed-366">按此依赖属性，默认值定义为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-366">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="9f5ed-367">但是，运行时的实际默认值将受到多种因素的影响。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-367">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-368">在将此属性设置[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，则[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]处理器将依赖类型转换为<xref:System.Windows.Input.Cursor>类来计算该字符串。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-368">When you set this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="9f5ed-369">所提供的字符串的计算结果应为<xref:System.Windows.Input.CursorType>值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-369">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="9f5ed-370">有关详细信息，请参阅<xref:System.Windows.Input.Cursor>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-370">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="9f5ed-371">此属性所建立的光标将还是将不会显示在鼠标指针位于此元素上时也是依赖于的值<xref:System.Windows.FrameworkElement.ForceCursor%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-371">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="9f5ed-372">此外，与事件相关的注意事项，如活动拖动、 鼠标捕获、 文本编辑模式中控件和等等，还将影响游标，并且其优先级高于此属性中指定的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-372">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="9f5ed-373">若要还原的此属性设置为最终的默认行为，请将其设置为`null`试。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-373">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="9f5ed-374">`null`默认值实际上意味着确定实际游标值的此处延迟，并且应从其他位置获取。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-374">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="9f5ed-375">如果没有来自任何源编程值提供，默认游标是直观地超过[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]应用程序将是一个箭头。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-375">If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span> <span data-ttu-id="9f5ed-376">但是，暂时性光标发生变化，未设置为<xref:System.Windows.FrameworkElement.Cursor%2A>时通过传递元素的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-376">However, the transient cursor changes are not set to the <xref:System.Windows.FrameworkElement.Cursor%2A> values of the elements when they are passed over.</span></span> <span data-ttu-id="9f5ed-377"><xref:System.Windows.FrameworkElement.Cursor%2A>属性将只报告非 null 值在其中实际设置，例如通过代码或样式的情况下。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-377">The <xref:System.Windows.FrameworkElement.Cursor%2A> property will only report non null values in cases where it was actually set, for instance through code or a style.</span></span> <span data-ttu-id="9f5ed-378">每个移动的鼠标悬停[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]应用程序将引发<xref:System.Windows.UIElement.QueryCursor>事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-378">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event.</span></span> <span data-ttu-id="9f5ed-379">该事件冒泡，并且路由中的任何元素都有机会处理事件并设置游标通过此事件的参数的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-379">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</span></span> <span data-ttu-id="9f5ed-380">这是显而易见的光标在大多数情况下将生成的机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-380">This is the mechanism that produces the visually apparent cursor in most cases.</span></span> <span data-ttu-id="9f5ed-381">如果<xref:System.Windows.UIElement.QueryCursor>处理程序返回游标结果，则这一事实事件进行处理，并且 in 实参具有一个更改的值将优先于的值<xref:System.Windows.FrameworkElement.Cursor%2A>属性在任何级别，除非<xref:System.Windows.FrameworkElement.ForceCursor%2A>设置。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-381">If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="9f5ed-382">如果不创建自定义光标，已将此属性通常设置为静态属性值的<xref:System.Windows.Input.Cursors>类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-382">If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span> <span data-ttu-id="9f5ed-383">设置<xref:System.Windows.FrameworkElement.Cursor%2A>在代码中需要以下项之一：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-383">Setting <xref:System.Windows.FrameworkElement.Cursor%2A> in code requires one of the following:</span></span>  
  
-   <span data-ttu-id="9f5ed-384">调用<xref:System.Windows.Input.Cursor>构造函数获取<xref:System.Windows.Input.Cursor>实例。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-384">Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance.</span></span> <span data-ttu-id="9f5ed-385">这两个签名<xref:System.Windows.Input.Cursor>构造函数使用的流或文件，您创建的预期<xref:System.Windows.Input.Cursor>对象的自定义光标。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-385">Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.</span></span>  
  
-   <span data-ttu-id="9f5ed-386">使用<xref:System.Windows.Input.CursorConverter>类并将其<xref:System.Windows.Input.CursorConverter.ConvertFrom%2A>方法，以指定通过游标<xref:System.Windows.Input.CursorType>，或可以计算为字符串<xref:System.Windows.Input.CursorType>，并强制转换为恢复<xref:System.Windows.Input.Cursor>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-386">Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.</span></span>  
  
 <span data-ttu-id="9f5ed-387">设置<xref:System.Windows.Input.Cursor>在部分信任环境中未启用为自定义值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-387">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="9f5ed-388">自定义光标的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-388">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-389">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-390">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-390">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|<span data-ttu-id="9f5ed-391">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-391">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-392">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-392">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-393">下面的示例演示如何以故意光标图形。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-393">The following example shows how to deliberately set the cursor graphic.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-394">标识 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-394">Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-395">获取或设置元素参与数据绑定时的数据上下文。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-395">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="9f5ed-396">要用作数据上下文的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-396">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-397">*数据上下文*是允许元素信息从其父元素继承有关用于绑定，以及绑定，如的路径的其他特征的数据源的概念。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-397">*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</span></span>  
  
 <span data-ttu-id="9f5ed-398">在评估结果为该对象的属性的绑定，可以直接向.NET 对象，设置数据上下文。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-398">Data context can be set directly to a .NET object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="9f5ed-399">或者，可以将数据上下文设置为<xref:System.Windows.Data.DataSourceProvider>对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-399">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="9f5ed-400">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-400">This dependency property inherits property values.</span></span> <span data-ttu-id="9f5ed-401">如果没有为其他值的子元素<xref:System.Windows.FrameworkElement.DataContext%2A>建立本地值或样式，通过属性系统会将设置此值为<xref:System.Windows.FrameworkElement.DataContext%2A>分配有此值最接近的父元素的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-401">If there are child elements without other values for <xref:System.Windows.FrameworkElement.DataContext%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="9f5ed-402">或者，可以使用以下属性之一<xref:System.Windows.Data.Binding>类来显式指定绑定源：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-402">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly:</span></span>
  
    - <span data-ttu-id="9f5ed-403"><xref:System.Windows.Data.Binding.ElementName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-403"><xref:System.Windows.Data.Binding.ElementName%2A>.</span></span>
    - <span data-ttu-id="9f5ed-404"><xref:System.Windows.Data.Binding.Source%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-404"><xref:System.Windows.Data.Binding.Source%2A>.</span></span>
    - <span data-ttu-id="9f5ed-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> 
  
  <span data-ttu-id="9f5ed-406">有关详细信息，请参阅[如何：指定绑定源](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-406">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="9f5ed-407">在 XAML 中，<xref:System.Windows.FrameworkElement.DataContext%2A>最通常设置为<xref:System.Windows.Data.Binding>声明。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-407">In XAML, <xref:System.Windows.FrameworkElement.DataContext%2A> is most typically set as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="9f5ed-408">您可以使用属性元素语法或特性语法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-408">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="9f5ed-409">特性语法在此页上的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-409">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="9f5ed-410">此外可以使用代码来设置<xref:System.Windows.FrameworkElement.DataContext%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-410">You can also use code to set <xref:System.Windows.FrameworkElement.DataContext%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-411"><xref:System.Windows.FrameworkElement.DataContext%2A> 是一个可绑定的属性，以利于以下方案可能会在这里将一个上下文绑定到另一个。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-411"><xref:System.Windows.FrameworkElement.DataContext%2A> is a bindable property to facilitate scenarios where one context might be bound to another.</span></span> <span data-ttu-id="9f5ed-412">但是，如果将绑定到<xref:System.Windows.FrameworkElement.DataContext%2A>，请注意，不创建循环绑定引用 (不是将绑定<xref:System.Windows.FrameworkElement.DataContext%2A>自身，这是可以执行的属性值继承特性导致<xref:System.Windows.FrameworkElement.DataContext%2A>属性)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-412">However, if you bind to <xref:System.Windows.FrameworkElement.DataContext%2A>, be careful to not create circular binding references (do not bind a <xref:System.Windows.FrameworkElement.DataContext%2A> to itself, which it is possible to do because of the property value inheritance nature of the <xref:System.Windows.FrameworkElement.DataContext%2A> property).</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-413">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-413">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-414">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-414">XAML Attribute Usage</span></span>  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-415">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-415">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-416">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-416">*dataContextObject*</span></span>  
 <span data-ttu-id="9f5ed-417">作为父元素中的任何绑定的数据上下文直接嵌入的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-417">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="9f5ed-418">通常情况下，此对象是<xref:System.Windows.Data.Binding>或另一个<xref:System.Windows.Data.BindingBase>派生的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-418">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class.</span></span> <span data-ttu-id="9f5ed-419">或者，适用于绑定任何对象类型的原始数据可能会放在此处，定义更高版本的实际绑定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-419">Alternatively, raw data of any object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="9f5ed-420">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-420">*bindingUsage*</span></span>  
 <span data-ttu-id="9f5ed-421">计算结果为相应的数据上下文绑定使用情况。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-421">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="9f5ed-422">有关详细信息，请参阅 [Binding 标记扩展](~/docs/framework/wpf/advanced/binding-markup-extension.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-422">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="9f5ed-423">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-423">*resourceExtension*</span></span>  
 <span data-ttu-id="9f5ed-424">以下项之一： [ `StaticResource` ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)或[ `DynamicResource` ](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-424">One of the following: [`StaticResource`](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [`DynamicResource`](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span></span> <span data-ttu-id="9f5ed-425">引用定义为资源中的对象的原始数据时，使用这种用法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-425">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="9f5ed-426">请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-426">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9f5ed-427">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-427">*contextResourceKey*</span></span>  
 <span data-ttu-id="9f5ed-428">正在请求中的对象的密钥标识符<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-428">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-429">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-429">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-430">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-430">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|<span data-ttu-id="9f5ed-431">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-431">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-432">以下示例说明了数据上下文的绑定上的处理方式，并提供了定义的绑定属性的特定值的信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-432">The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</span></span>  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-433">在此元素的数据上下文更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-433">Occurs when the data context for this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-434">数据上下文和数据绑定的说明，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-434">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9f5ed-435">当<xref:System.Windows.FrameworkElement.DataContext%2A>有关元素的更改，此元素上的所有数据绑定属性可能会受到都影响。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-435">When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="9f5ed-436">这适用于任何元素的子元素的逻辑树中的当前元素继承数据上下文，以及当前元素本身。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-436">This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="9f5ed-437">此类的所有现有绑定必须重新解释的新<xref:System.Windows.FrameworkElement.DataContext%2A>并将重新计算绑定结果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-437">All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results.</span></span> <span data-ttu-id="9f5ed-438">数据绑定引擎是不确定的顺序的这些重新计算，相对于引发<xref:System.Windows.FrameworkElement.DataContextChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-438">The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <xref:System.Windows.FrameworkElement.DataContextChanged> event.</span></span> <span data-ttu-id="9f5ed-439">略微降低可以在事件之前发生，这是后事件，或在任意组合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-439">The reevaluations can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-440">标识 <see cref="P:System.Windows.FrameworkElement.DataContext" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-440">Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-441">获取或设置在使用或定义主题样式时要用于引用此控件样式的键。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-441">Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</span></span></summary>
        <value><span data-ttu-id="9f5ed-442">样式键。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-442">The style key.</span></span> <span data-ttu-id="9f5ed-443">要作为主题样式查找的一部分正常工作，此值应是带样式的控件的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-443">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-444">通常通过其直接属性访问器的任何未设置此属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-444">This property is typically not set through any of its direct property accessors.</span></span> <span data-ttu-id="9f5ed-445">相反，替代此依赖项属性的特定于类型的元数据，每次创建一个新<xref:System.Windows.FrameworkElement>派生的类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-445">Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9f5ed-446">当派生控件时，调用<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法针对<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>在控件的静态构造函数内的标识符，派生类 （或等效的类初始化）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-446">When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).</span></span>  
  
 <span data-ttu-id="9f5ed-447">控件通常将覆盖默认值的此属性才能为其自己的类型，但在某些情况下也可以使用存在主题字典中的样式的基类型。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-447">A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</span></span> <span data-ttu-id="9f5ed-448">如果基控件的控件模板完全定义该派生的可视表示形式和派生的类型公开的任何其他成员不需要的其他元素为控件模板的一部分，这是控件的仅实用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-448">This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</span></span>  
  
 <span data-ttu-id="9f5ed-449">如果你希望元素或故意不使用主题样式的控件，设置<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-449">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-450">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-450">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-451">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-451">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="9f5ed-452">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-452">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-453">下面的示例说明了在备注中讨论的依赖项属性元数据重写用法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-453">The following example illustrates the dependency property metadata override usage discussed in Remarks.</span></span> <span data-ttu-id="9f5ed-454">此代码定义了一个自定义控件类`NumericUpDown`旨在用于从专用的控件库程序集。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-454">This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly.</span></span> <span data-ttu-id="9f5ed-455">所示的静态构造函数引用了一些专用的初始化函数，则注册类处理程序 (另一个常见的控件子类化方案，请参见[路由事件标记为已处理，和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) 和最后重写<xref:System.Windows.FrameworkElement.DefaultStyleKey%2A>依赖属性元数据上的`NumericUpDown`类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-455">The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) and finally overrides the <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dependency property metadata on the `NumericUpDown` class.</span></span> <span data-ttu-id="9f5ed-456"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 始终返回其自己的类型作为预期的键，这是主题样式系统用来查找一些任意否则非样式控件的样式的约定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-456"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</span></span> <span data-ttu-id="9f5ed-457">完整的示例还定义了由该密钥; 引用的实际控件的主题样式请参阅[带有主题和 UI 自动化支持示例的 NumericUpDown 自定义控件](https://go.microsoft.com/fwlink/?LinkID=160025)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-457">The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025).</span></span>  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  <span data-ttu-id="9f5ed-458">此示例的完整源代码是两个可在 GitHub 上[ C# ](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary)并[Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-458">The complete source code for this example is available on GitHub for both [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) and [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary).</span></span>

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025"><span data-ttu-id="9f5ed-459">带有主题和 UI 自动化支持示例的 NumericUpDown 自定义控件</span><span class="sxs-lookup"><span data-stu-id="9f5ed-459">NumericUpDown Custom Control with Theme and UI Automation Support Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-460">标识 <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-460">Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-461">指示元素的初始化过程已完成。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-461">Indicates that the initialization process for the element is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-462">如果<xref:System.Windows.FrameworkElement.BeginInit%2A>之前调用，基实现将引发<xref:System.Windows.FrameworkElement.Initialized>事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-462">If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event.</span></span> <span data-ttu-id="9f5ed-463">否则为如果<xref:System.Windows.FrameworkElement.BeginInit%2A>未调用或找不到确定是否<xref:System.Windows.FrameworkElement.BeginInit%2A>调用，则<xref:System.Windows.FrameworkElement.Initialized>则不会引发并改为引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-463">Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9f5ed-464">调用 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 之前尚未在元素上调用 <see cref="M:System.Windows.FrameworkElement.BeginInit" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-464"><see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-465">实现此方法以提供您的元素在元素加载过程中初始化时应发生这种情况的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-465">Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="9f5ed-466">您的实现应调用基实现，因为基本 （默认值） 实现设置要跟踪的初始化一些内部标志。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-466">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9f5ed-467">所请求元素的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-467">The name of the requested element.</span></span></param>
        <summary><span data-ttu-id="9f5ed-468">查找具有提供的标识符名的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-468">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-469">请求的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-469">The requested element.</span></span> <span data-ttu-id="9f5ed-470">如果找不到匹配的元素，该值将为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-470">This can be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-471">如果元素具有子元素，这些子元素将是所有以递归方式搜索请求的命名元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-471">If the element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
 <span data-ttu-id="9f5ed-472"><xref:System.Windows.FrameworkElement.FindName%2A> 在当前元素的名称范围内运行。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-472"><xref:System.Windows.FrameworkElement.FindName%2A> operates within the current element's namescope.</span></span> <span data-ttu-id="9f5ed-473">有关详细信息，请参阅[WPF XAML 名称范围](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-473">For details, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="9f5ed-474">X:name 特性</span><span class="sxs-lookup"><span data-stu-id="9f5ed-474">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="9f5ed-475">所请求资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-475">The key identifier for the requested resource.</span></span></param>
        <summary><span data-ttu-id="9f5ed-476">搜索具有指定密钥的资源，如果未找到请求的资源，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-476">Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-477">所请求的资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-477">The requested resource.</span></span> <span data-ttu-id="9f5ed-478">如果未找到具有所提供键的资源，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-478">If no resource with the provided key was found, an exception is thrown.</span></span> <span data-ttu-id="9f5ed-479">在发生异常的情况下，可能还会返回一个 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-479">An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="9f5ed-480">如果找不到键调用此方法，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-480">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="9f5ed-481">如果没有要处理的异常，导致调用<xref:System.Windows.FrameworkElement.FindResource%2A>，调用<xref:System.Windows.FrameworkElement.TryFindResource%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-481">If you do not want to handle exceptions that result from calling <xref:System.Windows.FrameworkElement.FindResource%2A>, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead.</span></span> <span data-ttu-id="9f5ed-482"><xref:System.Windows.FrameworkElement.TryFindResource%2A> 返回`null`请求的资源时无法找到，且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-482"><xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="9f5ed-483">如果在调用元素上找不到资源，逻辑树中的父元素是搜索下一步，然后应用程序，则主题和最后的系统资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-483">If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</span></span> <span data-ttu-id="9f5ed-484">这种查找方法等同于在标记中的动态资源引用请求资源时如何搜索树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-484">This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</span></span> <span data-ttu-id="9f5ed-485">有关资源查找的详细信息，请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-485">For more information about resource lookup, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9f5ed-486">通常情况下，您立即强制转换<xref:System.Windows.FrameworkElement.FindResource%2A>值到属性的类型，使你返回设置，并返回的资源值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-486">Typically, you immediately cast a <xref:System.Windows.FrameworkElement.FindResource%2A> return value to the type of the property that you setting with the returned resource value.</span></span>  
  
 <span data-ttu-id="9f5ed-487">资源键不一定是字符串。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-487">Resource keys are not necessarily strings.</span></span> <span data-ttu-id="9f5ed-488">例如，样式的控件在主题级别特意根据<xref:System.Type>的控制和应用程序或页样式的控件通常使用此相同的键约定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-488">For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention.</span></span> <span data-ttu-id="9f5ed-489">有关详细信息，请参阅[样式和模板化](~/docs/framework/wpf/controls/styling-and-templating.md)或[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-489">For details, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) or [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-490">下面的示例获取的已命名的资源，并将其转换为相应的类型以填充属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-490">The following example obtains a named resource and casts it to an appropriate type to fill a property.</span></span>  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="9f5ed-491">找不到 <paramref name="resourceKey" />，且事件管理器对于 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件不存在。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-491"><paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span>  
  
<span data-ttu-id="9f5ed-492">- 或 -</span><span class="sxs-lookup"><span data-stu-id="9f5ed-492">-or-</span></span> 
 <span data-ttu-id="9f5ed-493">找不到 <paramref name="resourceKey" />，且 <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> 属性在 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件中为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-493"><paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9f5ed-494"><paramref name="resourceKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-494"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-495">获取或设置方向，文本和其他 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 元素在任何控制其布局的父元素中都按此方向流动。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-495">Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</span></span></summary>
        <value><span data-ttu-id="9f5ed-496">文本和其他 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 元素在它们的父元素中的流动方向，是一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-496">The direction that text and other [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements flow within their parent element, as a value of the enumeration.</span></span> <span data-ttu-id="9f5ed-497">默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-497">The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-498">依赖项属性的使用情况设置<xref:System.Windows.FrameworkElement.FlowDirection%2A>此元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-498">The dependency property usage sets the <xref:System.Windows.FrameworkElement.FlowDirection%2A> on this element.</span></span> <span data-ttu-id="9f5ed-499">由于设置的属性值继承<xref:System.Windows.FrameworkElement.FlowDirection%2A>元素上可以有可能在设置<xref:System.Windows.FrameworkElement.FlowDirection%2A>未设置的所有子元素上<xref:System.Windows.FrameworkElement.FlowDirection%2A>本地或通过其他方式如样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-499">Because of property value inheritance, setting <xref:System.Windows.FrameworkElement.FlowDirection%2A> on an element can potentially set <xref:System.Windows.FrameworkElement.FlowDirection%2A> on all child elements that did not set <xref:System.Windows.FrameworkElement.FlowDirection%2A> locally or though other means such as styles.</span></span>  
  
 <span data-ttu-id="9f5ed-500">是未设置此属性会自动作为一部分的任何应用程序的区域性信息，因为元素可能包含不一定是不遵守权限隐含的区域性信息的常规流方向的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-500">This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</span></span> <span data-ttu-id="9f5ed-501">全球化注意事项的详细信息，请参阅[WPF 的全球化](~/docs/framework/wpf/advanced/globalization-for-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-501">For more information on globalization considerations, see [Globalization for WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).</span></span>  
  
 <span data-ttu-id="9f5ed-502">此属性具有已定义[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]属性访问器，使其作为依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-502">This property has a defined [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property.</span></span> <span data-ttu-id="9f5ed-503">但是，它还注册为附加，因此它也可以作为附加属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-503">However, it is also registered as attached, so it can also function as an attached property.</span></span> <span data-ttu-id="9f5ed-504">注册附加主要是为了支持属性值继承，但该属性还可以用作真正的附加属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-504">The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</span></span> <span data-ttu-id="9f5ed-505">附加的属性用法才是如果你想要将数据流方向设置上的对象具有相关<xref:System.Windows.FrameworkElement>执行时，布局的父元素不是本身<xref:System.Windows.FrameworkElement>，并且已没有更直接地定义`FlowDirection`属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-505">The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property.</span></span> <span data-ttu-id="9f5ed-506">(如的一些流文档类<xref:System.Windows.Documents.Block>并<xref:System.Windows.Documents.Inline>定义其自己`FlowDirection`，此属性也可以设置流方向。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-506">(Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction.</span></span> <span data-ttu-id="9f5ed-507">属性值随后由读取最终内容主机而无需附加的属性用法。）</span><span class="sxs-lookup"><span data-stu-id="9f5ed-507">The property value is then read by the eventual content host without requiring attached property usage.)</span></span>  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-508">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-508">XAML Attribute Usage</span></span>  
 <span data-ttu-id="9f5ed-509">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span><span class="sxs-lookup"><span data-stu-id="9f5ed-509">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span></span>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="9f5ed-510">XAML 文本使用情况</span><span class="sxs-lookup"><span data-stu-id="9f5ed-510">XAML Text Usage</span></span>  
 <span data-ttu-id="9f5ed-511">也可以不是类上设置此属性<xref:System.Windows.FrameworkElement>派生类中，由以下[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]附加属性用法：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-511">This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attached property usage:</span></span>  
  
 <span data-ttu-id="9f5ed-512">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-512">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span></span>  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-513">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-514">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-514">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|<span data-ttu-id="9f5ed-515">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-516"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span><span class="sxs-lookup"><span data-stu-id="9f5ed-516"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span></span>|  
  
 <span data-ttu-id="9f5ed-517">此属性是依赖项属性和附加的属性。请参阅备注。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-517">This property is both a dependency property and an attached property; see Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-518">标识 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-518">Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-519">获取或设置一个属性，该属性允许自定义此元素在捕获到键盘焦点时要应用于此元素的外观、效果或其他样式特征。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-519">Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="9f5ed-520">要应用于焦点的所需样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-520">The desired style to apply on focus.</span></span> <span data-ttu-id="9f5ed-521">该依赖属性中声明的默认值是一个空的静态 <see cref="T:System.Windows.Style" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-521">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="9f5ed-522">但是，运行时的有效值通常是（但并非总是）控件的主题支持所提供的样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-522">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-523">此属性会影响视觉外观，但不会报告<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>元数据中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-523">This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata.</span></span> <span data-ttu-id="9f5ed-524">这是因为可视外观更改是事件驱动和在任何时候，可能不适用，因此通常不应报告元数据中的任何视觉对象或布局信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-524">This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="9f5ed-525">从概念上讲，焦点应用于控件的可视行为应一致控件控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-525">Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</span></span> <span data-ttu-id="9f5ed-526">强制实施一致性的最合理方法是仅当您在创作整个主题更改焦点视觉样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-526">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="9f5ed-527">将此属性设置各个控件样式上而不是作为主题的一部分不是预期的用法的此属性，因为它可能会导致混乱的用户体验对键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-527">Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="9f5ed-528">如果你想是故意不一致的整个主题的特定于控件的行为，更好的方法是使用触发器在样式中的个别输入的状态属性，如<xref:System.Windows.UIElement.IsFocused%2A>或<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>，并为此，在没有一种方法以可视方式会影响任何现有的焦点视觉样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-528">If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="9f5ed-529">有关详细信息的设计意图<xref:System.Windows.FrameworkElement.FocusVisualStyle%2A>及替代焦点属性，请参阅[控件，以及 FocusVisualStyle 中的焦点设置样式](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-529">For more information on the design intention of <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-530">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-530">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-531">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-531">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-532">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-532">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-533">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-533">*resourceExtension*</span></span>  
 <span data-ttu-id="9f5ed-534">以下项之一:、 或。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-534">One of the following: , or .</span></span> <span data-ttu-id="9f5ed-535">请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-535">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9f5ed-536">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-536">*styleResourceKey*</span></span>  
 <span data-ttu-id="9f5ed-537">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-537">The key that identifies the style being requested.</span></span> <span data-ttu-id="9f5ed-538">键引用中的现有资源<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-538">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f5ed-539">属性元素语法就从技术上讲，但不是建议这样做。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-539">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="9f5ed-540">请参阅[内联样式和模板](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-540">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="9f5ed-541">绑定引用使用[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)或<xref:System.Windows.Data.Binding>也是可行的但不常见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-541">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-542">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-542">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-543">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-543">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="9f5ed-544">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-544">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-545">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-545">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-546">标识 <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-546">Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-547">获取或设置一个值，该值指示此 <see cref="T:System.Windows.FrameworkElement" /> 是否应该强制[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 按照 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 属性所声明的方式呈现光标。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-547">Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="9f5ed-548">如果强制光标在位于此元素（包括所有子元素）上时的呈现使用光标的当前 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 设置，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-548"><see langword="true" /> if cursor presentation while over this element is forced to use current <see cref="P:System.Windows.FrameworkElement.Cursor" /> settings for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="9f5ed-549">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-549">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-550">如果此属性设置为`true`将覆盖由子元素的光标首选项。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-550">If you set this property to `true` you will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="9f5ed-551">这样做因此一般情况下应用程序[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]可能容易引起混淆的用户，尤其是如果子元素尝试指定游标。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-551">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="9f5ed-552">设置<xref:System.Windows.FrameworkElement.ForceCursor%2A>控件子类化或组合的情况下方案中更合适。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-552">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-553">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-553">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-554">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-554">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|<span data-ttu-id="9f5ed-555">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-555">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-556">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-556">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-557">下面的示例强制游标值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-557">The following example forces the cursor value.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-558">标识 <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-558">Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9f5ed-559">要从中获取绑定的目标 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-559">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</span></span></param>
        <summary><span data-ttu-id="9f5ed-560">返回表示指定属性的绑定的 <see cref="T:System.Windows.Data.BindingExpression" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-560">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-561">如果目标属性具有活动的绑定，则返回 <see cref="T:System.Windows.Data.BindingExpression" />；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-561">A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-562">检查返回值是否为`null`是一种技术可用于确定属性是否具有活动的绑定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-562">Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.</span></span>  
  
 <span data-ttu-id="9f5ed-563">此方法是实际上就是方便周围的包装<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-563">This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9f5ed-564"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 将传递的当前实例和`dp`参数<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-564"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="9f5ed-565">要为其返回 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-565">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</span></span></param>
        <summary><span data-ttu-id="9f5ed-566">获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 附加属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-566">Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-567">所请求的流方向（作为一个枚举值）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-567">The requested flow direction, as a value of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-568">此方法的主要目的是支持的附加的属性语法<xref:System.Windows.FrameworkElement.FlowDirection%2A>属性，从而使子元素的提供<xref:System.Windows.FrameworkElement>来指定在其父元素的排列方式的流动方向。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-568">The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9f5ed-569">要获取其值在当前<xref:System.Windows.FrameworkElement>，使用 direct[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]访问器<xref:System.Windows.FrameworkElement.FlowDirection%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-569">To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="9f5ed-570">执行可视化演示的元素的部分大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-570">The size of the part of the element that does visual presentation.</span></span></param>
        <summary><span data-ttu-id="9f5ed-571">返回剪切蒙版的形状。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-571">Returns a geometry for a clipping mask.</span></span> <span data-ttu-id="9f5ed-572">如果布局系统尝试排列的元素大小超过可用显示空间，将会应用蒙版。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-572">The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-573">剪切形状。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-573">The clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-574">被减边距`layoutSlotSize`布局系统行为的一部分。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-574">Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.</span></span>  
  
 <span data-ttu-id="9f5ed-575">如果返回 null 引用指示没有剪辑将会发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-575">A returned null reference indicates that no clipping will occur.</span></span> <span data-ttu-id="9f5ed-576">默认实现始终返回`null`时<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-576">The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span> <span data-ttu-id="9f5ed-577">此方法重写 <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-577">This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f5ed-578"><xref:System.Windows.FrameworkElement>实现使用<xref:System.Windows.FrameworkElement.MaxHeight%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>其计算中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-578">The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations.</span></span> <span data-ttu-id="9f5ed-579">多个类的子类<xref:System.Windows.FrameworkElement>再次重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-579">Several subclasses of <xref:System.Windows.FrameworkElement> override this method again.</span></span> <span data-ttu-id="9f5ed-580"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>将重写以便始终返回`null`因为装饰器通常都特意普通的界限外。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-580"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds.</span></span> <span data-ttu-id="9f5ed-581"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> 并<xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType>返回`null`如果<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-581"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-582">默认实现始终返回<see langword="null" />时<see cref="P:System.Windows.UIElement.ClipToBounds" />是<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-582">The default implementation always returns <see langword="null" /> when <see cref="P:System.Windows.UIElement.ClipToBounds" /> is <see langword="false" />.</span></span> <span data-ttu-id="9f5ed-583">重写通常会保留此行为，但是有一些例外，具体取决于关系和派生的类和其布局逻辑而不是类的基类的目的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-583">Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName"><span data-ttu-id="9f5ed-584">要查找的子级的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-584">Name of the child to find.</span></span></param>
        <summary><span data-ttu-id="9f5ed-585">返回实例化的 <see cref="T:System.Windows.Controls.ControlTemplate" /> 可视化树中的命名元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-585">Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-586">请求的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-586">The requested element.</span></span> <span data-ttu-id="9f5ed-587">如果具有所请求名称的元素不存在，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-587">May be <see langword="null" /> if no element of the requested name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-588">中的模板[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]具有独立的名称范围。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-588">Templates in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope.</span></span> <span data-ttu-id="9f5ed-589">这是因为模板可以重复使用，并且在模板中定义的任何名称不能保持唯一时实例化其模板，每个控件的多个实例。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-589">This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</span></span> <span data-ttu-id="9f5ed-590">调用<xref:System.Windows.FrameworkElement.GetTemplateChild%2A>方法返回对它实例化之后，来自模板的对象的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-590">Call the <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> method to return references to objects that come from the template after it is instantiated.</span></span> <span data-ttu-id="9f5ed-591">不能使用<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>方法来查找模板中的项，因为<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>中一种更通用的作用范围，并且没有之间没有连接<xref:System.Windows.Controls.ControlTemplate>类本身和实例化的模板后应用该策略。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-591">You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.</span></span>  
  
 <span data-ttu-id="9f5ed-592"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 提供了与此方法相同的功能。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-592"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> supplies the same function as this method.</span></span> <span data-ttu-id="9f5ed-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 而不是公共受保护，并使用正确名称范围措施，使其能够访问内部元素，将查找名为其中的项的模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</span></span> <span data-ttu-id="9f5ed-594">使用<xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType>时您需要先获取其父控件之外的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-594">Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> when you need to get an element outside of its parent control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-595">如果没有视觉父级，则返回此元素的备用逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-595">Returns an alternative logical parent for this element if there is no visual parent.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-596">当此方法的 WPF 框架级别实现具有非视觉父级连接时，即返回 <see langword="null" /> 之外的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-596">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-597">此方法重写 <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-597">This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f5ed-598">默认值<xref:System.Windows.FrameworkElement>实现返回预期的单个可视化父级，即获取相同的结果<xref:System.Windows.FrameworkElement.Parent%2A>值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-598">The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value.</span></span> <span data-ttu-id="9f5ed-599">在派生的类实现可能会返回备用的父关系。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-599">Derived class implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9f5ed-600">集合中请求的子元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-600">The zero-based index of the requested child element in the collection.</span></span></param>
        <summary><span data-ttu-id="9f5ed-601">重写 <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />，并从子元素集合中返回指定索引处的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-601">Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-602">请求的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-602">The requested child element.</span></span> <span data-ttu-id="9f5ed-603">这不应返回 <see langword="null" />；如果提供的索引超出范围，则引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-603">This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-604">在<xref:System.Windows.FrameworkElement>实现中，唯一有效索引为零。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-604">In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero.</span></span> <span data-ttu-id="9f5ed-605">内容模型<xref:System.Windows.FrameworkElement.GetVisualChild%2A>支持零个或一个子元素，不是集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-605">The content model for <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supports either zero or one child elements, not a collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-606">下面的示例演示如何自定义装饰器使用的值来声明<xref:System.Windows.Media.VisualCollection>它为其多个可视子级维护。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-606">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children.</span></span> <span data-ttu-id="9f5ed-607">通过重写之一报告这些值<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>和<xref:System.Windows.FrameworkElement.GetVisualChild%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-607">These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-608">此实现中时才有效不维护任何更具描述性的可视子元素集合的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-608">This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</span></span> <span data-ttu-id="9f5ed-609">具有此类集合的任何元素必须重写此方法，并将索引映射到支持的该元素的子元素集合中的等效索引。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-609">Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</span></span> <span data-ttu-id="9f5ed-610">从零到范围中的索引<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />（减一），则应返回有效的元素; 任何其他索引应引发超出范围异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-610">An index in the range from zero to <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (minus one) should return a valid element; any other index should throw an out-of-range exception.</span></span> <span data-ttu-id="9f5ed-611">支持的子集合，而且重写的元素类型的示例<see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />若要返回多个可能的子<see cref="T:System.Windows.Controls.Panel" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-611">An example of an element type that does support a child collection and overrides <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> to return more than one possible child is <see cref="T:System.Windows.Controls.Panel" />.</span></span>  
  
<span data-ttu-id="9f5ed-612">中的默认实现<see cref="T:System.Windows.FrameworkElement" />假定只有一个可视化子级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-612">The default implementation in <see cref="T:System.Windows.FrameworkElement" /> presumes only one visual child.</span></span> <span data-ttu-id="9f5ed-613">为传递的任何值<paramref name="index" />以外的零个原因的异常引发。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-613">Any value passed for <paramref name="index" /> other than zero causes an exception to be thrown.</span></span> <span data-ttu-id="9f5ed-614">几种常见的元素，如修饰器、 装饰器或具有专用呈现的元素替代<see cref="T:System.Windows.FrameworkElement" />实现 （属于间接基类实现）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-614">Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <see cref="T:System.Windows.FrameworkElement" /> implementation (of the implementation from intermediate base classes).</span></span> <span data-ttu-id="9f5ed-615">某些实现仍强制实施一个可视化子级，而另一些则允许集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-615">Some implementations still enforce one visual child whereas others allow a collection.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-616">获取或设置元素的建议高度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-616">Gets or sets the suggested height of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-617">元素的高度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-617">The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-618">默认值为 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-618">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="9f5ed-619">此值必须等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-619">This value must be equal to or greater than 0.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-620"><xref:System.Windows.FrameworkElement.Height%2A> 是一个三个可写属性上<xref:System.Windows.FrameworkElement>指定高度信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-620"><xref:System.Windows.FrameworkElement.Height%2A> is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9f5ed-621">其他两个<xref:System.Windows.FrameworkElement.MinHeight%2A>和<xref:System.Windows.FrameworkElement.MaxHeight%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-621">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9f5ed-622">如果冲突之间这三个值，确定高度的实际的应用程序的顺序是： 首先<xref:System.Windows.FrameworkElement.MinHeight%2A>必须遵守，然后<xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后，如果它在指定边界内<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-622">If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-623">此元素是一些其他元素中的子元素，然后将此属性设置为一个值真的只建议的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-623">If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</span></span> <span data-ttu-id="9f5ed-624">布局系统，以及父元素的特定布局逻辑将使用值为非绑定输入在布局过程。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-624">The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</span></span> <span data-ttu-id="9f5ed-625">在实践中，<xref:System.Windows.FrameworkElement>几乎始终是也是如此。 的子元素，即使您设置<xref:System.Windows.FrameworkElement.Height%2A>上<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-625">In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the <xref:System.Windows.FrameworkElement.Height%2A> on <xref:System.Windows.Window>.</span></span> <span data-ttu-id="9f5ed-626">(有关<xref:System.Windows.Window>，值时的基础的应用程序模型建立创建 Hwnd 的基本呈现假设使用托管的应用程序。)</span><span class="sxs-lookup"><span data-stu-id="9f5ed-626">(For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</span></span>  
  
 <span data-ttu-id="9f5ed-627">除了在可接受<xref:System.Double>值，此属性也可以是<xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-627">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f5ed-628">这是如何在代码中指定自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-628">This is how you specify auto sizing behavior in code.</span></span> <span data-ttu-id="9f5ed-629">在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]值设置为字符串"Auto"（不区分大小写） 以启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-629">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9f5ed-630">自动调整大小行为意味着该元素将填满可用的高度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-630">Auto sizing behavior implies that the element will fill the height available to it.</span></span> <span data-ttu-id="9f5ed-631">但是请注意，特定控件通常提供通过将禁用自动调整大小行为，除非专门重新启用了其默认主题样式的默认值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-631">Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9f5ed-632">此属性的返回值始终是任何已设置为它的值相同。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-632">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9f5ed-633">与之相反，值<xref:System.Windows.FrameworkElement.ActualHeight%2A>可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-633">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary.</span></span> <span data-ttu-id="9f5ed-634">这种情况可能是以静态方式因布局拒绝出于某种原因，建议的大小或暂时不可用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-634">This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</span></span> <span data-ttu-id="9f5ed-635">布局系统本身相对于属性系统的集以异步方式工作<xref:System.Windows.FrameworkElement.Height%2A>和可能不处理特定大小调整属性的更改。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-635">The layout system itself works asynchronously relative to the property system's set of <xref:System.Windows.FrameworkElement.Height%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9f5ed-636">值限制<xref:System.Double>值强制实施<xref:System.Windows.ValidateValueCallback>机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-636">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9f5ed-637">如果您尝试设置一个无效值，则会运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-637">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
 <span data-ttu-id="9f5ed-638">除了验证检查，还有用于绑定的不确定性上限值<xref:System.Windows.FrameworkElement.Height%2A>，由布局系统强制执行 (这是一个非常大的数字，大于<xref:System.Single.MaxValue?displayProperty=nameWithType>但小于<xref:System.Double.MaxValue?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-638">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Height%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9f5ed-639">如果你超出此限制，该元素将不会呈现，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-639">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9f5ed-640">未设置<xref:System.Windows.FrameworkElement.Height%2A>远远大于任何可能的可视显示，或您的最大大小可能会超出此非确定性上限的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-640">Do not set <xref:System.Windows.FrameworkElement.Height%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-641">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-641">XAML Attribute Usage</span></span>  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-642">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-642">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-643">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-643">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-644">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-644">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-645">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-645">See Remarks for upper bound information.</span></span> <span data-ttu-id="9f5ed-646">此值解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-646">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-647">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-647">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-648">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-648">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-649">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-649">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-650">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-650">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-651">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-651">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-652">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-652">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-653">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-653">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-654">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-654">`pt` is points; 1pt==(96/72) px</span></span>  
  
 <span data-ttu-id="9f5ed-655">**Auto**</span><span class="sxs-lookup"><span data-stu-id="9f5ed-655">**Auto**</span></span>  
 <span data-ttu-id="9f5ed-656">启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-656">Enables autosizing behavior.</span></span> <span data-ttu-id="9f5ed-657">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-657">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-658">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-658">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-659">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-659">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|<span data-ttu-id="9f5ed-660">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-660">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-661">标识 <see cref="P:System.Windows.FrameworkElement.Height" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-661">Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-662">获取或设置在父元素(如 Panel 或项控件)中组合此元素时所应用的水平对齐特征。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-662">Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="9f5ed-663">水平对齐设置，它是一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-663">A horizontal alignment setting, as a value of the enumeration.</span></span> <span data-ttu-id="9f5ed-664">默认值为 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-664">The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-665">当<xref:System.Windows.FrameworkElement.Height%2A>并<xref:System.Windows.FrameworkElement.Width%2A>元素上显式设置属性，这些度量值在布局期间较高的优先级并且将取消设置的典型效果<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>到<xref:System.Windows.HorizontalAlignment.Stretch>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-665">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> to <xref:System.Windows.HorizontalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9f5ed-666"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]属性访问器，它实际上是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-666"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9f5ed-667">此特定的依赖项属性经常具有子类化元素，尤其是控件中以不同方式设置其原本"默认"值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-667">This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</span></span> <span data-ttu-id="9f5ed-668">这通常发生在两种方式之一： 为特定的子类，但具有不同的元数据设置其默认值; 重新注册该依赖项属性或者应用了默认样式以不同方式设置该依赖项属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-668">This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9f5ed-669">例如，明显"default"的<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>有关<xref:System.Windows.Controls.Label>控件将是<xref:System.Windows.HorizontalAlignment.Left>，即使<xref:System.Windows.Controls.Label>继承<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>直接从<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-669">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment.Left>, even though <xref:System.Windows.Controls.Label> inherits <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9f5ed-670">这是因为该值的默认样式中已重置<xref:System.Windows.Controls.Label>，样式的控件模板中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-670">This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9f5ed-671"><xref:System.Windows.Controls.Canvas> 不使用<xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>构成布局，因为时<xref:System.Windows.Controls.Canvas>根据绝对定位。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-671"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9f5ed-672">当由继承<xref:System.Windows.Controls.Label>或派生类中，<xref:System.Windows.Controls.Label>重新定义为此依赖项属性的默认值<xref:System.Windows.HorizontalAlignment.Left>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-672">When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment.Left>.</span></span>  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-673">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-673">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-674">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-674">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|<span data-ttu-id="9f5ed-675">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-675">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-676">标识 <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-676">Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-677">获取或设置属性值继承、资源键查找和RelativeSource FindAncestor 查找的范围限制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-677">Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</span></span></summary>
        <value><span data-ttu-id="9f5ed-678">枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-678">A value of the enumeration.</span></span> <span data-ttu-id="9f5ed-679">默认值为 <see cref="F:System.Windows.InheritanceBehavior.Default" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-679">The default is <see cref="F:System.Windows.InheritanceBehavior.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-680">在元素中的某些边界树集<xref:System.Windows.FrameworkElement.InheritanceBehavior%2A>以故意限制继承行为，强制资源查找，检查应用程序资源，或防止 RelativeSource FindAncestor 查找查询当前元素的范围或任何深一层。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-680">Certain boundaries in the element tree set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</span></span> <span data-ttu-id="9f5ed-681">使用的绑定时发生 RelativeSource FindAncestor 查找<xref:System.Windows.Data.RelativeSource>具有其<xref:System.Windows.Data.RelativeSource.Mode%2A>属性设置为<xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType>值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-681">RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> value.</span></span>  
  
 <span data-ttu-id="9f5ed-682">如果你想要设置此属性在派生的类，应在静态构造函数中或其他初始化例程中再这样做。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-682">If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-683">初始化此 <see cref="T:System.Windows.FrameworkElement" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-683">Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized.</span></span> <span data-ttu-id="9f5ed-684">此事件与 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 属性的值从 <see langword="false" />（或未定义）更改为 <see langword="true" /> 的情况相符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-684">This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-685">将此事件时引发<xref:System.Windows.FrameworkElement.EndInit%2A>或<xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-685">This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called.</span></span> <span data-ttu-id="9f5ed-686">对这两种方法的调用可以具有来自应用程序代码或通过[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]处理器行为时[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]处理页。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-686">Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page is processed.</span></span>  
  
 <span data-ttu-id="9f5ed-687">您是否选择处理<xref:System.Windows.FrameworkElement.Loaded>或<xref:System.Windows.FrameworkElement.Initialized>取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-687">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9f5ed-688">如果不需要读取元素的属性，想要重置的属性，并且不需要的任何布局信息，<xref:System.Windows.FrameworkElement.Initialized>可能是更好的事件以对其执行操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-688">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9f5ed-689">如果需要元素可用的所有属性，并且您将设置属性的可能将布局重置<xref:System.Windows.FrameworkElement.Loaded>可能是更好的事件以对其执行操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-689">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9f5ed-690">如果您的处理程序将重置由布局系统来表示新的布局传递需要解释的任何属性，则请注意的可重入性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-690">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9f5ed-691">(您可能需要检查<xref:System.Windows.FrameworkPropertyMetadata>上如果您不确定哪些属性可能需要一种新布局的属性的值将传递更改时。)</span><span class="sxs-lookup"><span data-stu-id="9f5ed-691">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9f5ed-692">有关序列的对象事件的详细信息<xref:System.Windows.FrameworkElement>，并且还为多个相关应用程序和元素类，请参阅[对象生存期事件](~/docs/framework/wpf/advanced/object-lifetime-events.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-692">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-693">获取或设置此 <see cref="T:System.Windows.FrameworkElement" /> 使用的输入的上下文。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-693">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <value><span data-ttu-id="9f5ed-694">解释输入范围，在该输入范围内修改从其他输入法输入的方式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-694">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="9f5ed-695">默认值为 <see langword="null" />（这将导致对命令的默认处理）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-695">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-696">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-696">This dependency property inherits property values.</span></span> <span data-ttu-id="9f5ed-697">如果没有为其他值的子元素<xref:System.Windows.FrameworkElement.InputScope%2A>建立本地值或样式，通过属性系统会将设置此值为<xref:System.Windows.FrameworkElement.InputScope%2A>分配有此值最接近的上级元素的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-697">If there are child elements without other values for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 <span data-ttu-id="9f5ed-698">尽管[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]语法使用情况列出和语法上允许，则将此属性设置[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并不常见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-698">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-699">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-699">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-700">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-700">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|<span data-ttu-id="9f5ed-701">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-701">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-702">标识 <see cref="P:System.Windows.FrameworkElement.InputScope" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-702">Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-703">获取一个值，该值表示该元素是否在由 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器进行处理时，或者通过显式调用其 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 方法被初始化。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-703">Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="9f5ed-704">如果该元素按照前面提到的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理或者方法调用已被初始化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-704"><see langword="true" /> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-705">此属性也可能`true`如果此元素被移动逻辑树中以便它有了新的父元素，并因此重新。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-705">This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 <span data-ttu-id="9f5ed-706">此属性很有用，如果您还使用了<xref:System.Windows.FrameworkElement.BeginInit%2A>和<xref:System.Windows.FrameworkElement.EndInit%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-706">This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>.</span></span> <span data-ttu-id="9f5ed-707">由加载逻辑树中的元素[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]处理器都保证会进行初始化。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-707">Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized.</span></span> <span data-ttu-id="9f5ed-708">不在逻辑树中的元素将初始化时<xref:System.Windows.FrameworkElement.EndInit%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-708">Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called.</span></span> <span data-ttu-id="9f5ed-709">缺少的任何特定处理的情况下<xref:System.Windows.FrameworkElement.BeginInit%2A>和<xref:System.Windows.FrameworkElement.EndInit%2A>，这会立即构造函数将返回已初始化的结果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-709">In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-710">获取一个值，该值指示是否已加载此元素以供呈现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-710">Gets a value that indicates whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="9f5ed-711">如果当前元素被附加到元素树，则为 <see langword="true" />；如果该元素从未附加到所加载的元素树，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-711"><see langword="true" /> if the current element is attached to an element tree; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-712">从新构造<xref:System.Windows.FrameworkElement>，此属性以`false`，并保持`true`设置为后`true`，即使该元素由代码随后删除从已连接的逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-712">From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code.</span></span> <span data-ttu-id="9f5ed-713">`true` 元素加载到演示文稿引擎时，将按常规的表示逻辑设置状态。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-713">`true` state is set by the general presentation logic when elements are loaded into the presentation engine.</span></span>  
  
 <span data-ttu-id="9f5ed-714">通常情况下，已加载的元素是呈现，而不是全部<xref:System.Windows.FrameworkElement>派生的类具有一个演示文稿和其他属性，如<xref:System.Windows.UIElement.Visibility%2A>可能影响表示形式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-714">Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-715">下面的示例实现两个处理程序： 一个处理<xref:System.Windows.FrameworkElement.Loaded>根元素，从而可以确定该事件的重要性在于，加载页面根元素的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-715">The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</span></span> <span data-ttu-id="9f5ed-716">另一个处理程序挂钩到一个用户控件，并且调用<xref:System.Windows.FrameworkElement.IsLoaded%2A>可确保根元素是加载完全。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-716">The other handler is hooked to a user control, and calls <xref:System.Windows.FrameworkElement.IsLoaded%2A> to assure that the root element is loaded completely.</span></span> <span data-ttu-id="9f5ed-717">这两个处理程序调用同一函数 （未显示），将填充新数据的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-717">Both handlers call the same function (not shown) that will populate child elements with fresh data.</span></span>  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-718">获取或设置应用于某个元素的本地化/全球化语言信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-718">Gets or sets localization/globalization language information that applies to an element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-719">此元素的语言信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-719">The language information for this element.</span></span> <span data-ttu-id="9f5ed-720">默认值为 <see cref="T:System.Windows.Markup.XmlLanguage" />，它的 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值设置为字符串 "zh-CN"。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-720">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-721">字符串格式遵循 RFC 3066 标准。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-721">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="9f5ed-722">例如，美国英语是"EN-US"。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-722">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="9f5ed-723">值和格式的详细信息，请参阅<xref:System.Windows.Markup.XmlLanguage>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-723">For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.</span></span>  
  
 <span data-ttu-id="9f5ed-724">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-724">This dependency property inherits property values.</span></span> <span data-ttu-id="9f5ed-725">如果没有为其他值的子元素<xref:System.Windows.FrameworkElement.Language%2A>建立通过本地值或样式，属性系统将设置此值为<xref:System.Windows.FrameworkElement.Language%2A>分配有此值最接近的上级元素的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-725">If there are child elements without other values for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] <span data-ttu-id="9f5ed-726">定义的常规含义`xml:lang`属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-726">defines the general meaning of the `xml:lang` attribute.</span></span> <span data-ttu-id="9f5ed-727"><xref:System.Windows.FrameworkElement.Language%2A> 实质上是公开的此属性为依赖属性的含义。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-727"><xref:System.Windows.FrameworkElement.Language%2A> essentially exposes the meaning of this attribute as a dependency property.</span></span> <span data-ttu-id="9f5ed-728"><xref:System.Windows.FrameworkElement.Language%2A> 可以进行调整，以编程方式，并且可以参与属性系统值继承中，等同于一种方法如何`xml:lang`属性可以继承中的子元素范围[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-728"><xref:System.Windows.FrameworkElement.Language%2A> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].</span></span> <span data-ttu-id="9f5ed-729">如果您设置<xref:System.Windows.FrameworkElement.Language%2A>，该值将成为`xml:lang`并覆盖任何以前的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-729">If you set <xref:System.Windows.FrameworkElement.Language%2A>, that value becomes the `xml:lang` and overwrites any previous value.</span></span> <span data-ttu-id="9f5ed-730">有关详细信息，请参阅[xml: lang 处理在 XAML 中](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-730">For more information, see [xml:lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-731">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-731">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-732">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-732">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|<span data-ttu-id="9f5ed-733">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-733">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-734">标识 <see cref="P:System.Windows.FrameworkElement.Language" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-734">Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-735">获取或设置在执行布局时应该应用于此元素的图形转换方式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-735">Gets or sets a graphics transformation that should apply to this element when  layout is performed.</span></span></summary>
        <value><span data-ttu-id="9f5ed-736">此元素应该使用的转换。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-736">The transform this element should use.</span></span> <span data-ttu-id="9f5ed-737">默认值为 <see cref="P:System.Windows.Media.Transform.Identity" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-737">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-738">与此相反<xref:System.Windows.UIElement.RenderTransform%2A>，<xref:System.Windows.FrameworkElement.LayoutTransform%2A>将会影响布局的结果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-738">In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> will affect results of layout.</span></span>  
  
 <span data-ttu-id="9f5ed-739">设置转换提供了强大功能的缩放和旋转。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-739">Setting a transform provides powerful capabilities of scaling and rotating.</span></span> <span data-ttu-id="9f5ed-740">但是，<xref:System.Windows.FrameworkElement.LayoutTransform%2A>忽略<xref:System.Windows.Media.TranslateTransform>操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-740">However, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignores <xref:System.Windows.Media.TranslateTransform> operations.</span></span> <span data-ttu-id="9f5ed-741">这是因为的子元素的布局系统行为<xref:System.Windows.FrameworkElement>自动更正任何偏移量到布局中的缩放或旋转元素的位置和坐标系统的父元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-741">This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</span></span>  
  
 <span data-ttu-id="9f5ed-742"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> 如果方案不需要布局系统的整个处理过程中调用它，可能导致到应用程序性能差。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-742"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</span></span> <span data-ttu-id="9f5ed-743">当应用<xref:System.Windows.FrameworkElement.LayoutTransform%2A>到<xref:System.Windows.Controls.Panel.Children%2A>的集合<xref:System.Windows.Controls.Panel>，它将触发一个新的布局系统传递和强制屏幕上的所有对象重新度量和重新排列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-743">When you apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</span></span> <span data-ttu-id="9f5ed-744">如果要更新的完整应用程序[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]，此功能可能会完全所需内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-744">If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need.</span></span> <span data-ttu-id="9f5ed-745">但是，如果不需要完整布局处理过程，使用<xref:System.Windows.UIElement.RenderTransform%2A>属性，它不会调用布局系统，因此，通常是这种情况下更好的选择。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-745">However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</span></span>  
  
 <span data-ttu-id="9f5ed-746">示例方案其中<xref:System.Windows.FrameworkElement.LayoutTransform%2A>情况下可包括： 旋转元素从水平到垂直或执行相反，菜单组件等元素 （放大） 缩放获得焦点时，提供编辑行为，等等。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-746">Example scenarios where <xref:System.Windows.FrameworkElement.LayoutTransform%2A> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</span></span>  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-747">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-747">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-748">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-748">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|<span data-ttu-id="9f5ed-749">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-749">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-750">下面的示例演示如何应用<xref:System.Windows.FrameworkElement.LayoutTransform%2A>的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-750">The following example shows how to apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to an element.</span></span> <span data-ttu-id="9f5ed-751">该示例创建的实例<xref:System.Windows.Controls.Button>并托管在父级中<xref:System.Windows.Controls.Grid>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-751">The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>.</span></span> <span data-ttu-id="9f5ed-752">它还使用<xref:System.Windows.FrameworkElement.LayoutTransform%2A>属性，将应用<xref:System.Windows.Media.RotateTransform>到<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-752">It also uses the <xref:System.Windows.FrameworkElement.LayoutTransform%2A> property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252"><span data-ttu-id="9f5ed-753">2d 转换示例</span><span class="sxs-lookup"><span data-stu-id="9f5ed-753">2-D Transforms Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-754">标识 <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-754">Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-755">当对元素进行布局、呈现，且可将其用于交互时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-755">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-756"><xref:System.Windows.FrameworkElement.Loaded> 通常的最后一个事件中引发元素初始化序列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-756"><xref:System.Windows.FrameworkElement.Loaded> is usually the last event raised in an element initialization sequence.</span></span> <span data-ttu-id="9f5ed-757">始终会引发此事件之后<xref:System.Windows.FrameworkElement.Initialized>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-757">It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>.</span></span> <span data-ttu-id="9f5ed-758">您是否选择处理<xref:System.Windows.FrameworkElement.Loaded>或<xref:System.Windows.FrameworkElement.Initialized>取决于您的要求。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-758">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9f5ed-759">如果不需要读取元素的属性，想要重置的属性，并且不需要的任何布局信息，<xref:System.Windows.FrameworkElement.Initialized>可能是更好的事件以对其执行操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-759">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9f5ed-760">如果需要元素可用的所有属性，并且您将设置属性的可能将布局重置<xref:System.Windows.FrameworkElement.Loaded>可能是更好的事件以对其执行操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-760">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9f5ed-761">如果您的处理程序将重置由布局系统来表示新的布局传递需要解释的任何属性，则请注意的可重入性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-761">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9f5ed-762">(您可能需要检查<xref:System.Windows.FrameworkPropertyMetadata>上如果您不确定哪些属性可能需要一种新布局的属性的值将传递更改时。)</span><span class="sxs-lookup"><span data-stu-id="9f5ed-762">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9f5ed-763">有关序列的对象事件的详细信息<xref:System.Windows.FrameworkElement>，并且还为多个相关应用程序和元素类，请参阅[对象生存期事件](~/docs/framework/wpf/advanced/object-lifetime-events.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-763">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 <span data-ttu-id="9f5ed-764">直接路由的事件不遵循路由，而仅处理引发它们在同一元素中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-764">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9f5ed-765">直接路由的事件支持其他路由的事件行为： 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-765">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9f5ed-766"><xref:System.Windows.FrameworkElement.Loaded> 和<xref:System.Windows.FrameworkElement.Unloaded>可能同时会引发用户启动系统主题更改控件上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-766"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9f5ed-767">主题更改都会导致控件模板，并包含可视化树，从而导致整个控件以卸载并重新加载的失效。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-767">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9f5ed-768">因此<xref:System.Windows.FrameworkElement.Loaded>不能假设发生仅当一个页面首次加载通过导航到页。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-768">Therefore <xref:System.Windows.FrameworkElement.Loaded> cannot be assumed to occur only when a page is first loaded through navigation to the page.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-769">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-769">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-770">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-770">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|<span data-ttu-id="9f5ed-771">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-771">Routing strategy</span></span>|<span data-ttu-id="9f5ed-772">直接</span><span class="sxs-lookup"><span data-stu-id="9f5ed-772">Direct</span></span>|  
|<span data-ttu-id="9f5ed-773">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-773">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-774">标识 <see cref="E:System.Windows.FrameworkElement.Loaded" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-774">Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-775">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-775">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-776">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-776">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-777">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-777">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-778">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-778">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-779">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-779">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-780">获取此元素的逻辑子元素的一个枚举器。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-780">Gets an enumerator for logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-781">此元素的逻辑子元素的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-781">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-782"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> 可以循环访问子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-782"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> allows you to iterate over child elements.</span></span> <span data-ttu-id="9f5ed-783">这是对于那些可能不具有已定义的专用集合，但仍包含一个以上的子元素，尤其是<xref:System.Windows.FrameworkContentElement>子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-783">This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.</span></span>  
  
 <span data-ttu-id="9f5ed-784">有关如何使用的详细信息<xref:System.Windows.FrameworkElement.LogicalChildren%2A>并<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>，请参阅[WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-784">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c"><span data-ttu-id="9f5ed-785">x:Array 标记扩展</span><span class="sxs-lookup"><span data-stu-id="9f5ed-785">x:Array Markup Extension</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-786">获取或设置元素的外边距。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-786">Gets or sets the outer margin of an element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-787">提供元素的边距值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-787">Provides margin values for the element.</span></span> <span data-ttu-id="9f5ed-788">默认值是所有属性都等于 0（零）的 <see cref="T:System.Windows.Thickness" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-788">The default value is a <see cref="T:System.Windows.Thickness" /> with all properties equal to 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-789">位置，此元素与布局创建时，将相邻的其他元素之间的间距[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-789">The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="9f5ed-790">共享的元素可能是对等元素 （如公共父控件的集合中的其他元素），或者也可能是此元素的父级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-790">Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</span></span>  
  
 <span data-ttu-id="9f5ed-791"><xref:System.Windows.FrameworkElement.Margin%2A> 设置为<xref:System.Windows.Thickness>结构而不是一个数字，以便可以进行非对称设置边距。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-791"><xref:System.Windows.FrameworkElement.Margin%2A> is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically.</span></span> <span data-ttu-id="9f5ed-792"><xref:System.Windows.Thickness>结构本身支持字符串类型转换，以便您可以指定非对称<xref:System.Windows.FrameworkElement.Margin%2A>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]还特性语法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-792">The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute syntax also.</span></span>  
  
 <span data-ttu-id="9f5ed-793">非零的边距之外的元素布局空间<xref:System.Windows.FrameworkElement.ActualWidth%2A>和<xref:System.Windows.FrameworkElement.ActualHeight%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-793">A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-794">边距是累加性的同级元素在布局中;例如，它们都具有 30 的边距设置相连的边缘的两个相邻元素将有 60 之间的距离单位。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-794">Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</span></span>  
  
 <span data-ttu-id="9f5ed-795">具有边距设置的元素通常不会约束指定的大小<xref:System.Windows.FrameworkElement.Margin%2A>分配的矩形空间是否不足够大的边距加上元素的内容区域。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-795">Elements that have margins set will not typically constrain the size of the specified <xref:System.Windows.FrameworkElement.Margin%2A> if the allotted rectangle space is not large enough for the margin plus the element content area.</span></span> <span data-ttu-id="9f5ed-796">计算布局时，会改为约束的元素的内容区域。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-796">The element content area will be constrained instead when layout is calculated.</span></span> <span data-ttu-id="9f5ed-797">边距将受限的唯一情况也是如果内容已局限到零。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-797">The only case where margins would be constrained also is if the content is already constrained all the way to zero.</span></span>  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-798">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-798">XAML Attribute Usage</span></span>  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-799">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-799">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-800">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-800">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-801">*左、 上、 右、 下*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-801">*left, top, right, bottom*</span></span>  
 <span data-ttu-id="9f5ed-802">0 之间的数字值和<xref:System.Double.PositiveInfinity>指定的四个可能的维属性<xref:System.Windows.Thickness>结构。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-802">Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.</span></span>  
  
 <span data-ttu-id="9f5ed-803">特性用法还将接受缩写的值提供，对称和以逻辑方式按顺序应用的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-803">The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</span></span> <span data-ttu-id="9f5ed-804">例如，`Margin="20"`解释为<xref:System.Windows.Thickness>，所有属性均设置为 20。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-804">For instance, `Margin="20"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20.</span></span> <span data-ttu-id="9f5ed-805">`Margin="20,50"` 将被解释为平均值<xref:System.Windows.Thickness>与<xref:System.Windows.Thickness.Left%2A>并<xref:System.Windows.Thickness.Right%2A>设置为 20，和<xref:System.Windows.Thickness.Top%2A>和<xref:System.Windows.Thickness.Bottom%2A>设置为 50。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-805">`Margin="20,50"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.</span></span>  
  
 <span data-ttu-id="9f5ed-806">默认单位<xref:System.Windows.Thickness>度量值是[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-806">The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)].</span></span> <span data-ttu-id="9f5ed-807">此外可以通过追加单位类型字符串来指定其他单位`cm`， `in`，或`pt`到任何度量值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-807">You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.</span></span>  
  
 <span data-ttu-id="9f5ed-808">数字值作为提供[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]属性不需要指定小数点 （0 是可以接受，无需将提供为 0.0）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-808">Number values provided as [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</span></span> <span data-ttu-id="9f5ed-809">有关详细信息[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用情况，请参阅<xref:System.Windows.Thickness>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-809">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
 <span data-ttu-id="9f5ed-810">*thicknessReference*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-810">*thicknessReference*</span></span>  
 <span data-ttu-id="9f5ed-811">对现有的对象引用<xref:System.Windows.Thickness>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-811">An object reference to an existing <xref:System.Windows.Thickness>.</span></span> <span data-ttu-id="9f5ed-812">这可能是`}`、 a、 或`}`引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-812">This might be a `}`, a , or `}` reference.</span></span> <span data-ttu-id="9f5ed-813">有关详细信息[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]使用情况，请参阅<xref:System.Windows.Thickness>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-813">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-814">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-814">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-815">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-815">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|<span data-ttu-id="9f5ed-816">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-816">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-817">标识 <see cref="P:System.Windows.FrameworkElement.Margin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-817">Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-818">获取或设置元素的最大高度约束。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-818">Gets or sets the maximum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-819">元素的最大高度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-819">The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-820">默认值为 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-820">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="9f5ed-821">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-821">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-822"><see cref="F:System.Double.PositiveInfinity" /> 也是有效的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-822"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-823">这是三个属性之一上<xref:System.Windows.FrameworkElement>指定高度信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-823">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9f5ed-824">其他两个<xref:System.Windows.FrameworkElement.MinHeight%2A>和<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-824">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  <span data-ttu-id="9f5ed-825">如果这些值之间存在冲突，确定高度的实际应用程序的顺序是： 首先<xref:System.Windows.FrameworkElement.MinHeight%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后每个都在限制之内，如果<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-825">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-826">值限制<xref:System.Double>值强制实施<xref:System.Windows.ValidateValueCallback>机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-826">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9f5ed-827">如果您尝试设置无效的值是引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-827">If you attempt to set an invalid value a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-828">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-828">XAML Attribute Usage</span></span>  
  
```  
<object MaxHeight="double"/>  
- or -  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-829">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-829">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-830">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-830">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-831">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-831">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-832">这被解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-832">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-833">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-833">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-834">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-834">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-835">相同<xref:System.Double>属性值部分中提到的范围限制适用，只不过必须使用[X:static 标记扩展](~/docs/framework/xaml-services/x-static-markup-extension.md)您是否需要显式设置此值为<xref:System.Double.PositiveInfinity>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-835">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9f5ed-836">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-836">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-837">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-837">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-838">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-838">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-839">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-839">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-840">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-840">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-841">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-841">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-842">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-842">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-843">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-843">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|<span data-ttu-id="9f5ed-844">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-844">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-845">标识 <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-845">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-846">获取或设置元素的最大宽度约束。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-846">Gets or sets the maximum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-847">元素的最大宽度，单位是 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-847">The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-848">默认值为 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-848">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="9f5ed-849">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-849">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-850"><see cref="F:System.Double.PositiveInfinity" /> 也是有效的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-850"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-851">这是三个属性之一上<xref:System.Windows.FrameworkElement>指定宽度的信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-851">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span> <span data-ttu-id="9f5ed-852">其他两个<xref:System.Windows.FrameworkElement.MinWidth%2A>和<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-852">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>.</span></span> <span data-ttu-id="9f5ed-853">如果这些值之间存在冲突，应用程序实际宽度确定的顺序是： 首先<xref:System.Windows.FrameworkElement.MinWidth%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后每个都在限制之内，如果<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-853">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-854">值限制<xref:System.Double>值强制实施<xref:System.Windows.ValidateValueCallback>机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-854">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9f5ed-855">如果您尝试设置一个无效值，则会运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-855">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-856">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-856">XAML Attribute Usage</span></span>  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-857">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-857">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-858">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-858">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-859">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-859">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-860">这被解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-860">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-861">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-861">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-862">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-862">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-863">相同<xref:System.Double>属性值部分中提到的范围限制适用，只不过必须使用[X:static 标记扩展](~/docs/framework/xaml-services/x-static-markup-extension.md)若要设置此值为<xref:System.Double.PositiveInfinity>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-863">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) to set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9f5ed-864">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-864">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-865">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-865">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-866">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-866">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-867">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-867">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-868">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-868">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-869">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-869">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-870">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-870">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-871">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-871">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|<span data-ttu-id="9f5ed-872">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-872">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-873">标识 <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-873">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="9f5ed-874">父元素可以赋予子元素的可用大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-874">The available size that the parent element can give to the child elements.</span></span></param>
        <summary><span data-ttu-id="9f5ed-875">实现 <see cref="T:System.Windows.FrameworkElement" /> 的基本度量传递布局系统行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-875">Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-876">此元素在布局中的所需大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-876">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-877">此方法重写<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>连接的 WPF 核心级别和 WPF 框架级别的布局度量值实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-877">This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> to connect the  WPF core-level and WPF framework-level layout measure implementations.</span></span> <span data-ttu-id="9f5ed-878"><xref:System.Windows.FrameworkElement>实现将密封方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-878">The <xref:System.Windows.FrameworkElement> implementation seals the method.</span></span> <span data-ttu-id="9f5ed-879">若要调整基于 WPF 框架级别的任何元素的度量传递布局行为，请重写<xref:System.Windows.FrameworkElement.MeasureOverride%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-879">To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead.</span></span> <span data-ttu-id="9f5ed-880">若要调整的测量处理过程有意不会在 WPF 框架级别上生成或使用的元素的布局行为<xref:System.Windows.FrameworkElement>，重写<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-880">To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="9f5ed-881">此元素可提供给子元素的可用大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-881">The available size that this element can give to child elements.</span></span> <span data-ttu-id="9f5ed-882">可指定无穷大作为一个值，该值指示元素将调整到适应内容的大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-882">Infinity can be specified as a value to indicate that the element will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="9f5ed-883">在派生类中重写时，测量子元素在布局中所需的大小，并确定由 <see cref="T:System.Windows.FrameworkElement" /> 派生的类的大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-883">When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-884">此元素基于其对子元素大小的计算确定它在布局期间所需要的大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-884">The size that this element determines it needs during layout, based on its calculations of child element sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-885">重写<xref:System.Windows.FrameworkElement.MeasureOverride%2A>来实现您的元素的自定义布局大小调整行为，如它参与了[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]布局系统。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-885">Override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] layout system.</span></span> <span data-ttu-id="9f5ed-886">您的实现应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-886">Your implementation should do the following:</span></span>  
  
1.  <span data-ttu-id="9f5ed-887">循环访问元素的特定集合的一部分的格式，请调用子级数<xref:System.Windows.UIElement.Measure%2A>每个子元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-887">Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
2.  <span data-ttu-id="9f5ed-888">立即获取<xref:System.Windows.UIElement.DesiredSize%2A>对子 (这设置为一个属性后<xref:System.Windows.UIElement.Measure%2A>称为)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-888">Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).</span></span>  
  
3.  <span data-ttu-id="9f5ed-889">计算所需的子元素的测量值，基于父项的净大小。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-889">Compute the net desired size of the parent based upon the measurement of the child elements.</span></span>  
  
 <span data-ttu-id="9f5ed-890">返回值<xref:System.Windows.FrameworkElement.MeasureOverride%2A>应为元素自己的所需的大小，然后将成为当前元素的父元素的输入的度量值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-890">The return value of <xref:System.Windows.FrameworkElement.MeasureOverride%2A> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</span></span> <span data-ttu-id="9f5ed-891">这一过程将继续通过布局系统，直到达到的页的根元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-891">This same process continues through the layout system until the root element of the page is reached.</span></span>  
  
 <span data-ttu-id="9f5ed-892">在此过程中，子元素可能会返回一个较大<xref:System.Windows.UIElement.DesiredSize%2A>大小大于初始`availableSize`来指示子元素，需要更多的空间。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-892">During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space.</span></span> <span data-ttu-id="9f5ed-893">通过引入可滚动区域，通过调整父控件，通过建立某种方式的堆叠顺序或任意数量的解决方案来测量或排列内容的大小，可能会在您自己的实现中处理这。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-893">This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9f5ed-894">元素应调用<xref:System.Windows.UIElement.Measure%2A>在每个在此过程中的子活动，否则为子元素将不会正确调整大小或排列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-894">Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-895">非编译的以下代码显示了此实现模式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-895">The following non-compiling code shows this implementation pattern.</span></span>  <span data-ttu-id="9f5ed-896"><c>VisualChildren</c>表示应定义您自己的元素的子级的可枚举集合属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-896"><c>VisualChildren</c> represents an enumerable collection property of children that your own element should define.</span></span> <span data-ttu-id="9f5ed-897">该属性可以命名任何内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-897">The property can be named anything.</span></span> <span data-ttu-id="9f5ed-898"><c>VisualChildren</c>是此示例中的占位符名称<c>VisualChildren</c>不是[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]提供的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]或命名模式的一部分。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-898"><c>VisualChildren</c> is a placeholder name for purposes of this example, <c>VisualChildren</c> is not an [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] as provided by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] or a part of a naming pattern.</span></span> 
  
<span data-ttu-id="9f5ed-899">[!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-899">[!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-900">获取或设置元素的最小高度约束。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-900">Gets or sets the minimum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-901">在 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 中，元素的最小高度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-901">The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-902">默认值为 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-902">The default value is 0.0.</span></span> <span data-ttu-id="9f5ed-903">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-903">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-904">但是，<see cref="F:System.Double.PositiveInfinity" /> 无效，<see cref="F:System.Double.NaN" /> 也无效。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-904">However, <see cref="F:System.Double.PositiveInfinity" /> is NOT valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-905">这是三个属性之一上<xref:System.Windows.FrameworkElement>指定高度信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-905">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span>  <span data-ttu-id="9f5ed-906">其他两个<xref:System.Windows.FrameworkElement.Height%2A>和<xref:System.Windows.FrameworkElement.MaxHeight%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-906">The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9f5ed-907">如果这些值之间存在冲突，确定高度的实际应用程序的顺序是： 首先<xref:System.Windows.FrameworkElement.MinHeight%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后每个都在限制之内，如果<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-907">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-908">值限制<xref:System.Double>值强制实施<xref:System.Windows.ValidateValueCallback>机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-908">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9f5ed-909">如果您尝试设置一个无效值，则会运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-909">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-910">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-910">XAML Attribute Usage</span></span>  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-911">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-911">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-912">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-912">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-913">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-913">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-914">这被解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-914">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-915">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-915">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-916">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-916">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-917">相同<xref:System.Double>属性值部分中提到的范围限制适用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-917">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9f5ed-918">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-918">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-919">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-919">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-920">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-920">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-921">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-921">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-922">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-922">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-923">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-923">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-924">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-924">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-925">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-925">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|<span data-ttu-id="9f5ed-926">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-926">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-927">标识 <see cref="P:System.Windows.FrameworkElement.MinHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-927">Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-928">获取或设置元素的最小宽度约束。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-928">Gets or sets the minimum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-929">元素的最小宽度，单位是 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-929">The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-930">默认值为 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-930">The default value is 0.0.</span></span> <span data-ttu-id="9f5ed-931">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-931">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-932">但是，<see cref="F:System.Double.PositiveInfinity" /> 无效，<see cref="F:System.Double.NaN" /> 也无效。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-932">However, <see cref="F:System.Double.PositiveInfinity" /> is not valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-933">这是三个属性之一上<xref:System.Windows.FrameworkElement>指定宽度的信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-933">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9f5ed-934">其他两个<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-934">The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9f5ed-935">如果这些值之间存在冲突，应用程序实际宽度确定的顺序是： 首先<xref:System.Windows.FrameworkElement.MinWidth%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后每个都在限制之内，如果<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-935">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-936">值限制<xref:System.Double>值强制实施<xref:System.Windows.ValidateValueCallback>机制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-936">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9f5ed-937">如果您尝试设置一个无效值，则会运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-937">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-938">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-938">XAML Attribute Usage</span></span>  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-939">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-939">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-940">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-940">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-941">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-941">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-942">这被解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-942">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-943">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-943">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-944">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-944">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-945">相同<xref:System.Double>属性值部分中提到的范围限制适用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-945">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9f5ed-946">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-946">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-947">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-947">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-948">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-948">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-949">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-949">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-950">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-950">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-951">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-951">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-952">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-952">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-953">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-953">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|<span data-ttu-id="9f5ed-954">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-954">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-955">标识 <see cref="P:System.Windows.FrameworkElement.MinWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-955">Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="9f5ed-956">焦点要移动的方向，作为一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-956">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="9f5ed-957">以提供的遍历方向将键盘焦点从此元素移到其他元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-957">Moves the keyboard focus away from this element and to another element in a provided traversal direction.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-958">如果焦点移动成功，则返回 <see langword="true" />；如果指定方向上不存在目标元素，或者未能将键盘焦点移到目标元素上，则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-958">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-959">此实现将重写<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType>并密封方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-959">This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> and seals the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-960">下面的示例实现的处理程序处理多个可能的按钮输入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-960">The following example implements a handler that handles several possible button inputs.</span></span> <span data-ttu-id="9f5ed-961">每个按钮都表示一个可能<xref:System.Windows.Input.FocusNavigationDirection>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-961">Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9f5ed-962">处理程序将跟踪与当前的键盘焦点，并调用元素<xref:System.Windows.FrameworkElement.MoveFocus%2A>在该元素，通过指定相应<xref:System.Windows.Input.FocusNavigationDirection>初始化为<xref:System.Windows.Input.TraversalRequest>类型提供的参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-962">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.MoveFocus%2A> on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span>  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-963">获取或设置元素的标识名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-963">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="9f5ed-964">该名称提供引用，以便代码隐藏（如事件处理程序代码）可以引用标记元素（在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器的处理过程中构造该元素之后）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-964">The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</span></span></summary>
        <value><span data-ttu-id="9f5ed-965">元素的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-965">The name of the element.</span></span> <span data-ttu-id="9f5ed-966">默认值为一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-966">The default is an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-967">此属性的最常见用法是指定[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]作为标记中的属性的元素名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-967">The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.</span></span>  
  
 <span data-ttu-id="9f5ed-968">此属性实质上是提供一个 WPF 框架级便捷属性来设置[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-968">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="9f5ed-969">名称必须是唯一名称范围内。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-969">Names must be unique within a namescope.</span></span> <span data-ttu-id="9f5ed-970">有关详细信息，请参阅[WPF XAML 名称范围](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-970">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9f5ed-971">获取<xref:System.Windows.FrameworkElement.Name%2A>如果要创建中的元素的代码并不常用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-971">Getting a <xref:System.Windows.FrameworkElement.Name%2A> if you are creating elements in code is not common.</span></span> <span data-ttu-id="9f5ed-972">如果已在代码中具有适当的引用，只需调用方法和属性在元素上的引用通常并不需要<xref:System.Windows.FrameworkElement.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-972">If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <xref:System.Windows.FrameworkElement.Name%2A>.</span></span> <span data-ttu-id="9f5ed-973">与此例外情况是如果<xref:System.Windows.FrameworkElement.Name%2A>字符串具有某些重载的含义，例如用于中显示该名称是否[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-973">An exception to this is if the <xref:System.Windows.FrameworkElement.Name%2A> string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="9f5ed-974">设置<xref:System.Windows.FrameworkElement.Name%2A>从代码隐藏如果原始<xref:System.Windows.FrameworkElement.Name%2A>从标记中设置也不建议，并将属性更改后加载[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]不会更改原始对象引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-974">Setting a <xref:System.Windows.FrameworkElement.Name%2A> from code-behind if the original <xref:System.Windows.FrameworkElement.Name%2A> was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will not change the original object reference.</span></span> <span data-ttu-id="9f5ed-975">仅当在分析过程中显式创建基础名称范围时，会创建对象引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-975">The object references are created only when the underlying namescopes are explicitly created during parsing.</span></span> <span data-ttu-id="9f5ed-976">具体而言，必须调用<xref:System.Windows.FrameworkElement.RegisterName%2A>以进行有效的更改到<xref:System.Windows.FrameworkElement.Name%2A>已加载元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-976">You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the <xref:System.Windows.FrameworkElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="9f5ed-977">一个值得一提设置情况<xref:System.Windows.FrameworkElement.Name%2A>从代码很重要时，可以注册名称的元素的演示图板将运行，以便它们可以在运行时引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-977">One notable case where setting <xref:System.Windows.FrameworkElement.Name%2A> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</span></span> <span data-ttu-id="9f5ed-978">可以注册名称之前，可能还需要实例化并分配<xref:System.Windows.NameScope>实例。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-978">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="9f5ed-979">请参阅示例部分中，或[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-979">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="9f5ed-980">设置<xref:System.Windows.FrameworkElement.Name%2A>代码中具有有限的应用程序，但获取元素的<xref:System.Windows.FrameworkElement.Name%2A>更为常见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-980">Setting <xref:System.Windows.FrameworkElement.Name%2A> from code has limited applications, but getting an element by <xref:System.Windows.FrameworkElement.Name%2A> is more common.</span></span> <span data-ttu-id="9f5ed-981">一个特殊的情况是如果你的应用程序支持其中页面重新加载到应用程序，而且运行的时代码不一定是代码隐藏定义该页面的导航模型。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-981">One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</span></span> <span data-ttu-id="9f5ed-982">实用程序方法<xref:System.Windows.FrameworkElement.FindName%2A>，这是可从任何<xref:System.Windows.FrameworkElement>，可以找到的任何元素<xref:System.Windows.FrameworkElement.Name%2A>在该元素的逻辑树中，搜索树以递归方式将根据需要。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-982">The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by <xref:System.Windows.FrameworkElement.Name%2A> in the logical tree for that element, searching the tree recursively as necessary.</span></span> <span data-ttu-id="9f5ed-983">也可以使用<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>的静态方法<xref:System.Windows.LogicalTreeHelper>，其还会<xref:System.Windows.FrameworkElement.Name%2A>字符串作为参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-983">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a <xref:System.Windows.FrameworkElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="9f5ed-984">通常使用的根元素 (<xref:System.Windows.Window>，<xref:System.Windows.Controls.Page>例如) 实现该接口<xref:System.Windows.Markup.INameScope>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-984">Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9f5ed-985">此接口的实现需要强制实施的名称会明确其作用域内。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-985">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span> <span data-ttu-id="9f5ed-986">定义此接口的根元素还定义名称范围行为边界的所有相关[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-986">The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span></span>  
  
 <span data-ttu-id="9f5ed-987"><xref:System.Windows.FrameworkElement.Name%2A>属性也可作为其他进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-987">The <xref:System.Windows.FrameworkElement.Name%2A> property also serves as an identifier for other processes.</span></span> <span data-ttu-id="9f5ed-988">例如，[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]自动化模型将使用<xref:System.Windows.FrameworkElement.Name%2A>作为客户端和提供程序的 AutomationId。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-988">For instance, the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] automation model will use <xref:System.Windows.FrameworkElement.Name%2A> as the AutomationId for clients and providers.</span></span>  
  
 <span data-ttu-id="9f5ed-989">所使用的字符串值<xref:System.Windows.FrameworkElement.Name%2A>具有一些限制，如下所规定的基础[X:name 指令](~/docs/framework/xaml-services/x-name-directive.md)定义的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]规范。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-989">The string values used for <xref:System.Windows.FrameworkElement.Name%2A> have some restrictions, as imposed by the underlying [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specification.</span></span> <span data-ttu-id="9f5ed-990">最值得注意的是，<xref:System.Windows.FrameworkElement.Name%2A>必须以字母或下划线字符 (_) 开头，并且必须包含字母、 数字或下划线。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-990">Most notably, a <xref:System.Windows.FrameworkElement.Name%2A> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</span></span> <span data-ttu-id="9f5ed-991">有关详细信息，请参阅[WPF XAML 名称范围](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-991">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9f5ed-992"><xref:System.Windows.FrameworkElement.Name%2A> 是一个不能进行动画处理的很少依赖项属性 (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>是`true`元数据中)，因为名称本身是所必需的定位动画。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-992"><xref:System.Windows.FrameworkElement.Name%2A> is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation.</span></span> <span data-ttu-id="9f5ed-993">数据绑定<xref:System.Windows.FrameworkElement.Name%2A>是从技术上讲是可行的但是极少见的方案，因为数据绑定<xref:System.Windows.FrameworkElement.Name%2A>不能提供的属性的主要用途： 若要隐藏代码提供的标识符连接点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-993">Data binding a <xref:System.Windows.FrameworkElement.Name%2A> is technically possible, but is an extremely uncommon scenario because a data-bound <xref:System.Windows.FrameworkElement.Name%2A> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-994">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-994">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-995">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-995">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.NameProperty>|  
|<span data-ttu-id="9f5ed-996">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-996">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-997">下面的示例设置<xref:System.Windows.FrameworkElement.Name%2A>在代码中，属性，然后注册到新创建的名称<xref:System.Windows.NameScope>通过调用<xref:System.Windows.FrameworkElement.RegisterName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-997">The following example sets the <xref:System.Windows.FrameworkElement.Name%2A> property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>.</span></span> <span data-ttu-id="9f5ed-998">如下图所示的方法是必需的进行动画处理与情节提要，情节提要需要按确定由于<xref:System.Windows.FrameworkElement.Name%2A>，并且不能为目标的对象引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-998">The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <xref:System.Windows.FrameworkElement.Name%2A>, and cannot be targeted by object reference.</span></span>  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-999">标识 <see cref="P:System.Windows.FrameworkElement.Name" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-999">Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-1000">在派生类中重写时，每当应用程序代码或内部进程调用 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />，都将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1000">When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1001">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1001">This method has no default implementation.</span></span>  
  
 <span data-ttu-id="9f5ed-1002">模板是来自的 Template 属性的元素的已完成可视化树的一部分<xref:System.Windows.Style>元素应用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1002">Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element.</span></span> <span data-ttu-id="9f5ed-1003">有关详细信息，请参阅[样式设置和模板化](~/docs/framework/wpf/controls/styling-and-templating.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1003">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1004">派生类的<see cref="T:System.Windows.FrameworkElement" />可以使用此方法作为通知的各种可能方案：</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1004">Derived classes of <see cref="T:System.Windows.FrameworkElement" /> can use this method as a notification for a variety of possible scenarios:</span></span> 
<span data-ttu-id="9f5ed-1005">-你可以调用您自己的代码生成元素可视化树的其余部分的实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1005">-   You can call your own implementation of code that builds the remainder of an element visual tree.</span></span>  
  
<span data-ttu-id="9f5ed-1006">-你可以运行依赖于例如获取对来自模板的命名元素的引用，已应用的模板中的可视化树的代码。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1006">-   You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</span></span>  
  
<span data-ttu-id="9f5ed-1007">-你可以引入仅存在意义模板中的可视化树完成后的服务。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1007">-   You can introduce services that only make sense to exist after the visual tree from templates is complete.</span></span>  
  
<span data-ttu-id="9f5ed-1008">-你可以设置的状态和依赖于其他因素在模板中的元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1008">-   You can set states and properties of elements within the template that are dependent on other factors.</span></span> <span data-ttu-id="9f5ed-1009">例如，属性值可能仅可检测到通过了解父元素，或当特定派生类使用一个通用的模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1009">For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</span></span>  
  
<span data-ttu-id="9f5ed-1010">实施者应始终调用前其自己的实现的基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1010">Implementers should always call the base implementation before their own implementation.</span></span> <span data-ttu-id="9f5ed-1011"><see cref="T:System.Windows.FrameworkElement" /> 本身不具有默认实现，但插入类可能。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1011"><see cref="T:System.Windows.FrameworkElement" /> itself has no default implementation, but intervening classes might.</span></span>  
  
 <span data-ttu-id="9f5ed-1012"><see cref="T:System.Windows.Controls.Control" /> 提供了类似的重写<see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1012"><see cref="T:System.Windows.Controls.Control" /> offers a similar override, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1013">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1013">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1014">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1014">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9f5ed-1015">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1015">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1016">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1016">This method has no default implementation.</span></span> <span data-ttu-id="9f5ed-1017">继承中的中间类已经实现了此方法的情况下，仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1017">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9f5ed-1018">此方法的目的是某种程度上类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 它提供了方法来处理从派生类的类处理程序而不是实例处理程序匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1018">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9f5ed-1019">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1019">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9f5ed-1020">On \* 方法的实现模式是不同的路由事件，因为路由的事件可能由子元素，不一定是将调用处理程序，因此您的实现将需要使事件参数的源的元素引发将属性转换为帐户 （和不应尝试重新引发该事件在大多数情况下）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1020">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9f5ed-1021">子类<xref:System.Windows.FrameworkElement>无法选择路由收到事件时调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1021">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9f5ed-1022">一个可能的方案是采用的事件自变量并谨慎地将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1022">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1023">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1023">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1024">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1024">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9f5ed-1025">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1025">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1026">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1026">This method has no default implementation.</span></span> <span data-ttu-id="9f5ed-1027">继承中的中间类已经实现了此方法的情况下，仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1027">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9f5ed-1028">此方法的目的是某种程度上类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 它提供了方法来处理从派生类的类处理程序而不是实例处理程序匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1028">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9f5ed-1029">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1029">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9f5ed-1030">On \* 方法的实现模式是不同的路由事件，因为路由的事件可能由子元素，不一定是将调用处理程序，因此您的实现将需要使事件参数的源的元素引发将属性转换为帐户 （和不应尝试重新引发该事件在大多数情况下）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1030">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9f5ed-1031">子类<xref:System.Windows.FrameworkElement>无法选择路由收到事件时调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1031">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9f5ed-1032">一个可能的方案是采用的事件自变量并谨慎地将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1032">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1033">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1033">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1034">每当未处理的 <see cref="E:System.Windows.UIElement.GotFocus" /> 事件在其路由中到达此元素时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1034">Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1035">与一些其他不同 \* 由基元素公开的方法<xref:System.Windows.FrameworkElement.OnGotFocus%2A>具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1035">Unlike some other On\* methods exposed by the base elements, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> does have a default implementation.</span></span> <span data-ttu-id="9f5ed-1036">具体而言，它具有将基元素的下一级别中的空实现，重写实现<xref:System.Windows.UIElement.OnGotFocus%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1036">Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>.</span></span> <span data-ttu-id="9f5ed-1037">调用时，<xref:System.Windows.FrameworkElement.OnGotFocus%2A>在事件从由于键盘焦点的当前元素的位置的情况下此元素上设置相应的焦点行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1037">When invoked, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</span></span> <span data-ttu-id="9f5ed-1038"><xref:System.Windows.FrameworkElement.OnGotFocus%2A>处理程序不会将标记为已处理，即使焦点设置到当前元素的事件参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1038">The <xref:System.Windows.FrameworkElement.OnGotFocus%2A> handler does not mark the event arguments as handled, even when focus is set to the current element.</span></span> <span data-ttu-id="9f5ed-1039">如果事件的源树 （不是当前元素） 中的另一个元素，该处理程序没有任何影响。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1039">If the event's source was another element in the tree (not the current element), the handler does nothing.</span></span>  
  
 <span data-ttu-id="9f5ed-1040">可以重写此方法，以便更改在元素上的默认焦点行为，但请注意，更改焦点行为在这种方式可能更好地完成通过不允许要在所有可获得焦点的元素 (请参阅<xref:System.Windows.UIElement.Focusable%2A>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1040">You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1041">如果你想要标记为已处理参数中，您应注意的事件处理在元素树中其他父元素中的后果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1041">If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</span></span> <span data-ttu-id="9f5ed-1042">由于此处理程序使用冒泡路由事件，因此将焦点设置为当前<paramref name="sender" />每个事件自变量可能不太合适。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1042">Because this handler acts on an event with a bubbling routing, setting the focus to the current <paramref name="sender" /> per the event arguments may not be appropriate.</span></span> <span data-ttu-id="9f5ed-1043">焦点可能需要转到复合的子元素或父元素，具体取决于特定控件的组合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1043">Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</span></span> <span data-ttu-id="9f5ed-1044">如果该事件路由通过可视化树的整个属于您编写的控件的组合的情况下，仅建议因此将焦点事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1044">Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1045">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1045">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1046">引发 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1046">Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</span></span> <span data-ttu-id="9f5ed-1047">每当在内部将 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 设置为 <see langword="true" /> 时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1047">This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1048">在此特定 \* 方法不是类处理程序挂钩。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1048">This particular On\* method is not a class handler hook.</span></span> <span data-ttu-id="9f5ed-1049">也不会它完全遵循以下的既定[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上 \* 方法约定匹配的事件，可以禁用通过重写此方法并不调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1049">Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</span></span>  
  
 <span data-ttu-id="9f5ed-1050">请注意，<xref:System.Windows.FrameworkElement.IsInitialized%2A>属性是只读的因此不能设置<xref:System.Windows.FrameworkElement.IsInitialized%2A>强制初始化行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1050">Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior.</span></span> <span data-ttu-id="9f5ed-1051">初始化状态设置旨在只能由[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]框架。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1051">Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1052">此虚方法的默认实现将引发上述事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1052">The default implementation of this virtual method raises the event as described above.</span></span> <span data-ttu-id="9f5ed-1053">重写应调用基实现来保留此行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1053">Overrides should call the base implementation to preserve this behavior.</span></span> <span data-ttu-id="9f5ed-1054">如果您不能调用基实现，不只您不会引发<see cref="E:System.Windows.FrameworkElement.Initialized" />事件，如通常预期的那样<see cref="T:System.Windows.FrameworkElement" />派生的类，但也将禁止显示两个重要样式和主题样式的初始化操作实现此基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1054">If you fail to call the base implementation, not only will you not raise the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event as is generally expected of a <see cref="T:System.Windows.FrameworkElement" /> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1055">描述已更改的属性的事件数据（包括旧值和新值）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1055">The event data that describes the property that changed, as well as old and new values.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1056">每当更新此 <see cref="T:System.Windows.FrameworkElement" /> 的任何依赖属性的有效值时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1056">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated.</span></span> <span data-ttu-id="9f5ed-1057">将在实参形参中报告已更改的特定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1057">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="9f5ed-1058">重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1058">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1059">此方法不应以通常将检测到属性更改或失效。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1059">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="9f5ed-1060">它改为适用于修改常规失效模式如果特定的信息了解了宽分类的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1060">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="9f5ed-1061">调用此方法可能很多时候一个对象的生命周期内。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1061">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="9f5ed-1062">因此，可以实现更好的性能，如果重写特定属性的元数据，然后将附加<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>各个属性的函数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1062">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="9f5ed-1063">但是，应使用此方法，如果<xref:System.Windows.FrameworkElement>包括大量的值相关的依赖项属性，或如果它包含逻辑，例如呈现行为，必须重新运行多个相关的属性失效的情况。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1063">However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="9f5ed-1064">请注意，没有具有相同名称`OnPropertyChanged`具有不同签名的方法 (参数类型是<xref:System.ComponentModel.PropertyChangedEventArgs>)，可能出现在多个类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1064">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="9f5ed-1065">是否`OnPropertyChanged`用于数据对象通知，并且是为协定的一部分<xref:System.ComponentModel.INotifyPropertyChanged>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1065">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1066">始终调用基实现中，您的实现中的第一个操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1066">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="9f5ed-1067">如果不这样做将大大禁用整个[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统，这会导致不正确的值报告。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1067">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span></span> <span data-ttu-id="9f5ed-1068">特定于<see cref="T:System.Windows.FrameworkElement" />实现也是负责维护的各种影响可视用户界面的属性的正确状态。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1068">The specific <see cref="T:System.Windows.FrameworkElement" /> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</span></span> <span data-ttu-id="9f5ed-1069">其中包括验证基于在适当的样式的更改可视化树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1069">These include invalidating the visual tree based on changes to style at appropriate times.</span></span></para></block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="9f5ed-1070">更改中所涉及新旧大小的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1070">Details of the old and new size involved in the change.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1071">引发 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 事件，将指定的信息用作最终事件数据的一部分。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1071">Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1072">此方法重写 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1072">This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</span></span> <span data-ttu-id="9f5ed-1073">如果调用此方法将重置<xref:System.Windows.FrameworkElement.ActualWidth%2A>属性，<xref:System.Windows.FrameworkElement.ActualHeight%2A>中提供的参数，更改属性，或两者，具体取决于为指定的内容，并且将始终引发此事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1073">If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1074">不重写此方法对于典型布局方案。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1074">Do not override this method for typical layout scenarios.</span></span> <span data-ttu-id="9f5ed-1075">布局系统的操作特意异步的方式，以确保所有可能的布局排列和度量值的情况下都考虑在内。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1075">The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</span></span> <span data-ttu-id="9f5ed-1076">布局系统重写方法<see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />和<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />通常足以满足任何必需的布局自定义项。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1076">The layout system override methods <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> are usually sufficient for any required layout customization.</span></span> <span data-ttu-id="9f5ed-1077"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 公开为虚拟机。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1077"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> is exposed as a virtual.</span></span> <span data-ttu-id="9f5ed-1078">您可以重写<see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />来更正为异常用例的运行时行为改变与相关的输入事件与控件结合使用以响应重新组合可能会提供不准确的布局信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1078">You can override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</span></span>  
  
<span data-ttu-id="9f5ed-1079">你仍然可以重写此方法在派生类 （它是受保护但未密封） 中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1079">You may still override this method in derived classes (it is protected but not sealed).</span></span> <span data-ttu-id="9f5ed-1080">始终调用基实现以保留前面所述的行为，除非有特定原因需要禁用默认的 WPF 框架级别呈现行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1080">Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</span></span> <span data-ttu-id="9f5ed-1081">无法引发<see cref="E:System.Windows.FrameworkElement.SizeChanged" />事件将导致非标准的布局行为，如果使用标准的 WPF 框架级别的布局系统实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1081">Failing to raise the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="9f5ed-1082">旧样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1082">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="9f5ed-1083">新样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1083">The new style.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1084">当此元素上使用的样式更改时（将使布局失效）调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1084">Invoked when the style in use on this element changes, which will invalidate the layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1085">此方法具有一个默认实现，设置说明样式更改条件的内部标志。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1085">This method has a default implementation that sets an internal flag that notes the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1086">通常不必重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1086">You should not typically have to override this method.</span></span> <span data-ttu-id="9f5ed-1087">任何涉及到度量值的样式或排列过程更改都会触发另一个呈现循环，假定的典型实现<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />，或默认值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1087">Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, or the defaults.</span></span> <span data-ttu-id="9f5ed-1088">重写<see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />可能适用如果您<see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />实现特意优化或支持部分更新，但仍想要更直接地将更改应用于样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1088">Overrides of <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> might be appropriate if your <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</span></span> <span data-ttu-id="9f5ed-1089">(部分更新将尝试避免对多个增量调用<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />和<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />上的任何子元素)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1089">(The partial updates would be an attempt to avoid multiple incremental calls to <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> and <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on any child elements).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1090">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1090">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1091">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1091">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9f5ed-1092">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1092">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1093">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1093">This method has no default implementation.</span></span> <span data-ttu-id="9f5ed-1094">继承中的中间类已经实现了此方法的情况下，仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1094">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9f5ed-1095">此方法的目的是某种程度上类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 它提供了方法来处理从派生类的类处理程序而不是实例处理程序匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1095">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9f5ed-1096">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1096">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9f5ed-1097">On \* 方法的实现模式是不同的路由事件，因为路由的事件可能由子元素，不一定是将调用处理程序，因此您的实现将需要使事件参数的源的元素引发将属性转换为帐户 （和不应尝试重新引发该事件在大多数情况下）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1097">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9f5ed-1098">子类<xref:System.Windows.FrameworkElement>无法选择路由收到事件时调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1098">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9f5ed-1099">一个可能的方案是采用的事件自变量并谨慎地将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1099">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9f5ed-1100">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1100">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1101">每当 <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1101">Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9f5ed-1102">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1102">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1103">此方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1103">This method has no default implementation.</span></span> <span data-ttu-id="9f5ed-1104">继承中的中间类已经实现了此方法的情况下，仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1104">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9f5ed-1105">此方法的目的是某种程度上类似于[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件模式 On \* 方法： 它提供了方法来处理从派生类的类处理程序而不是实例处理程序匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1105">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9f5ed-1106">在这种情况下匹配事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1106">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9f5ed-1107">On \* 方法的实现模式是不同的路由事件，因为路由的事件可能由子元素，不一定是将调用处理程序，因此您的实现将需要使事件参数的源的元素引发将属性转换为帐户 （和不应尝试重新引发该事件在大多数情况下）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1107">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9f5ed-1108">子类<xref:System.Windows.FrameworkElement>无法选择路由收到事件时调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1108">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9f5ed-1109">一个可能的方案是采用的事件自变量并谨慎地将事件标记为已处理来缩短路由。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1109">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="9f5ed-1110">旧的父元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1110">The old parent element.</span></span> <span data-ttu-id="9f5ed-1111">可能是 <see langword="null" />，指示元素之前没有可视父级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1111">May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1112">当此元素父级在可视化树中发生更改时进行了调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1112">Invoked when the parent of this element in the visual tree is changed.</span></span> <span data-ttu-id="9f5ed-1113">重写 <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1113">Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1114">可视化树与从逻辑树可能不同，因为它会省略 （如集合），您可以看到，未呈现的元素，并且展开一些元素根据其主题和样式的组合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1114">The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</span></span> <span data-ttu-id="9f5ed-1115">有关详细信息，请参见 [WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1116">此虚方法的默认实现的新父级中查询、 引发各种初始化事件，并将内部标志设置有关初始化状态的<see cref="T:System.Windows.FrameworkElement" />根据需要。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1116">The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <see cref="T:System.Windows.FrameworkElement" /> as appropriate.</span></span> <span data-ttu-id="9f5ed-1117">最后，它将调用所声明的连续的基实现<see cref="T:System.Windows.UIElement" />，这反过来调用其基类<see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1117">Finally, it calls the successive base implementations as declared by <see cref="T:System.Windows.UIElement" />, which in turn calls its base in <see cref="T:System.Windows.Media.Visual" />.</span></span> <span data-ttu-id="9f5ed-1118">始终调用基实现来保留此行为，否则此元素时声明为另一个元素的子元素的元素树行为可能不按预期方式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1118">Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</span></span>  
  
<span data-ttu-id="9f5ed-1119">了几个现有[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]类重写此方法，例如： <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />， <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1119">A few existing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes override this method, for example: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="9f5ed-1120">最常见的方案是强制执行新的父项必须是特定类型。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1120">The most common scenario is to enforce that the new parent must be a particular type.</span></span> <span data-ttu-id="9f5ed-1121">这样做可能会引发异常，如果新的父项无法通过某种方式类型测试。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1121">This might involve throwing an exception if the new parent failed some manner of type test.</span></span> <span data-ttu-id="9f5ed-1122">此方案中的专用的版本的列表项和菜单项，这没有意义任何外部父 visual 拥有正确的集合来存储它们在实现中存在。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1122">A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</span></span> <span data-ttu-id="9f5ed-1123">请注意，这种情况下不一定是引发异常，因为可能存在依赖于重新设置父级即暂时没有其"regular"的父级的元素的设计器方案。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1123">Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</span></span>  
  
<span data-ttu-id="9f5ed-1124">也通常是根元素，如某些元素中被重写此方法<see cref="T:System.Windows.Window" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1124">This method is also overridden in certain elements that are typically the root element, such as  <see cref="T:System.Windows.Window" />.</span></span> <span data-ttu-id="9f5ed-1125">另一种情况是在标记，但这是明显的根元素的元素自动生成已编译的逻辑树中的更高版本的基础结构 (如<see cref="T:System.Windows.Controls.Page" />)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1125">Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <see cref="T:System.Windows.Controls.Page" />).</span></span> <span data-ttu-id="9f5ed-1126"><see cref="T:System.Windows.Window" />和<see cref="T:System.Windows.Controls.Page" />实现特意密封此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1126">The <see cref="T:System.Windows.Window" /> and <see cref="T:System.Windows.Controls.Page" /> implementations deliberately seal the method.</span></span></para></block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1127">获取或设置一个值，该值指示此元素是否并入主题样式中的样式属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1127">Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1128">如果此元素不使用主题样式属性，则为 <see langword="true" />；所有源于样式的属性均来自本地应用程序样式，不会应用主题样式属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1128"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="9f5ed-1129">如果首先应用了应用程序样式，然后将主题样式应用于未在应用程序样式中专门设置的属性，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1129"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span> <span data-ttu-id="9f5ed-1130">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1130">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1131">此属性的最常见用法是间接提供主题样式的样式资源库中使用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1131">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9f5ed-1132">如果您设置<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>到`true`上一个控件，则会禁用由主题样式提供的默认控件模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1132">If you set <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> to `true` on a control, you will be suppressing the default control template supplied by the theme styles.</span></span> <span data-ttu-id="9f5ed-1133">该控件模板通常包含内容表示器，并提供基本其他复合元素[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]功能和控件的视觉效果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1133">That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] functionality and visualization for the control.</span></span> <span data-ttu-id="9f5ed-1134">如果你想要继续支持默认主题样式与相同的功能的控件，您必须提供具有相同的结构将复制的控件模板替代样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1134">If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</span></span> <span data-ttu-id="9f5ed-1135">有关详细信息，请参阅[控件创作概述](~/docs/framework/wpf/controls/control-authoring-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1135">For more information, see [Control Authoring Overview](~/docs/framework/wpf/controls/control-authoring-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1136">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1136">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1137">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1137">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="9f5ed-1138">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1138">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1139">标识 <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1139">Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1140">获取此元素的逻辑父元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1140">Gets the logical parent  element of this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1141">此元素的逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1141">This element's logical parent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1142"><xref:System.Windows.FrameworkElement.Parent%2A> 可能是`null`情况下，元素已实例化，但未附加到任何最终将连接到的页级别的根元素或应用程序对象的逻辑树中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1142"><xref:System.Windows.FrameworkElement.Parent%2A> may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</span></span>  
  
 <span data-ttu-id="9f5ed-1143">请注意，具体取决于应用程序的功能，可能发生更改的元素的逻辑父级保留此属性的值将不反映所做的更改。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1143">Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="9f5ed-1144">需要它之前，通常应获取的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1144">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="9f5ed-1145">请参阅[WPF 中的树](~/docs/framework/wpf/advanced/trees-in-wpf.md)逻辑树遍历，有关详细信息和方案使用<xref:System.Windows.FrameworkElement.Parent%2A>发现适合作为父元素的技术。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1145">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about logical tree  traversal, and the scenarios where using  <xref:System.Windows.FrameworkElement.Parent%2A> as a technique of parent element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="9f5ed-1146">属性引擎将后可能重新计算所有属性值的元素父级，因为某些属性继承值到逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1146">The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="9f5ed-1147"><xref:System.Windows.FrameworkElement.DataContext%2A>适用于绑定可以还元素的父级更改。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1147">The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="9f5ed-1148">更改元素的父级通常只能通过集合的操作，通过使用专用添加或删除方法，或通过设置内容属性的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1148">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="9f5ed-1149">使用的最典型情形<xref:System.Windows.FrameworkElement.Parent%2A>属性将获取的引用，然后获取各种<xref:System.Windows.FrameworkElement>从父对象的属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1149">The most typical scenario for using the <xref:System.Windows.FrameworkElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent.</span></span> <span data-ttu-id="9f5ed-1150">对于模板，<xref:System.Windows.FrameworkElement.Parent%2A>模板的最终将`null`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1150">For templates, the <xref:System.Windows.FrameworkElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="9f5ed-1151">若要忽略这一点并扩展到实际应用了模板的逻辑树，请使用<xref:System.Windows.FrameworkElement.TemplatedParent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1151">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-1152">请注意，此属性不会报告用例从逻辑树父的变化位置中的可视化树父级。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1152">Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</span></span> <span data-ttu-id="9f5ed-1153">可视化树父级不是常规应用程序的情况下通常很重要，但可能是某些可视化级别情况所需的父元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1153">Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</span></span> <span data-ttu-id="9f5ed-1154">请参阅 <xref:System.Windows.Media.VisualTreeHelper>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1154">See <xref:System.Windows.Media.VisualTreeHelper>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1155">下面的示例显示了代码检查某个元素的父级，然后使用从父对象的属性值来设置要匹配的子元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1155">The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</span></span> <span data-ttu-id="9f5ed-1156">在这种情况下它们会影响呈现大小的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1156">In this case these are properties that affect the rendering size.</span></span>  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9f5ed-1157">报告更改的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1157">The child element reporting the change.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1158">支持 <see cref="T:System.Windows.FrameworkElement" /> 的专用子类中的增量布局实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1158">Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />.</span></span> <span data-ttu-id="9f5ed-1159">如果子元素包含无效属性，且该属性在元数据中标记为影响布局过程中父元素的测量或排列过程的因素，则调用 <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1159"><see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1160">如果此元素具有子元素的某些属性已失效，并且该属性被标记为<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>或<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>在属性元数据在注册过程中，调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1160">If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked.</span></span> <span data-ttu-id="9f5ed-1161">方法调用将通知父元素的特定子元素必须是重新测量，如果此元素支持的布局部分 （增量） 更新。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1161">The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</span></span>  
  
 <span data-ttu-id="9f5ed-1162">默认情况下<xref:System.Windows.FrameworkElement>不支持增量布局，然后在<xref:System.Windows.FrameworkElement>这类方法具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1162">By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation.</span></span> <span data-ttu-id="9f5ed-1163">将需要重写此方法的方案并不常用，因为它要求您修改默认布局系统行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1163">The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</span></span>  
  
 <span data-ttu-id="9f5ed-1164">示例实现方案可能是一个类包含明显比 WPF 框架级别的布局系统更严格的可能的子元素的类型限制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1164">An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</span></span> <span data-ttu-id="9f5ed-1165">由于这些自定义元素的特性，可能有意延迟属性更改时实现一些自定义布局行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1165">Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</span></span> <span data-ttu-id="9f5ed-1166">例如，/排列度量值的方法重写，以优化的子元素的 try 呈现处理过程，可以延迟某些类型的更改通常会导致另一个布局处理过程。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1166">For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="9f5ed-1167">应确定其预期焦点更改的方向。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1167">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1168">根据提供的焦点移动方向，确定在此元素之后接收焦点的下一个元素，但不实际移动焦点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1168">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1169">如果实际遍历了焦点，则为焦点将要移到的下一个元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1169">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="9f5ed-1170">如果焦点不能按提供的方向相对于此元素移动，则可能返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1170">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1171"><xref:System.Windows.FrameworkElement.MoveFocus%2A> 是实际移动焦点的相关的方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1171"><xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1172">下面的示例实现的处理程序处理多个可能的按钮输入，表示一种可能的每个按钮<xref:System.Windows.Input.FocusNavigationDirection>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1172">The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9f5ed-1173">处理程序将跟踪与当前的键盘焦点，并调用元素<xref:System.Windows.FrameworkElement.PredictFocus%2A>在该元素，并指定相应<xref:System.Windows.Input.FocusNavigationDirection>初始化为<xref:System.Windows.Input.TraversalRequest>类型提供的参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1173">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.PredictFocus%2A> on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span> <span data-ttu-id="9f5ed-1174">而不是移动到该元素作为<xref:System.Windows.FrameworkElement.MoveFocus%2A>一样，该处理程序更改可视化效果用于预测的焦点目标物理尺寸。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1174">Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</span></span>  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="9f5ed-1175">在 <see cref="T:System.Windows.Input.TraversalRequest" /> 中指定了以下方向之一：<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1175">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="9f5ed-1176">对于 <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> 来说，这些方向是非法的（但对于 <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> 来说是合法的）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1176">These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9f5ed-1177">要在指定的名称-对象映射中使用的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1177">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="9f5ed-1178">映射的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1178">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1179">提供一个可简化对 <see cref="T:System.Windows.NameScope" /> 注册方法访问的访问器。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1179">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1180">此方法是调用的便捷方法<xref:System.Windows.NameScope.RegisterName%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1180">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="9f5ed-1181">该实现将检查后续父元素，直到它找到的适用<xref:System.Windows.NameScope>实现，它可以通过查找的元素，实现<xref:System.Windows.Markup.INameScope>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1181">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9f5ed-1182">有关名称范围的详细信息，请参阅[WPF XAML 名称范围](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1182">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="9f5ed-1183">调用<xref:System.Windows.FrameworkElement.RegisterName%2A>为正确挂钩的应用程序时在代码中创建动画演示图板是必需的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1183">Calling <xref:System.Windows.FrameworkElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="9f5ed-1184">这是因为其中一个主要的演示图板属性<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>，使用运行时名称查找而不是要采用对目标元素的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1184">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="9f5ed-1185">即使该元素是通过从代码引用可访问，这是如此。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1185">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="9f5ed-1186">为什么需要注册名称的情节提要目标的详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1186">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9f5ed-1187">要移除的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1187">The element to remove.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1188">从此元素的逻辑树中删除所提供的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1188">Removes the provided object from this element's logical tree.</span></span> <span data-ttu-id="9f5ed-1189"><see cref="T:System.Windows.FrameworkElement" /> 将更新受影响的逻辑树父指针，以便与此删除操作保持同步。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1189"><see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1190">使用此方法的实现的对象的表示逻辑子级的元素的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1190">Use this method for the implementation of collections on objects that represent logical children of an element.</span></span> <span data-ttu-id="9f5ed-1191">这可以在属性 getter 或 setter，类处理程序的`Changed`事件、 构造函数，或在集合中的类型本身。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1191">This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9f5ed-1192">为控件创作者，操作逻辑树在此级别不是建议的做法，除非提供的基控件类的内容模型不适当。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1192">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</span></span> <span data-ttu-id="9f5ed-1193">子类化的级别，请考虑<xref:System.Windows.Controls.ContentControl>， <xref:System.Windows.Controls.ItemsControl>，和<xref:System.Windows.Controls.HeaderedItemsControl>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1193">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9f5ed-1194">这些类提供与特定强制通过专用的逻辑子级的内容模型[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]，以及对其他功能中通常所需的支持[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]如通过模板设置样式的控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1194">These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1195">下面的示例实现`Child`的自定义属性<xref:System.Windows.FrameworkElement>执行其自己的可视化层实现的。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1195">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9f5ed-1196">该属性的设计，以便如果的值发生更改，从逻辑树中，以及特定于类的可视集合中删除旧值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1196">The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9f5ed-1197">将缓存这些值，并随后将新值添加到标准 WPF 框架级别逻辑树和自定义可视化的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1197">The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1198">当在此元素上调用 <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1198">Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1199">此事件表示为父<xref:System.Windows.Controls.ScrollViewer>（或派生类），该元素将引发<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件应为可见的可滚动区域内。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1199">This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event should be made visible within the scrollable region.</span></span> <span data-ttu-id="9f5ed-1200"><xref:System.Windows.Controls.ScrollViewer>然后会将标记<xref:System.Windows.FrameworkElement.RequestBringIntoView>为已处理，通过使用事件的类处理的事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1200">The <xref:System.Windows.Controls.ScrollViewer> will then mark the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event as handled, by using class handling of the event.</span></span> <span data-ttu-id="9f5ed-1201">一般情况下<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件数据应不会标记为已处理通过控制滚动区域，任何类或任何实例处理程序，因为执行此操作将影响与名为的元素的预期目标<xref:System.Windows.FrameworkElement.BringIntoView%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1201">In general <xref:System.Windows.FrameworkElement.RequestBringIntoView> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.</span></span>  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-1202">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1202">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1203">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1203">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|<span data-ttu-id="9f5ed-1204">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1204">Routing strategy</span></span>|<span data-ttu-id="9f5ed-1205">浮升</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1205">Bubbling</span></span>|  
|<span data-ttu-id="9f5ed-1206">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1206">Delegate</span></span>|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1207">标识 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1207">Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1208">获取或设置本地定义的资源字典。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1208">Gets or sets the locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1209">资源中当前本地定义的字典，其中的每个资源均可通过键进行访问。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1209">The current locally-defined dictionary of resources, where each resource can be accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1210">可以完全或部分中定义的资源字典[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]通常创建为属性元素中，并且通常是针对任何单独的页面或应用程序的根元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1210">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="9f5ed-1211">在此级别将资源字典可以更轻松地找到从页面中的各个子元素 （或从任何页上，在应用程序的情况下）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1211">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="9f5ed-1212">在大多数应用程序方案中，我们建议样式定义为使用的资源字典中的对象元素或定义为外部资源中，以便整个样式资源可以是自包含 （此方法有助于单独设计器从开发人员的责任由分隔的物理文件，需要编辑职责）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1212">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="9f5ed-1213">请注意，此属性返回该元素内直接声明仅的资源字典。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1213">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="9f5ed-1214">这是不同于实际资源查找过程，其中的子元素可以访问任何向上递归搜索每个父元素中定义的资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1214">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="9f5ed-1215">资源还可以通过从集合中的代码引用，但请注意在创建资源[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]绝对不可访问，直到<xref:System.Windows.FrameworkElement.Loaded>引起声明该字典的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1215">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="9f5ed-1216">实际上，资源进行分析以异步方式和 not 甚至<xref:System.Windows.FrameworkElement.Loaded>事件是可以引用保障[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]定义资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1216">In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="9f5ed-1217">出于此原因，通常只应访问[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]定义的资源作为的一部分运行时代码，或通过其他[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]技术，如样式或特性值的资源扩展引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1217">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="9f5ed-1218">当通过代码访问资源时，它在实质上是等效于[DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)于从[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1218">When you access resources through code, it is essentially equivalent to a [DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="9f5ed-1219">基础<xref:System.Windows.ResourceDictionary>支持添加、 删除或使用代码查询从集合中的资源所需的方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1219">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code.</span></span> <span data-ttu-id="9f5ed-1220"><xref:System.Windows.FrameworkElement.Resources%2A>属性是可以设置以支持此方案的完全替换的元素是一个新的或不同的资源集合<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1220">The <xref:System.Windows.FrameworkElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="9f5ed-1221">请注意，[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]所示的语法不包含的元素<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1221">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9f5ed-1222">这是隐式集合语法; 的示例表示集合元素的标记，则可以省略。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1222">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="9f5ed-1223">改为指定作为项目添加到集合的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1223">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="9f5ed-1224">有关隐式集合的详细信息和[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，请参阅[XAML 语法详述](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1224">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="9f5ed-1225">一种情况下，<xref:System.Windows.ResourceDictionary>元素是引入合并的字典，这种情况下是否存在通常没有子元素，如仍指定显式<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1225">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9f5ed-1226">有关详细信息，请参阅[合并资源字典](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1226">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-1227">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1227">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-1228">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1228">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-1229">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1229">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="9f5ed-1230">一个或多个对象元素，其中每个定义的资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1230">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="9f5ed-1231">在每个每个资源属性元素<xref:System.Windows.ResourceDictionary>必须具有唯一值[X:key 指令](~/docs/framework/xaml-services/x-key-directive.md)，从检索值时，它可作为唯一键<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1231">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248"><span data-ttu-id="9f5ed-1232">X:key 特性</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1232">x:Key Attribute</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1233">为指定的依赖属性向此元素附加一个绑定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1233">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9f5ed-1234">标识应该建立绑定的目标属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1234">Identifies the destination property where the binding should be established.</span></span></param>
        <param name="path"><span data-ttu-id="9f5ed-1235">源属性名称或用于绑定的属性的路径。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1235">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1236">将提供的源属性名作为数据源的路径限定，从而将绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1236">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1237">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1237">Records the conditions of the binding.</span></span> <span data-ttu-id="9f5ed-1238">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1238">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1239">此方法是调用的便捷方法<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>，其中将当前实例作为传递<xref:System.Windows.DependencyObject>，并创建一个新<xref:System.Windows.Data.Binding>基于所提供`path`参数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1239">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="9f5ed-1240">此签名是更方便，如果您要建立一个简单的默认绑定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1240">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="9f5ed-1241">如果你需要指定任何绑定属性为非默认条件，或者想要使用<xref:System.Windows.Data.MultiBinding>或<xref:System.Windows.Data.PriorityBinding>，则应使用<xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29>签名。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1241">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1242">下面的示例设置使用特定路径的绑定。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1242">The following example sets a binding using a specific path.</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9f5ed-1243">标识应在其中建立绑定的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1243">Identifies the property where the binding should be established.</span></span></param>
        <param name="binding"><span data-ttu-id="9f5ed-1244">表示数据绑定的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1244">Represents the specifics of the data binding.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1245">基于已提供的绑定对象将一个绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1245">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1246">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1246">Records the conditions of the binding.</span></span> <span data-ttu-id="9f5ed-1247">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1247">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1248">此方法是调用的便捷方法<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>，其中将当前实例作为传递<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1248">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="9f5ed-1249">指定流方向的元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1249">The element that specifies a flow direction.</span></span></param>
        <param name="value"><span data-ttu-id="9f5ed-1250">一个枚举值，用于指定方向。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1250">A value of the enumeration, specifying the direction.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1251">设置所提供元素的 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 附加属性的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1251">Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1252">此方法支持的附加的属性语法<xref:System.Windows.FrameworkElement.FlowDirection%2A>属性，从而使子元素的提供<xref:System.Windows.FrameworkElement>来指定在其父元素的排列方式的流动方向。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1252">This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9f5ed-1253">若要将值设置对当前<xref:System.Windows.FrameworkElement>，使用 direct[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]访问器<xref:System.Windows.FrameworkElement.FlowDirection%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1253">To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9f5ed-1254">资源绑定到的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1254">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="9f5ed-1255">资源的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1255">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1256">搜索具有指定名称的资源，并且为指定的属性设置一个指向该资源的资源引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1256">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1257">资源引用是类似于使用[DynamicResource 标记扩展](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)标记中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1257">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="9f5ed-1258">资源引用创建一个内部表达式，用于提供在运行时的延迟基础上的指定属性的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1258">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="9f5ed-1259">将重新计算表达式时资源字典指示更改的值通过内部事件，或者每当重新设定当前元素 （父级更改会更改字典查找路径）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1259">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-1260">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Resources" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1260">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1261">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Resources" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1261"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1262">这将返回`true`只要本地没有至少一个键控的资源<xref:System.Windows.FrameworkElement.Resources%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1262">This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-1263">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Style" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1263">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1264">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Style" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1264"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1265">这将返回`true`如果<xref:System.Windows.Style>本地设置。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1265">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-1266">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1266">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1267">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1267"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1268">此方法返回`true`如果<xref:System.Windows.FrameworkElement.Triggers%2A>本地设置属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1268">This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1269">当此元素上的 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 或 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 属性的值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1269">Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1270">直接路由的事件不遵循路由，而仅处理引发它们在同一元素中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1270">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9f5ed-1271">直接路由的事件支持其他路由的事件行为： 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1271">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9f5ed-1272">布局系统中读取属性中的<xref:System.Windows.SizeChangedEventArgs>此事件，以确定是否应视为报告的大小更改重要的自变量类。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1272">The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant.</span></span> <span data-ttu-id="9f5ed-1273">这允许布局系统或应用特定于控件的布局实现不会强制执行布局更改以可视方式无法觉察旧的和新的高度或宽度值之间的差异。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1273">This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</span></span> <span data-ttu-id="9f5ed-1274">感觉不差异可能是由于舍入或相同的结果计算的浮点数据类型。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1274">The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</span></span>  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-1275">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1275">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1276">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1276">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|<span data-ttu-id="9f5ed-1277">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1277">Routing strategy</span></span>|<span data-ttu-id="9f5ed-1278">直接</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1278">Direct</span></span>|  
|<span data-ttu-id="9f5ed-1279">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1279">Delegate</span></span>|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1280">标识 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1280">Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1281">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1281">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-1282">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1282">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-1283">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1283">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-1284">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1284">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-1285">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1285">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1286">当此元素上的任何现有属性绑定的源值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1286">Occurs when the source value changes for any existing property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1287">此事件创建一个别名<xref:System.Windows.Data.Binding.SourceUpdated>引发的任何事件<xref:System.Windows.Data.Binding>与此元素关联。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1287">This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-1288">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1288">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1289">获取或设置此元素呈现时所使用的样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1289">Gets or sets the style used by this element when it is rendered.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1290">若存在，则为此元素适用的非默认样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1290">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="9f5ed-1291">否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1291">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="9f5ed-1292">对于默认构造的 <see cref="T:System.Windows.FrameworkElement" />，其默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1292">The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1293">对于控件，当前样式通常提供的控件主题中的默认样式或样式中通常应用于该类型的控件在页面或应用程序级别 （隐式样式） 的资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1293">For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="9f5ed-1294">此属性不会设置或返回默认 （主题） 样式，但它确实会隐式样式或显式样式的元素上起作用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1294">This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</span></span> <span data-ttu-id="9f5ed-1295">如果存在隐式或显式样式，并不重要是指定为资源，还是本地定义的样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1295">In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="9f5ed-1296">设置样式存在一些限制。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1296">Setting the styles has some restrictions.</span></span> <span data-ttu-id="9f5ed-1297">你可以重置整个<xref:System.Windows.FrameworkElement.Style%2A>属性设置为一个新<xref:System.Windows.Style>在任何时候，这将强制布局重新组合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1297">You can reset the entire <xref:System.Windows.FrameworkElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="9f5ed-1298">但是，一旦加载的元素，该样式放置在使用<xref:System.Windows.Style>应被视为密封。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1298">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="9f5ed-1299">尝试对正在使用样式的任何单个属性进行更改 (如的在集合中的任何内容<xref:System.Windows.Style.Setters%2A>) 会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1299">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="9f5ed-1300">在标记中定义的样式被视为一旦加载从资源字典 （适用于资源），或包含在页面加载 （适用于内联样式），可使用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1300">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="9f5ed-1301"><xref:System.Windows.FrameworkElement.Style%2A> 是具有特殊的优先顺序的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1301"><xref:System.Windows.FrameworkElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="9f5ed-1302">本地设置样式通常在进行操作的最高优先级属性系统中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1302">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="9f5ed-1303">如果<xref:System.Windows.FrameworkElement.Style%2A>属性系统检查隐式样式中指定该类型的本地或应用程序资源加载期间在此情况下，为 null。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1303">If the <xref:System.Windows.FrameworkElement.Style%2A> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</span></span> <span data-ttu-id="9f5ed-1304">如果样式是完成此步骤后仍然为 null 则出于演示目的的有效样式通常来自默认 （主题） 样式，但默认样式中不会返回<xref:System.Windows.FrameworkElement.Style%2A>属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1304">If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkElement.Style%2A> property value.</span></span> <span data-ttu-id="9f5ed-1305">请参阅[依赖属性值优先级](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)或[样式和模板化](~/docs/framework/wpf/controls/styling-and-templating.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1305">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) or [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-1306">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1306">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-1307">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1307">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-1308">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1308">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-1309">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1309">*resourceExtension*</span></span>  
 <span data-ttu-id="9f5ed-1310">以下项之一:、 或。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1310">One of the following: , or .</span></span> <span data-ttu-id="9f5ed-1311">请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1311">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="9f5ed-1312">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1312">*styleResourceKey*</span></span>  
 <span data-ttu-id="9f5ed-1313">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1313">The key that identifies the style being requested.</span></span> <span data-ttu-id="9f5ed-1314">键引用中的现有资源<xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1314">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f5ed-1315">属性元素语法就从技术上讲，但大多数样式的情况下不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1315">Property element syntax is technically possible, but not recommended for most style scenarios.</span></span> <span data-ttu-id="9f5ed-1316">请参阅[内联样式和模板](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1316">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="9f5ed-1317">绑定引用使用[TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md)或<xref:System.Windows.Data.Binding>也是可行的但不常见。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1317">A binding reference using [TemplateBinding](~/docs/framework/wpf/advanced/templatebinding-markup-extension.md) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1318">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1318">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1319">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1319">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|<span data-ttu-id="9f5ed-1320">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1320">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1321">下面的示例在资源字典中定义的样式。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1321">The following example defines a style in a resource dictionary.</span></span>  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1322">标识 <see cref="P:System.Windows.FrameworkElement.Style" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1322">Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="9f5ed-1323">请求的环境属性的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1323">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1324">有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1324">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1325">如果 <paramref name="propertyName" /> 可用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1325"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1326">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1326">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9f5ed-1327">它只能在 <xref:System.Windows.FrameworkElement> 实例强制转换为 <xref:System.Windows.Markup.IQueryAmbient> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1327">It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1328">获取或设置任意对象值，该值可用于存储关于此元素的自定义信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1328">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1329">预期值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1329">The intended value.</span></span> <span data-ttu-id="9f5ed-1330">此属性没有默认值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1330">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1331">此属性是类似于其他 Microsoft 编程模型，如 Visual Basic 应用程序或 Windows 窗体中的标记属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1331">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="9f5ed-1332"><xref:System.Windows.FrameworkElement.Tag%2A> 用于提供可以在其中存储有关任何一些基本的自定义信息的预先存在的属性位置<xref:System.Windows.FrameworkElement>而无需你为子类元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1332"><xref:System.Windows.FrameworkElement.Tag%2A> is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.</span></span>  
  
 <span data-ttu-id="9f5ed-1333">由于此属性需要一个对象，需要设置以便使用属性元素用法<xref:System.Windows.FrameworkElement.Tag%2A>在 XAML 中为具有已知和内置类型转换器，如字符串的对象以外的任何属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1333">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="9f5ed-1334">以这种方式使用对象通常不是标准的 WPF 命名空间内，因此可能需要将命名空间映射到外部命名空间，以便作为 XAML 元素引入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1334">Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span> <span data-ttu-id="9f5ed-1335">有关详细信息，请参阅[XAML 命名空间和 Namespace 映射 WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)并[XAML 及 WPF 的自定义类](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1335">For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) and [XAML and Custom Classes for WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1336">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1336">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1337">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1337">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.TagProperty>|  
|<span data-ttu-id="9f5ed-1338">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1338">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-1339">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1339">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1340">标识 <see cref="P:System.Windows.FrameworkElement.Tag" /> 依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1340">Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1341">当此元素上的任何属性绑定的目标值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1341">Occurs when the target value changes for any property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1342">此事件创建一个别名<xref:System.Windows.Data.Binding.TargetUpdated>引发的任何事件<xref:System.Windows.Data.Binding>与此元素关联。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1342">This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="9f5ed-1343">这通常意味着，所讨论的绑定是双向绑定，且它的绑定的依赖属性将确定的是现在根据任何验证或属性或数据源所支持的缓存方案无效以前的属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1343">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</span></span>  
  
 <span data-ttu-id="9f5ed-1344">使用事件数据的<xref:System.Windows.FrameworkElement.TargetUpdated>事件以确定报告的目标值更新的特定属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1344">Use the event data of the <xref:System.Windows.FrameworkElement.TargetUpdated> event to determine the specific property that is reporting the target value update.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-1345">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1345">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1346">获取对此元素的模板父级的引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1346">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="9f5ed-1347">如果该元素不是通过模板创建的，则此属性无关。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1347">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1348">元素的<see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" />导致要创建此元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1348">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="9f5ed-1349">此值通常为<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1349">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1350"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> 通常是`null`在你的应用程序标记或代码中创建的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1350"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> is frequently `null` for objects that are created in your application markup or code.</span></span> <span data-ttu-id="9f5ed-1351">这是因为你创建这些对象直接，无需通过一个模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1351">This is because you create those objects directly, not via a template.</span></span> <span data-ttu-id="9f5ed-1352">对象引用获得通过遍历逻辑树从根路径，或通过典型的名称的引用，不是来自模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1352">Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</span></span>  
  
 <span data-ttu-id="9f5ed-1353">事例<xref:System.Windows.FrameworkElement.TemplatedParent%2A>可能不是`null`包括命中测试遍历可视化树与某些低级别输入事件的事件处理等操作<xref:System.Windows.Media.VisualTreeHelper>，或使用的枚举器，这可能会返回提供的元素从模板。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1353">Cases where <xref:System.Windows.FrameworkElement.TemplatedParent%2A> might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates.</span></span> <span data-ttu-id="9f5ed-1354">另一种情况是如果明确调用<xref:System.Windows.FrameworkTemplate.FindName%2A>针对现有<xref:System.Windows.FrameworkTemplate>并且使用返回的对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1354">Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.</span></span>  
  
 <span data-ttu-id="9f5ed-1355">模板实际上是共享的对象，其中只有一次创建模板的内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1355">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="9f5ed-1356">因此，如果您获得来自模板的元素的对象引用，可能会发现明显的逻辑树不会访问到页面根。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1356">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="9f5ed-1357">若要连接到该页面的逻辑树这样的模板引用，应会看到<xref:System.Windows.FrameworkElement.TemplatedParent%2A>值并继续根据需要该元素树中导航。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1357">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1358">获取或设置在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中为此元素显示的工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1358">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="9f5ed-1359">工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1359">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1360">如果此属性的值属于类型<xref:System.Windows.Controls.ToolTip>，，则该值是将在中使用工具提示[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1360">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="9f5ed-1361">如果值为任何其他类型，则该值将用作*内容*为<xref:System.Windows.Controls.ToolTip>提供系统 （构造）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1361">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="9f5ed-1362">有关更多信息，请参见<xref:System.Windows.Controls.ToolTipService>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1362">For more information, see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="9f5ed-1363">服务类提供了可用于进一步自定义的附加的属性<xref:System.Windows.Controls.ToolTip>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1363">The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-1364">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1364">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-1365">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1365">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-1366">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1366">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-1367">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1367">*toolTipContent*</span></span>  
 <span data-ttu-id="9f5ed-1368">将成为显示的文本的字符串<xref:System.Windows.FrameworkElement.ToolTip%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1368">A string that becomes the display text for the <xref:System.Windows.FrameworkElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-1369">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1369">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="9f5ed-1370">对象元素窗体，应使用的内容作为中提供某些对象<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1370">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> .</span></span> <span data-ttu-id="9f5ed-1371">通常，这是<xref:System.Windows.FrameworkElement>或创建布局的组合的情况下的某些其他元素<xref:System.Windows.FrameworkElement.ToolTip%2A>，最终包含在该组合中的文本内容。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1371">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="9f5ed-1372">在此使用情况<xref:System.Windows.Controls.ToolTip>元素创建隐式地从已分析[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，并*经过*内容设置为其<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1372">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="9f5ed-1373"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="9f5ed-1373"><`ToolTip` .../></span></span>  
 <span data-ttu-id="9f5ed-1374">请参阅 <xref:System.Windows.Controls.ToolTip>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1374">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1375">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1375">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1376">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1376">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|<span data-ttu-id="9f5ed-1377">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1377">Metadata properties set to `true`</span></span>|<span data-ttu-id="9f5ed-1378">None</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1378">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1379">下面的示例创建<xref:System.Windows.Controls.ToolTip>中的代码，然后设置<xref:System.Windows.FrameworkElement.ToolTip%2A>属性上的<xref:System.Windows.Controls.Primitives.StatusBar>控件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1379">The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the <xref:System.Windows.FrameworkElement.ToolTip%2A> property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.</span></span>  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1380">在元素上的任何工具提示关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1380">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1381">将标记<xref:System.Windows.FrameworkElement.ToolTipClosing>为已处理的事件不会取消关闭工具提示。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1381">Marking the <xref:System.Windows.FrameworkElement.ToolTipClosing> event as handled does not cancel closing the tooltip.</span></span> <span data-ttu-id="9f5ed-1382">工具提示显示后，关闭工具提示仅在响应用户与 UI 交互完成。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1382">Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</span></span>  
  
 <span data-ttu-id="9f5ed-1383">此事件不能为<xref:System.Windows.EventTrigger>样式中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1383">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9f5ed-1384">这是因为此事件的标识符字段重新使用从服务不公开的服务级别事件的添加/删除事件方法的实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1384">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-1385">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1385">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1386">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1386">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|<span data-ttu-id="9f5ed-1387">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1387">Routing strategy</span></span>|<span data-ttu-id="9f5ed-1388">直接</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1388">Direct</span></span>|  
|<span data-ttu-id="9f5ed-1389">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1389">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9f5ed-1390">重写<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1390">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1391">标识 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1391">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1392">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1392">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-1393">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1393">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-1394">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1394">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-1395">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1395">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-1396">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1396">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1397">在元素上的任何工具提示打开时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1397">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1398">若要防止出现在 UI 中，您的处理程序的工具提示<xref:System.Windows.FrameworkElement.ToolTipOpening>可以将标记<xref:System.Windows.Controls.ToolTipEventArgs>所处理的事件数据。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1398">To prevent a tooltip from appearing in the UI, your handler for <xref:System.Windows.FrameworkElement.ToolTipOpening> can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled.</span></span> <span data-ttu-id="9f5ed-1399">否则，显示工具提示，使用的值<xref:System.Windows.FrameworkElement.ToolTip%2A>作为工具提示内容的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1399">Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content.</span></span> <span data-ttu-id="9f5ed-1400">另一种情形是，可以编写的处理程序的值重置<xref:System.Windows.FrameworkElement.ToolTip%2A>是事件源，将显示工具提示之前的元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1400">Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.</span></span>  
  
 <span data-ttu-id="9f5ed-1401"><xref:System.Windows.FrameworkElement.ToolTipOpening> 如果将不会引发的值<xref:System.Windows.FrameworkElement.ToolTip%2A>是`null`或其他取消设置。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1401"><xref:System.Windows.FrameworkElement.ToolTipOpening> will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset.</span></span> <span data-ttu-id="9f5ed-1402">不要特意设置<xref:System.Windows.FrameworkElement.ToolTip%2A>到`null`工具提示处于打开状态，或打开; 这不会关闭工具提示的效果，并改为将在 UI 中创建不需要的可视化项目时。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1402">Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</span></span>  
  
 <span data-ttu-id="9f5ed-1403"><xref:System.Windows.FrameworkElement.ToolTipOpening>事件不能为<xref:System.Windows.EventTrigger>样式中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1403">The <xref:System.Windows.FrameworkElement.ToolTipOpening> event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9f5ed-1404">这是因为此事件的标识符字段重新使用从服务不公开的服务级别事件的添加/删除事件方法的实现。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1404">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-1405">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1405">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1406">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1406">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="9f5ed-1407">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1407">Routing strategy</span></span>|<span data-ttu-id="9f5ed-1408">直接</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1408">Direct</span></span>|  
|<span data-ttu-id="9f5ed-1409">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1409">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9f5ed-1410">重写<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>实现类处理此事件在派生类中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1410">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1411">标识 <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1411">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1412">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1412">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-1413">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1413">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-1414">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1414">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-1415">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1415">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-1416">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1416">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1417">标识 <see cref="P:System.Windows.FrameworkElement.ToolTip" /> 依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1417">Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1418">获取直接在此元素上或在子元素中建立的触发器的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1418">Gets the collection of triggers established directly on this element, or in child elements.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1419"><see cref="T:System.Windows.Trigger" /> 对象的强类型集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1419">A strongly typed collection of <see cref="T:System.Windows.Trigger" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9f5ed-1420">此属性只能设置[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]通过集合语法所示，或通过访问的集合对象并使用它的各种方法，例如 Add。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1420">This property can only be set in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</span></span> <span data-ttu-id="9f5ed-1421">要访问的集合对象本身的属性是只读的集合本身是可读写。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1421">The property to access the collection object itself is read-only, the collection itself is read-write.</span></span> <span data-ttu-id="9f5ed-1422">属性仅存在于根元素;尝试查找它或将其设置其他位置将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1422">The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="9f5ed-1423">此属性不会启用你能够检查作为中此元素上使用的样式的一部分存在的触发器。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1423">This property does not enable you to examine triggers that exist as part of styles in use on this element.</span></span> <span data-ttu-id="9f5ed-1424">它只报告按原义添加到集合中，在标记或代码中的触发器的集合。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1424">It only reports the collection of triggers that are literally added to the collection, either in markup or code.</span></span> <span data-ttu-id="9f5ed-1425">元素通常没有现有的默认情况下此类元素 (通过模板实例);很多常见的来自控件组合建立在样式中的触发器。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1425">Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</span></span>  
  
 <span data-ttu-id="9f5ed-1426">在行为方面 (以及尝试确定哪个效果来自哪个元素的声明<xref:System.Windows.FrameworkElement.Triggers%2A>集合)，触发条件和触发器效果可能位于此元素，或者可能对其逻辑树中的子元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1426">In terms of behavior (and trying to establish which effect came from which element's declared <xref:System.Windows.FrameworkElement.Triggers%2A> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</span></span> <span data-ttu-id="9f5ed-1427">请注意，如果您使用生存期事件如<xref:System.Windows.FrameworkElement.Loaded>若要获取此集合，子元素的触发器可能无法完全加载，并且该集合将为小于在运行时将真正。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1427">Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</span></span>  
  
 <span data-ttu-id="9f5ed-1428">请注意，在元素上建立的触发器的集合仅支持<xref:System.Windows.EventTrigger>，不包含属性触发器 (<xref:System.Windows.Trigger>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1428">Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>).</span></span> <span data-ttu-id="9f5ed-1429">如果需要属性触发器，必须将这些样式或模板中，然后将指定该样式或模板的元素可以直接通过<xref:System.Windows.FrameworkElement.Style%2A>属性，或通过隐式样式引用间接。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1429">If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9f5ed-1430">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1430">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-1431">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1431">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-1432">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1432">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="9f5ed-1433">一个或多个定义<xref:System.Windows.EventTrigger>元素。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1433">One or more defined <xref:System.Windows.EventTrigger> elements.</span></span> <span data-ttu-id="9f5ed-1434">每个此类触发器应包含有效的情节提要操作和引用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1434">Each such trigger is expected to contain valid storyboard actions and references.</span></span> <span data-ttu-id="9f5ed-1435">请注意，此集合可以只建立一个页面的根元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1435">Note that this collection can only be established on the root element of a page.</span></span> <span data-ttu-id="9f5ed-1436">有关详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1436">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="9f5ed-1437">要查找的资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1437">The key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1438">搜索具有指定键的资源，如果找到，则返回该资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1438">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="9f5ed-1439">找到的资源；如果未找到具有所提供 <paramref name="key" /> 的资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1439">The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1440">如果调用元素上找不到资源，通过逻辑树向上搜索父资源树，树的方法相同资源时的搜索请求时由参数在运行时。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1440">If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</span></span> <span data-ttu-id="9f5ed-1441">该方法返回`null`仅当在资源树中，每次树的现有条件的任何位置都不存在该密钥的任何资源的<xref:System.Windows.FrameworkElement.TryFindResource%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1441">The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <xref:System.Windows.FrameworkElement.TryFindResource%2A> is called.</span></span>  
  
 <span data-ttu-id="9f5ed-1442">通常，会立即强制转换为已尝试设置为返回的资源值的属性的类型的返回值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1442">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="9f5ed-1443"><xref:System.Windows.FrameworkElement.FindResource%2A>方法具有类似行为，不同之处在于它将引发异常，如果返回具有提供的键资源。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1443">The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1444">下面的示例实现一个按钮处理程序，其中点击集的按钮为资源定义画笔其背景中获取通过调用<xref:System.Windows.FrameworkElement.TryFindResource%2A>本身上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1444">The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <xref:System.Windows.FrameworkElement.TryFindResource%2A> on itself.</span></span> <span data-ttu-id="9f5ed-1445">此操作将沿着元素树并查找资源 (资源本身中定义[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]并且不会显示)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1445">This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and is not shown).</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1446">当从加载的元素的元素树中移除元素时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1446">Occurs when the element is removed from within an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1447">直接路由的事件不遵循路由，而仅处理引发它们在同一元素中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1447">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9f5ed-1448">直接路由的事件支持其他路由的事件行为： 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1448">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9f5ed-1449"><xref:System.Windows.FrameworkElement.Loaded> 和<xref:System.Windows.FrameworkElement.Unloaded>可能同时会引发用户启动系统主题更改控件上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1449"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9f5ed-1450">主题更改都会导致控件模板，并包含可视化树，从而导致整个控件以卸载并重新加载的失效。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1450">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9f5ed-1451">因此<xref:System.Windows.FrameworkElement.Unloaded>不能假设只会在导航离开页面。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1451">Therefore <xref:System.Windows.FrameworkElement.Unloaded> cannot be assumed to occur only on navigation away from the page.</span></span>  
  
 <span data-ttu-id="9f5ed-1452">请注意，<xref:System.Windows.FrameworkElement.Unloaded>应用程序开始关闭后不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1452">Note that the <xref:System.Windows.FrameworkElement.Unloaded> event is not raised after an application begins shutting down.</span></span> <span data-ttu-id="9f5ed-1453">应用程序关闭时所定义的条件出现<xref:System.Windows.Application.ShutdownMode%2A>属性时发生。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1453">Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs.</span></span> <span data-ttu-id="9f5ed-1454">如果处理程序中的清理代码放<xref:System.Windows.FrameworkElement.Unloaded>事件，例如针对<xref:System.Windows.Window>或<xref:System.Windows.Controls.UserControl>，它可能不会按预期方式调用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1454">If you place cleanup code within a handler for the <xref:System.Windows.FrameworkElement.Unloaded> event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9f5ed-1455">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1455">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1456">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1456">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|<span data-ttu-id="9f5ed-1457">路由策略</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1457">Routing strategy</span></span>|<span data-ttu-id="9f5ed-1458">直接</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1458">Direct</span></span>|  
|<span data-ttu-id="9f5ed-1459">委托</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1459">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1460">标识 <see cref="E:System.Windows.FrameworkElement.Unloaded" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1460">Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1461">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1461">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9f5ed-1462">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1462">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9f5ed-1463">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1463">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9f5ed-1464">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1464">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9f5ed-1465">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1465">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9f5ed-1466">要从当前范围中移除的名称-对象对的名称。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1466">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="9f5ed-1467">简化对 <see cref="T:System.Windows.NameScope" /> 注销方法的访问。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1467">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1468">如果你想要重新注册该名称与另一个元素只需取消注册名称到系统。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1468">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9f5ed-1469">将默认样式重新应用至当前 <see cref="T:System.Windows.FrameworkElement" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1469">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1470">获取或设置一个值，该值指示是否应向此元素的大小和位置布局应用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1470">Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1471">如果应用了布局舍入，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1471"><see langword="true" /> if layout rounding is applied; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9f5ed-1472">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1472">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1473">当<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>的元素的属性是`true`，过程中所计算的所有非整数像素值<xref:System.Windows.UIElement.Measure%2A>和<xref:System.Windows.UIElement.Arrange%2A>传递舍入为整数像素值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1473">When the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.</span></span>  
  
 <span data-ttu-id="9f5ed-1474">此属性的子元素继承。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1474">This property is inherited by child elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f5ed-1475">应设置<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>到`true`根元素上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1475">You should set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root element.</span></span> <span data-ttu-id="9f5ed-1476">布局系统将子坐标添加到父坐标中;因此，如果父级坐标的像素边界上，子坐标也不是像素边界上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1476">The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</span></span> <span data-ttu-id="9f5ed-1477">如果<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>不能在根目录设置，设置<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>在子活动以获取你想要的效果。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1477">If <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.</span></span>  
  
 <span data-ttu-id="9f5ed-1478">对象绘制像素边界上消除了抗锯齿边缘不再处于中间设备像素时，生成的半透明边缘。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1478">Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</span></span> <span data-ttu-id="9f5ed-1479">下图显示位置在设备像素的中间的一个像素宽度行的输出。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1479">The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</span></span> <span data-ttu-id="9f5ed-1480">在左侧的行不使用布局舍入，并且是抗锯齿。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1480">The line on the left does not use layout rounding and is anti-aliased.</span></span> <span data-ttu-id="9f5ed-1481">在右侧行使用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1481">The line on the right uses layout rounding.</span></span>  
  
 <span data-ttu-id="9f5ed-1482">![反&#45;锯齿的线与单像素线进行比较。](~/add/media/pixelsnaplinecompare.PNG "抗锯齿的线与单像素线进行比较。")</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1482">![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG "Anti-aliased line compared to single pixel line.")</span></span>  
  
 <span data-ttu-id="9f5ed-1483">当你使用布局舍入和<xref:System.Windows.GridUnitType.Star>大小调整，布局系统中的列或行的度量值以避免子像素呈现中创建微小的差异。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1483">When you use layout rounding and <xref:System.Windows.GridUnitType.Star> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</span></span> <span data-ttu-id="9f5ed-1484">例如，如果网格具有 100 3 列每个大小的总宽度<xref:System.Windows.GridUnitType.Star>，而不是创建三个列的宽度相等时为 33.3，布局系统创建 2 个具有 33 到一个宽度为 34 的宽度的列。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1484">For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType.Star>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f5ed-1485">在.NET 4.6 是对布局舍入以减少带边框的控件中的剪切实例进行更改。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1485">In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</span></span> <span data-ttu-id="9f5ed-1486">默认情况下，如果您的目标框架是.NET Framework 4.6 或更高版本启用此功能。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1486">By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</span></span> <span data-ttu-id="9f5ed-1487">面向早期版本的 framework 的应用程序可以选择使用新行为通过将以下设置添加到 app.config 文件：`<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` 在.NET Framework 4.6 上运行应用程序时，该设置才能起作用。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1487">Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1488">下面的示例演示了效果的<xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>属性具有单个像素宽度行上。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1488">The following example demonstrates the effect that the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property has on a single pixel-width line.</span></span> <span data-ttu-id="9f5ed-1489">在左侧的行不会使用布局舍入，并在右侧行使用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1489">The line on the left does not use layout rounding and the line on the right uses layout rounding.</span></span> <span data-ttu-id="9f5ed-1490">如果缓慢调整窗口的大小，您可以看到不同的布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1490">If you slowly resize the window, you can see the difference that layout rounding makes.</span></span>  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1491">标识 <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1491">Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1492">获取或设置在父元素（如面板或项控件）中组合此元素时所应用的垂直对齐特征。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1492">Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1493">垂直对齐设置。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1493">A vertical alignment setting.</span></span> <span data-ttu-id="9f5ed-1494">默认值为 <see cref="F:System.Windows.VerticalAlignment.Stretch" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1494">The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1495">当<xref:System.Windows.FrameworkElement.Height%2A>并<xref:System.Windows.FrameworkElement.Width%2A>元素上显式设置属性，这些度量值会优先考虑布局，并且取消的此属性设置为常规效果<xref:System.Windows.VerticalAlignment.Stretch>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1495">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9f5ed-1496"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]属性访问器，它实际上是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1496"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9f5ed-1497">此特定的依赖项属性经常具有派生的元素类，尤其是控件中以不同方式设置其原本"默认"值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1497">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</span></span> <span data-ttu-id="9f5ed-1498">这通常发生在两种方式之一： 为特定的派生类，但具有不同的元数据设置其默认值; 重新注册该依赖项属性或者应用了默认样式以不同方式设置该依赖项属性值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1498">This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9f5ed-1499">例如，明显"default"的<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>有关<xref:System.Windows.Controls.ComboBoxItem>控件将是<xref:System.Windows.VerticalAlignment.Center>，即使<xref:System.Windows.Controls.ComboBoxItem>继承<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>直接从<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1499">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment.Center>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9f5ed-1500">这是因为该值的默认样式中已重置<xref:System.Windows.Controls.ComboBoxItem>，样式的控件模板中。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1500">This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9f5ed-1501"><xref:System.Windows.Controls.Canvas> 不使用<xref:System.Windows.FrameworkElement.VerticalAlignment%2A>构成布局，因为时<xref:System.Windows.Controls.Canvas>根据绝对定位。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1501"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9f5ed-1502">当由继承<xref:System.Windows.Controls.ComboBoxItem>或任何派生类中，<xref:System.Windows.Controls.ComboBoxItem>重新定义为此属性的默认值<xref:System.Windows.VerticalAlignment.Center>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1502">When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment.Center>.</span></span>  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1503">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1503">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1504">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1504">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|<span data-ttu-id="9f5ed-1505">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1505">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1506">标识 <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1506">Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1507">获取此元素内可视子元素的数目。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1507">Gets the number of visual child elements within this element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1508">此元素内可视子元素的数目。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1508">The number of visual child elements for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1509"><xref:System.Windows.FrameworkElement>的实现<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>始终返回零个或一个。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1509">The <xref:System.Windows.FrameworkElement> implementation of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> always returns either zero or one.</span></span> <span data-ttu-id="9f5ed-1510">维护可能会超过一个的可视子集合的类必须重写此属性和<xref:System.Windows.FrameworkElement.GetVisualChild%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1510">Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-1511">此属性通常用于确定当前的子集合，以便实现的布局重写的上限 (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>， <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1511">This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f5ed-1512">下面的示例演示如何自定义装饰器使用的值来声明<xref:System.Windows.Media.VisualCollection>它维护其多个可视化子级并报告这些值通过重写之一<xref:System.Windows.FrameworkElement.VisualChildrenCount%2A>和<xref:System.Windows.FrameworkElement.GetVisualChild%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1512">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9f5ed-1513">如果您的类支持多个可视子子元素集合中，重写此属性以返回该集合中元素的计数。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1513">If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</span></span> <span data-ttu-id="9f5ed-1514">即使集合对象本身返回计数时，必须执行此操作。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1514">You must do this even if the collection object itself returns a count.</span></span> <span data-ttu-id="9f5ed-1515">在 WPF 框架级别的元素的布局逻辑假定所有元素将都返回有效计数通过其<see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" />属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1515">Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> property.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1516">获取或设置元素的宽度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1516">Gets or sets the width of the element.</span></span></summary>
        <value><span data-ttu-id="9f5ed-1517">元素的宽度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1517">The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9f5ed-1518">默认值为 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1518">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="9f5ed-1519">此值必须等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1519">This value must be equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-1520">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1520">See Remarks for upper bound information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f5ed-1521">这是三个属性之一上<xref:System.Windows.FrameworkElement>指定宽度的信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1521">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9f5ed-1522">其他两个<xref:System.Windows.FrameworkElement.MinWidth%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1522">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9f5ed-1523">如果这些值之间存在冲突，应用程序实际宽度确定的顺序是： 首先<xref:System.Windows.FrameworkElement.MinWidth%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后每个都在限制之内，如果<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1523">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9f5ed-1524">此属性的返回值始终是任何已设置为它的值相同。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1524">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9f5ed-1525">与之相反，值<xref:System.Windows.FrameworkElement.ActualWidth%2A>可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1525">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary.</span></span> <span data-ttu-id="9f5ed-1526">布局可能已被拒绝的建议的大小出于某种原因。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1526">The layout may have rejected the suggested size for some reason.</span></span> <span data-ttu-id="9f5ed-1527">此外，布局系统本身以异步方式工作相对于的属性系统集<xref:System.Windows.FrameworkElement.Width%2A>和可能不处理特定大小调整属性的更改。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1527">Also, the layout system itself works asynchronously relative to the property system set of <xref:System.Windows.FrameworkElement.Width%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9f5ed-1528">除了在可接受<xref:System.Double>值，此属性也可以是<xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1528">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9f5ed-1529">这是如何指定自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1529">This is how you specify auto sizing behavior.</span></span> <span data-ttu-id="9f5ed-1530">在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]值设置为字符串"Auto"（不区分大小写） 以启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1530">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9f5ed-1531">自动调整大小行为意味着该元素将填满可用的宽度。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1531">Auto sizing behavior implies that the element will fill the width available to it.</span></span> <span data-ttu-id="9f5ed-1532">但是请注意，特定控件通常提供将禁用自动调整大小行为，除非专门重新启用了其默认样式中的默认值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1532">Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9f5ed-1533">除了验证检查，还有用于绑定的不确定性上限值<xref:System.Windows.FrameworkElement.Width%2A>，由布局系统强制执行 (这是一个非常大的数字，大于<xref:System.Single.MaxValue?displayProperty=nameWithType>但小于<xref:System.Double.MaxValue?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1533">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Width%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9f5ed-1534">如果你超出此限制，该元素将不会呈现，并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1534">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9f5ed-1535">未设置<xref:System.Windows.FrameworkElement.Width%2A>远远大于任何可能的可视显示，或您的最大大小可能会超出此非确定性上限的值。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1535">Do not set <xref:System.Windows.FrameworkElement.Width%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9f5ed-1536">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1536">XAML Attribute Usage</span></span>  
  
```  
<object Width="double"/>  
- or -  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9f5ed-1537">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1537">XAML Values</span></span>  
 <span data-ttu-id="9f5ed-1538">*double*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1538">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9f5ed-1539">字符串表示形式<xref:System.Double>值等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1539">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9f5ed-1540">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1540">See Remarks for upper bound information.</span></span> <span data-ttu-id="9f5ed-1541">此值解释为[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]度量。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1541">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9f5ed-1542">字符串不需要显式包括小数点。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1542">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9f5ed-1543">例如，值的`1`是可接受。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1543">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9f5ed-1544">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1544">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9f5ed-1545">一个*双*值，上文所述跟以下单位声明字符串之一： `px`， `in`， `cm`， `pt`。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1545">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9f5ed-1546">`px` （默认值） [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1546">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9f5ed-1547">`in` 为英寸;1 中为 96px = =</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1547">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9f5ed-1548">`cm` 为厘米;1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1548">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9f5ed-1549">`pt` is points; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1549">`pt` is points; 1pt==(96/72) px</span></span>  
  
 `Auto`  
 <span data-ttu-id="9f5ed-1550">启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1550">Enables autosizing behavior.</span></span> <span data-ttu-id="9f5ed-1551">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1551">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9f5ed-1552">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1552">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9f5ed-1553">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1553">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|<span data-ttu-id="9f5ed-1554">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1554">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9f5ed-1555">标识 <see cref="P:System.Windows.FrameworkElement.Width" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9f5ed-1555">Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbc70fa825fb1449321a5aebd633372a4e8df0e5" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70729302" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">该属性所在的对象。 在调用该回调时，属性系统将会传递该值。</param>
    <param name="baseValue">该属性在尝试执行任何强制转换之前的新值。</param>
    <summary>为只要重新计算依赖项属性值或专门请求强制转换时就调用的方法提供一个模板。</summary>
    <returns>强制转换后的值（采用适当的类型）。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过多种<xref:System.Windows.CoerceValueCallback>不同的方法将基于的回调分配给依赖属性。 每种方法都需要首先创建新的属性元数据对象（<xref:System.Windows.PropertyMetadata>或派生类， <xref:System.Windows.FrameworkPropertyMetadata>如）。 使用采用`coerceValueCallback`参数的构造函数签名创建元数据对象，并将该参数分配给回调处理程序。 或按任何签名构造元数据，并在<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>将元数据投入使用之前设置属性。  
  
 具有此元数据时，可以：  
  
-   使用的<xref:System.Windows.DependencyProperty.Register%2A>任一签名为新类定义新的依赖项属性， `typeMetadata`并将元数据作为值提供。  
  
-   当从拥有依赖项<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>属性的类派生时，重写现有依赖属性的元数据（调用）。  
  
-   通过调用<xref:System.Windows.DependencyObject> <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>，使用新的元数据将现有依赖项属性添加到新类中。  
  
 此回调的实现应检查中`baseValue`的值，并根据值或类型确定这是否是需要进一步强制转换的值。  
  
 每当<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性系统或任何其他调用方对<xref:System.Windows.DependencyObject>实例调用<xref:System.Windows.DependencyObject.CoerceValue%2A>时`dp`，都将调用依赖属性的，同时将该属性的标识符指定为。  
  
 对属性值的更改可能来自属性系统中任何可能的参与者。 这包括样式、泛型失效、触发器、属性值继承和本地值设置。  
  
 通常，应避免<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>为任何给定的依赖属性指定多个（对于已经具有的<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>依赖属性，重写或添加新的元数据）。 只有其中一个回调才能执行操作。与<xref:System.Windows.DependencyObject>调用方相比，操作回调将应用于继承中派生程度最高的类。 当元数据被重写时，将替换分配给依赖项属性的元数据的其他回调，因为它已存在于所有者层次结构中。  
  
   
  
## Examples  
 下面的示例包括此回调的一个实现，该实现基于其他输入（如其他属性的值）强制转换依赖属性存储的值。 在这种情况下，回调会检查`ShirtType`属性是否对应于具有按钮的衬衫类型; 如果为`ButtonColor`，则它将为提供起始默认颜色; 如果衬衫类型没有按钮，则会将`ButtonColor`值返回到起始值，这会导致[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] （未显示）从有效选项中删除该下拉列表。  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>

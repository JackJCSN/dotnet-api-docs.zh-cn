<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50919b4b6c3b6707d5830ddef58a2ce821e29187" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64190267" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="c5c59-101">该属性所在的对象。</span><span class="sxs-lookup"><span data-stu-id="c5c59-101">The object that the property exists on.</span></span> <span data-ttu-id="c5c59-102">在调用该回调时，属性系统将会传递该值。</span><span class="sxs-lookup"><span data-stu-id="c5c59-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="c5c59-103">该属性在尝试执行任何强制转换之前的新值。</span><span class="sxs-lookup"><span data-stu-id="c5c59-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="c5c59-104">为只要重新计算依赖项属性值或专门请求强制转换时就调用的方法提供一个模板。</span><span class="sxs-lookup"><span data-stu-id="c5c59-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="c5c59-105">强制转换后的值（采用适当的类型）。</span><span class="sxs-lookup"><span data-stu-id="c5c59-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c5c59-106">回调基于<xref:System.Windows.CoerceValueCallback>可以分配给通过多种不同的方法的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="c5c59-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="c5c59-107">上述每种方法需要您首先创建一个新的属性元数据对象 (<xref:System.Windows.PropertyMetadata>，或派生的类，如<xref:System.Windows.FrameworkPropertyMetadata>)。</span><span class="sxs-lookup"><span data-stu-id="c5c59-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="c5c59-108">创建元数据对象使用的构造函数签名的采用`coerceValueCallback`参数，并将该参数分配给回调处理程序。</span><span class="sxs-lookup"><span data-stu-id="c5c59-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="c5c59-109">构造通过任何签名并集的元数据或<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性，然后将元数据放在使用中。</span><span class="sxs-lookup"><span data-stu-id="c5c59-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="c5c59-110">此元数据后，你可以：</span><span class="sxs-lookup"><span data-stu-id="c5c59-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="c5c59-111">定义新类，使用任一签名的新的依赖属性<xref:System.Windows.DependencyProperty.Register%2A>，将该元数据作为`typeMetadata`值。</span><span class="sxs-lookup"><span data-stu-id="c5c59-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="c5c59-112">重写元数据 (调用<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 的现有依赖属性，从拥有该依赖属性的类派生时。</span><span class="sxs-lookup"><span data-stu-id="c5c59-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="c5c59-113">将现有依赖属性添加到一个新<xref:System.Windows.DependencyObject>类，使用新的元数据，通过调用<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>。</span><span class="sxs-lookup"><span data-stu-id="c5c59-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="c5c59-114">此回调的实现应检查值`baseValue`并确定这是否是一个值，需要进一步进行强制转换该值基于值或类型上。</span><span class="sxs-lookup"><span data-stu-id="c5c59-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="c5c59-115"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性为依赖项调用属性系统或任何其他调用方调用任何时候<xref:System.Windows.DependencyObject.CoerceValue%2A>上<xref:System.Windows.DependencyObject>实例，它指定该属性的标识符作为`dp`。</span><span class="sxs-lookup"><span data-stu-id="c5c59-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="c5c59-116">对属性值的更改可能来自属性系统中任何可能的参与者。</span><span class="sxs-lookup"><span data-stu-id="c5c59-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="c5c59-117">这包括样式、 泛型失效、 触发器、 属性值继承和本地值设置。</span><span class="sxs-lookup"><span data-stu-id="c5c59-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="c5c59-118">通常应避免指定多个<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>对于任何给定的依赖项属性 (重写或添加新的元数据已具有的依赖属性具有<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>)。</span><span class="sxs-lookup"><span data-stu-id="c5c59-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="c5c59-119">只有一个回调将能够执行操作。使其执行操作回调将已应用于在相比继承派生程度最高的类的其<xref:System.Windows.DependencyObject>调用方。</span><span class="sxs-lookup"><span data-stu-id="c5c59-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="c5c59-120">元数据中重写时，将替换其他回调所有者层次结构中存在更高版本分配给依赖属性元数据。</span><span class="sxs-lookup"><span data-stu-id="c5c59-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c5c59-121">下面的示例包括要强制转换基于其他输入，如另一个属性的值的依赖项属性的存储的值此回调的实现。</span><span class="sxs-lookup"><span data-stu-id="c5c59-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="c5c59-122">在这种情况下，回叫会检查以查看是否`ShirtType`属性对应于一种类型的按钮的 shirt; 如果是这样它在建立开始默认颜色`ButtonColor`，如果 shirt 类型具有没有按钮，它将强制`ButtonColor`值返回到一个起始值，这将导致[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]（未显示） 从有效的选择中删除该下拉列表。</span><span class="sxs-lookup"><span data-stu-id="c5c59-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>
<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50919b4b6c3b6707d5830ddef58a2ce821e29187" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64190267" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">该属性所在的对象。 在调用该回调时，属性系统将会传递该值。</param>
    <param name="baseValue">该属性在尝试执行任何强制转换之前的新值。</param>
    <summary>为只要重新计算依赖项属性值或专门请求强制转换时就调用的方法提供一个模板。</summary>
    <returns>强制转换后的值（采用适当的类型）。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 回调基于<xref:System.Windows.CoerceValueCallback>可以分配给通过多种不同的方法的依赖项属性。 上述每种方法需要您首先创建一个新的属性元数据对象 (<xref:System.Windows.PropertyMetadata>，或派生的类，如<xref:System.Windows.FrameworkPropertyMetadata>)。 创建元数据对象使用的构造函数签名的采用`coerceValueCallback`参数，并将该参数分配给回调处理程序。 构造通过任何签名并集的元数据或<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性，然后将元数据放在使用中。  
  
 此元数据后，你可以：  
  
-   定义新类，使用任一签名的新的依赖属性<xref:System.Windows.DependencyProperty.Register%2A>，将该元数据作为`typeMetadata`值。  
  
-   重写元数据 (调用<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 的现有依赖属性，从拥有该依赖属性的类派生时。  
  
-   将现有依赖属性添加到一个新<xref:System.Windows.DependencyObject>类，使用新的元数据，通过调用<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>。  
  
 此回调的实现应检查值`baseValue`并确定这是否是一个值，需要进一步进行强制转换该值基于值或类型上。  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性为依赖项调用属性系统或任何其他调用方调用任何时候<xref:System.Windows.DependencyObject.CoerceValue%2A>上<xref:System.Windows.DependencyObject>实例，它指定该属性的标识符作为`dp`。  
  
 对属性值的更改可能来自属性系统中任何可能的参与者。 这包括样式、 泛型失效、 触发器、 属性值继承和本地值设置。  
  
 通常应避免指定多个<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>对于任何给定的依赖项属性 (重写或添加新的元数据已具有的依赖属性具有<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>)。 只有一个回调将能够执行操作。使其执行操作回调将已应用于在相比继承派生程度最高的类的其<xref:System.Windows.DependencyObject>调用方。 元数据中重写时，将替换其他回调所有者层次结构中存在更高版本分配给依赖属性元数据。  
  
   
  
## Examples  
 下面的示例包括要强制转换基于其他输入，如另一个属性的值的依赖项属性的存储的值此回调的实现。 在这种情况下，回叫会检查以查看是否`ShirtType`属性对应于一种类型的按钮的 shirt; 如果是这样它在建立开始默认颜色`ButtonColor`，如果 shirt 类型具有没有按钮，它将强制`ButtonColor`值返回到一个起始值，这将导致[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]（未显示） 从有效的选择中删除该下拉列表。  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>
<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd1619345cd34651d751e03baae9adcccb046992" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64186920" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供事件相关的实用工具方法，这些方法可为类所有者注册路由事件，并添加类处理程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类通常用于注册新的路由的事件， <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。  
  
 第二个最常用[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]使用率<xref:System.Windows.EventManager.RegisterClassHandler%2A>。 使用此方法启用的路由的事件在类上或附加的事件的类处理。 有关详细信息，请参阅[路由事件标记为已处理，和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
   
  
## Examples  
 下面的示例显示如何使用此类可以将新的路由的事件注册为一个类成员，以及路由的事件"包装"方法的重写添加和删除实现[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件。  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为已注册到事件系统的路由事件返回标识符。</summary>
        <returns>包含注册对象的 <see cref="T:System.Windows.RoutedEvent" /> 类型的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更多<xref:System.Windows.RoutedEvent>更高版本注册对象。 此方法获取快照，而且是在应用程序的整个生存期内可写的路由事件的集合。 返回的集合可能会很大。 即使只需计算的一部分的事件[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]，高达数百是集合计数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">从其开始搜索的类型。 搜索中包含基类。</param>
        <summary>查找使用所提供的所有者类型注册的事件的所有路由事件标识符。</summary>
        <returns>如果找到任何匹配项，则返回匹配路由事件标识符的数组；否则返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为特定路由事件注册类处理程序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">声明类处理的类的类型。</param>
        <param name="routedEvent">要处理的事件的路由事件标识符。</param>
        <param name="handler">对类处理程序实现的引用。</param>
        <summary>为特定路由事件注册类处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类处理是一项功能，可用于路由事件，包括使用路由事件支持实现的附加的事件。 类处理程序就像存在的所有实例的类的静态处理程序。 由于是静态的处理程序，不能更改实例属性直接与类处理程序，但可以访问通过实例`sender`参数和/或事件数据。  
  
 在实例处理程序之前调用类处理程序。 您可以实现的类处理程序已将事件标记为已处理的行为。 因此，除非专门为已处理的事件注册的实例处理程序，不会调用类处理的事件的实例处理程序。  
  
 许多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基元素事件提供类处理虚方法。 可以通过重写继承的基类的类中的这些方法，实现类处理而无需调用<xref:System.Windows.EventManager.RegisterClassHandler%2A>在静态构造函数中。 通常，这些类处理方法的输入事件存在，并且具有以"On"开头，且正进行类处理的事件的名称结尾的名称。  
  
 有关类处理的详细信息，请参阅[路由事件标记为已处理，和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 使用此签名，类处理程序将注册要调用仅在响应未处理的事件。 您还可以注册类处理程序调用，即使事件自变量标记为已处理，通过使用<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>签名，使用`handledEventsToo`设置为`true`。  
  
   
  
## Examples  
 下面的示例添加的处理程序<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>，则调用<xref:System.Windows.EventManager.RegisterClassHandler%2A>。  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">声明类处理的类的类型。</param>
        <param name="routedEvent">要处理的事件的路由事件标识符。</param>
        <param name="handler">对类处理程序实现的引用。</param>
        <param name="handledEventsToo">如果即使已将路由事件的参数标记为已处理时也调用此类处理程序，则为 <see langword="true" />；如果保留不对任何标记为已处理的事件调用处理程序的默认行为，则为 <see langword="false" />。</param>
        <summary>使用处理事件数据已标记为已处理的事件的选项，为特定路由事件注册类处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类处理是一项功能，可用于路由事件，包括使用路由事件支持实现的附加的事件。 类处理程序就像存在的所有实例的类的静态处理程序。 由于是静态的处理程序，不能更改实例属性直接与类处理程序，但可以访问通过实例`sender`参数和/或事件数据。  
  
 在实例处理程序之前调用类处理程序。 您可以实现的类处理程序已将事件标记为已处理的行为。 因此，除非专门为已处理的事件注册的实例处理程序，不会调用类处理的事件的实例处理程序。  
  
 许多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基元素事件提供类处理虚方法。 可以通过重写继承的基类的类中的这些方法，实现类处理而无需调用<xref:System.Windows.EventManager.RegisterClassHandler%2A>在静态构造函数中。 通常，这些类处理方法的输入事件存在，并且具有以"On"开头，且正进行类处理的事件的名称结尾的名称。  
  
 有关类处理的详细信息，请参阅[路由事件标记为已处理，和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 使用此签名，类处理程序可以注册已处理的事件时调用通过设置`handledEventsToo`设置为`true`。 通常情况下，仅当你尝试解决问题，例如鼠标或键盘事件从输入系统处理的已知的处理问题应进行此操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">路由事件的名称。 该名称在所有者类型中必须是唯一的，并且不能为 <see langword="null" /> 或空字符串。</param>
        <param name="routingStrategy">作为枚举值的事件的路由策略。</param>
        <param name="handlerType">事件处理程序的类型。 该类型必须为委托类型，并且不能为 <see langword="null" />。</param>
        <param name="ownerType">路由事件的所有者类类型。 该类型不能为 <see langword="null" />。</param>
        <summary>向 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 事件系统注册新的路由事件。</summary>
        <returns>新注册的路由事件的标识符。 现在可将该标识符对象存储为类中的静态字段，然后将其用作将处理程序附加到事件的方法的参数。 路由事件标识符也用于其他事件系统 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法的返回值创建一个唯一的静态声明<xref:System.Windows.RoutedEvent>标识符字段。 此字段应存储在所有者类型。  
  
 有了相当多的约定和与如何路由事件相关联的最佳做法应名为、 注册，并在类中公开。 有关详细信息，请参阅[路由事件概述](~/docs/framework/wpf/advanced/routed-events-overview.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
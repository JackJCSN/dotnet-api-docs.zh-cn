<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c23c281fad327a8782e15b932a4c0347858871" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64185575" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ee67f-101">为希望通过 WeakEvent 模式和 <see cref="T:System.Windows.WeakEventManager" /> 接收事件的类提供事件侦听支持。</span><span class="sxs-lookup"><span data-stu-id="ee67f-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee67f-102"><xref:System.Windows.WeakEventManager> （调度程序） 将事件转发通过调用<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>类来实现此接口，并且，通过调用添加为侦听器方法<xref:System.Windows.WeakEventManager>事先方法。</span><span class="sxs-lookup"><span data-stu-id="ee67f-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="ee67f-103">WeakEvent 模式的主要原因是当事件源包含的事件侦听器可能独立对象生存期。</span><span class="sxs-lookup"><span data-stu-id="ee67f-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="ee67f-104">使用的中央事件调度<xref:System.Windows.WeakEventManager>启用的处理程序侦听器进行垃圾收集 （或手动清除） 即使源对象生存期超过了侦听器。</span><span class="sxs-lookup"><span data-stu-id="ee67f-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="ee67f-105">与此相反，普通事件挂钩使用`+=`或等效的特定于语言的事件语法会导致可能仍连接的源来保存对处理程序的强引用。</span><span class="sxs-lookup"><span data-stu-id="ee67f-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="ee67f-106">这会使侦听器引用进行垃圾回收中及时。</span><span class="sxs-lookup"><span data-stu-id="ee67f-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="ee67f-107">源和侦听器之间的关系建议使用此模式的一种常见情况是来自源的数据绑定的更新事件的处理。</span><span class="sxs-lookup"><span data-stu-id="ee67f-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="ee67f-108">WeakEvent 模式可用于侦听的外部的应用程序的事件。</span><span class="sxs-lookup"><span data-stu-id="ee67f-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="ee67f-109">只需定义<xref:System.Windows.WeakEventManager>，提供在侦听行为<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>，并使用<xref:System.Windows.WeakEventManager>附加处理程序引用而非`+=`。</span><span class="sxs-lookup"><span data-stu-id="ee67f-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="ee67f-110">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ee67f-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="ee67f-111">发出该事件的对象。</span><span class="sxs-lookup"><span data-stu-id="ee67f-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="ee67f-112">事件数据。</span><span class="sxs-lookup"><span data-stu-id="ee67f-112">Event data.</span></span></param>
        <summary><span data-ttu-id="ee67f-113">接收集中事件管理器中的事件。</span><span class="sxs-lookup"><span data-stu-id="ee67f-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="ee67f-114">如果侦听器已对事件进行了处理，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ee67f-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="ee67f-115">在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 中，<see cref="T:System.Windows.WeakEventManager" /> 处理为侦听器未处理的事件注册侦听器被视为错误。</span><span class="sxs-lookup"><span data-stu-id="ee67f-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="ee67f-116">无论如何，如果此方法接收到它未能识别或处理的事件，它都应该返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ee67f-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ee67f-117">下面的示例实现<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>以便为两个假设事件提供 WeakEvent 模式支持`ClockwiseSpin`并`CounterclockwiseSpin`，每个包含专用<xref:System.Windows.WeakEventManager>（未显示）。</span><span class="sxs-lookup"><span data-stu-id="ee67f-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="ee67f-118">此实现会调用类处理程序存根 （stub） 为每个受支持的事件，将事件数据转换 (在这种情况下两个事件共享事件数据类型`SpinEventArgs`)。</span><span class="sxs-lookup"><span data-stu-id="ee67f-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="ee67f-119">实现返回`false`如果所接收的事件不是一个预期。</span><span class="sxs-lookup"><span data-stu-id="ee67f-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ee67f-120">此方法旨在接收所有可能的事件接收方的侦听器列表中。</span><span class="sxs-lookup"><span data-stu-id="ee67f-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="ee67f-121">尤其是在实现正在侦听的多个事件的类，您必须检查传入的类型<paramref name="managerType" />这样才能知道哪个事件调用的参数对应于。</span><span class="sxs-lookup"><span data-stu-id="ee67f-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="ee67f-122">这就是原因要模式的一部分的每个事件必须有一个专用<see cref="T:System.Windows.WeakEventManager" />。</span><span class="sxs-lookup"><span data-stu-id="ee67f-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="ee67f-123">此外，<paramref name="e" />参数的类型为常规<see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ee67f-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="ee67f-124">因此，按顺序获取事件数据从任何特定属性，您的实现需要强制转换为特定事件的数据类型。</span><span class="sxs-lookup"><span data-stu-id="ee67f-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
<span data-ttu-id="ee67f-125">通常情况下，在基于事件的标识检查后<see cref="T:System.Windows.WeakEventManager" />类型，您的实现应调用私有类处理程序。</span><span class="sxs-lookup"><span data-stu-id="ee67f-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="ee67f-126">类处理程序可能是完全相同的类处理程序用于处理该事件侦听器，通过添加的常规事件模式添加<see langword="+=" />到发送方上的事件。</span><span class="sxs-lookup"><span data-stu-id="ee67f-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="ee67f-127">下面的示例部分提供了一个大致的实现模板。</span><span class="sxs-lookup"><span data-stu-id="ee67f-127">The following example section provides a rough implementation template.</span></span></para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
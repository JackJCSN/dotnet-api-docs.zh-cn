<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99374b25565fd88ac0348a8ba3946202e9ec050a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70571758" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含互斥的 <see cref="T:System.Windows.VisualState" /> 对象和用于从一种状态转移到另一种状态的 <see cref="T:System.Windows.VisualTransition" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每<xref:System.Windows.VisualStateGroup>个都包含一个<xref:System.Windows.VisualState>对象的集合。 <xref:System.Windows.VisualState>包含<xref:System.Windows.Media.Animation.Storyboard>对象的集合，这些对象指定控件在处于某种状态时控件的外观如何变化。 例如，当按<xref:System.Windows.Controls.Button>下时，外观可能略有不同于未按下状态。 定义的<xref:System.Windows.Controls.Button>两个状态对应于按下（`"Pressed"`），而不是（`"Normal"`）。  
  
 您可以<xref:System.Windows.VisualState>通过设置控件的`VisualStateManager.VisualStateGroups`附加属性来添加到控件。 您将在同一<xref:System.Windows.VisualStateGroup>中放置彼此互斥的状态。 例如， <xref:System.Windows.Controls.CheckBox>有两个<xref:System.Windows.VisualStateGroup>对象。 其中一个包含状态、 `Normal` `MouseOver` `Pressed`、、和`Disabled`。 另一个包含状态、 `Checked` `UnChecked`、和`Indeterminate`。 `MouseOver` `MouseOver`可以同时处于`Pressed`状态，但它不能同时处于和状态中。 `UnChecked` <xref:System.Windows.Controls.CheckBox>  
  
 虽然您可以将<xref:System.Windows.VisualState>对象添加到任何元素，但它们是使其他人可以重新定义的视觉行为<xref:System.Windows.Controls.Control>的有用方法。 如果创建使用的<xref:System.Windows.Controls.ControlTemplate>自定义控件，则可以通过<xref:System.Windows.TemplateVisualStateAttribute>在其类定义上添加来指定控件可以处于的状态。 然后，为控件创建新<xref:System.Windows.Controls.ControlTemplate>的任何人都可以<xref:System.Windows.VisualState>将对象添加到模板中。 <xref:System.Windows.TemplateVisualStateAttribute>使设计器工具（如 Expression Blend）能够公开控件的状态。 同一中<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> <xref:System.Windows.VisualStateGroup>具有相同的状态。  
  
 有关如何<xref:System.Windows.VisualStateGroup> <xref:System.Windows.Controls.ControlTemplate>在中使用对象的详细信息，请参阅[通过创建 system.windows.controls.controltemplate> 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 有关如何创建使用的<xref:System.Windows.VisualStateManager>控件的详细信息，请参阅[创建具有可自定义外观的控件](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
  
 属性包含<xref:System.Windows.VisualTransition>对象，这些对象在控件在中<xref:System.Windows.VisualStateGroup>定义的状态之间过渡时应用。 <xref:System.Windows.VisualStateGroup.Transitions%2A>  
  
   
  
## Examples  
 下面的示例<xref:System.Windows.Controls.Button>为包含一个<xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Grid>的创建了一个简单的。 它还包含一个<xref:System.Windows.VisualStateGroup>名`CommonStates`为的，用于`MouseOver`定义`Normal`和状态。 还具有一个<xref:System.Windows.VisualTransition> ，它指定<xref:System.Windows.Controls.Grid>在用户将鼠标指针移到上<xref:System.Windows.Controls.Button>时，将从绿色更改为红色。 <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateGroup" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Windows.VisualState" Usage="System.Windows.VisualStateGroup.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</summary>
        <value>当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanged : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanged : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件转换为其他状态后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件在控件转换为新状态并<xref:System.Windows.VisualStateGroup.CurrentStateChanging>发生事件后发生。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanging : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanging : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件开始向其他状态转换时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件开始转换状态时发生此事件。 <xref:System.Windows.VisualTransition>如果应用于状态更改，则在转换开始时发生此事件。 如果未应用，则此事件在控件转换为新状态之后但在<xref:System.Windows.VisualStateGroup.CurrentStateChanged>事件之前发生。 <xref:System.Windows.VisualTransition>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualStateGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualStateGroup" /> 的名称。</summary>
        <value><see cref="T:System.Windows.VisualStateGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件作者通过<xref:System.Windows.TemplateVisualStateAttribute>在其类定义上添加来指定控件可以处于的状态。 同一中<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> <xref:System.Windows.VisualStateGroup>具有相同的状态。 将的设置 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> 为属性的值。 <xref:System.Windows.VisualStateGroup> <xref:System.Windows.VisualStateGroup.Name%2A>  
  
   
  
## Examples  
 下面的示例创建两<xref:System.Windows.VisualStateGroup>个名为`CommonStates`和`FocusStates`的对象。 控件将始终处于每个<xref:System.Windows.VisualStateGroup>中的一种状态。 有关完整示例，请参阅[通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.States : System.Collections.IList" Usage="System.Windows.VisualStateGroup.States" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</summary>
        <value>互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例<xref:System.Windows.Controls.Button>为包含一个<xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Grid>的创建了一个简单的。 它还包含一个<xref:System.Windows.VisualStateGroup>名`CommonStates`为的，用于`MouseOver`定义`Normal`和状态。 还具有一个<xref:System.Windows.VisualTransition> ，它指定<xref:System.Windows.Controls.Grid>在用户将鼠标指针移到上<xref:System.Windows.Controls.Button>时，将从绿色更改为红色。 <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transitions : System.Collections.IList" Usage="System.Windows.VisualStateGroup.Transitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.VisualTransition" /> 对象的集合。</summary>
        <value><see cref="T:System.Windows.VisualTransition" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.VisualTransition>控件在<xref:System.Windows.VisualStateGroup.Transitions%2A>中定义<xref:System.Windows.VisualStateGroup>的状态之间过渡时，将应用中的对象。  
  
   
  
## Examples  
 下面的示例<xref:System.Windows.Controls.Button>为包含一个<xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Grid>的创建了一个简单的。 它还包含一个<xref:System.Windows.VisualStateGroup>名`CommonStates`为的，用于`MouseOver`定义`Normal`和状态。 还具有一个<xref:System.Windows.VisualTransition> ，它指定<xref:System.Windows.Controls.Grid>在用户将鼠标指针移到上<xref:System.Windows.Controls.Button>时，将从绿色更改为红色。 <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="RoutedEventHandler" FullName="System.Windows.RoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13694438e63d57179a54743222bb31b3b9df638e" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64184880" /></Metadata><TypeSignature Language="C#" Value="public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RoutedEventHandler(sender As Object, e As RoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RoutedEventHandler(System::Object ^ sender, RoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RoutedEventHandler = delegate of obj * RoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件处理程序所附加到的对象。</param>
    <param name="e">事件数据。</param>
    <summary>表示将处理各种路由事件的方法，这些路由事件不包含除所有路由事件共有数据之外的其他特定事件数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventHandler>委托使用的任何路由事件的不会报告中的事件数据的特定于事件的信息。 有许多这类路由的事件;突出显示的示例包括<xref:System.Windows.Controls.Primitives.ButtonBase.Click>和<xref:System.Windows.FrameworkElement.Loaded>。  
  
 编写为而不是一种通用的路由事件处理程序时最值得注意的区别[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件是`sender`的事件 （该处理程序是附加并调用其中的元素） 不能将视为必须是源事件。 源被报告为事件数据中的属性 (<xref:System.Windows.RoutedEventArgs.Source%2A>)。 之间的差异`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是路由到不同的元素，在遍历元素树路由事件的事件的结果。  
  
 你可以使用`sender`或<xref:System.Windows.RoutedEventArgs.Source%2A>对象引用如果你特意不感兴趣的直接或浮升路由事件的路由行为，并且只想要处理路由事件在其第一次发生的位置的元素。 在此情况下，`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是相同的对象。  
  
 如果你确实想要充分利用路由事件的固有功能，并相应地编写您的处理程序，编写事件处理程序时将使用的事件数据的两个最重要的属性是<xref:System.Windows.RoutedEventArgs.Source%2A>和<xref:System.Windows.RoutedEventArgs.Handled%2A>。  
  
 对于某些输入事件的组合和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件类，引发事件的元素不是有机会对其进行处理的第一个元素。 如果输入的事件的预览版本的事件，然后元素树的根的第一次机会，可以设置<xref:System.Windows.RoutedEventArgs.Handled%2A>到`true`共享的事件数据中，并且会影响如何将输入的事件报告给其事件路由中的其余元素。 按期望引发处理行为可以使特定路由的事件不是外观的预览。 有关详细信息，请参阅[预览事件](~/docs/framework/wpf/advanced/preview-events.md)并[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
<Type Name="RoutedEventHandler" FullName="System.Windows.RoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="210035747360431159231deead302140e8df9cba" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70591898" /></Metadata><TypeSignature Language="C#" Value="public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RoutedEventHandler(sender As Object, e As RoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RoutedEventHandler(System::Object ^ sender, RoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RoutedEventHandler = delegate of obj * RoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件处理程序所附加到的对象。</param>
    <param name="e">事件数据。</param>
    <summary>表示将处理各种路由事件的方法，这些路由事件不包含除所有路由事件共有数据之外的其他特定事件数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventHandler>委托用于任何不报告事件数据中特定于事件的信息的路由事件。 这类路由事件很多;突出的示例<xref:System.Windows.Controls.Primitives.ButtonBase.Click>包括<xref:System.Windows.FrameworkElement.Loaded>和。  
  
 写入路由事件的处理程序与常规[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件相比，最值得注意的区别在于`sender` ，事件（附加和调用处理程序的元素）不一定是源事件的。 源在事件数据（<xref:System.Windows.RoutedEventArgs.Source%2A>）中报告为属性。 `sender` 与 <xref:System.Windows.RoutedEventArgs.Source%2A> 之间的区别在于，在通过元素树遍历路由事件的过程中，将事件路由到不同的元素。  
  
 如果对直接或`sender`冒泡<xref:System.Windows.RoutedEventArgs.Source%2A>路由事件的路由行为感兴趣，并且仅打算在第一次引发元素的元素上处理路由事件，则可以将或用于对象引用。 在这种情况`sender`下<xref:System.Windows.RoutedEventArgs.Source%2A> ，和是相同的对象。  
  
 如果您确实要利用路由事件的固有功能并相应地编写处理程序，则在编写事件处理程序时将使用的事件数据的两个最重要的属性为<xref:System.Windows.RoutedEventArgs.Source%2A>和。 <xref:System.Windows.RoutedEventArgs.Handled%2A>  
  
 对于某些输入事件和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控件类的组合，引发事件的元素不是有机会处理该事件的第一个元素。 如果输入事件具有事件的预览版本，则元素树的根具有第一次机会，可以在共享事件数据<xref:System.Windows.RoutedEventArgs.Handled%2A>中`true`将其设置为，并且可能会影响将输入事件报告给其事件路由中的剩余元素的方式。 预览处理行为可以使特定路由事件不会按预期方式引发。 有关详细信息，请参阅[预览事件](~/docs/framework/wpf/advanced/preview-events.md)和[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>

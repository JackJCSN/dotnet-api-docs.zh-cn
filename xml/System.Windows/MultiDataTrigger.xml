<Type Name="MultiDataTrigger" FullName="System.Windows.MultiDataTrigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba6cebb6e7bdb133af0994098d100a833fdef91d" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70602099" /></Metadata><TypeSignature Language="C#" Value="public sealed class MultiDataTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MultiDataTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.MultiDataTrigger" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MultiDataTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class MultiDataTrigger sealed : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type MultiDataTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个触发器，它会在绑定数据满足一组条件时应用属性值或执行操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对象类似<xref:System.Windows.MultiDataTrigger>于，只不过的条件基于绑定数据<xref:System.Windows.UIElement>的属性值而不是的属性值。 <xref:System.Windows.MultiTrigger> <xref:System.Windows.MultiDataTrigger> 在中<xref:System.Windows.Condition.Value%2A>，当数据项的属性值与指定的相匹配时，满足条件。 <xref:System.Windows.MultiDataTrigger> 然后，可以使用 setter 或<xref:System.Windows.TriggerBase.EnterActions%2A>和<xref:System.Windows.TriggerBase.ExitActions%2A>属性在满足所有条件时应用更改或启动操作。  
  
 对象的<xref:System.Windows.MultiDataTrigger.Setters%2A>属性只能包含对象。 <xref:System.Windows.Setter>  <xref:System.Windows.MultiDataTrigger> 将子对象添加到对象 <xref:System.Windows.MultiDataTrigger> 会将该子级隐式添加到对象的 <xref:System.Windows.SetterBaseCollection> 。 <xref:System.Windows.Setter> <xref:System.Windows.MultiDataTrigger> <xref:System.Windows.EventSetter>对象不受支持;仅<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。  
  
 有关何时使用触发器以及何时使用其他方法的信息，请参阅[数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
   
  
## Examples  
 在下面的示例中， <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>属性<xref:System.Collections.ObjectModel.ObservableCollection%601>被绑定到`Places`对象的`Place` 。 `Place`对象具有属性`Name`和`State`。 不显示`Place`和`Places`的定义。  
  
 每个都<xref:System.Windows.Controls.ListBoxItem> `Place`显示一个对象。 <xref:System.Windows.Controls.ListBox> 示例<xref:System.Windows.Style>中的将应用于每个<xref:System.Windows.Controls.ListBoxItem>。 `State` <xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Condition>元素`Name` 指定， `Place` 如果数据项 `Portland` 的和分别为和，则设置相应的背景。 `OR`  <xref:System.Windows.MultiDataTrigger>到`Cyan`。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.TriggerBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MultiDataTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.MultiDataTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MultiDataTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.MultiDataTrigger" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conditions">
      <MemberSignature Language="C#" Value="public System.Windows.ConditionCollection Conditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ConditionCollection Conditions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.MultiDataTrigger.Conditions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conditions As ConditionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ConditionCollection ^ Conditions { System::Windows::ConditionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Conditions : System.Windows.ConditionCollection" Usage="System.Windows.MultiDataTrigger.Conditions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ConditionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Condition" /> 对象的集合。 在满足集合中的所有条件时应用对属性值的更改。</summary>
        <value><see cref="T:System.Windows.Condition" /> 对象的集合。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对象类似<xref:System.Windows.MultiDataTrigger>于，只不过的条件基于绑定数据<xref:System.Windows.UIElement>的属性值而不是的属性值。 <xref:System.Windows.MultiTrigger> <xref:System.Windows.MultiDataTrigger> 在中<xref:System.Windows.Condition.Value%2A>，当数据项的属性值与指定的相匹配时，满足条件。 <xref:System.Windows.MultiDataTrigger> 该值首先转换为绑定值的类型（如果可能），然后使用`Object.Equals`方法对这两个值进行比较。 当<xref:System.Windows.MultiTrigger>所有条件都为 true 时，应用关联的 setter 或操作（二元`AND`运算）。  
  
 对于，该集合中的每个条件都必须设置<xref:System.Windows.Condition.Binding%2A>和<xref:System.Windows.Condition.Value%2A>属性。 <xref:System.Windows.MultiDataTrigger> 有关详细信息，请参阅 <xref:System.Windows.Condition.Binding%2A>。  
  
<a name="xamlPropertyElementUsage_Conditions"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Conditions>  
    zeroOrMoreConditions  
  </object.Conditions>  
</object>  
```  
  
<a name="xamlValues_Conditions"></a>   
## <a name="xaml-values"></a>XAML 值  
 *zeroOrMoreConditions*  
 零个或<xref:System.Windows.Condition>多个对象。  
  
   
  
## Examples  
 在下面的示例中， <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>属性<xref:System.Collections.ObjectModel.ObservableCollection%601>被绑定到`Places`对象的`Place` 。 `Place`对象具有属性`Name`和`State`。 不显示`Place`和`Places`的定义。  
  
 每个都<xref:System.Windows.Controls.ListBoxItem> `Place`显示一个对象。 <xref:System.Windows.Controls.ListBox> 示例<xref:System.Windows.Style>中的将应用于每个<xref:System.Windows.Controls.ListBoxItem>。 `State` <xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Condition>元素`Name` 指定， `Place` 如果数据项 `Portland` 的和分别为和，则设置相应的背景。 `OR`  <xref:System.Windows.MultiDataTrigger>到`Cyan`。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.MultiDataTrigger.Setters" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.MultiDataTrigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.MultiDataTrigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Setter" /> 对象的集合，这些对象描述在满足 <see cref="T:System.Windows.MultiDataTrigger" /> 的所有条件时应用的属性值。</summary>
        <value><see cref="T:System.Windows.Setter" /> 对象的集合。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.MultiDataTrigger>使您能够通过使用<xref:System.Windows.TriggerBase.EnterActions%2A>或<xref:System.Windows.TriggerBase.ExitActions%2A>属性启动操作，或在绑定数据满足一组条件<xref:System.Windows.Setter>时使用对象设置属性值。  
  
 如果在相同或<xref:System.Windows.Setter>不同的 setter 集合中有两个对象设置相同的属性<xref:System.Windows.Setter> ，则使用最后声明的。  
  
 将子对象添加到对象 <xref:System.Windows.MultiDataTrigger> 会将该子级隐式添加到对象的 <xref:System.Windows.SetterBaseCollection> 。 <xref:System.Windows.Setter> <xref:System.Windows.MultiDataTrigger> <xref:System.Windows.EventSetter>对象不受支持;仅<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
    zeroOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML 值  
 *zeroOrMoreSetters*  
 零个或<xref:System.Windows.Setter>多个对象。  
  
   
  
## Examples  
 在下面的示例中， <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>属性<xref:System.Collections.ObjectModel.ObservableCollection%601>被绑定到`Places`对象的`Place` 。 `Place`对象具有属性`Name`和`State`。 不显示`Place`和`Places`的定义。  
  
 每个都<xref:System.Windows.Controls.ListBoxItem> `Place`显示一个对象。 <xref:System.Windows.Controls.ListBox> 示例<xref:System.Windows.Style>中的将应用于每个<xref:System.Windows.Controls.ListBoxItem>。 `State` <xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Condition>元素`Name` 指定， `Place` 如果数据项 `Portland` 的和分别为和，则设置相应的背景。 `OR`  <xref:System.Windows.MultiDataTrigger>到`Cyan`。  
  
 请注意`<MultiDataTrigger.Setters>` ，是隐式的。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.MultiDataTrigger.Setters" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.MultiDataTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要添加的子对象。</param>
        <summary>添加子对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.MultiDataTrigger> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.MultiDataTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要添加到对象的文本。</param>
        <summary>将节点的文本内容添加到对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.MultiDataTrigger> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98168fe8a5962d9aba67f7eb67ddd708a69e45ce" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69432785" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理控件的状态以及用于状态过渡的逻辑。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager>利用, 您可以指定控件的状态、控件在处于某种状态时的外观, 以及控件更改状态的时间。 例如, 当按<xref:System.Windows.Controls.Button>下时, 外观可能略有不同于未按下状态。 定义的<xref:System.Windows.Controls.Button>两个状态对应于按下 (`"Pressed"`), 而不是 (`"Normal"`)。 当控件处于状态时, 该控件的外观由<xref:System.Windows.VisualState>定义。 <xref:System.Windows.VisualState>包含<xref:System.Windows.Media.Animation.Storyboard>对象的集合, 这些对象指定控件在处于该状态时控件的外观如何变化。 通过在控件上设置`VisualStateManager.VisualStateGroups`附加属性, 可以向控件添加可视状态。 每<xref:System.Windows.VisualStateGroup>个都包含互斥<xref:System.Windows.VisualState>的对象集合。 也就是说, 控件始终处于每个<xref:System.Windows.VisualStateGroup>中的一个状态。  
  
 <xref:System.Windows.VisualStateManager>还允许您指定控件何时进入特定状态。 你应调用以更改状态的方法取决于你的方案。 如果创建在其<xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>中使用的控件, 请调用<xref:System.Windows.VisualStateManager.GoToState%2A>方法。 有关如何创建使用的<xref:System.Windows.VisualStateManager>控件的详细信息, 请参阅[创建具有可自定义外观的控件](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。 <xref:System.Windows.VisualStateManager>如果在<xref:System.Windows.VisualStateManager.GoToElementState%2A>外<xref:System.Windows.Controls.ControlTemplate>使用 (例如<xref:System.Windows.VisualStateManager> , 如果在<xref:System.Windows.Controls.UserControl>或单个元素中使用或), 请调用方法。 在任一情况下, <xref:System.Windows.VisualStateManager>都将执行适当地启动和停止与所涉及状态关联的情节提要所需的逻辑。 例如, 假设控件定义状态, `State1`并且`State2`每个都具有与之关联的情节提要。 如果控件`State1`在中, 并且您传递`State2`到<xref:System.Windows.VisualStateManager.GoToState%2A>或<xref:System.Windows.VisualStateManager.GoToElementState%2A>, 则<xref:System.Windows.VisualStateManager>会在`State2`中启动情节提要, 并停止`State1`中的情节提要。  
  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 附带<xref:System.Windows.VisualStateManager>的控件用于更改可视状态。 为附带的控件<xref:System.Windows.Controls.ControlTemplate>创建<xref:System.Windows.VisualState>时, 可以将对象添加到控件的, 以指定控件在特定状态下的外观。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Controls.ControlTemplate> 若要查找附带[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]的控件的可视状态的名称, 请参阅[控件样式和模板](~/docs/framework/wpf/controls/control-styles-and-templates.md)。 控件的逻辑处理状态之间的转换, 因此您无需执行任何其他操作, 只需在<xref:System.Windows.VisualState>新<xref:System.Windows.Controls.ControlTemplate>中定义对象。 有关如何为现有控件创建控件模板的详细信息, 请参阅[通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 如果要实现自己的逻辑以便在状态之间转换, 则必须从<xref:System.Windows.VisualStateManager>继承, <xref:System.Windows.VisualStateManager.GoToStateCore%2A>重写<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType>方法, 并在使用自定义逻辑的控件上设置附加属性。  
  
   
  
## Examples  
 下面的示例创建一个<xref:System.Windows.Shapes.Rectangle> , 并将<xref:System.Windows.VisualStateGroup>一个`CommonStates`名为`VisualStateManager.VisualStatesGroups`的添加到附加属性。 该`MouseOver`示例定义中<xref:System.Windows.VisualState> `Normal` 的和对象。`CommonStates` <xref:System.Windows.VisualStateGroup> 当用户将鼠标指针移到上<xref:System.Windows.Shapes.Rectangle>时, 它将在半秒内从红色更改为绿色。 当用户将鼠标移出矩形时, <xref:System.Windows.Controls.Grid>会立即改回为红色。 请注意, `Normal`状态不<xref:System.Windows.Media.Animation.Storyboard>定义。 不<xref:System.Windows.Media.Animation.Storyboard>是必需的, 因为<xref:System.Windows.Shapes.Rectangle>当`Normal`从`MouseOver`状态转换到<xref:System.Windows.Media.SolidColorBrush.Color%2A> <xref:System.Windows.Media.Animation.Storyboard> 状态时`MouseOver` , 将停止的, 并返回的属性<xref:System.Windows.Media.SolidColorBrush>为红色。  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 下面的示例演示上一示例中定义的事件处理程序, 并调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>方法以在状态之间转换。 如果上一个示例中的矩形是的一部分<xref:System.Windows.Controls.ControlTemplate>, 则此示例将需要<xref:System.Windows.VisualStateManager.GoToState%2A>调用方法。  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置在控件的状态间转换的 <see cref="T:System.Windows.VisualStateManager" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>为`null`,则<xref:System.Windows.VisualStateManager>使用自己的逻辑在状态之间转换。 如果要实现自己的逻辑以便在不同状态之间进行转换, 请创建一个继承自<xref:System.Windows.VisualStateManager>的类, <xref:System.Windows.VisualStateManager.GoToStateCore%2A>并重写方法。 若要使用自定义类, 请<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>将属性设置为自定义类型的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">要从中获取 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性的元素。</param>
        <summary>获取 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性。</summary>
        <returns>切换控件状态的可视状态管理器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">要从中获取 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 附加属性的元素。</param>
        <summary>获取 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 附加属性。</summary>
        <returns>与指定对象关联的 <see cref="T:System.Windows.VisualStateGroup" /> 对象的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <param name="stateName">要切换到的状态。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使元素在两个状态间转换。 使用此方法转换由应用程序（而非控件）定义的状态。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.VisualStateManager> <xref:System.Windows.DataTemplate>调用方法以更改 (例如, 如果在或<xref:System.Windows.Window>中使用, 则为) 上的元素的状态。 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 如果要在其<xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>中使用的控件中更改状态, 请调用方法。<xref:System.Windows.VisualStateManager.GoToState%2A>  
  
   
  
## Examples  
 下面的示例创建一个应用程序, 该应用程序提示用户推测1到100之间的一个数字。  当用户输入数字时, 应用程序将指示推测的值是过高、过低还是正确。  下面[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的操作为应用程序创建用户界面并定义四种状态`TooLow`: `TooHigh`、 `Correct`、和`Guessing`。 当应用程序启动时, 它`Guessing`处于状态。 。  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 下面的代码显示了应用程序的逻辑。  当用户输入数字并单击该按钮时, 应用程序会调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>以将`TooHigh`转换为`TooLow`、或`Correct`以向用户提供有关推测的反馈。  若要尝试此示例, 请`GenerateNumber`在应用程序启动时调用方法。  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="stateName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">要进行状态过渡的控件。</param>
        <param name="stateName">要切换到的状态。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在控件的两种状态之间切换。 使用此方法转换具有 <see cref="T:System.Windows.Controls.ControlTemplate" /> 的控件的状态。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要在其<xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>中使用的控件中更改状态, 请调用方法。<xref:System.Windows.VisualStateManager.GoToState%2A> 调用方法以更改上的元素<xref:System.Windows.Controls.ControlTemplate>的状态 (例如<xref:System.Windows.VisualStateManager> , 如果在<xref:System.Windows.Controls.UserControl>或单个元素中使用或)。 <xref:System.Windows.VisualStateManager.GoToElementState%2A>  
  
   
  
## Examples  
 下面的示例演示了一个控件, 该<xref:System.Windows.VisualStateManager.GoToState%2A>控件使用方法在状态之间转换。 有关完整示例, 请参阅[创建具有可自定义外观的控件](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="stateName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">要进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <param name="stateName">要过渡到的状态的名称。</param>
        <param name="group">状态所属的 <see cref="T:System.Windows.VisualStateGroup" />。</param>
        <param name="state">要过渡到的状态的表示形式。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使控件在状态间过渡。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法执行正确启动和停止与转换关联的情节提要的必要逻辑。 当控件调用<xref:System.Windows.VisualStateManager.GoToState%2A>更改其状态时, 将<xref:System.Windows.VisualStateManager>执行以下操作:  
  
-   首先, 如果<xref:System.Windows.VisualState>控件要过渡到的<xref:System.Windows.Media.Animation.Storyboard>具有, 则情节提要将开始。 然后, 如果<xref:System.Windows.VisualState>控件所来自的<xref:System.Windows.Media.Animation.Storyboard>具有, 则情节提要将结束。  
  
-   如果控件已经处于`stateName`状态, <xref:System.Windows.VisualStateManager.GoToState%2A>则不会执行任何操作, 将`true`返回。  
  
-   如果`stateName` `control`中不存在, `false` <xref:System.Windows.Controls.ControlTemplate> 则不会执行任何操作<xref:System.Windows.VisualStateManager.GoToState%2A> , 将返回。  
  
 您可以实现自己<xref:System.Windows.VisualStateManager>的, 以提供不同的逻辑以便在状态之间转换。 例如, 你可以更改前面所述的逻辑, 也可以提供逻辑来转换自定义动画类型。  若要实现<xref:System.Windows.VisualStateManager>, 请创建一个继承自<xref:System.Windows.VisualStateManager>的类, 并重<xref:System.Windows.VisualStateManager.GoToStateCore%2A>写方法。 若要使用自定义类, 请<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>将属性设置为自定义类型的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">发生 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 事件的对象。</param>
        <param name="oldState">控件要从其过渡的状态。</param>
        <param name="newState">控件要过渡到的状态。</param>
        <param name="control">正在进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <summary>在指定的 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 对象上引发 <see cref="T:System.Windows.VisualStateGroup" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在控件的<xref:System.Windows.Controls.ControlTemplate>上设置, `control`则参数将设置为拥有<xref:System.Windows.Controls.ControlTemplate>的控件。 <xref:System.Windows.VisualStateGroup>  `control` `null`如果在<xref:System.Windows.FrameworkElement>上设置, 则为, 并且应使用`stateGroupsRoot`参数。 <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="newState" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>当在<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />派生类中重写时, 请确保调用基类的<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />方法, 以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">发生 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 事件的对象。</param>
        <param name="oldState">控件要从其过渡的状态。</param>
        <param name="newState">控件要过渡到的状态。</param>
        <param name="control">正在进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <summary>在指定的 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 对象上引发 <see cref="T:System.Windows.VisualStateGroup" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在控件的<xref:System.Windows.Controls.ControlTemplate>上设置, `control`则参数将设置为拥有<xref:System.Windows.Controls.ControlTemplate>的控件。 <xref:System.Windows.VisualStateGroup>  `control` `null`如果在<xref:System.Windows.FrameworkElement>上设置, 则为, 并且应使用`stateGroupsRoot`参数。 <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="newState" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>当在<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />派生类中重写时, 请确保调用基类的<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />方法, 以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">要对其设置属性的对象。</param>
        <param name="value">切换控件状态的可视状态管理器。</param>
        <summary>设置 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualStateGroup" /> 对象的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 每<xref:System.Windows.VisualStateGroup>个都包含一个<xref:System.Windows.VisualState>对象的集合。 <xref:System.Windows.VisualState>包含<xref:System.Windows.Media.Animation.Storyboard>对象的集合, 这些对象指定控件在处于某种状态时控件的外观如何变化。 例如, 当按<xref:System.Windows.Controls.Button>下时, 外观可能略有不同于未按下状态。 定义的<xref:System.Windows.Controls.Button>两个状态对应于按下 (`"Pressed"`), 而不是 (`"Normal"`)。  
  
 您可以<xref:System.Windows.VisualState>通过设置控件的<xref:System.Windows.VisualStateManager.VisualStateGroups%2A>附加属性来添加到控件。 您将在同一<xref:System.Windows.VisualStateGroup>中放置彼此互斥的状态。 例如, <xref:System.Windows.Controls.CheckBox>有两个<xref:System.Windows.VisualStateGroup>对象。 其中一个包含状态、 `Normal` `MouseOver` `Pressed`、、和`Disabled`。 另一个包含状态、 `Checked` `UnChecked`、和`Indeterminate`。 `MouseOver` `MouseOver`可以同时处于`Pressed`状态, 但它不能同时处于和状态中。 `UnChecked` <xref:System.Windows.Controls.CheckBox>  
  
 虽然您可以将<xref:System.Windows.VisualState>对象添加到任何元素, 但它们是使其他人可以重新定义的视觉行为<xref:System.Windows.Controls.Control>的有用方法。 如果创建使用的<xref:System.Windows.Controls.ControlTemplate>自定义控件, 则可以通过<xref:System.Windows.TemplateVisualStateAttribute>在其类定义上添加来指定控件可以处于的状态。 然后, 为控件创建新<xref:System.Windows.Controls.ControlTemplate>的任何人都可以<xref:System.Windows.VisualState>将对象添加到模板中。 同一中<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> <xref:System.Windows.VisualStateGroup>具有相同的状态。  
  
 有关如何<xref:System.Windows.VisualStateGroup> <xref:System.Windows.Controls.ControlTemplate>在中使用对象的详细信息, 请参阅[通过创建 system.windows.controls.controltemplate> 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 有关如何创建使用的<xref:System.Windows.VisualStateManager>控件的详细信息, 请参阅[创建具有可自定义外观的控件](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
     
## Examples  
 下面的示例<xref:System.Windows.Controls.Button>为包含一个<xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Grid>的创建了一个简单的。 它还包含一个<xref:System.Windows.VisualStateGroup>名`CommonStates`为的, 用于`MouseOver`定义`Normal`和状态。 还具有一个<xref:System.Windows.VisualTransition> , 它指定<xref:System.Windows.Controls.Grid>在用户将鼠标指针移到上<xref:System.Windows.Controls.Button>时, 将从绿色更改为红色。 <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

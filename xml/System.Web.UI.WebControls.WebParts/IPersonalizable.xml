<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9762519573962218a7aa1fc2c8df4ccce38aea70" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69395359" /></Metadata><TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义用于应用程序和个性化状态的提取的附加管理功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了对控件属性使用`Personalizable`特性之外, 还可以为应用程序实现<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>其他管理功能并提取个性化设置状态。 例如, 需要管理私有状态信息的控件应实现此接口。 通过复杂的机制访问个性化数据的控件 (如自定义缓存解决方案、持久化到大型机的数据或 XML Web services) 也应该实现此接口。  
  
> [!IMPORTANT]
>  不应根据在 App_Code 目录中定义的类添加类型, 而是依赖于默认的二进制序列化机制。 基于 App_Code 的项目由于其程序集名称可在随机时间点发生更改, 因此不能一直以二进制可序列化。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>接口。 该示例包含一个 .aspx 页面, 该页面引用名为`UrlListWebPart`的 Web 部件控件。 下面的代码是该示例的 .aspx 文件。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 下面的代码是自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件的源。 应将此文件放置在 App_Code 目录下。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 在浏览器中加载页面。 键入一个名称来表示 URL, 然后添加以`http://`开头的实际 url, 然后单击 "**添加**" 按钮添加该 url。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示控件管理的自定义数据是否已经更改。</summary>
        <value>如果用 <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> 接口管理的自定义数据已经更改，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控件管理的数据已更改, 则会将该控件视为 "脏"。 如果控件`true` <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>通过接口所管理的自定义数据已更改, 则该控件应返回。 如果控件从此属性`true`返回, 则在属性值提取<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>过程中调用控件的接口方法实现。  
  
> [!NOTE]
>  在处理 POST 请求的后一阶段, 个性化设置基础结构会自动检查此属性。 但对于 GET 请求, 不会检查从<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性返回的值。 某些其他事件必须导致对任何控件状态将控件视为 "已更新", 而不只是要保存的数据<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>。 如果控件在获取请求期间可以将自身标记为 "已更新", 或者在某些非常特定的边界条件下的个性化设置基础结构在 get 请求期间认为控件 "更新<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> ", 则将始终调用。  
  
 控件可以引用其关联<xref:System.Web.UI.WebControls.WebParts.WebPartManager>的控件并<xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A>检查属性以确定当前范围。 控件的自定义数据的 "已更新" 状态应适合当前范围。  
  
   
  
## Examples  
 下面的代码示例演示<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性的用法。 该示例的第一部分是承载<xref:System.Web.UI.WebControls.WebParts.WebPart>控件的网页。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 该示例的第二部分是名<xref:System.Web.UI.WebControls.WebParts.WebPart> `UrlListWebPart`为的自定义控件的代码。 应将此文件放置在 App_Code 目录中以运行此示例。 请注意, 源代码实现了<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 在浏览器中加载页面。 键入一个名称来表示 URL, 然后添加以`http://`开头的实际 url, 然后单击 "**添加**" 按钮添加该 url。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">包含从基础数据存储区中加载的自定义范围确定数据的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />。</param>
        <summary>将自定义数据加载到控件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法在控件上调用, 以允许它将自定义数据加载到其自身中。 它还可以返回一个值, 该值指示是否必须将控件的自定义状态写回到基础数据存储区, 而不管页面上的任何其他个性化设置数据是否已更改。 控件可以设置自己的自定义属性, 并基于个性化字典中包含的值来执行其他内部逻辑。 将个性化设置数据应用于控件时, Web 部件控件集调用此方法。  
  
 还应注意<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>对象中包含的作用域和<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>作用域属性的合并行为。 `state`参数包含从基础数据存储区加载的自定义数据的合并表示形式。 在<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> "范围" 中, 在页面本身处于<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>范围内时, 先前添加的所有值都将可用。 在<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>作用域中, 如果与<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>个性化设置范围关联的值具有一个值 (当页<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>处于范围内时添加一个值), 当该页<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>处于范围内时, 还会有不同的值, 则个性化设置基础结构将仅在`state`参数<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>内包括范围内的值 (而<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>不是作用域值)。  
  
   
  
## Examples  
 下面的代码示例演示了自定义<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> <xref:System.Web.UI.WebControls.WebParts.WebPart>控件中方法的实现。 有关运行此示例所需的完整代码, 请参阅<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>类概述中的 "示例" 部分。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">包含从基础数据存储区中加载的自定义范围确定数据的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />。</param>
        <summary>在控件的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> 对象中保存自定义属性和内部状态信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服务器控件可以将其自己的自定义属性和内部状态信息<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>存储`state`在参数中指定的中。 此信息以一系列名称/值对的形式存储。 控件负责使用名称/值对, 在后续通过<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>方法对控件进行调用时, 它可以识别。  
  
 控件可以引用其关联<xref:System.Web.UI.WebControls.WebParts.WebPartManager>的控件并<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>检查对象, 以确定当前范围。 自定义状态信息应该适用于当前范围。 请注意, <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry>添加<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>到对象的每个值都应该与相应的作用域值相关联, 因为在合并<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>和<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>限定作用域的自定义数据时, 个性化设置基础结构依赖于这一点在<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>将其传递给方法之前。  
  
 使用 Web 部件的标准 ASP.NET 实现时, 控件必须确保位于状态字典中的对象可以由 ASP.NET <xref:System.Web.UI.ObjectStateFormatter>类进行序列化。 在实践中, 这意味着:  
  
-   基元 .NET Framework 类型、字符串和面向集合的 .NET Framework 类型 (如数组、数组列表、哈希表和混合字典) 会自动序列化。  
  
-   提供自己<xref:System.ComponentModel.TypeConverter>的类的自定义类型, 这些类可以序列化和反序列化字符串。  
  
-   可由<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>类进行序列化的自定义类型被视为可序列化。  
  
> [!IMPORTANT]
>  不应根据在 App_Code 目录中定义的类添加类型, 而是依赖于默认的二进制序列化机制。 基于 App_Code 的项目由于其程序集名称可在随机时间点发生更改, 因此不能一直以二进制可序列化。  
  
   
  
## Examples  
 下面的代码示例演示如何在<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>自定义<xref:System.Web.UI.WebControls.WebParts.WebPart>控件中实现方法。 有关运行此示例所需的完整代码, 请参阅<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>类概述中的 "示例" 部分。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

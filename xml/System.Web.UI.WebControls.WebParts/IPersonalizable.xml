<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="654722cd1d314fa0d612bc497e3192abe3a40033" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64073956" /></Metadata><TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义用于应用程序和个性化状态的提取的附加管理功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了使用之外`Personalizable`属性在控件的属性，控件还可以实现<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>用于应用程序和提取的个性化设置状态的其他管理功能。 例如，需要管理的私有状态信息的控件应实现此接口。 复杂的机制，例如自定义缓存解决方案，数据暂留到大型机或 XML Web 服务，通过访问个性化的数据的控件还应实现此接口。  
  
> [!IMPORTANT]
>  您不应添加基于在 App_Code 目录中定义的类的类型，则取决于默认二进制序列化机制。 基于 App_Code 的项目不一致地二进制序列化，因为，它们可以有其在随机点的时间更改的程序集名称。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>接口。 此示例由一个.aspx 页面，引用名为的 Web 部件控件组成`UrlListWebPart`。 以下代码是示例.aspx 文件。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 下面的代码是自定义源<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 应将此文件放在 App_Code 目录中。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 在浏览器页面加载。 键入名称来表示一个 URL，然后添加实际开头的 URL `http://`，然后单击**添加**按钮以添加此 URL。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示控件管理的自定义数据是否已经更改。</summary>
        <value>如果用 <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> 接口管理的自定义数据已经更改，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件管理的数据已更改，当控件被视为"脏"。 控制应返回`true`如果自定义数据的 it 管理通过<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>接口已更改。 如果控件将返回`true`此属性，该控件的从<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>在属性值提取过程中调用接口方法实现。  
  
> [!NOTE]
>  此属性会自动检查个性化设置基础结构的处理 POST 请求的后一阶段。 但是，对于 GET 请求，返回的值从<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性未选中状态。 一些其他事件必须已导致要被视为"脏"的任何控件状态-所管理的不只是数据的控件<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>-若要保存。 如果控件可以将自身标记为"脏"期间 GET 请求中，或者在某些非常特定的边界情况下的个性化设置基础结构中将控件视为"脏"期间 GET 请求中，然后<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>将始终调用。  
  
 控件可以引用其关联<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件，并检查<xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A>属性来确定当前作用域。 控件的自定义数据的"更新"状态应适用于当前作用域。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性。 该示例的第一部分是承载网页<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 该示例的第二部分是自定义代码<xref:System.Web.UI.WebControls.WebParts.WebPart>控件调用`UrlListWebPart`。 应将此文件放在要运行该示例的 App_Code 目录中。 请注意，源代码实现<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>属性。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 在浏览器页面加载。 键入名称来表示一个 URL，然后添加实际开头的 URL `http://`，然后单击**添加**按钮以添加此 URL。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">包含从基础数据存储区中加载的自定义范围确定数据的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />。</param>
        <summary>将自定义数据加载到控件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件，使其可以自定义数据加载到本身上调用此方法。 它还可以返回一个值，指示是否必须重新编写控件的自定义状态到基础数据存储区，无论是否已更改的页上的任何其他个性化设置数据。 控件可以设置自己的自定义属性并执行其他内部逻辑基于个性化设置字典中包含的值。 由 Web 部件控件集应用到控件的个性化设置数据时调用此方法。  
  
 您还应注意的合并行为<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-与作用域<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>-作用域属性中包含<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>对象。 `state`参数包含从基础数据存储区加载的自定义数据的合并表示形式。 在中<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>作用域，请在页面本身时之前添加的所有值<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>都范围应是可用。 在<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>作用域，如果与值相关联<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>个性化设置范围中具有一个值时页中，添加了<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>作用域和不同的值时在页面处于<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>作用域，然后将个性化设置基础结构仅包括<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>的作用域值 (而不是<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>作用域值) 内`state`参数。  
  
   
  
## Examples  
 下面的代码示例演示的实现<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>中自定义方法<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 运行此示例中所需的完整代码，请参阅示例部分中的<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>类概述。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">包含从基础数据存储区中加载的自定义范围确定数据的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />。</param>
        <summary>在控件的 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> 对象中保存自定义属性和内部状态信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服务器控件可以存储其自己的自定义属性和内部状态信息<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>中指定`state`参数。 信息存储为一系列的名称/值对。 要使用它可以在通过对控件所做的后续调用期间识别的名称/值对的控件负责<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>方法。  
  
 控件可以引用其关联<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件，并检查<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope>对象，以确定当前作用域。 自定义状态信息应适用于当前作用域。 请注意，每个<xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry>添加到值<xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>因为合并时的个性化设置基础结构依赖于此对象应与相应的范围值相关联<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>和<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-作用域自定义数据在之前将其传递给<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A>方法。  
  
 控件时使用的 Web 部件的标准 ASP.NET 实现，必须确保放置在状态字典中的对象，可以序列化由 ASP.NET<xref:System.Web.UI.ObjectStateFormatter>类。 在实践中，这意味着以下内容：  
  
-   基元.NET Framework 类型、 字符串和如数组、 数组列表、 哈希表和混合字典集合面向.NET Framework 类型是自动的可序列化。  
  
-   提供其自己的自定义类型<xref:System.ComponentModel.TypeConverter>类可以为序列化和反序列化从字符串被视为可序列化。  
  
-   可以通过序列化的自定义类型<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>类被视为可序列化。  
  
> [!IMPORTANT]
>  您不应添加基于在 App_Code 目录中定义的类的类型，则取决于默认二进制序列化机制。 基于 App_Code 的项目不一致地二进制序列化，因为，它们可以有其在随机点的时间更改的程序集名称。  
  
   
  
## Examples  
 下面的代码示例演示如何实现<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>中自定义方法<xref:System.Web.UI.WebControls.WebParts.WebPart>控件。 运行此示例中所需的完整代码，请参阅示例部分中的<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>类概述。  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
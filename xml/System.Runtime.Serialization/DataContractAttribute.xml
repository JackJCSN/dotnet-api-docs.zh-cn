<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="305f15a20c34b6ee3ea693ddd6a5dfd06f224201" /><Meta Name="ms.sourcegitcommit" Value="10aa513a7461eb2abbf8d1e35d2a045d4e5a9be7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/09/2019" /><Meta Name="ms.locfileid" Value="67665118" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DataContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="44a5c-101">Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span><span class="sxs-lookup"><span data-stu-id="44a5c-101">Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="44a5c-102">To make their type serializable, type authors must define a data contract for their type.</span><span class="sxs-lookup"><span data-stu-id="44a5c-102">To make their type serializable, type authors must define a data contract for their type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44a5c-103">将 <xref:System.Runtime.Serialization.DataContractAttribute> 属性应用于由 <xref:System.Runtime.Serialization.DataContractSerializer> 执行的序列化和反序列化操作中所使用的类型（类、结构或枚举）。</span><span class="sxs-lookup"><span data-stu-id="44a5c-103">Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>.</span></span> <span data-ttu-id="44a5c-104">如果发送或接收消息，通过使用 Windows Communication Foundation (WCF) 基础结构，则应该应用<xref:System.Runtime.Serialization.DataContractAttribute>于任何保存和操作消息中发送的数据的类。</span><span class="sxs-lookup"><span data-stu-id="44a5c-104">If you send or receive messages by using the Windows Communication Foundation (WCF) infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages.</span></span> <span data-ttu-id="44a5c-105">有关数据协定的详细信息，请参阅[Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md)。</span><span class="sxs-lookup"><span data-stu-id="44a5c-105">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="44a5c-106">此外，还必须将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于任何保存您要序列化的值的字段、属性或事件。</span><span class="sxs-lookup"><span data-stu-id="44a5c-106">You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize.</span></span> <span data-ttu-id="44a5c-107">通过应用 <xref:System.Runtime.Serialization.DataContractAttribute>，可以显式启用 <xref:System.Runtime.Serialization.DataContractSerializer> 来序列化和反序列化数据。</span><span class="sxs-lookup"><span data-stu-id="44a5c-107">By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="44a5c-108">可将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于私有字段。</span><span class="sxs-lookup"><span data-stu-id="44a5c-108">You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields.</span></span> <span data-ttu-id="44a5c-109">请注意，字段（即使是私有字段）所返回的数据将被序列化和反序列化，因此恶意用户或进程可以查看或截获这些数据。</span><span class="sxs-lookup"><span data-stu-id="44a5c-109">Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</span></span>  
  
 <span data-ttu-id="44a5c-110">有关数据协定的详细信息，请参阅中列出的主题[Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md)。</span><span class="sxs-lookup"><span data-stu-id="44a5c-110">For more information about data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
## <a name="data-contracts"></a><span data-ttu-id="44a5c-111">数据协定</span><span class="sxs-lookup"><span data-stu-id="44a5c-111">Data Contracts</span></span>  
 <span data-ttu-id="44a5c-112">一个*数据协定*是一组字段与每个字段的名称和数据类型的摘要说明。</span><span class="sxs-lookup"><span data-stu-id="44a5c-112">A *data contract* is an abstract description of a set of fields with a name and data type for each field.</span></span> <span data-ttu-id="44a5c-113">数据协定存在于任何单个实现的外部，以使不同平台上的服务可以交互操作。</span><span class="sxs-lookup"><span data-stu-id="44a5c-113">The data contract exists outside of any single implementation to allow services on different platforms to interoperate.</span></span> <span data-ttu-id="44a5c-114">只要在服务之间传递的数据符合同一协定，这些数据就可以由所有服务进行处理。</span><span class="sxs-lookup"><span data-stu-id="44a5c-114">As long as the data passed between the services conforms to the same contract, all the services can process the data.</span></span> <span data-ttu-id="44a5c-115">此处理是也称为*松耦合系统*。</span><span class="sxs-lookup"><span data-stu-id="44a5c-115">This processing is also known as a *loosely coupled system*.</span></span> <span data-ttu-id="44a5c-116">此外，数据协定还与接口类似，因为它指定了为使数据可由应用程序进行处理而必须使用的传送方式。</span><span class="sxs-lookup"><span data-stu-id="44a5c-116">A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.</span></span> <span data-ttu-id="44a5c-117">例如，数据协定可以定义一个名为“Person”的数据类型，它有两个文本字段，分别名为“FirstName”和“LastName”。</span><span class="sxs-lookup"><span data-stu-id="44a5c-117">For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName".</span></span> <span data-ttu-id="44a5c-118">若要创建数据协定，请将 <xref:System.Runtime.Serialization.DataContractAttribute> 应用于类并将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于所有必须序列化的字段或属性。</span><span class="sxs-lookup"><span data-stu-id="44a5c-118">To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized.</span></span> <span data-ttu-id="44a5c-119">序列化后，数据将符合隐式内置到类型中的数据协定。</span><span class="sxs-lookup"><span data-stu-id="44a5c-119">When serialized, the data conforms to the data contract that is implicitly built into the type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44a5c-120">在其继承行为方面，数据协定明显不同于实际接口。</span><span class="sxs-lookup"><span data-stu-id="44a5c-120">A data contract differs significantly from an actual interface in its inheritance behavior.</span></span> <span data-ttu-id="44a5c-121">接口由任何派生类型继承。</span><span class="sxs-lookup"><span data-stu-id="44a5c-121">Interfaces are inherited by any derived types.</span></span> <span data-ttu-id="44a5c-122">在将 <xref:System.Runtime.Serialization.DataContractAttribute> 应用于基类时，派生类型不会继承属性或行为。</span><span class="sxs-lookup"><span data-stu-id="44a5c-122">When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior.</span></span> <span data-ttu-id="44a5c-123">但是，如果派生类型具有数据协定，则基类的数据成员将被序列化。</span><span class="sxs-lookup"><span data-stu-id="44a5c-123">However, if a derived type has a data contract, the data members of the base class are serialized.</span></span> <span data-ttu-id="44a5c-124">不过，若要使派生类中的新成员可序列化，必须向这些成员应用 <xref:System.Runtime.Serialization.DataMemberAttribute>。</span><span class="sxs-lookup"><span data-stu-id="44a5c-124">However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.</span></span>  
  
## <a name="xml-schema-documents-and-the-svcutil-tool"></a><span data-ttu-id="44a5c-125">XML 架构文档和 SvcUtil 工具</span><span class="sxs-lookup"><span data-stu-id="44a5c-125">XML Schema Documents and the SvcUtil Tool</span></span>  
 <span data-ttu-id="44a5c-126">如果要与其他服务交换数据，则必须描述数据协定。</span><span class="sxs-lookup"><span data-stu-id="44a5c-126">If you are exchanging data with other services, you must describe the data contract.</span></span> <span data-ttu-id="44a5c-127">对于 <xref:System.Runtime.Serialization.DataContractSerializer> 的当前版本，可使用 XML 架构来定义数据协定。</span><span class="sxs-lookup"><span data-stu-id="44a5c-127">For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts.</span></span> <span data-ttu-id="44a5c-128">（也可以使用其他形式的元数据/说明来实现此目的。）若要从你的应用程序中创建 XML 架构，请使用[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)与 **/dconly**命令行选项。</span><span class="sxs-lookup"><span data-stu-id="44a5c-128">(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option.</span></span> <span data-ttu-id="44a5c-129">如果该工具的输入为程序集，则默认情况下该工具会生成一组 XML 架构，这些架构定义了该程序集中包含的所有数据协定类型。</span><span class="sxs-lookup"><span data-stu-id="44a5c-129">When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.</span></span> <span data-ttu-id="44a5c-130">反过来，还可使用 Svcutil.exe 工具创建符合以下 XML 架构的需求的 Visual Basic 或 C# 类定义：XML 架构使用可由数据协定表示的构造。</span><span class="sxs-lookup"><span data-stu-id="44a5c-130">Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.</span></span> <span data-ttu-id="44a5c-131">在这种情况下， **/dconly**则不需要命令行选项。</span><span class="sxs-lookup"><span data-stu-id="44a5c-131">In this case, the **/dconly** command line option is not required.</span></span>  
  
 <span data-ttu-id="44a5c-132">如果 Svcutil.exe 工具的输入为 XML 架构，则默认情况下该工具会创建一组类。</span><span class="sxs-lookup"><span data-stu-id="44a5c-132">If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.</span></span> <span data-ttu-id="44a5c-133">如果对这些类进行检查，您会发现 <xref:System.Runtime.Serialization.DataContractAttribute> 已经应用。</span><span class="sxs-lookup"><span data-stu-id="44a5c-133">If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="44a5c-134">可以使用这些类创建一个新的应用程序，用来处理必须与其他服务交换的数据。</span><span class="sxs-lookup"><span data-stu-id="44a5c-134">You can use those classes to create a new application to process data that must be exchanged with other services.</span></span>  
  
 <span data-ttu-id="44a5c-135">此外可以对返回 Web 服务描述语言 (WSDL) 文档，以自动生成的代码和配置来创建 Windows Communication Foundation (WCF) 客户端的终结点运行该工具。</span><span class="sxs-lookup"><span data-stu-id="44a5c-135">You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an Windows Communication Foundation (WCF) client.</span></span> <span data-ttu-id="44a5c-136">所生成的代码包含带有 <xref:System.Runtime.Serialization.DataContractAttribute> 标记的类型。</span><span class="sxs-lookup"><span data-stu-id="44a5c-136">The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="reusing-existing-types"></a><span data-ttu-id="44a5c-137">重用现有类型</span><span class="sxs-lookup"><span data-stu-id="44a5c-137">Reusing Existing Types</span></span>  
 <span data-ttu-id="44a5c-138">数据协定具有两个基本要求：一个稳定的名称和一个成员列表。</span><span class="sxs-lookup"><span data-stu-id="44a5c-138">A data contract has two basic requirements: a stable name and a list of members.</span></span> <span data-ttu-id="44a5c-139">该稳定名称由该协定的命名空间统一资源标识符 (URI) 和本地名称组成。</span><span class="sxs-lookup"><span data-stu-id="44a5c-139">The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.</span></span> <span data-ttu-id="44a5c-140">默认情况下，应用时<xref:System.Runtime.Serialization.DataContractAttribute>它可以为类，来使用作为本地名称和类的命名空间的类名 (前缀为`"http://schemas.datacontract.org/2004/07/"`) 作为命名空间 URI。</span><span class="sxs-lookup"><span data-stu-id="44a5c-140">By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with `"http://schemas.datacontract.org/2004/07/"`) as the namespace URI.</span></span> <span data-ttu-id="44a5c-141">可通过设置 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 属性来重写这些默认值。</span><span class="sxs-lookup"><span data-stu-id="44a5c-141">You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties.</span></span> <span data-ttu-id="44a5c-142">此外，还可通过将 <xref:System.Runtime.Serialization.ContractNamespaceAttribute> 应用于命名空间来更改命名空间。</span><span class="sxs-lookup"><span data-stu-id="44a5c-142">You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace.</span></span> <span data-ttu-id="44a5c-143">当现有类型能够完全根据您的需要处理数据，但其命名空间和类名与数据协定不同时，请使用此功能。</span><span class="sxs-lookup"><span data-stu-id="44a5c-143">Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.</span></span> <span data-ttu-id="44a5c-144">通过重写默认值，可以重用现有类型并使序列化数据符合数据协定。</span><span class="sxs-lookup"><span data-stu-id="44a5c-144">By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44a5c-145">在任意代码中，都可以用 `DataContract` 一词来代替较长的 <xref:System.Runtime.Serialization.DataContractAttribute>。</span><span class="sxs-lookup"><span data-stu-id="44a5c-145">In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="versioning"></a><span data-ttu-id="44a5c-146">版本管理</span><span class="sxs-lookup"><span data-stu-id="44a5c-146">Versioning</span></span>  
 <span data-ttu-id="44a5c-147">数据协定还可以与其自身的后续版本兼容。</span><span class="sxs-lookup"><span data-stu-id="44a5c-147">A data contract can also accommodate later versions of itself.</span></span> <span data-ttu-id="44a5c-148">也就是说，当协定的后续版本包含额外数据时，已存储并返回给发送方的数据将保持不变。</span><span class="sxs-lookup"><span data-stu-id="44a5c-148">That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.</span></span> <span data-ttu-id="44a5c-149">为此，应实现 <xref:System.Runtime.Serialization.IExtensibleDataObject> 接口。</span><span class="sxs-lookup"><span data-stu-id="44a5c-149">To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.</span></span>  
  
 <span data-ttu-id="44a5c-150">有关版本控制的详细信息，请参阅[数据协定版本管理](~/docs/framework/wcf/feature-details/data-contract-versioning.md)。</span><span class="sxs-lookup"><span data-stu-id="44a5c-150">For more information about versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44a5c-151">下面的示例序列化和反序列化了一个名为 `Person` 的类，该类已应用 <xref:System.Runtime.Serialization.DataContractAttribute>。</span><span class="sxs-lookup"><span data-stu-id="44a5c-151">The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="44a5c-152">请注意，<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性已设置为对默认设置进行重写的值。</span><span class="sxs-lookup"><span data-stu-id="44a5c-152">Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.</span></span>  
  
 [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="44a5c-153">使用数据协定</span><span class="sxs-lookup"><span data-stu-id="44a5c-153">Using Data Contracts</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44a5c-154">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class.</span><span class="sxs-lookup"><span data-stu-id="44a5c-154">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-155">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> has been explicitly set.</span><span class="sxs-lookup"><span data-stu-id="44a5c-155">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> has been explicitly set.</span></span></summary>
        <value><span data-ttu-id="44a5c-156"><see langword="true" /> 如果已显式设置名称;否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44a5c-156"><see langword="true" /> if the name has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNamespaceSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-157">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> has been explicitly set.</span><span class="sxs-lookup"><span data-stu-id="44a5c-157">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> has been explicitly set.</span></span></summary>
        <value><span data-ttu-id="44a5c-158"><see langword="true" /> 如果已显式设置命名空间;否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44a5c-158"><see langword="true" /> if the namespace has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReference As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsReference : bool with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-159">Gets or sets a value that indicates whether to preserve object reference data.</span><span class="sxs-lookup"><span data-stu-id="44a5c-159">Gets or sets a value that indicates whether to preserve object reference data.</span></span></summary>
        <value><span data-ttu-id="44a5c-160">如果使用标准 XML 保留对象引用数据，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44a5c-160"><see langword="true" /> to keep object reference data using standard XML; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="44a5c-161">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44a5c-161">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44a5c-162">使用 `IsReference` 属性来指示 <xref:System.Runtime.Serialization.DataContractSerializer> 插入保留对象引用信息的 XML 构造。</span><span class="sxs-lookup"><span data-stu-id="44a5c-162">Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReferenceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReferenceSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-163">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> has been explicitly set.</span><span class="sxs-lookup"><span data-stu-id="44a5c-163">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> has been explicitly set.</span></span></summary>
        <value><span data-ttu-id="44a5c-164">如果已显式设置引用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44a5c-164"><see langword="true" /> if the reference has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-165">Gets or sets the name of the data contract for the type.</span><span class="sxs-lookup"><span data-stu-id="44a5c-165">Gets or sets the name of the data contract for the type.</span></span></summary>
        <value><span data-ttu-id="44a5c-166">数据协定的本地名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-166">The local name of a data contract.</span></span> <span data-ttu-id="44a5c-167">默认值是应用了该属性的类的名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-167">The default is the name of the class that the attribute is applied to.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44a5c-168"><xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性用于为数据协定指定名称，该名称也将成为 XML 架构中类型的名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-168">The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema.</span></span> <span data-ttu-id="44a5c-169">有关详细信息，请参阅[数据协定名称](~/docs/framework/wcf/feature-details/data-contract-names.md)。</span><span class="sxs-lookup"><span data-stu-id="44a5c-169">For more information, see [Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).</span></span>  
  
 <span data-ttu-id="44a5c-170">默认情况下，数据协定的名称是应用了 <xref:System.Runtime.Serialization.DataContractAttribute> 的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-170">By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to.</span></span> <span data-ttu-id="44a5c-171">不过，可能出于某些原因更改此默认名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-171">However, there may be reasons to change this default name.</span></span> <span data-ttu-id="44a5c-172">其中一个原因就是使现有类型可以处理必须符合现有数据协定的数据。</span><span class="sxs-lookup"><span data-stu-id="44a5c-172">One reason is to allow an existing type to process data that must conform to an existing data contract.</span></span> <span data-ttu-id="44a5c-173">例如，有一个名为 `Person` 的类型，但包含在某个 XML 架构中的数据协定要求该名称为 `Customer`。</span><span class="sxs-lookup"><span data-stu-id="44a5c-173">For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`.</span></span> <span data-ttu-id="44a5c-174">可通过将该属性值设置为 `Customer` 来满足该协定。</span><span class="sxs-lookup"><span data-stu-id="44a5c-174">The contract can be satisfied by setting the property value to `Customer`.</span></span>  
  
 <span data-ttu-id="44a5c-175">另一个原因是允许生成不能作为类型名的名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-175">A second reason is to allow the generation of names that are invalid as type names.</span></span> <span data-ttu-id="44a5c-176">例如，如果数据协定需要一个不允许作为类型名的名称，则将该属性值设置为这一不允许使用的名称。</span><span class="sxs-lookup"><span data-stu-id="44a5c-176">For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.</span></span> <span data-ttu-id="44a5c-177">例如，不允许使用字符串“$value”作为类型名，但允许使用它作为 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性值。</span><span class="sxs-lookup"><span data-stu-id="44a5c-177">For instance, the string "$value" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44a5c-178">Gets or sets the namespace for the data contract for the type.</span><span class="sxs-lookup"><span data-stu-id="44a5c-178">Gets or sets the namespace for the data contract for the type.</span></span></summary>
        <value><span data-ttu-id="44a5c-179">协定的命名空间。</span><span class="sxs-lookup"><span data-stu-id="44a5c-179">The namespace of the contract.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44a5c-180">如果类型返回的数据必须符合特定数据协定，请使用此属性来指定特定的命名空间。</span><span class="sxs-lookup"><span data-stu-id="44a5c-180">Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="44a5c-181">为了成功传送数据，数据协定中的数据名必须与客户端和服务器中的数据名保持一致。</span><span class="sxs-lookup"><span data-stu-id="44a5c-181">For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.</span></span> <span data-ttu-id="44a5c-182">Visual Basic 项目中，默认情况下，向添加前缀 （称为"根命名空间"，项目命名） 每个文件中定义的命名空间。</span><span class="sxs-lookup"><span data-stu-id="44a5c-182">Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the "root namespace," named after the project).</span></span> <span data-ttu-id="44a5c-183">添加此前缀会造成相同类型的客户端命名空间和服务器命名空间不相同。</span><span class="sxs-lookup"><span data-stu-id="44a5c-183">Adding this prefix causes the client and server namespaces to be different for the same type.</span></span> <span data-ttu-id="44a5c-184">解决方法是设置<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A>属性设置为""，或显式设置此属性中的数据协定命名空间。</span><span class="sxs-lookup"><span data-stu-id="44a5c-184">The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to "", or to explicitly set the data contract namespace in this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="MessageSecurityOverMsmq" FullName="System.ServiceModel.MessageSecurityOverMsmq">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42872a8050759c91301c485b2b29f43d59d4ce8d" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64097522" /></Metadata><TypeSignature Language="C#" Value="public sealed class MessageSecurityOverMsmq" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageSecurityOverMsmq extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageSecurityOverMsmq" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MessageSecurityOverMsmq" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageSecurityOverMsmq sealed" />
  <TypeSignature Language="F#" Value="type MessageSecurityOverMsmq = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>可用来设置 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 绑定上的消息级安全属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过 <xref:System.ServiceModel.NetMsmqBinding.Security%2A> 属性（它返回 <xref:System.ServiceModel.NetMsmqSecurity> 对象）从绑定访问此对象。 此对象具有 <xref:System.ServiceModel.NetMsmqSecurity.Message%2A> 的属性，该属性提供对 <xref:System.ServiceModel.MessageSecurityOverMsmq> 对象的引用。  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#1](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#1)]
 [!code-vb[UEMessageSecurityOverMsmq#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageSecurityOverMsmq ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageSecurityOverMsmq();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlgorithmSuite">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite" />
      <MemberSignature Language="VB.NET" Value="Public Property AlgorithmSuite As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityAlgorithmSuite ^ AlgorithmSuite { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); void set(System::ServiceModel::Security::SecurityAlgorithmSuite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AlgorithmSuite : System.ServiceModel.Security.SecurityAlgorithmSuite with get, set" Usage="System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.ServiceModel.Security.SecurityAlgorithmSuite), "Default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定用于 SOAP 级安全消息的算法套件。</summary>
        <value>通过 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 绑定发送的消息的 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> 定义了各种算法，如规范化、摘要式、密钥换行、签名、加密和密钥派生算法。 如果工作平台使用了一组与默认设置不同的算法，则此属性最为有用。 在对此属性进行修改时，应注意相关算法的优缺点。  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#2](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#2)]
 [!code-vb[UEMessageSecurityOverMsmq#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCredentialType">
      <MemberSignature Language="C#" Value="public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.MessageCredentialType ClientCredentialType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCredentialType As MessageCredentialType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::MessageCredentialType ClientCredentialType { System::ServiceModel::MessageCredentialType get(); void set(System::ServiceModel::MessageCredentialType value); };" />
      <MemberSignature Language="F#" Value="member this.ClientCredentialType : System.ServiceModel.MessageCredentialType with get, set" Usage="System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.MessageCredentialType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</summary>
        <value>通过 MSMQ 传输发送的消息的 <see cref="T:System.ServiceModel.MessageCredentialType" /> 安全设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以设置为下列值之一：  
  
-   “无”：允许服务与匿名客户端交互。 服务和客户端都不需要凭据。  
  
-   **Windows**：此值允许 SOAP 交换已经过身份验证的 Windows 凭据上下文中进行。 此设置总是执行基于 Kerberos 的身份验证。  
  
-   **用户名**:这允许服务要求客户端进行身份验证使用用户名凭据。 此凭据必须使用 <xref:System.ServiceModel.Description.ClientCredentials> 类来指定。  
  
> [!NOTE]
>  WCF 不支持发送密码摘要，也派生密钥使用的密码并使用此类密钥来提供消息安全性。 在这种情况下，WCF 强制使用 UserName 凭据时，交换的安全性。 此模式要求使用客户端上，指定服务证书`ClientCredential`行为和`serviceCertificate`:  
  
-   `Certificate`：此值允许服务要求使用证书对客户端进行身份验证。 在此情况下，必须使用 <xref:System.ServiceModel.Description.ClientCredentials> 类或 `ClientCredentials` 行为指定客户端。 在此情况下，必须使用 <xref:System.ServiceModel.Description.ClientCredentials> 类或 `ClientCredentials` 行为，通过指定 `serviceCertificate` 来指定服务凭据。  
  
-   `InfoCard`：此值允许服务要求使用 InfoCard 对客户端进行身份验证。 必须在 `serviceCertificate` 行为中设置 `ClientCredential`。  
  
-   只有在将安全模式设置为 `MessageSecurityOverMsmq` 或 `Both` 时，`Message` 的 Certificate 凭据才是有意义的。  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#3](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#3)]
 [!code-vb[UEMessageSecurityOverMsmq#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
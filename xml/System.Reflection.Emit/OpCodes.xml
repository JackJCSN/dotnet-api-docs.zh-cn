<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aea33b9e902b909e4adf9f543fadb5190ce68f9b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69109972" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b7283-101">通过 <see cref="T:System.Reflection.Emit.ILGenerator" /> 类成员（例如 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />）为发出提供 Microsoft 中间语言 (MSIL) 指令的字段表示形式。</span><span class="sxs-lookup"><span data-stu-id="b7283-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-102">有关成员操作码的详细说明, 请参阅公共语言基础结构 (CLI) 文档, 尤其是 "第三部分:CIL 指令集 "和" 第二部分:元数据定义和语义 "。</span><span class="sxs-lookup"><span data-stu-id="b7283-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="b7283-103">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="b7283-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7283-104">下面的示例演示使用<xref:System.Reflection.Emit.ILGenerator>向发出`OpCodes` <xref:System.Reflection.Emit.MethodBuilder>的动态方法的构造。</span><span class="sxs-lookup"><span data-stu-id="b7283-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-105">将两个值相加并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-105">Adds two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-106">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-107">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-107">Format</span></span>|<span data-ttu-id="b7283-108">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-108">Assembly Format</span></span>|<span data-ttu-id="b7283-109">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-110">58</span><span class="sxs-lookup"><span data-stu-id="b7283-110">58</span></span>|<span data-ttu-id="b7283-111">add</span><span class="sxs-lookup"><span data-stu-id="b7283-111">add</span></span>|<span data-ttu-id="b7283-112">将两个数值相加, 并返回一个新的数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="b7283-113">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-114">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-115">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-116">`value2`和`value1`从堆栈中弹出;将添加到`value2`。 `value1`</span><span class="sxs-lookup"><span data-stu-id="b7283-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-117">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-118">未检测到用于整数运算的溢出 (有关正确的溢出处理<xref:System.Reflection.Emit.OpCodes.Add_Ovf>, 请参阅)。</span><span class="sxs-lookup"><span data-stu-id="b7283-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="b7283-119">整数加法换行, 而不是尽量充满。</span><span class="sxs-lookup"><span data-stu-id="b7283-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="b7283-120">例如, 假设8位整数, 其中`value1`设置为 255, 并且`value2`设置为 1, 则包装的结果为0而不是256。</span><span class="sxs-lookup"><span data-stu-id="b7283-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="b7283-121">浮点溢出返回`+inf` (`PositiveInfinity`) 或`-inf` (`NegativeInfinity`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="b7283-122">下表列出了可接受的操作数类型及其对应的结果数据类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="b7283-123">如果没有特定类型组合的条目 (例如和`int32` `float`), 则为;`int32` 和`int64`) 是无效的 Microsoft 中间语言 (MSIL), 并生成错误。</span><span class="sxs-lookup"><span data-stu-id="b7283-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="b7283-124">操作数</span><span class="sxs-lookup"><span data-stu-id="b7283-124">operand</span></span>|<span data-ttu-id="b7283-125">value1 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-125">value1 type</span></span>|<span data-ttu-id="b7283-126">value2 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-126">value2 type</span></span>|<span data-ttu-id="b7283-127">结果类型</span><span class="sxs-lookup"><span data-stu-id="b7283-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="b7283-128">add</span><span class="sxs-lookup"><span data-stu-id="b7283-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="b7283-129">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="b7283-130">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="b7283-131">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="b7283-132">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="b7283-133">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="b7283-134">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="b7283-135">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="b7283-136">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="b7283-137">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="b7283-138">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="b7283-139">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="b7283-140">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="b7283-141">add</span><span class="sxs-lookup"><span data-stu-id="b7283-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="b7283-142">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`add`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-144">将两个整数相加，执行溢出检查，并且将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-145">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-146">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-146">Format</span></span>|<span data-ttu-id="b7283-147">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-147">Assembly Format</span></span>|<span data-ttu-id="b7283-148">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-149">D6</span><span class="sxs-lookup"><span data-stu-id="b7283-149">D6</span></span>|<span data-ttu-id="b7283-150">add.ovf</span><span class="sxs-lookup"><span data-stu-id="b7283-150">add.ovf</span></span>|<span data-ttu-id="b7283-151">使用溢出检查添加两个有符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-152">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-153">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-154">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-155">`value2`和`value1`从堆栈中弹出;`value1`添加到`value2` , 并检查溢出。</span><span class="sxs-lookup"><span data-stu-id="b7283-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="b7283-156">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-157"><xref:System.OverflowException>如果结果类型未表示结果, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-158">您可以对有符号整数执行此操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="b7283-159">对于浮点值, 请使用<xref:System.Reflection.Emit.OpCodes.Add>。</span><span class="sxs-lookup"><span data-stu-id="b7283-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="b7283-160">下表列出了可接受的操作数类型及其对应的结果数据类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="b7283-161">如果没有特定类型组合的条目 (例如和`int32` `float`), 则为;`int32` 和`int64`), 它是无效的 Microsoft 中间语言 (MSIL) 指令并生成错误。</span><span class="sxs-lookup"><span data-stu-id="b7283-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="b7283-162">操作数</span><span class="sxs-lookup"><span data-stu-id="b7283-162">operand</span></span>|<span data-ttu-id="b7283-163">value1 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-163">value1 type</span></span>|<span data-ttu-id="b7283-164">value2 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-164">value2 type</span></span>|<span data-ttu-id="b7283-165">结果类型</span><span class="sxs-lookup"><span data-stu-id="b7283-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="b7283-166">add</span><span class="sxs-lookup"><span data-stu-id="b7283-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="b7283-167">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="b7283-168">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="b7283-169">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="b7283-170">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="b7283-171">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="b7283-172">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="b7283-173">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="b7283-174">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="b7283-175">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="b7283-176">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="b7283-177">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="b7283-178">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="b7283-179">add</span><span class="sxs-lookup"><span data-stu-id="b7283-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="b7283-180">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`add.ovf`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-182">将两个无符号整数值相加，执行溢出检查，并且将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-183">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-184">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-184">Format</span></span>|<span data-ttu-id="b7283-185">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-185">Assembly Format</span></span>|<span data-ttu-id="b7283-186">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-187">D7</span><span class="sxs-lookup"><span data-stu-id="b7283-187">D7</span></span>|<span data-ttu-id="b7283-188">add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="b7283-188">add.ovf.un</span></span>|<span data-ttu-id="b7283-189">使用溢出检查添加两个无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-190">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-191">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-192">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-193">`value2`和`value1`从堆栈中弹出;`value1`添加到`value2` , 并检查溢出。</span><span class="sxs-lookup"><span data-stu-id="b7283-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="b7283-194">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-195"><xref:System.OverflowException>如果结果类型未表示结果, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-196">您可以对有符号整数执行此操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="b7283-197">对于浮点值, 请使用<xref:System.Reflection.Emit.OpCodes.Add>。</span><span class="sxs-lookup"><span data-stu-id="b7283-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="b7283-198">下表列出了可接受的操作数类型及其对应的结果数据类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="b7283-199">如果没有特定类型组合的条目 (例如和`int32` `float`), 则为;`int32` 和`int64`), 它是无效的 Microsoft 中间语言 (MSIL) 指令并生成错误。</span><span class="sxs-lookup"><span data-stu-id="b7283-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="b7283-200">操作数</span><span class="sxs-lookup"><span data-stu-id="b7283-200">operand</span></span>|<span data-ttu-id="b7283-201">value1 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-201">value1 type</span></span>|<span data-ttu-id="b7283-202">value2 类型</span><span class="sxs-lookup"><span data-stu-id="b7283-202">value2 type</span></span>|<span data-ttu-id="b7283-203">结果类型</span><span class="sxs-lookup"><span data-stu-id="b7283-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="b7283-204">add</span><span class="sxs-lookup"><span data-stu-id="b7283-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="b7283-205">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="b7283-206">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="b7283-207">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="b7283-208">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="b7283-209">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="b7283-210">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="b7283-211">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="b7283-212">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="b7283-213">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="b7283-214">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="b7283-215">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="b7283-216">添加</span><span class="sxs-lookup"><span data-stu-id="b7283-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="b7283-217">add</span><span class="sxs-lookup"><span data-stu-id="b7283-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="b7283-218">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`add.ovf.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-220">计算两个值的按位"与"并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-221">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-222">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-222">Format</span></span>|<span data-ttu-id="b7283-223">指令</span><span class="sxs-lookup"><span data-stu-id="b7283-223">Instruction</span></span>|<span data-ttu-id="b7283-224">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="b7283-225">5F</span><span class="sxs-lookup"><span data-stu-id="b7283-225">5F</span></span>|<span data-ttu-id="b7283-226">和</span><span class="sxs-lookup"><span data-stu-id="b7283-226">and</span></span>|<span data-ttu-id="b7283-227">确定两个整数值的按位 "与"。</span><span class="sxs-lookup"><span data-stu-id="b7283-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="b7283-228">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-229">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-230">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-231">`value1`和`value2`从堆栈中弹出; 这两个值的按位 and。</span><span class="sxs-lookup"><span data-stu-id="b7283-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="b7283-232">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-233">`and`指令计算堆栈上的前两个值的按位 "与", 并将结果保留在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="b7283-234">`And`是特定于整数的操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="b7283-235">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`and`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-237">返回指向当前方法的参数列表的非托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-237">Returns an unmanaged pointer to the argument list of the current method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-238">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-239">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-239">Format</span></span>|<span data-ttu-id="b7283-240">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-240">Assembly Format</span></span>|<span data-ttu-id="b7283-241">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="b7283-242">FE 00</span></span>|<span data-ttu-id="b7283-243">arglist</span><span class="sxs-lookup"><span data-stu-id="b7283-243">arglist</span></span>|<span data-ttu-id="b7283-244">返回当前方法的参数列表句柄。</span><span class="sxs-lookup"><span data-stu-id="b7283-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="b7283-245">此操作不会执行任何计算堆栈行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="b7283-246">指令返回一个不透明的句柄 (类型`native int`的非托管指针), 表示当前方法的参数列表。 `arglist`</span><span class="sxs-lookup"><span data-stu-id="b7283-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="b7283-247">此句柄仅在当前方法的生存期内有效。</span><span class="sxs-lookup"><span data-stu-id="b7283-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="b7283-248">但是, 只要当前方法在控制线程上, 你就可以将该句柄传递给其他方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="b7283-249">只能在采用可变数目`arglist`的参数的方法中执行指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="b7283-250">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`arglist`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-252">如果两个值相等，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-252">Transfers control to a target instruction if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-253">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-254">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-254">Format</span></span>|<span data-ttu-id="b7283-255">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-255">Assembly Format</span></span>|<span data-ttu-id="b7283-256">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-257">3B < `int32` ></span></span>|<span data-ttu-id="b7283-258">beq`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-258">beq `target`</span></span>|<span data-ttu-id="b7283-259">如果两个值相等, 则`target`分支到目标指令的偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="b7283-260">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-261">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-262">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-263">`value2`和`value1`从堆栈中弹出; 如果`value1`等于`value2`, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-264">如果`beq` 等于`value1` ,则指令将控制转移到指定`value2`的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="b7283-265">其效果与执行`ceq`指令后跟`brtrue`特定目标指令的分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-266">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-267">可接受的操作数类型如下所示:</span><span class="sxs-lookup"><span data-stu-id="b7283-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="b7283-268">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="b7283-269">此`try` `catch` `filter`指令不`finally`能执行控制传入和传出、、和块的控制 (此类传输受到严格限制, 因此必须改用指令)。<xref:System.Reflection.Emit.OpCodes.Leave></span><span class="sxs-lookup"><span data-stu-id="b7283-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="b7283-270">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`beq`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-271">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-272">如果两个值相等，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-272">Transfers control to a target instruction (short form) if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-273">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-274">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-274">Format</span></span>|<span data-ttu-id="b7283-275">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-275">Assembly Format</span></span>|<span data-ttu-id="b7283-276">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-277">2E < `int8` ></span></span>|<span data-ttu-id="b7283-278">beq`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-278">beq.s `target`</span></span>|<span data-ttu-id="b7283-279">`target`如果相等, 则分支到目标指令 (如果相等), 短格式</span><span class="sxs-lookup"><span data-stu-id="b7283-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="b7283-280">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-281">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-282">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-283">`value2`和`value1`从堆栈中弹出; 如果`value1`等于`value2`, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-284">如果`beq.s` 等于`value1` ,则指令将控制转移到指定`value2`的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="b7283-285">其效果与执行`ceq`指令后跟`brtrue`特定目标指令的分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-286">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-287">可接受的操作数类型如下所示:</span><span class="sxs-lookup"><span data-stu-id="b7283-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="b7283-288">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="b7283-289">此`try` `catch` `filter`指令不`finally`能执行控制传入和传出、、和块的控制 (此类传输受到严格限制, 因此必须改用指令)。<xref:System.Reflection.Emit.OpCodes.Leave></span><span class="sxs-lookup"><span data-stu-id="b7283-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="b7283-290">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`beq.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-291">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-292">如果第一个值大于或等于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-293">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-294">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-294">Format</span></span>|<span data-ttu-id="b7283-295">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-295">Assembly Format</span></span>|<span data-ttu-id="b7283-296">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="b7283-297">3C `<int32>`</span></span>|<span data-ttu-id="b7283-298">bge`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-298">bge `target`</span></span>|<span data-ttu-id="b7283-299">如果第一个值大于或等于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="b7283-300">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-301">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-302">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-303">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`大于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-304">如果`bge` 大于`value1`或等于, 则指令将控制转移到指定的目标指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="b7283-305">此效果与执行`clt.un`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-306">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-307">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-308">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-309">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bge`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-310">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-311">如果第一个值大于或等于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-312">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-313">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-313">Format</span></span>|<span data-ttu-id="b7283-314">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-314">Assembly Format</span></span>|<span data-ttu-id="b7283-315">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="b7283-316">2F `<int8>`</span></span>|<span data-ttu-id="b7283-317">bge`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-317">bge.s `target`</span></span>|<span data-ttu-id="b7283-318">如果第一个值大于或等于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="b7283-319">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-320">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-321">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-322">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`大于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-323">如果`bge.s` 大于`value1`或等于, 则指令将控制转移到指定的目标指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="b7283-324">此效果与执行`clt.un`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-325">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-326">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-327">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-328">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bge.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-329">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-330">当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-331">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-332">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-332">Format</span></span>|<span data-ttu-id="b7283-333">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-333">Assembly Format</span></span>|<span data-ttu-id="b7283-334">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="b7283-335">41 `<int32>`</span></span>|<span data-ttu-id="b7283-336">bge`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-336">bge.un `target`</span></span>|<span data-ttu-id="b7283-337">如果第一个值大于或等于第二个值 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-338">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-339">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-340">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-341">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`大于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-342">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果大于或等于, 则指令将控制转移到指定的目标指令。`bge.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-343">此效果与执行`clt`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-344">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-345">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-346">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-347">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bge.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-348">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-349">当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-350">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-351">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-351">Format</span></span>|<span data-ttu-id="b7283-352">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-352">Assembly Format</span></span>|<span data-ttu-id="b7283-353">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-354">34 < `int8` ></span></span>|<span data-ttu-id="b7283-355">bge`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-355">bge.un.s `target`</span></span>|<span data-ttu-id="b7283-356">如果第一个值大于或等于第二个值 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="b7283-357">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-358">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-359">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-360">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`大于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-361">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果大于或等于, 则指令将控制转移到指定的目标指令。`bge.un.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-362">此效果与执行`clt`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-363">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-364">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-365">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-366">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bge.un.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-367">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-368">如果第一个值大于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-368">Transfers control to a target instruction if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-369">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-370">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-370">Format</span></span>|<span data-ttu-id="b7283-371">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-371">Assembly Format</span></span>|<span data-ttu-id="b7283-372">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-373">3D < `int32` ></span></span>|<span data-ttu-id="b7283-374">预算`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-374">bgt `target`</span></span>|<span data-ttu-id="b7283-375">如果第一个值大于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="b7283-376">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-377">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-378">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-379">`value2`和`value1`从堆栈中弹出; 如果`value1`大于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-380">如果`bgt` 大于`value1` ,则指令将控制转移到指定`value2`的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="b7283-381">此效果与执行`cgt`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-382">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-383">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-384">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-385">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bgt`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-386">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-387">如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-388">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-389">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-389">Format</span></span>|<span data-ttu-id="b7283-390">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-390">Assembly Format</span></span>|<span data-ttu-id="b7283-391">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-392">30 < `int8` ></span></span>|<span data-ttu-id="b7283-393">预算`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-393">bgt.s `target`</span></span>|<span data-ttu-id="b7283-394">如果第一个值大于第二个值, 则按指定的偏移量分支到目标指令 (缩写形式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="b7283-395">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-396">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-397">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-398">`value2`和`value1`从堆栈中弹出; 如果`value1`大于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-399">如果`bgt.s` 大于`value1` ,则指令将控制转移到指定`value2`的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="b7283-400">此效果与执行`cgt`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-401">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-402">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-403">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-404">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bgt.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-405">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-406">当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-407">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-408">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-408">Format</span></span>|<span data-ttu-id="b7283-409">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-409">Assembly Format</span></span>|<span data-ttu-id="b7283-410">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-411">42 < `int32` ></span></span>|<span data-ttu-id="b7283-412">预算`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-412">bgt.un `target`</span></span>|<span data-ttu-id="b7283-413">如果第一个值大于第二个值 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-414">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-415">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-416">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-417">`value2`和`value1`从堆栈中弹出; 如果`value1`大于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-418">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果大于,指令将控制转移到指定的目标指令。`bgt.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-419">此效果与执行`cgt.un`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-420">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-421">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-422">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-423">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bgt.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-424">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-425">当比较无符号整数值或未经排序的浮点值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-426">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-427">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-427">Format</span></span>|<span data-ttu-id="b7283-428">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-428">Assembly Format</span></span>|<span data-ttu-id="b7283-429">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-430">35 < `int8` ></span></span>|<span data-ttu-id="b7283-431">预算`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-431">bgt.un.s `target`</span></span>|<span data-ttu-id="b7283-432">如果第一个值大于第二个值 (无符号值), 则按指定的偏移量分支到目标指令 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="b7283-433">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-434">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-435">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-436">`value2`和`value1`从堆栈中弹出; 如果`value1`大于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-437">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果大于,指令将控制转移到指定的目标指令。`bgt.un.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-438">此效果与执行`cgt.un`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-439">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-440">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-441">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-442">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bgt.un.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-443">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-444">如果第一个值小于或等于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-445">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-446">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-446">Format</span></span>|<span data-ttu-id="b7283-447">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-447">Assembly Format</span></span>|<span data-ttu-id="b7283-448">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="b7283-449">3E `<int32>`</span></span>|<span data-ttu-id="b7283-450">ble`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-450">ble `target`</span></span>|<span data-ttu-id="b7283-451">如果第一个值小于或等于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="b7283-452">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-453">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-454">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-455">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`小于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-456">如果`ble` 小于`value1`或等于, 则指令将控制转移到指定的目标指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="b7283-457">此效果等同于执行`cgt`指令 (`cgt.un`对于浮点), 后跟特定目标`brfalse`指令的分支。</span><span class="sxs-lookup"><span data-stu-id="b7283-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-458">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-459">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-460">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-461">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ble`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-462">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-463">如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-464">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-465">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-465">Format</span></span>|<span data-ttu-id="b7283-466">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-466">Assembly Format</span></span>|<span data-ttu-id="b7283-467">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="b7283-468">31 `<int8>`</span></span>|<span data-ttu-id="b7283-469">ble`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-469">ble.s `target`</span></span>|<span data-ttu-id="b7283-470">如果第一个值小于或等于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="b7283-471">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-472">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-473">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-474">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`小于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-475">如果`ble.s` 小于`value1`或等于, 则指令将控制转移到指定的目标指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="b7283-476">此效果等同于执行`cgt`指令 (`cgt.un`对于浮点型) 指令, 后跟特定`brfalse`目标指令的分支。</span><span class="sxs-lookup"><span data-stu-id="b7283-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-477">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-478">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-479">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-480">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ble.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-481">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-482">当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-483">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-484">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-484">Format</span></span>|<span data-ttu-id="b7283-485">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-485">Assembly Format</span></span>|<span data-ttu-id="b7283-486">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="b7283-487">43 `<int32>`</span></span>|<span data-ttu-id="b7283-488">ble`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-488">ble.un `target`</span></span>|<span data-ttu-id="b7283-489">如果第一个值小于或等于第二个值 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-490">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-491">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-492">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-493">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`小于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-494">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果小于或等于, 则指令将控制转移到指定的目标指令。`ble.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-495">此效果等同于执行`cgt.un`指令 (`cgt`对于浮点), 后跟特定目标`brfalse`指令的分支。</span><span class="sxs-lookup"><span data-stu-id="b7283-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-496">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-497">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-498">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-499">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ble.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-500">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-501">当比较无符号整数值或未经排序的浮点值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-502">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-503">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-503">Format</span></span>|<span data-ttu-id="b7283-504">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-504">Assembly Format</span></span>|<span data-ttu-id="b7283-505">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="b7283-506">36 `<int8>`</span></span>|<span data-ttu-id="b7283-507">ble`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-507">ble.un.s `target`</span></span>|<span data-ttu-id="b7283-508">如果第一个值小于或等于第二个值 (无符号值), 则按指定的偏移量分支到目标指令 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="b7283-509">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-510">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-511">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-512">`value2`和`value1`从堆栈中弹出; 如果`value1` `value2`小于或等于, 则会执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-513">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果小于或等于, 则指令将控制转移到指定的目标指令。`ble.un.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-514">此效果等同于执行`cgt.un`指令 (`cgt`对于浮点), 后跟特定目标`brfalse`指令的分支。</span><span class="sxs-lookup"><span data-stu-id="b7283-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-515">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-516">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-517">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-518">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ble.un.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-519">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-520">如果第一个值小于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-520">Transfers control to a target instruction if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-521">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-522">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-522">Format</span></span>|<span data-ttu-id="b7283-523">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-523">Assembly Format</span></span>|<span data-ttu-id="b7283-524">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-525">3F < `int32` ></span></span>|<span data-ttu-id="b7283-526">blt`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-526">blt `target`</span></span>|<span data-ttu-id="b7283-527">如果第一个值小于第二个值, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="b7283-528">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-529">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-530">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-531">`value2`和`value1`从堆栈中弹出; 如果`value1`小于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-532">如果`blt` 小于`value1`或等于, 则指令将控制转移到指定的目标指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="b7283-533">此效果与执行`clt`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-534">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-535">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-536">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-537">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`blt`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-538">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-539">如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-540">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-541">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-541">Format</span></span>|<span data-ttu-id="b7283-542">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-542">Assembly Format</span></span>|<span data-ttu-id="b7283-543">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-544">32 < `int8` ></span></span>|<span data-ttu-id="b7283-545">blt`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-545">blt.s `target`</span></span>|<span data-ttu-id="b7283-546">如果第一个值小于第二个值, 则按指定的偏移量分支到目标指令 (缩写形式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="b7283-547">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-548">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-549">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-550">`value2`和`value1`从堆栈中弹出; 如果`value1`小于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-551">如果`blt.s` 小于`value1` ,则指令将控制转移到指定`value2`的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="b7283-552">此效果与执行`clt`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-553">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-554">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-555">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-556">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`blt.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-557">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-558">当比较无符号整数值或未经排序的浮点值时，如果第一个值小于第二个值，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-559">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-560">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-560">Format</span></span>|<span data-ttu-id="b7283-561">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-561">Assembly Format</span></span>|<span data-ttu-id="b7283-562">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-563">44 < `int32` ></span></span>|<span data-ttu-id="b7283-564">blt`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-564">blt.un `target`</span></span>|<span data-ttu-id="b7283-565">如果第一个值小于第二个值 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-566">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-567">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-568">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-569">`value2`和`value1`从堆栈中弹出; 如果`value1`小于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-570">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果小于, 则指令将控制转移到指定的目标指令。`blt.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-571">此效果与执行`clt.un`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-572">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-573">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-574">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-575">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`blt.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-576">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-577">当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-578">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-579">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-579">Format</span></span>|<span data-ttu-id="b7283-580">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-580">Assembly Format</span></span>|<span data-ttu-id="b7283-581">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-582">37 < `int8` ></span></span>|<span data-ttu-id="b7283-583">blt`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-583">blt.un.s `target`</span></span>|<span data-ttu-id="b7283-584">如果第一个值小于第二个值 (无符号值), 则按指定的偏移量分支到目标指令 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="b7283-585">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-586">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-587">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-588">`value2`和`value1`从堆栈中弹出; 如果`value1`小于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-589">当使用无符号整数或无序浮点值`value1`进行比较时`value2`, 如果小于, 则指令将控制转移到指定的目标指令。`blt.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-590">此效果与执行`clt.un`指令后跟特定目标指令的`brtrue`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-591">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-592">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-593">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-594">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`blt.un.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-595">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-596">当两个无符号整数值或未经排序的浮点值不相等时，将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-597">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-598">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-598">Format</span></span>|<span data-ttu-id="b7283-599">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-599">Assembly Format</span></span>|<span data-ttu-id="b7283-600">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-601">40 < `int32` ></span></span>|<span data-ttu-id="b7283-602">bne`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-602">bne.un `target`</span></span>|<span data-ttu-id="b7283-603">如果两个无符号整数值不相等 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-604">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-605">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-606">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-607">`value2`和`value1`从堆栈中弹出; 如果`value1`不等于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-608">如果`bne.un` 不`value1` 等于`value2`, 则当使用无符号整数或无序浮点值进行比较时, 指令将控制转移到指定的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-609">此效果与执行`ceq`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-610">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-611">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-612">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-613">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bne.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-614">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-615">当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-616">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-617">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-617">Format</span></span>|<span data-ttu-id="b7283-618">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-618">Assembly Format</span></span>|<span data-ttu-id="b7283-619">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-620">33 < `int8` ></span></span>|<span data-ttu-id="b7283-621">bne`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-621">bne.un.s `target`</span></span>|<span data-ttu-id="b7283-622">如果两个无符号整数值不相等 (无符号值), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="b7283-623">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-624">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-625">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-626">`value2`和`value1`从堆栈中弹出; 如果`value1`不等于`value2`, 则执行分支操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="b7283-627">如果`bne.un` 不`value1` 等于`value2`, 则当使用无符号整数或无序浮点值进行比较时, 指令将控制转移到指定的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="b7283-628">此效果与执行`ceq`指令后跟特定目标指令的`brfalse`分支相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="b7283-629">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-630">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-631">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-632">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`bne.un.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-633">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-634">将值类转换为对象引用（<see langword="O" /> 类型）。</span><span class="sxs-lookup"><span data-stu-id="b7283-634">Converts a value type to an object reference (type <see langword="O" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-635">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-636">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-636">Format</span></span>|<span data-ttu-id="b7283-637">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-637">Assembly Format</span></span>|<span data-ttu-id="b7283-638">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-639">8C < `T` ></span></span>|<span data-ttu-id="b7283-640">文本框`valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="b7283-640">box `valTypeToken`</span></span>|<span data-ttu-id="b7283-641">将值类型 (在中`valTypeToken`指定的类型) 转换为真正的对象引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="b7283-642">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-643">值类型被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-644">从堆栈中弹出值类型;执行`box`操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="b7283-645">对生成的 "装箱" 值类型的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-646">值类型在公共语言基础结构 (CLI) 中具有两种不同的表示形式:</span><span class="sxs-lookup"><span data-stu-id="b7283-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="b7283-647">当值类型嵌入到另一个对象或堆栈上时使用的 "原始" 窗体。</span><span class="sxs-lookup"><span data-stu-id="b7283-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="b7283-648">"装箱" 窗体, 其中值类型中的数据被包装 (装箱) 到对象中, 因此它可以作为独立实体存在。</span><span class="sxs-lookup"><span data-stu-id="b7283-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="b7283-649">指令将 "raw" (未装箱) 值类型转换为对象引用 (类型`O`)。 `box`</span><span class="sxs-lookup"><span data-stu-id="b7283-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="b7283-650">为此, 可以创建一个新的对象, 并将数据从值类型复制到新分配的对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="b7283-651">`valTypeToken`一个元数据标记, 指示堆栈上值类型的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="b7283-652"><xref:System.OutOfMemoryException>如果内存不足, 无法满足请求, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="b7283-653"><xref:System.TypeLoadException>如果找不到类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="b7283-654">当 Microsoft 中间语言 (MSIL) 转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-655">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`box`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-656">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-657">无条件地将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-657">Unconditionally transfers control to a target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-658">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-659">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-659">Format</span></span>|<span data-ttu-id="b7283-660">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-660">Assembly Format</span></span>|<span data-ttu-id="b7283-661">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-662">38 < `int32` ></span></span>|<span data-ttu-id="b7283-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="b7283-663">br `target`</span></span>|<span data-ttu-id="b7283-664">按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="b7283-665">此操作不会执行任何计算堆栈行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="b7283-666">`br`指令将控制无条件地转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="b7283-667">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-668">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-669">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-670">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`br`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-671">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-672">无条件地将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-672">Unconditionally transfers control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-673">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-674">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-674">Format</span></span>|<span data-ttu-id="b7283-675">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-675">Assembly Format</span></span>|<span data-ttu-id="b7283-676">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-677">2B < `int8` ></span></span>|<span data-ttu-id="b7283-678">br`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-678">br.s `target`</span></span>|<span data-ttu-id="b7283-679">按指定的偏移量 (短格式) 分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="b7283-680">此操作不会执行任何计算堆栈行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="b7283-681">`br.s`指令将控制无条件地转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="b7283-682">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-683">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-684">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-685">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`br.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-686">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-687">向公共语言结构 (CLI) 发出信号以通知调试器已撞上了一个断点。</span><span class="sxs-lookup"><span data-stu-id="b7283-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-688">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-689">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-689">Format</span></span>|<span data-ttu-id="b7283-690">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-690">Assembly Format</span></span>|<span data-ttu-id="b7283-691">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-692">01</span><span class="sxs-lookup"><span data-stu-id="b7283-692">01</span></span>|<span data-ttu-id="b7283-693">break</span><span class="sxs-lookup"><span data-stu-id="b7283-693">break</span></span>|<span data-ttu-id="b7283-694">通知调试器已达到断点。</span><span class="sxs-lookup"><span data-stu-id="b7283-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="b7283-695">此操作不会执行任何计算堆栈行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="b7283-696">`break`指令用于调试支持。</span><span class="sxs-lookup"><span data-stu-id="b7283-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="b7283-697">它向 CLI 发出信号, 通知调试器中断点已被终止。</span><span class="sxs-lookup"><span data-stu-id="b7283-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="b7283-698">它对解释器状态没有其他影响。</span><span class="sxs-lookup"><span data-stu-id="b7283-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="b7283-699">`break`指令的最小可能指令大小允许代码使用断点进行修补, 并为环绕代码生成最小的干扰。</span><span class="sxs-lookup"><span data-stu-id="b7283-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="b7283-700">`break`指令可以捕获到调试器、不执行任何操作, 或者引发安全异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="b7283-701">确切的行为是实现定义的。</span><span class="sxs-lookup"><span data-stu-id="b7283-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="b7283-702">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`break`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-704">如果 <paramref name="value" /> 为 <see langword="false" />、空引用（Visual Basic 中的 <see langword="Nothing" />）或零，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-705">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-706">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-706">Format</span></span>|<span data-ttu-id="b7283-707">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-707">Assembly Format</span></span>|<span data-ttu-id="b7283-708">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-709">39 < `int32` ></span></span>|<span data-ttu-id="b7283-710">brfalse`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="b7283-711">brnull`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="b7283-712">brzero`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-712">brzero `target`</span></span>|<span data-ttu-id="b7283-713">如果`false`为, 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="b7283-714">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-715">`value`由上一个操作推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="b7283-716">`value`从堆栈中弹出;如果`value` `target`为`false`, 则分支到。</span><span class="sxs-lookup"><span data-stu-id="b7283-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="b7283-717">`brnull` `brzero`如果`brfalse` (类型`int64`、、对象引用`O`、托管指针), 说明 (及其别名和) 将控制转移到指定的目标指令`int32` `value`, 暂时性`*`指针) 为零 (`false`)。 `native int` `&`</span><span class="sxs-lookup"><span data-stu-id="b7283-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="b7283-718">如果`value`为非零 (`true`), 则在下一条指令时继续执行。</span><span class="sxs-lookup"><span data-stu-id="b7283-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="b7283-719">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-720">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-721">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-722">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`brfalse`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-723">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-724">如果 <paramref name="value" /> 为 <see langword="false" />、空引用或零，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-725">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-726">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-726">Format</span></span>|<span data-ttu-id="b7283-727">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-727">Assembly Format</span></span>|<span data-ttu-id="b7283-728">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-729">2C <`int8` ></span></span>|<span data-ttu-id="b7283-730">brfalse`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="b7283-731">brnull`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="b7283-732">brzero`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-732">brzero.s `target`</span></span>|<span data-ttu-id="b7283-733">如果`false`为, 则按指定的偏移量分支到目标指令 (缩写形式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="b7283-734">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-735">`value`由上一个操作推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="b7283-736">`value`从堆栈中弹出;如果`value` `target`为`false`, 则分支到。</span><span class="sxs-lookup"><span data-stu-id="b7283-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="b7283-737">`brnull` `brzero`如果`brfalse.s` (类型`int64`、、对象引用`O`、托管指针), 说明 (及其别名和) 将控制转移到指定的目标指令`int32` `value`, 暂时性`*`指针) 为零 (`false`)。 `native int` `&`</span><span class="sxs-lookup"><span data-stu-id="b7283-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="b7283-738">如果`value`为非零 (`true`), 则在下一条指令时继续执行。</span><span class="sxs-lookup"><span data-stu-id="b7283-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="b7283-739">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-740">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-741">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-742">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`brfalse.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-743">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-744">如果 <paramref name="value" /> 为 <see langword="true" />、非空或非零，则将控制转移到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-745">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-746">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-746">Format</span></span>|<span data-ttu-id="b7283-747">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-747">Assembly Format</span></span>|<span data-ttu-id="b7283-748">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-749">3A < `int32` ></span></span>|<span data-ttu-id="b7283-750">brtrue`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="b7283-751">brinst`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-751">brinst `target`</span></span>|<span data-ttu-id="b7283-752">如果为非零 (`true`), 则按指定的偏移量分支到目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="b7283-753">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-754">`value`由上一个操作推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="b7283-755">`value`从堆栈中弹出;如果`value` `target`为`true`, 则分支到。</span><span class="sxs-lookup"><span data-stu-id="b7283-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="b7283-756">`true`如果`brtrue` (`value` type`native int`) 的值不为零 (), 指令会将控制转移到指定的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="b7283-757">如果`value`为零 (`false`), 则执行将在下一条指令继续。</span><span class="sxs-lookup"><span data-stu-id="b7283-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="b7283-758">如果`value`是对象引用 (类型`O`), 则`brinst`为的对象引用`brtrue`(如果它表示对象的实例, 则为) 传输控件 (例如, 如果它不是 null 对象引用, 请<xref:System.Reflection.Emit.OpCodes.Ldnull>参见)。</span><span class="sxs-lookup"><span data-stu-id="b7283-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="b7283-759">目标指令表示为与当前指令后面的指令开头之间的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-760">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-761">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-762">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`brtrue`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-763">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-764">如果 <paramref name="value" /> 为 <see langword="true" />、非空或非零，则将控制转移到目标指令（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-765">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-766">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-766">Format</span></span>|<span data-ttu-id="b7283-767">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-767">Assembly Format</span></span>|<span data-ttu-id="b7283-768">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-769">2D < `int8` ></span></span>|<span data-ttu-id="b7283-770">brtrue`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="b7283-771">brinst`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-771">brinst.s `target`</span></span>|<span data-ttu-id="b7283-772">如果非零 (), 则按指定的偏移量分支到`true`目标指令 (缩写形式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="b7283-773">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-774">`value`由上一个操作推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="b7283-775">`value`从堆栈中弹出;如果`value` `target`为`true`, 则分支到。</span><span class="sxs-lookup"><span data-stu-id="b7283-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="b7283-776">`true`如果`brtrue.s` (`value` type`native int`) 的值不为零 (), 指令会将控制转移到指定的目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="b7283-777">如果`value`为零 (`false`), 则执行将在下一条指令继续。</span><span class="sxs-lookup"><span data-stu-id="b7283-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="b7283-778">如果`value`是对象引用 (类型`O`), 则`brinst`为的对象引用`brtrue`(如果它表示对象的实例, 则为) 传输控件 (例如, 如果它不是 null 对象引用, 请<xref:System.Reflection.Emit.OpCodes.Ldnull>参见)。</span><span class="sxs-lookup"><span data-stu-id="b7283-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="b7283-779">目标指令表示为与当前指令后面的指令开头之间的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-780">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="b7283-781">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="b7283-782">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`brtrue.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-783">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-784">调用由传递的方法说明符指示的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-784">Calls the method indicated by the passed method descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-785">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-786">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-786">Format</span></span>|<span data-ttu-id="b7283-787">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-787">Assembly Format</span></span>|<span data-ttu-id="b7283-788">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-789">28 < `T` ></span></span>|<span data-ttu-id="b7283-790">拨`methodDesc`</span><span class="sxs-lookup"><span data-stu-id="b7283-790">call `methodDesc`</span></span>|<span data-ttu-id="b7283-791">调用所描述`methodDesc`的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="b7283-792">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-793">`arg1` 通过`argN`将方法参数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-794">`arg1` 通过`argN`从堆栈中弹出方法自变量; 使用这些参数执行方法调用, 并将控件传输到方法说明符所引用的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="b7283-795">完成后, 调用方方法将生成一个返回值, 并将其发送给调用方。</span><span class="sxs-lookup"><span data-stu-id="b7283-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="b7283-796">将返回值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-797">`call`指令调用通过指令传递的方法说明符指示的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="b7283-798">方法描述符是一种元数据标记, 用于指示要调用的方法, 以及要传递到该方法的堆栈上的参数的数量、类型和顺序, 以及要使用的调用约定。</span><span class="sxs-lookup"><span data-stu-id="b7283-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="b7283-799">指令前面可以跟一个`tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 前缀指令, 以指定在传输控件之前应释放当前方法状态。 `call`</span><span class="sxs-lookup"><span data-stu-id="b7283-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="b7283-800">如果调用将控制转移到比源方法更高的信任方法, 则不会释放堆栈帧。</span><span class="sxs-lookup"><span data-stu-id="b7283-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="b7283-801">相反, 执行将以无提示方式继续`tail` , 就好像尚未提供。</span><span class="sxs-lookup"><span data-stu-id="b7283-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="b7283-802">元数据标记携带足够的信息来确定调用是静态方法、实例方法、虚方法还是全局函数。</span><span class="sxs-lookup"><span data-stu-id="b7283-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="b7283-803">在所有这些情况下, 均从方法描述符完全确定目标地址 (与<xref:System.Reflection.Emit.OpCodes.Callvirt>调用虚拟方法的指令相比, 其中, 目标地址也依赖于实例的运行时类型)在之前推送的<xref:System.Reflection.Emit.OpCodes.Callvirt>引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="b7283-804">自变量以从左到右的顺序放置在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="b7283-805">也就是说, 第一个参数是计算并放置在堆栈上, 然后是第三个参数, 然后是第三个参数, 直到所有必需的参数按降序排列。</span><span class="sxs-lookup"><span data-stu-id="b7283-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="b7283-806">有三个重要的特殊情况:</span><span class="sxs-lookup"><span data-stu-id="b7283-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="b7283-807">对实例 (或虚拟) 方法的调用必须将该实例引用推送到任何用户可见参数之前。</span><span class="sxs-lookup"><span data-stu-id="b7283-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="b7283-808">实例引用不得为空引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="b7283-809">在元数据中携带的签名不包含用于`this`指针的参数列表中的条目; 相反, 它使用位来指示该方法是否要求`this`传递指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="b7283-810">使用`call` (`callvirt`而不是) 调用虚拟方法是有效的; 这表示使用方法指定的类 (而不是从所调用的对象动态指定) 解析方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="b7283-811">请注意, 可以使用`Invoke` `call`或`callvirt`指令调用委托的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="b7283-812"><xref:System.Security.SecurityException>如果系统安全不允许调用方访问调用的方法, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="b7283-813">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 可能会进行安全检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7283-814">当在值类型上调用 system.object 的方法时, 请考虑将`constrained`前缀`callvirt`与`call`指令一起使用, 而不是发出指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="b7283-815">这就不必发出不同的 IL, 具体取决于值类型是否重写方法, 避免出现潜在的版本控制问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="b7283-816">对值类型`constrained`调用接口方法时, 请考虑使用前缀, 因为实现接口方法的值类型方法可`MethodImpl`使用进行更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="b7283-817"><xref:System.Reflection.Emit.OpCodes.Constrained>操作码中更详细地介绍了这些问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="b7283-818">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`call`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-819">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="b7283-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="b7283-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7283-821">为<xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> 调用`varargs`提供了方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="b7283-822"><xref:System.Reflection.Emit.ILGenerator.Emit%2A>使用方法进行正常调用。</span><span class="sxs-lookup"><span data-stu-id="b7283-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-823">通过调用约定描述的参数调用在计算堆栈上指示的方法（作为指向入口点的指针）。</span><span class="sxs-lookup"><span data-stu-id="b7283-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-824">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-825">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-825">Format</span></span>|<span data-ttu-id="b7283-826">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-826">Assembly Format</span></span>|<span data-ttu-id="b7283-827">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-828">29 < `T` ></span></span>|<span data-ttu-id="b7283-829">calli`callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="b7283-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="b7283-830">使用调用约定描述的参数调用指向的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="b7283-831">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-832">`arg1` 通过`argN`将方法参数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-833">方法输入指针被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-834">方法自`arg1`变量`argN`到, 并从堆栈中弹出方法输入指针; 执行对方法的调用。</span><span class="sxs-lookup"><span data-stu-id="b7283-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="b7283-835">完成后, 调用方方法将生成一个返回值, 并将其发送给调用方。</span><span class="sxs-lookup"><span data-stu-id="b7283-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="b7283-836">将返回值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-837">指令使用参数`arg1` 通过`argN`调用方法输入指针。 `calli`</span><span class="sxs-lookup"><span data-stu-id="b7283-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="b7283-838">这些参数的类型由特定的调用约定 (`callSiteDesc`) 描述。</span><span class="sxs-lookup"><span data-stu-id="b7283-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="b7283-839">指令前面可以跟前缀 (<xref:System.Reflection.Emit.OpCodes.Tailcall>), 以指定在传输控制之前应释放当前方法状态。 `tail` `calli`</span><span class="sxs-lookup"><span data-stu-id="b7283-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="b7283-840">如果调用会将控制传输到比源方法更高的信任方法, 则不会释放堆栈帧;相反, 执行将以无提示方式继续, `tail`就好像尚未提供。</span><span class="sxs-lookup"><span data-stu-id="b7283-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="b7283-841">假定方法输入指针是指向本机代码 (目标计算机) 的特定指针, 该指针可以使用调用约定描述的参数 (独立签名的元数据标记) 合法调用。</span><span class="sxs-lookup"><span data-stu-id="b7283-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="b7283-842">此类指针可使用<xref:System.Reflection.Emit.OpCodes.Ldftn>或<xref:System.Reflection.Emit.OpCodes.Ldvirtftn>说明创建, 或通过本机代码传入。</span><span class="sxs-lookup"><span data-stu-id="b7283-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="b7283-843">不动态检查调用约定, 因此, 如果目标不实际使用`calli`指定的调用约定, 则使用指令的代码将无法正常运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="b7283-844">自变量以从左到右的顺序放置在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="b7283-845">也就是说, 第一个参数是计算并放置在堆栈上, 然后是第三个参数, 然后是第三个参数, 直到所有必需的参数按降序排列。</span><span class="sxs-lookup"><span data-stu-id="b7283-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="b7283-846">实例或虚方法的参数生成代码序列必须在任何用户可见参数之前推送该实例引用 (不得为空引用)。</span><span class="sxs-lookup"><span data-stu-id="b7283-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="b7283-847"><xref:System.Security.SecurityException>如果系统安全不允许调用方访问调用的方法, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="b7283-848">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时时, 可能会进行安全检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-849">以下<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A>方法可用于对堆栈`calli`执行指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="b7283-850">请注意`calli` , 应通过以下方法调用, 而不是<xref:System.Reflection.Emit.ILGenerator.Emit%2A>使用类将指令直接放置在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="b7283-851">对于使用托管调用约定的调用, EmitCalli (操作码、CallingConventions、Type、type []、Type [])。</span><span class="sxs-lookup"><span data-stu-id="b7283-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="b7283-852">ILGenerator 使用非托管调用约定调用 EmitCalli (Opcode, CallingConvention, Type, Type [])。</span><span class="sxs-lookup"><span data-stu-id="b7283-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-853">对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-854">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-855">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-855">Format</span></span>|<span data-ttu-id="b7283-856">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-856">Assembly Format</span></span>|<span data-ttu-id="b7283-857">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-858">6F < `T` ></span></span>|<span data-ttu-id="b7283-859">callvirt`method`</span><span class="sxs-lookup"><span data-stu-id="b7283-859">callvirt `method`</span></span>|<span data-ttu-id="b7283-860">调用与`obj`相关联的特定方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="b7283-861">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-862">对象引用`obj`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-863">`arg1` 通过`argN`将方法参数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-864">通过`arg1` `obj` `obj`和从堆栈中弹出对象引用的方法参数; 使用这些参数执行方法调用, 并将控件传输到方法所引用的方法`argN`元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="b7283-865">完成后, 调用方方法将生成一个返回值, 并将其发送给调用方。</span><span class="sxs-lookup"><span data-stu-id="b7283-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="b7283-866">将返回值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-867">`callvirt`指令对对象调用后期绑定方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="b7283-868">也就是说, 将根据的运行时类型`obj`而不是方法指针中的编译时类选择方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="b7283-869">`Callvirt`可用于调用虚拟方法和实例方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="b7283-870">指令前面可以跟一个`tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 前缀, 以指定在传输控制之前应释放当前堆栈帧。 `callvirt`</span><span class="sxs-lookup"><span data-stu-id="b7283-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="b7283-871">如果调用会将控制传输到比原始方法更高的信任方法, 则不会释放堆栈帧。</span><span class="sxs-lookup"><span data-stu-id="b7283-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="b7283-872">方法元数据标记提供要调用的方法的名称、类和签名。</span><span class="sxs-lookup"><span data-stu-id="b7283-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="b7283-873">与`obj`关联的类是它是其实例的类。</span><span class="sxs-lookup"><span data-stu-id="b7283-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="b7283-874">如果类定义了与指定方法名称和签名匹配的非静态方法, 则会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="b7283-875">否则, 会按顺序检查此类的基类链中的所有类。</span><span class="sxs-lookup"><span data-stu-id="b7283-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="b7283-876">如果未找到任何方法, 则是错误的。</span><span class="sxs-lookup"><span data-stu-id="b7283-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="b7283-877">`Callvirt`在调用方法之前, 将对象和关联参数从计算堆栈中弹出。</span><span class="sxs-lookup"><span data-stu-id="b7283-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="b7283-878">如果该方法具有返回值, 则在方法完成后将其推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="b7283-879">在被调用方方, `obj`参数作为`arg1`参数1访问, 依此类推。</span><span class="sxs-lookup"><span data-stu-id="b7283-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="b7283-880">自变量以从左到右的顺序放置在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="b7283-881">也就是说, 第一个参数是计算并放置在堆栈上, 然后是第三个参数, 然后是第三个参数, 直到所有必需的参数按降序排列。</span><span class="sxs-lookup"><span data-stu-id="b7283-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="b7283-882">实例引用`obj` (始终`callvirt`需要) 必须在任何用户可见参数之前推送。</span><span class="sxs-lookup"><span data-stu-id="b7283-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="b7283-883">签名 (包含在元数据标记中) 不需要包含在此指针的参数列表中的条目。</span><span class="sxs-lookup"><span data-stu-id="b7283-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="b7283-884">请注意, 还可以使用<xref:System.Reflection.Emit.OpCodes.Call>指令调用虚拟方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="b7283-885"><xref:System.MissingMethodException>如果在与其关联`obj`的类或其任何基类中找不到具有指定名称和签名的非静态方法, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="b7283-886">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-887"><xref:System.NullReferenceException>如果 obj 为 null, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="b7283-888"><xref:System.Security.SecurityException>如果系统安全不向调用方授予对所调用方法的访问权限, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="b7283-889">当 CIL 转换为本机代码而不是运行时, 可能会进行安全检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7283-890">当在值类型上调用 system.object 的方法时, 请考虑在`constrained` `callvirt`指令中使用前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="b7283-891">这就不必发出不同的 IL, 具体取决于值类型是否重写方法, 避免出现潜在的版本控制问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="b7283-892">对值类型`constrained`调用接口方法时, 请考虑使用前缀, 因为实现接口方法的值类型方法可`MethodImpl`使用进行更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="b7283-893"><xref:System.Reflection.Emit.OpCodes.Constrained>操作码中更详细地介绍了这些问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="b7283-894">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`callvirt`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-895">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="b7283-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="b7283-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-897">尝试将引用传递的对象转换为指定的类。</span><span class="sxs-lookup"><span data-stu-id="b7283-897">Attempts to cast an object passed by reference to the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-898">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-899">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-899">Format</span></span>|<span data-ttu-id="b7283-900">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-900">Assembly Format</span></span>|<span data-ttu-id="b7283-901">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-902">74 < `T` ></span></span>|<span data-ttu-id="b7283-903">castclass`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-903">castclass `class`</span></span>|<span data-ttu-id="b7283-904">将对象强制转换为类型`class`的新对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="b7283-905">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-906">对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-907">从堆栈中弹出对象引用;被引用对象被强制转换为指定`class`的。</span><span class="sxs-lookup"><span data-stu-id="b7283-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="b7283-908">如果成功, 则将新的对象引用推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-909">指令尝试将位于堆栈顶部的对象引用 ( `O`类型) 强制转换为指定的类。 `castclass`</span><span class="sxs-lookup"><span data-stu-id="b7283-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="b7283-910">新类由指示所需类的元数据标记指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="b7283-911">如果堆栈顶部对象的类未实现新类 (假定新类为接口), 并且不是新类<xref:System.InvalidCastException>的派生类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="b7283-912">如果对象引用为空引用, 则将`castclass`成功, 并返回新的对象作为空引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="b7283-913"><xref:System.InvalidCastException>如果无法将 obj 强制转换为类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="b7283-914"><xref:System.TypeLoadException>如果找不到类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="b7283-915">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-915">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-916">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`castclass`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-917">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-918">比较两个值。</span><span class="sxs-lookup"><span data-stu-id="b7283-918">Compares two values.</span></span> <span data-ttu-id="b7283-919">如果这两个值相等，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上；否则，将 0 (<see langword="int32" />) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-920">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-921">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-921">Format</span></span>|<span data-ttu-id="b7283-922">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-922">Assembly Format</span></span>|<span data-ttu-id="b7283-923">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="b7283-924">FE 01</span></span>|<span data-ttu-id="b7283-925">ceq</span><span class="sxs-lookup"><span data-stu-id="b7283-925">ceq</span></span>|<span data-ttu-id="b7283-926">如果`value1` 等于`value2`, 则推送 1; 否则推送0。</span><span class="sxs-lookup"><span data-stu-id="b7283-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="b7283-927">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-928">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-929">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-930">`value2`和`value1`从堆栈中弹出;`value1`与进行`value2`比较。</span><span class="sxs-lookup"><span data-stu-id="b7283-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-931">`value1` 如果`value2`等于, 则将1推送到堆栈上; 否则, 将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-932">指令比较`value1` 和`value2`。 `ceq`</span><span class="sxs-lookup"><span data-stu-id="b7283-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="b7283-933">如果`value1` `int32`等于, 则将 1 (类型) 推送到堆栈上。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="b7283-934">否则, 将 0 ( `int32`类型) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="b7283-935">对于浮点数, 如果数字`ceq`未排序 (或两者均为 NaN), 则将返回0。</span><span class="sxs-lookup"><span data-stu-id="b7283-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="b7283-936">无限值等于自身。</span><span class="sxs-lookup"><span data-stu-id="b7283-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="b7283-937">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ceq`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-939">比较两个值。</span><span class="sxs-lookup"><span data-stu-id="b7283-939">Compares two values.</span></span> <span data-ttu-id="b7283-940">如果第一个值大于第二个值，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上；反之，将 0 (<see langword="int32" />) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-941">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-942">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-942">Format</span></span>|<span data-ttu-id="b7283-943">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-943">Assembly Format</span></span>|<span data-ttu-id="b7283-944">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="b7283-945">FE 02</span></span>|<span data-ttu-id="b7283-946">cgt</span><span class="sxs-lookup"><span data-stu-id="b7283-946">cgt</span></span>|<span data-ttu-id="b7283-947">`value1` 如果`value2`大于, 则返回 1; 否则推送0。</span><span class="sxs-lookup"><span data-stu-id="b7283-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="b7283-948">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-949">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-950">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-951">`value2`和`value1`从堆栈中弹出;`cgt`如果大于`value1`,则测试。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-952">`value1` 如果`value2`大于, 则将1推送到堆栈上; 否则, 将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-953">指令比较`value1` 和`value2`。 `cgt`</span><span class="sxs-lookup"><span data-stu-id="b7283-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="b7283-954">如果`value1`严格`int32`大于, 则将值1推送到堆栈上。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="b7283-955">否则, `int32`将值0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="b7283-956">对于浮点数, 如果数字`cgt`未排序 (也就是说, 如果一个参数或两个参数均为 NaN), 则返回0。</span><span class="sxs-lookup"><span data-stu-id="b7283-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="b7283-957">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`cgt`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-959">比较两个无符号的或不可排序的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-959">Compares two unsigned or unordered values.</span></span> <span data-ttu-id="b7283-960">如果第一个值大于第二个值，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上；反之，将 0 (<see langword="int32" />) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-961">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-962">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-962">Format</span></span>|<span data-ttu-id="b7283-963">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-963">Assembly Format</span></span>|<span data-ttu-id="b7283-964">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="b7283-965">FE 03</span></span>|<span data-ttu-id="b7283-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="b7283-966">cgt.un</span></span>|<span data-ttu-id="b7283-967">`value1` 如果`value2`大于, 则推送 1; 否则推送 0 (无符号值)。</span><span class="sxs-lookup"><span data-stu-id="b7283-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-968">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-969">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-970">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-971">`value2`和`value1`从堆栈中弹出;`cgt.un`如果大于`value1`,则测试。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-972">`value1` 如果`value2`大于, 则将1推送到堆栈上; 否则, 将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-973">如果下列任一项为`true` , 则将值1推送到堆栈上:`int32`</span><span class="sxs-lookup"><span data-stu-id="b7283-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="b7283-974">对于浮点数, `value1`不按`value2`相对顺序排序。</span><span class="sxs-lookup"><span data-stu-id="b7283-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="b7283-975">对于整数值, `value1`严格`value2`大于被视为无符号数字。</span><span class="sxs-lookup"><span data-stu-id="b7283-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="b7283-976">否则, 将值0推送到堆栈上。 `int32`</span><span class="sxs-lookup"><span data-stu-id="b7283-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="b7283-977">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`cgt.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-979">如果值不是有限数，则引发 <see cref="T:System.ArithmeticException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-980">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-981">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-981">Format</span></span>|<span data-ttu-id="b7283-982">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-982">Assembly Format</span></span>|<span data-ttu-id="b7283-983">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-984">C3</span><span class="sxs-lookup"><span data-stu-id="b7283-984">C3</span></span>|<span data-ttu-id="b7283-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="b7283-985">ckfinite</span></span>|<span data-ttu-id="b7283-986">如果<xref:System.ArithmeticException>值不是有限数, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="b7283-987">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-988">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-988">`value` is pushed onto the stack.</span></span> 
  
2.  <span data-ttu-id="b7283-989">`value`从堆栈中弹出, 并`ckfinite`对其执行指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="b7283-990">`value`如果未引发异常, 则将被推送回堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-991">如果`ckfinite instruction` <xref:System.ArithmeticException> `+-` (浮点数) 为 "不是数字" 值 (NaN) 或无穷值, 则会引发。 `value`</span><span class="sxs-lookup"><span data-stu-id="b7283-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="b7283-992">`Ckfinite`如果没有引发异常, 则将值保留在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="b7283-993">如果`value`不是浮点数, 则不指定执行。</span><span class="sxs-lookup"><span data-stu-id="b7283-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="b7283-994"><xref:System.ArithmeticException>如果`value`不是 "normal" 数字, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="b7283-995">请注意, 特殊异常或派生类<xref:System.ArithmeticException>可能更合适, 将错误值传递到异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="b7283-996">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ckfinite`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-998">比较两个值。</span><span class="sxs-lookup"><span data-stu-id="b7283-998">Compares two values.</span></span> <span data-ttu-id="b7283-999">如果第一个值小于第二个值，则将整数值 1 <see langword="(int32" />) 推送到计算堆栈上；反之，将 0 (<see langword="int32" />) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1000">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1001">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1001">Format</span></span>|<span data-ttu-id="b7283-1002">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1002">Assembly Format</span></span>|<span data-ttu-id="b7283-1003">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="b7283-1004">FE 04</span></span>|<span data-ttu-id="b7283-1005">clt</span><span class="sxs-lookup"><span data-stu-id="b7283-1005">clt</span></span>|<span data-ttu-id="b7283-1006">`value1` 如果`value2`小于, 则返回 1; 否则推送0。</span><span class="sxs-lookup"><span data-stu-id="b7283-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="b7283-1007">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1007">The stack transitional behavior, in sequential order, is:</span></span> 

1.  <span data-ttu-id="b7283-1008">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1008">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1009">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1009">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1010">`value2`和`value1`从堆栈中弹出;`clt`如果小于`value1`,则测试。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1010">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-1011">`value1` 如果`value2`小于, 则将1推送到堆栈上; 否则, 将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1011">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1012">指令比较`value1` 和`value2`。 `clt`</span><span class="sxs-lookup"><span data-stu-id="b7283-1012">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="b7283-1013">如果`value1`严格`int32`小于, 则将值1推送到堆栈上。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1013">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="b7283-1014">否则, `int32`将值0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1014">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="b7283-1015">对于浮点数, 如果数字`clt`未排序 (也就是说, 如果一个参数或两个参数均为 NaN), 则返回0。</span><span class="sxs-lookup"><span data-stu-id="b7283-1015">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="b7283-1016">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`clt`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1016">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1017">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1017">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1018">比较无符号的或不可排序的值 <paramref name="value1" /> 和 <paramref name="value2" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1018">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span></span> <span data-ttu-id="b7283-1019">如果 <paramref name="value1" /> 小于 <paramref name="value2" />，则将整数值 1 <see langword="(int32" /> ) 推送到计算堆栈上；反之，将 0 ( <see langword="int32" /> ) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1019">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1020">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1021">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1021">Format</span></span>|<span data-ttu-id="b7283-1022">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1022">Assembly Format</span></span>|<span data-ttu-id="b7283-1023">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1024">FE 05</span><span class="sxs-lookup"><span data-stu-id="b7283-1024">FE 05</span></span>|<span data-ttu-id="b7283-1025">clt.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1025">clt.un</span></span>|<span data-ttu-id="b7283-1026">`value1` 如果`value2`小于, 则推送 1; 否则推送 0 (无符号值)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1026">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="b7283-1027">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1028">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1028">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1029">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1029">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1030">`value2`和`value1`从堆栈中弹出;`clt.un`如果小于`value1`,则测试。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1030">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-1031">`value1` 如果`value2`小于, 则将1推送到堆栈上; 否则, 将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1031">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1032">指令比较`value1` 和`value2`。 `clt.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1032">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="b7283-1033">如果满足以下任一条件, 则将值1推送到堆栈上:`int32`</span><span class="sxs-lookup"><span data-stu-id="b7283-1033">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="b7283-1034">`value1`严格小于`value2` (对于`clt`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1034">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="b7283-1035">对于浮点数, `value1`不按`value2`相对顺序排序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1035">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="b7283-1036">对于整数值, `value1`严格`value2`小于被视为无符号数字。</span><span class="sxs-lookup"><span data-stu-id="b7283-1036">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="b7283-1037">否则, `int32`将值0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1037">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="b7283-1038">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`clt.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1038">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1039">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1039">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1040">约束要对其进行虚方法调用的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1040">Constrains the type on which a virtual method call is made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1041">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1041">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1042">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1042">Format</span></span>|<span data-ttu-id="b7283-1043">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1043">Assembly Format</span></span>|<span data-ttu-id="b7283-1044">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1044">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1045">FE 16 <`T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-1045">FE 16 < `T` ></span></span>|<span data-ttu-id="b7283-1046">有限.</span><span class="sxs-lookup"><span data-stu-id="b7283-1046">constrained.</span></span> `thisType`|<span data-ttu-id="b7283-1047">对被约束为类型`T`的类型调用虚方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-1047">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="b7283-1048">仅允许`callvirt`对指令使用前缀。`constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1048">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="b7283-1049">此时 MSIL 堆栈的状态必须如下所示:</span><span class="sxs-lookup"><span data-stu-id="b7283-1049">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="b7283-1050">托管指针`ptr`将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1050">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="b7283-1051">的`ptr`类型必须为的托管指针 (`&`) `thisType`。</span><span class="sxs-lookup"><span data-stu-id="b7283-1051">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="b7283-1052">请注意, 这与没有前缀`callvirt`指令的大小写不同, 后者需要`thisType`引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-1052">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="b7283-1053">方法自`arg1`变量`argN`会被推送到堆栈上, 就像使用没有前缀`callvirt`指令一样。</span><span class="sxs-lookup"><span data-stu-id="b7283-1053">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="b7283-1054">前缀旨在允许`callvirt`以统一的方式进行说明, 而不管`thisType`它是值类型还是引用类型。 `constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1054">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="b7283-1055">如果指令已作为前缀,则将按如下所示执行指令:`thisType` `constrained` `callvirt` `method`</span><span class="sxs-lookup"><span data-stu-id="b7283-1055">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="b7283-1056">如果`thisType`是引用类型 (而不是值类型), 则`ptr`将取消引用并将作为 " `callvirt` this" 指针传递到的`method`。</span><span class="sxs-lookup"><span data-stu-id="b7283-1056">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="b7283-1057">如果`thisType`是值类型并`thisType`实现`method` `method` , 则`ptr` `call` 会将未修改的作为"this`method` " 指针传递到指令, 以便实现`thisType`.</span><span class="sxs-lookup"><span data-stu-id="b7283-1057">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="b7283-1058">如果`thisType`是值类型且`thisType`不实现`method` , 则`ptr`将取消引用并装箱`callvirt` `method` , 并将其作为 "this" 指针传递到指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-1058">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="b7283-1059">仅当`method`在、 <xref:System.Object> <xref:System.ValueType>或`thisType`上定义时, 才会发生这种情况, 而不会重写。 <xref:System.Enum></span><span class="sxs-lookup"><span data-stu-id="b7283-1059">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="b7283-1060">在这种情况下, 装箱会导致生成原始对象的副本。</span><span class="sxs-lookup"><span data-stu-id="b7283-1060">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="b7283-1061">但是, 因为<xref:System.Object>、 <xref:System.ValueType>和<xref:System.Enum>的任何方法都不能修改对象的状态, 所以无法检测到这种情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-1061">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="b7283-1062">`constrained`前缀支持创建泛型代码的 IL 生成器。</span><span class="sxs-lookup"><span data-stu-id="b7283-1062">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="b7283-1063">通常, `callvirt`指令在值类型上无效。</span><span class="sxs-lookup"><span data-stu-id="b7283-1063">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="b7283-1064">相反, 在编译时 IL 编译器必须有效地执行上面所述的 "this" 转换, 具体取决于`ptr`和所调用方法的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1064">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="b7283-1065">但是, 如果`ptr`是在编译时未知的泛型类型, 则不能在编译时进行此转换。</span><span class="sxs-lookup"><span data-stu-id="b7283-1065">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="b7283-1066">操作码允许 IL 编译器以统一的方式对虚拟函数进行调用, 而不管`ptr`它是值类型还是引用类型。 `constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1066">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="b7283-1067">尽管它适用于`thisType`属于泛型类型变量的情况`constrained` , 但前缀还适用于非泛型类型, 并且可以降低以隐藏值类型之间的区别的语言生成虚拟调用的复杂性引用类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1067">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="b7283-1068">`constrained`使用前缀还可以避免值类型出现潜在的版本管理问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-1068">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="b7283-1069">如果未使用前缀, 则必须根据值类型是否重写 system.object 的方法来发出不同的 IL。 `constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1069">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="b7283-1070">例如, 如果值`V`类型重写对象 ToString () 方法`Object.ToString()` `call` `V.ToString()` , 则会`box`发出指令; 如果不是, 则发出指令和`callvirt`指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-1070">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="b7283-1071">如果稍后要删除重写, 并且在后一种情况下, 如果后来添加了替代, 则可能会出现版本控制问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-1071">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="b7283-1072">前缀还可用于对值类型调用接口方法, 因为实现接口方法的值类型方法可`MethodImpl`使用进行更改。 `constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1072">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="b7283-1073">如果未使用前缀, 则强制编译器在编译时选择要绑定到的值类型的方法。 `constrained`</span><span class="sxs-lookup"><span data-stu-id="b7283-1073">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="b7283-1074">`constrained`使用前缀允许 MSIL 绑定到在运行时实现接口方法的方法, 而不是在编译时。</span><span class="sxs-lookup"><span data-stu-id="b7283-1074">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="b7283-1075">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`constrained`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1075">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1076">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-1076">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1077">将位于计算堆栈顶部的值转换为 <see langword="native int" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1077">Converts the value on top of the evaluation stack to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1078">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1078">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1079">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1079">Format</span></span>|<span data-ttu-id="b7283-1080">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1080">Assembly Format</span></span>|<span data-ttu-id="b7283-1081">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1081">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1082">D3</span><span class="sxs-lookup"><span data-stu-id="b7283-1082">D3</span></span>|<span data-ttu-id="b7283-1083">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1083">conv.i</span></span>|<span data-ttu-id="b7283-1084">转换为`native int`, 推送`native int`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1084">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1085">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1085">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1086">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1086">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1087">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1087">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1088">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1088">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1089">`conv.i`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1089">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1090">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1090">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1091">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1091">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1092">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1092">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1093">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1093">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1094">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1094">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1095">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1095">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1096">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1096">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1097">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1097">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1098">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1098">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1099">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1099">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1100">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1100">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1101">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1101">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1102">将位于计算堆栈顶部的值转换为 <see langword="int8" />，然后将其扩展（填充）为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1102">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1103">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1103">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1104">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1104">Format</span></span>|<span data-ttu-id="b7283-1105">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1105">Assembly Format</span></span>|<span data-ttu-id="b7283-1106">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1106">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1107">67</span><span class="sxs-lookup"><span data-stu-id="b7283-1107">67</span></span>|<span data-ttu-id="b7283-1108">约定 i1</span><span class="sxs-lookup"><span data-stu-id="b7283-1108">conv.i1</span></span>|<span data-ttu-id="b7283-1109">转换为`int8`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1109">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1110">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1110">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1111">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1111">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1112">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1112">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1113">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1113">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1114">`conv.i1`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1114">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1115">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1115">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1116">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1116">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1117">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1117">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1118">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1118">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1119">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1119">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1120">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1120">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1121">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1121">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1122">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1122">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1123">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1123">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1124">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1124">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1125">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1125">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1126">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1126">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1127">将位于计算堆栈顶部的值转换为 <see langword="int16" />，然后将其扩展（填充）为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1127">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1128">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1128">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1129">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1129">Format</span></span>|<span data-ttu-id="b7283-1130">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1130">Assembly Format</span></span>|<span data-ttu-id="b7283-1131">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1131">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1132">68</span><span class="sxs-lookup"><span data-stu-id="b7283-1132">68</span></span>|<span data-ttu-id="b7283-1133">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1133">conv.i2</span></span>|<span data-ttu-id="b7283-1134">转换为`int16`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1134">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1135">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1135">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1136">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1136">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1137">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1137">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1138">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1138">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1139">`conv.i2`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1139">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1140">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1140">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1141">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1141">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1142">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1142">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1143">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1143">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1144">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1144">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1145">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1145">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1146">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1146">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1147">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1147">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1148">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1148">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1149">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1149">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1150">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1150">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1151">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1151">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1152">将位于计算堆栈顶部的值转换为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1152">Converts the value on top of the evaluation stack to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1153">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1154">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1154">Format</span></span>|<span data-ttu-id="b7283-1155">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1155">Assembly Format</span></span>|<span data-ttu-id="b7283-1156">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1157">69</span><span class="sxs-lookup"><span data-stu-id="b7283-1157">69</span></span>|<span data-ttu-id="b7283-1158">i4</span><span class="sxs-lookup"><span data-stu-id="b7283-1158">conv.i4</span></span>|<span data-ttu-id="b7283-1159">转换为`int32`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1159">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1160">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1161">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1161">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1162">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1162">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1163">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1163">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1164">`conv.i4`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1164">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1165">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1165">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1166">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1166">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1167">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1167">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1168">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1168">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1169">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1169">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1170">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1170">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1171">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1171">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1172">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1172">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1173">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1173">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1174">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1174">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1175">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1176">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1176">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1177">将位于计算堆栈顶部的值转换为 <see langword="int64" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1177">Converts the value on top of the evaluation stack to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1178">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1179">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1179">Format</span></span>|<span data-ttu-id="b7283-1180">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1180">Assembly Format</span></span>|<span data-ttu-id="b7283-1181">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1182">6A</span><span class="sxs-lookup"><span data-stu-id="b7283-1182">6A</span></span>|<span data-ttu-id="b7283-1183">i8</span><span class="sxs-lookup"><span data-stu-id="b7283-1183">conv.i8</span></span>|<span data-ttu-id="b7283-1184">转换为`int64`, 推送`int64`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1184">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1185">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1186">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1186">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1187">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1187">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1188">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1188">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1189">`conv.i8`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1189">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1190">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1190">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1191">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1191">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1192">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1192">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1193">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1193">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1194">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1194">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1195">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1195">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1196">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1196">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1197">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1197">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1198">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1198">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1199">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1199">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1200">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1202">将位于计算堆栈顶部的有符号值转换为有符号 <see langword="native int" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1202">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1203">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1204">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1204">Format</span></span>|<span data-ttu-id="b7283-1205">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1205">Assembly Format</span></span>|<span data-ttu-id="b7283-1206">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1207">D4</span><span class="sxs-lookup"><span data-stu-id="b7283-1207">D4</span></span>|<span data-ttu-id="b7283-1208">ovf。 i</span><span class="sxs-lookup"><span data-stu-id="b7283-1208">conv.ovf.i</span></span>|<span data-ttu-id="b7283-1209">转换为`native int` (在堆栈上为`native int`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1209">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1210">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1211">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1211">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1212">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1212">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1213">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1213">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1214">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1214">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1215">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i`</span><span class="sxs-lookup"><span data-stu-id="b7283-1215">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1216">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1216">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1217">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1217">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1218">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1218">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1219"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1219"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1220">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1220">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1221">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1221">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1222">将位于计算堆栈顶部的无符号值转换为有符号 <see langword="native int" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1222">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1223">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1223">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1224">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1224">Format</span></span>|<span data-ttu-id="b7283-1225">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1225">Assembly Format</span></span>|<span data-ttu-id="b7283-1226">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1226">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1227">8A</span><span class="sxs-lookup"><span data-stu-id="b7283-1227">8A</span></span>|<span data-ttu-id="b7283-1228">将 ovf</span><span class="sxs-lookup"><span data-stu-id="b7283-1228">conv.ovf.i.un</span></span>|<span data-ttu-id="b7283-1229">将无符号值转换为`native int` (在堆栈上为`native int`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1229">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1230">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1230">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1231">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1231">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1232">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1232">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1233">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1233">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1234">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1234">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1235">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1235">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1236">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1236">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1237">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1237">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1238">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1238">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1239"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1239"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1240">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1241">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1241">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1242">将位于计算堆栈顶部的有符号值转换为有符号的 <see langword="int8" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1242">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1243">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1243">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1244">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1244">Format</span></span>|<span data-ttu-id="b7283-1245">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1245">Assembly Format</span></span>|<span data-ttu-id="b7283-1246">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1246">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1247">B3</span><span class="sxs-lookup"><span data-stu-id="b7283-1247">B3</span></span>|<span data-ttu-id="b7283-1248">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="b7283-1248">conv.ovf.i1</span></span>|<span data-ttu-id="b7283-1249">转换为`int8` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1249">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1250">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1250">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1251">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1251">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1252">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1252">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1253">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1253">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1254">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1254">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1255">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i1`</span><span class="sxs-lookup"><span data-stu-id="b7283-1255">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1256">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1256">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1257">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1257">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1258">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1258">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1259"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1259"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1260">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1260">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1261">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1261">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1262">将位于计算堆栈顶部的无符号值转换为有符号 <see langword="int8" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1262">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1263">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1263">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1264">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1264">Format</span></span>|<span data-ttu-id="b7283-1265">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1265">Assembly Format</span></span>|<span data-ttu-id="b7283-1266">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1266">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1267">82</span><span class="sxs-lookup"><span data-stu-id="b7283-1267">82</span></span>|<span data-ttu-id="b7283-1268">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1268">conv.ovf.i1.un</span></span>|<span data-ttu-id="b7283-1269">将无符号值转换为`int8` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1269">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1270">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1270">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1271">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1271">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1272">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1272">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1273">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1273">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1274">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1274">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1275">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i1.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1275">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1276">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1276">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1277">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1277">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1278">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1278">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1279"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1279"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1280">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i1.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1280">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1281">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1281">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1282">将位于计算堆栈顶部的有符号值转换为有符号 <see langword="int16" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1282">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1283">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1283">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1284">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1284">Format</span></span>|<span data-ttu-id="b7283-1285">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1285">Assembly Format</span></span>|<span data-ttu-id="b7283-1286">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1286">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1287">B5</span><span class="sxs-lookup"><span data-stu-id="b7283-1287">B5</span></span>|<span data-ttu-id="b7283-1288">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="b7283-1288">conv.ovf.i2</span></span>|<span data-ttu-id="b7283-1289">转换为`int16` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1289">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1290">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1290">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1291">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1291">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1292">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1292">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1293">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1293">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1294">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1294">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1295">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1295">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1296">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1296">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1297">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1297">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1298">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1298">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1299"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1299"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1300">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1300">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1301">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1301">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1302">将位于计算堆栈顶部的无符号值转换为有符号 <see langword="int16" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1302">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1303">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1303">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1304">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1304">Format</span></span>|<span data-ttu-id="b7283-1305">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1305">Assembly Format</span></span>|<span data-ttu-id="b7283-1306">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1306">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1307">83</span><span class="sxs-lookup"><span data-stu-id="b7283-1307">83</span></span>|<span data-ttu-id="b7283-1308">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1308">conv.ovf.i2.un</span></span>|<span data-ttu-id="b7283-1309">将无符号值转换为`int16` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1309">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1310">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1310">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1311">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1311">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1312">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1312">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1313">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1313">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1314">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1314">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1315">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i2.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1315">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1316">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1316">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1317">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1317">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1318">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1318">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1319"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1319"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1320">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i2.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1322">将位于计算堆栈顶部的有符号值转换为有符号 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1322">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1323">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1324">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1324">Format</span></span>|<span data-ttu-id="b7283-1325">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1325">Assembly Format</span></span>|<span data-ttu-id="b7283-1326">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1327">B7</span><span class="sxs-lookup"><span data-stu-id="b7283-1327">B7</span></span>|<span data-ttu-id="b7283-1328">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="b7283-1328">conv.ovf.i4</span></span>|<span data-ttu-id="b7283-1329">转换为`int32` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1329">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1330">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1331">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1331">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1332">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1332">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1333">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1333">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1334">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1334">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1335">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i4`</span><span class="sxs-lookup"><span data-stu-id="b7283-1335">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1336">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1336">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1337">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1337">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1338">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1338">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1339"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1339"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1340">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1340">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1341">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1341">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1342">将位于计算堆栈顶部的无符号值转换为有符号 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1342">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1343">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1343">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1344">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1344">Format</span></span>|<span data-ttu-id="b7283-1345">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1345">Assembly Format</span></span>|<span data-ttu-id="b7283-1346">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1346">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1347">84</span><span class="sxs-lookup"><span data-stu-id="b7283-1347">84</span></span>|<span data-ttu-id="b7283-1348">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1348">conv.ovf.i4.un</span></span>|<span data-ttu-id="b7283-1349">将无符号值转换为`int32` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1349">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1350">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1350">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1351">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1351">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1352">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1352">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1353">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1353">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1354">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1354">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1355">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i4.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1355">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1356">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1356">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1357">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1357">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1358">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1358">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1359"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1359"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1360">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i4.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1361">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1361">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1362">将位于计算堆栈顶部的有符号值转换为有符号 <see langword="int64" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1362">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1363">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1364">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1364">Format</span></span>|<span data-ttu-id="b7283-1365">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1365">Assembly Format</span></span>|<span data-ttu-id="b7283-1366">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1367">B9</span><span class="sxs-lookup"><span data-stu-id="b7283-1367">B9</span></span>|<span data-ttu-id="b7283-1368">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="b7283-1368">conv.ovf.i8</span></span>|<span data-ttu-id="b7283-1369">转换为`int64` (在堆栈上为`int64`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1369">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1370">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1371">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1371">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1372">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1372">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1373">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1373">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1374">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1374">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1375">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i8`</span><span class="sxs-lookup"><span data-stu-id="b7283-1375">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1376">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1376">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1377">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1377">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1378">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1378">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1379"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1379"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1380">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1380">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1381">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1381">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1382">将位于计算堆栈顶部的无符号值转换为有符号 <see langword="int64" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1382">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1383">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1383">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1384">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1384">Format</span></span>|<span data-ttu-id="b7283-1385">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1385">Assembly Format</span></span>|<span data-ttu-id="b7283-1386">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1386">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1387">85</span><span class="sxs-lookup"><span data-stu-id="b7283-1387">85</span></span>|<span data-ttu-id="b7283-1388">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1388">conv.ovf.i8.un</span></span>|<span data-ttu-id="b7283-1389">将无符号值转换为`int64` (在堆栈上为`int64`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1389">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1390">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1390">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1391">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1391">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1392">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1392">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1393">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1393">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1394">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1394">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1395">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.i8.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1395">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1396">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1396">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1397">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1397">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1398">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1398">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1399"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1399"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1400">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.i8.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1400">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1401">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1401">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1402">将位于计算堆栈顶部的有符号值转换为 <see langword="unsigned native int" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1402">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1403">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1403">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1404">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1404">Format</span></span>|<span data-ttu-id="b7283-1405">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1405">Assembly Format</span></span>|<span data-ttu-id="b7283-1406">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1406">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1407">D5</span><span class="sxs-lookup"><span data-stu-id="b7283-1407">D5</span></span>|<span data-ttu-id="b7283-1408">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="b7283-1408">conv.ovf.u</span></span>|<span data-ttu-id="b7283-1409">转换为`unsigned native int` (在堆栈上为`native int`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1409">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1410">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1410">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1411">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1411">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1412">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1412">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1413">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1413">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1414">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1414">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1415">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u`</span><span class="sxs-lookup"><span data-stu-id="b7283-1415">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1416">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1416">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1417">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1417">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1418">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1418">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1419"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1419"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1420">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1420">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1421">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1421">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1422">将位于计算堆栈顶部的无符号值转换为 <see langword="unsigned native int" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1422">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1423">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1423">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1424">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1424">Format</span></span>|<span data-ttu-id="b7283-1425">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1425">Assembly Format</span></span>|<span data-ttu-id="b7283-1426">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1426">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1427">8B</span><span class="sxs-lookup"><span data-stu-id="b7283-1427">8B</span></span>|<span data-ttu-id="b7283-1428">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1428">conv.ovf.u.un</span></span>|<span data-ttu-id="b7283-1429">将无符号值转换为`unsigned native int` (在堆栈上为`native int`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1429">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1430">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1430">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1431">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1431">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1432">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1432">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1433">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1433">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1434">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1434">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1435">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1435">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1436">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1436">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1437">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1437">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1438">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1438">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1439"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1439"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1440">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.uvf.u.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1440">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1441">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1441">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1442">将位于计算堆栈顶部的有符号值转换为 <see langword="unsigned int8" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1442">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1443">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1443">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1444">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1444">Format</span></span>|<span data-ttu-id="b7283-1445">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1445">Assembly Format</span></span>|<span data-ttu-id="b7283-1446">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1446">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1447">B4</span><span class="sxs-lookup"><span data-stu-id="b7283-1447">B4</span></span>|<span data-ttu-id="b7283-1448">conv.ovf.u1</span><span class="sxs-lookup"><span data-stu-id="b7283-1448">conv.ovf.u1</span></span>|<span data-ttu-id="b7283-1449">转换为`unsigned int8` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1449">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1450">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1450">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1451">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1451">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1452">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1452">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1453">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1453">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1454">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1454">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1455">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u1`</span><span class="sxs-lookup"><span data-stu-id="b7283-1455">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1456">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1456">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1457">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1457">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1458">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1458">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1459"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1459"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1460">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1460">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1461">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1461">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1462">将位于计算堆栈顶部的无符号值转换为 <see langword="unsigned int8" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1462">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1463">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1463">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1464">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1464">Format</span></span>|<span data-ttu-id="b7283-1465">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1465">Assembly Format</span></span>|<span data-ttu-id="b7283-1466">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1466">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1467">86</span><span class="sxs-lookup"><span data-stu-id="b7283-1467">86</span></span>|<span data-ttu-id="b7283-1468">conv.ovf.u1.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1468">conv.ovf.u1.un</span></span>|<span data-ttu-id="b7283-1469">将无符号值转换为`unsigned int8` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1469">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1470">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1470">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1471">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1471">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1472">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1472">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1473">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1473">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1474">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1474">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1475">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u1.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1475">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1476">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1476">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1477">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1477">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1478">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1478">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1479"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1479"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1480">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u1.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1482">将位于计算堆栈顶部的有符号值转换为 <see langword="unsigned int16" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1482">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1483">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1484">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1484">Format</span></span>|<span data-ttu-id="b7283-1485">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1485">Assembly Format</span></span>|<span data-ttu-id="b7283-1486">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1487">B6</span><span class="sxs-lookup"><span data-stu-id="b7283-1487">B6</span></span>|<span data-ttu-id="b7283-1488">conv.ovf.u2</span><span class="sxs-lookup"><span data-stu-id="b7283-1488">conv.ovf.u2</span></span>|<span data-ttu-id="b7283-1489">转换为`unsigned int16` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1489">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1490">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1491">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1491">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1492">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1492">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1493">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1493">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1494">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1494">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1495">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1495">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1496">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1496">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1497">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1497">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1498">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1498">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1499"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1499"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1500">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1500">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1501">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1501">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1502">将位于计算堆栈顶部的无符号值转换为 <see langword="unsigned int16" /> 并将其扩展为 <see langword="int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1502">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1503">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1503">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1504">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1504">Format</span></span>|<span data-ttu-id="b7283-1505">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1505">Assembly Format</span></span>|<span data-ttu-id="b7283-1506">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1506">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1507">87</span><span class="sxs-lookup"><span data-stu-id="b7283-1507">87</span></span>|<span data-ttu-id="b7283-1508">conv.ovf.u2.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1508">conv.ovf.u2.un</span></span>|<span data-ttu-id="b7283-1509">将无符号值转换为`unsigned int16` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1509">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1510">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1510">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1511">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1511">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1512">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1512">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1513">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1513">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1514">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1514">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1515">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u2.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1515">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1516">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1516">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1517">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1517">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1518">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1518">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1519"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1519"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1520">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u2.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1520">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1521">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1521">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1522">将位于计算堆栈顶部的有符号值转换为 <see langword="unsigned int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1522">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1523">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1523">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1524">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1524">Format</span></span>|<span data-ttu-id="b7283-1525">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1525">Assembly Format</span></span>|<span data-ttu-id="b7283-1526">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1526">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1527">B8</span><span class="sxs-lookup"><span data-stu-id="b7283-1527">B8</span></span>|<span data-ttu-id="b7283-1528">conv.ovf.u4</span><span class="sxs-lookup"><span data-stu-id="b7283-1528">conv.ovf.u4</span></span>|<span data-ttu-id="b7283-1529">转换为`unsigned int32` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1529">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1530">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1530">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1531">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1531">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1532">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1532">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1533">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1533">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1534">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1534">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1535">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u4`</span><span class="sxs-lookup"><span data-stu-id="b7283-1535">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1536">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1536">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1537">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1537">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1538">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1538">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1539"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1539"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1540">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1540">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1541">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1541">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1542">将位于计算堆栈顶部的无符号值转换为 <see langword="unsigned int32" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1542">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1543">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1543">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1544">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1544">Format</span></span>|<span data-ttu-id="b7283-1545">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1545">Assembly Format</span></span>|<span data-ttu-id="b7283-1546">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1546">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1547">88</span><span class="sxs-lookup"><span data-stu-id="b7283-1547">88</span></span>|<span data-ttu-id="b7283-1548">conv.ovf.u4.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1548">conv.ovf.u4.un</span></span>|<span data-ttu-id="b7283-1549">将无符号值转换为`unsigned int32` (在堆栈上为`int32`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1549">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1550">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1550">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1551">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1551">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1552">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1552">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1553">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1553">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1554">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1554">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1555">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u4.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1555">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1556">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1556">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1557">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1557">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1558">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1558">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1559"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1559"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1560">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u4.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1560">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1561">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1561">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1562">将位于计算堆栈顶部的有符号值转换为 <see langword="unsigned int64" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1562">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1563">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1563">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1564">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1564">Format</span></span>|<span data-ttu-id="b7283-1565">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1565">Assembly Format</span></span>|<span data-ttu-id="b7283-1566">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1566">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1567">BA</span><span class="sxs-lookup"><span data-stu-id="b7283-1567">BA</span></span>|<span data-ttu-id="b7283-1568">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="b7283-1568">conv.ovf.u8</span></span>|<span data-ttu-id="b7283-1569">转换为`unsigned int64` (在堆栈上为`int64`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1569">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1570">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1570">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1571">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1571">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1572">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1572">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1573">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1573">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1574">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1574">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1575">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u8`</span><span class="sxs-lookup"><span data-stu-id="b7283-1575">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1576">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1576">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1577">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1577">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1578">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1578">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1579"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1579"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1580">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1580">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1581">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1581">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1582">将位于计算堆栈顶部的无符号值转换为 <see langword="unsigned int64" />，并在溢出时引发 <see cref="T:System.OverflowException" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1582">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1583">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1583">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1584">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1584">Format</span></span>|<span data-ttu-id="b7283-1585">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1585">Assembly Format</span></span>|<span data-ttu-id="b7283-1586">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1586">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1587">89</span><span class="sxs-lookup"><span data-stu-id="b7283-1587">89</span></span>|<span data-ttu-id="b7283-1588">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="b7283-1588">conv.ovf.u8.un</span></span>|<span data-ttu-id="b7283-1589">将无符号值转换为`unsigned int64` (在堆栈上为`int64`), 并在溢出时引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1589">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="b7283-1590">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1590">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1591">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1591">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1592">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1592">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="b7283-1593">如果发生溢出, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1593">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="b7283-1594">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1594">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1595">操作码将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值置于堆栈的顶部。`value` `conv.ovf.u8.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1595">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1596">如果值太大或太小而无法由目标类型表示, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1596">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="b7283-1597">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1597">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="b7283-1598">请注意, 小于4个字节的整数值在加载`int32`到计算堆栈上时将扩展到 (除非`conv.ovf.i`使用`conv.ovf.u`或, 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1598">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="b7283-1599"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1599"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-1600">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.ovf.u8.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1600">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1601">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1601">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1602">将位于计算堆栈顶部的无符号整数值转换为 <see langword="float32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1602">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1603">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1603">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1604">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1604">Format</span></span>|<span data-ttu-id="b7283-1605">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1605">Assembly Format</span></span>|<span data-ttu-id="b7283-1606">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1607">76</span><span class="sxs-lookup"><span data-stu-id="b7283-1607">76</span></span>|<span data-ttu-id="b7283-1608">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1608">conv.r.un</span></span>|<span data-ttu-id="b7283-1609">将无符号整数转换为浮点, 并`F`推送堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1609">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1610">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1611">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1611">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1612">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1612">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1613">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1613">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1614">`conv.r.un`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1614">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1615">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1615">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1616">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1616">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1617">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1617">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1618">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1618">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1619">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1619">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1620">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1620">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1621">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1621">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1622">如果在将浮点类型转换为整数时发生溢出, 则不`result`指定返回的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1622">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="b7283-1623">操作将从堆栈中提取一个整数, 将其解释为无符号, 并将其替换为浮点数以表示整数: `float32`或者, 如果此宽度足以表示整数而不丢失精度, 则为; 否则为`conv.r.un`一个`float64`。</span><span class="sxs-lookup"><span data-stu-id="b7283-1623">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="b7283-1624">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1624">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="b7283-1625">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.r.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1627">将位于计算堆栈顶部的值转换为 <see langword="float32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1627">Converts the value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1628">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1629">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1629">Format</span></span>|<span data-ttu-id="b7283-1630">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1630">Assembly Format</span></span>|<span data-ttu-id="b7283-1631">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1632">6B</span><span class="sxs-lookup"><span data-stu-id="b7283-1632">6B</span></span>|<span data-ttu-id="b7283-1633">conv.r4</span><span class="sxs-lookup"><span data-stu-id="b7283-1633">conv.r4</span></span>|<span data-ttu-id="b7283-1634">转换为`float32`, 推送`F`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1634">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1635">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1636">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1636">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1637">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1637">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1638">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1638">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1639">`conv.r4`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1639">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1640">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1640">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1641">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1641">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1642">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1642">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1643">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1643">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1644">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1644">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1645">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1645">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1646">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1646">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1647">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1647">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1648">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1648">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="b7283-1649">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1649">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1650">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1650">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1651">将位于计算堆栈顶部的值转换为 <see langword="float64" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1651">Converts the value on top of the evaluation stack to <see langword="float64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1652">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1652">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1653">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1653">Format</span></span>|<span data-ttu-id="b7283-1654">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1654">Assembly Format</span></span>|<span data-ttu-id="b7283-1655">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1655">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1656">6C</span><span class="sxs-lookup"><span data-stu-id="b7283-1656">6C</span></span>|<span data-ttu-id="b7283-1657">conv.r8</span><span class="sxs-lookup"><span data-stu-id="b7283-1657">conv.r8</span></span>|<span data-ttu-id="b7283-1658">转换为`float64`, 推送`F`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1658">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1659">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1659">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1660">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1660">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1661">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1661">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1662">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1662">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1663">`conv.r8`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1663">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1664">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1664">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1665">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1665">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1666">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1666">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1667">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1667">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1668">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1668">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1669">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1669">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1670">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1670">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1671">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1671">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1672">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1672">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="b7283-1673">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1673">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1674">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1674">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1675">将位于计算堆栈顶部的值转换为 <see langword="unsigned native int" />，然后将其扩展为 <see langword="native int" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1675">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1676">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1676">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1677">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1677">Format</span></span>|<span data-ttu-id="b7283-1678">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1678">Assembly Format</span></span>|<span data-ttu-id="b7283-1679">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1679">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1680">E0</span><span class="sxs-lookup"><span data-stu-id="b7283-1680">E0</span></span>|<span data-ttu-id="b7283-1681">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1681">conv.u</span></span>|<span data-ttu-id="b7283-1682">转换为`unsigned native int`, 推送`native int`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1682">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1683">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1683">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1684">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1684">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1685">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1685">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1686">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1686">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1687">`conv.u`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1687">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1688">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1688">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1689">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1689">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1690">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1690">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1691">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1691">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1692">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1692">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1693">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1693">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1694">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1694">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1695">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1695">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1696">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1696">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1697">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1697">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1698">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.u`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1700">将位于计算堆栈顶部的值转换为 <see langword="unsigned int8" />，然后将其扩展为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1700">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1701">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1702">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1702">Format</span></span>|<span data-ttu-id="b7283-1703">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1703">Assembly Format</span></span>|<span data-ttu-id="b7283-1704">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1705">D2</span><span class="sxs-lookup"><span data-stu-id="b7283-1705">D2</span></span>|<span data-ttu-id="b7283-1706">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1706">conv.u1</span></span>|<span data-ttu-id="b7283-1707">转换为`int8`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1707">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1708">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1709">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1709">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1710">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1710">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1711">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1711">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1712">`conv.u1`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1712">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1713">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1713">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1714">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1714">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1715">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1715">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1716">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1716">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1717">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1717">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1718">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1718">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1719">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1719">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1720">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1720">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1721">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1721">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1722">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1722">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1723">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.u1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1723">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1724">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1724">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1725">将位于计算堆栈顶部的值转换为 <see langword="unsigned int16" />，然后将其扩展为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1725">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1726">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1726">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1727">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1727">Format</span></span>|<span data-ttu-id="b7283-1728">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1728">Assembly Format</span></span>|<span data-ttu-id="b7283-1729">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1729">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1730">D1</span><span class="sxs-lookup"><span data-stu-id="b7283-1730">D1</span></span>|<span data-ttu-id="b7283-1731">约定</span><span class="sxs-lookup"><span data-stu-id="b7283-1731">conv.u2</span></span>|<span data-ttu-id="b7283-1732">转换为`int16`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1732">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1733">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1733">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1734">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1734">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1735">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1735">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1736">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1736">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1737">`conv.u2`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1737">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1738">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1738">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1739">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1739">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1740">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1740">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1741">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1741">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1742">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1742">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1743">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1743">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1744">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1744">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1745">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1745">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1746">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1746">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1747">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1747">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1748">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.u2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1748">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1749">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1749">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1750">将位于计算堆栈顶部的值转换为 <see langword="unsigned int32" />，然后将其扩展为 <see langword="int32" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1750">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1751">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1751">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1752">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1752">Format</span></span>|<span data-ttu-id="b7283-1753">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1753">Assembly Format</span></span>|<span data-ttu-id="b7283-1754">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1754">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1755">6D</span><span class="sxs-lookup"><span data-stu-id="b7283-1755">6D</span></span>|<span data-ttu-id="b7283-1756">u4</span><span class="sxs-lookup"><span data-stu-id="b7283-1756">conv.u4</span></span>|<span data-ttu-id="b7283-1757">转换为`unsigned int32`, 推送`int32`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1757">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1758">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1758">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1759">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1759">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1760">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1760">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1761">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1761">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1762">`conv.u4`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1762">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1763">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1763">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1764">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1764">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1765">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1765">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1766">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1766">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1767">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1767">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1768">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1768">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1769">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1769">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1770">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1770">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1771">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1771">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1772">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1772">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1773">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.u4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1773">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1774">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1774">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1775">将位于计算堆栈顶部的值转换为 <see langword="unsigned int64" />，然后将其扩展为 <see langword="int64" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-1775">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1776">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1776">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1777">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1777">Format</span></span>|<span data-ttu-id="b7283-1778">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1778">Assembly Format</span></span>|<span data-ttu-id="b7283-1779">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1779">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1780">6E</span><span class="sxs-lookup"><span data-stu-id="b7283-1780">6E</span></span>|<span data-ttu-id="b7283-1781">u8</span><span class="sxs-lookup"><span data-stu-id="b7283-1781">conv.u8</span></span>|<span data-ttu-id="b7283-1782">转换为`int64`, 推送`int64`堆栈。</span><span class="sxs-lookup"><span data-stu-id="b7283-1782">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="b7283-1783">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1783">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1784">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1784">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1785">`value`从堆栈中弹出, 并尝试执行转换操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-1785">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="b7283-1786">如果转换成功, 则将结果值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1786">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1787">`conv.u8`操作码`value`将堆栈顶部的转换为操作码中指定的类型, 并将转换后的值保留在堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-1787">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="b7283-1788">小于4个字节的整数值在加载到`int32`计算堆栈上时将扩展到 (除非`conv.i`使用或`conv.u` , 在这种情况下, 结果也`native int`是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1788">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="b7283-1789">将浮点值转换为`F`类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1789">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="b7283-1790">从浮点数到整数值的转换会将数字截断到零。</span><span class="sxs-lookup"><span data-stu-id="b7283-1790">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="b7283-1791">从`float64` 转换`float32`到时, 精度可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="b7283-1791">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="b7283-1792">如果`value`太大`float32 (F)`而无法容纳, 则返回正无穷 (如果`value`为正) 或负无穷 (如果`value`为负)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1792">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="b7283-1793">如果在将一个整数类型转换为另一个整数类型时发生溢出, 则会截断高序位。</span><span class="sxs-lookup"><span data-stu-id="b7283-1793">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="b7283-1794">如果结果`int32`小于, 则值将进行符号扩展以填充槽。</span><span class="sxs-lookup"><span data-stu-id="b7283-1794">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="b7283-1795">如果发生溢出, 将浮点类型转换为整数, 则返回的值是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1795">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="b7283-1796">使用此字段时, 不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-1796">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="b7283-1797">有关<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8>在<xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un>结果类型无法正确表示结果值时将引发异常的等效说明, 请参见和。</span><span class="sxs-lookup"><span data-stu-id="b7283-1797">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="b7283-1798">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`conv.u8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1798">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1799">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1799">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1800">将指定数目的字节从源地址复制到目标地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-1800">Copies a specified number bytes from a source address to a destination address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1801">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1801">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1802">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1802">Format</span></span>|<span data-ttu-id="b7283-1803">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1803">Assembly Format</span></span>|<span data-ttu-id="b7283-1804">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1804">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1805">FE 17</span><span class="sxs-lookup"><span data-stu-id="b7283-1805">FE 17</span></span>|<span data-ttu-id="b7283-1806">cpblk</span><span class="sxs-lookup"><span data-stu-id="b7283-1806">cpblk</span></span>|<span data-ttu-id="b7283-1807">将数据从一个内存块复制到另一个内存块。</span><span class="sxs-lookup"><span data-stu-id="b7283-1807">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="b7283-1808">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1808">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1809">目标地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1809">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1810">源地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1810">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1811">要复制的字节数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1811">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-1812">从堆栈中弹出的字节数、源地址和目标地址;指定的字节数从源地址复制到目标地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-1812">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="b7283-1813">`native int` `native int` `&` `&` `*` `*`指令将字节数 (类型`unsigned int32`) 从源地址 (类型为、或) 复制到目标地址 (类型为、或)。 `cpblk`</span><span class="sxs-lookup"><span data-stu-id="b7283-1813">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="b7283-1814">如果源区域`cpblk`和目标区域重叠, 则的行为是未指定的。</span><span class="sxs-lookup"><span data-stu-id="b7283-1814">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="b7283-1815">`cpblk`假设源和目标地址都与计算机的自然大小对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-1815">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="b7283-1816">指令前面可以紧跟指令, 以指示源或目标是未对齐的。 `unaligned.<prefix>` `cpblk`</span><span class="sxs-lookup"><span data-stu-id="b7283-1816">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="b7283-1817">`cpblk`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-1817">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-1818"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1818"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-1819">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`cpblk`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1819">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1820">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1820">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1821">将位于对象（<see langword="&amp;" />、<see langword="*" /> 或 <see langword="native int" /> 类型）地址的值类型复制到目标对象（<see langword="&amp;" />、<see langword="*" /> 或 <see langword="native int" /> 类型）的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-1821">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1822">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1822">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1823">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1823">Format</span></span>|<span data-ttu-id="b7283-1824">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1824">Assembly Format</span></span>|<span data-ttu-id="b7283-1825">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1825">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1826">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-1826">70 < `T` ></span></span>|<span data-ttu-id="b7283-1827">cpobj`classTok`</span><span class="sxs-lookup"><span data-stu-id="b7283-1827">cpobj `classTok`</span></span>|<span data-ttu-id="b7283-1828">将值类型从源对象复制到目标对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-1828">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="b7283-1829">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1829">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1830">目标对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1830">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1831">源对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1831">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1832">从堆栈中弹出两个对象引用;将源对象地址的值类型复制到目标对象的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-1832">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="b7283-1833">如果源对象`cpobj`和目标对象引用不是指向类标记`classTok` ( `typeref`或`typedef`) 表示的类的实例的指针, 或者如果`classTok`不表示, 则的行为是未指定的。值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1833">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="b7283-1834"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1834"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-1835">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`cpobj`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1835">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1836">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-1836">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1837">将两个值相除并将结果作为浮点（<see langword="F" /> 类型）或商（<see langword="int32" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1837">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1838">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1838">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1839">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1839">Format</span></span>|<span data-ttu-id="b7283-1840">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1840">Assembly Format</span></span>|<span data-ttu-id="b7283-1841">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1841">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1842">5B</span><span class="sxs-lookup"><span data-stu-id="b7283-1842">5B</span></span>|<span data-ttu-id="b7283-1843">div</span><span class="sxs-lookup"><span data-stu-id="b7283-1843">div</span></span>|<span data-ttu-id="b7283-1844">将两个值相除以返回商或浮点结果。</span><span class="sxs-lookup"><span data-stu-id="b7283-1844">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="b7283-1845">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1845">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1846">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1846">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1847">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1847">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1848">`value2`和`value1`从堆栈中弹出;`value1`除以。`value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1848">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-1849">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1849">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1850">`result` = `value1`div value2 满足以下条件:</span><span class="sxs-lookup"><span data-stu-id="b7283-1850">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="b7283-1851">&#124;`result` &#124; = &#124; / &#124;和: &#124; &#124; `value1` `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1851">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="b7283-1852">`value2``value1``value2``value1`sign ()=+,ifsign()=sign()或-,ifsign()~=sign()`result`</span><span class="sxs-lookup"><span data-stu-id="b7283-1852">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="b7283-1853">`div`指令计算结果并将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1853">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="b7283-1854">整数除法向零截断。</span><span class="sxs-lookup"><span data-stu-id="b7283-1854">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="b7283-1855">有限数除以零会生成正确的无符号无限值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1855">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="b7283-1856">零除以零或无穷大按无穷产生 NaN (非数字) 值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1856">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="b7283-1857">除以无限大的任何数字都会产生零值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1857">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="b7283-1858">如果无法用<xref:System.ArithmeticException>结果类型表示结果, 则整型运算将引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1858">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="b7283-1859">如果`value1`是最大负值且`value2`为-1, 则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-1859">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="b7283-1860"><xref:System.DivideByZeroException> 如果`value2`为零, 则引发整数运算。</span><span class="sxs-lookup"><span data-stu-id="b7283-1860">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="b7283-1861">请注意, 在基于 Intel 的平台<xref:System.OverflowException>上, 计算时引发 (minint div-1)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1861">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="b7283-1862">浮点运算永远不会引发异常 (而是生成 Nan 或无穷大)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1862">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="b7283-1863">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`div`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1863">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1864">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1864">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1865">两个无符号整数值相除并将结果 ( <see langword="int32" /> ) 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1865">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1866">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1866">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1867">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1867">Format</span></span>|<span data-ttu-id="b7283-1868">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1868">Assembly Format</span></span>|<span data-ttu-id="b7283-1869">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1869">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1870">5C</span><span class="sxs-lookup"><span data-stu-id="b7283-1870">5C</span></span>|<span data-ttu-id="b7283-1871">div. un</span><span class="sxs-lookup"><span data-stu-id="b7283-1871">div.un</span></span>|<span data-ttu-id="b7283-1872">将两个值相除, 并返回商。</span><span class="sxs-lookup"><span data-stu-id="b7283-1872">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="b7283-1873">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1873">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1874">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1874">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1875">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1875">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1876">`value2`和`value1`从堆栈中弹出;`value1`除以。`value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-1876">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-1877">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1877">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1878">`result`指令计算`value1` 除以`value2`, 同时作为无符号整数, 并将推送到堆栈上。 `div.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-1878">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="b7283-1879">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`div.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1879">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1880">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1880">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1881">复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1881">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1882">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1882">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1883">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1883">Format</span></span>|<span data-ttu-id="b7283-1884">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1884">Assembly Format</span></span>|<span data-ttu-id="b7283-1885">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1885">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1886">25</span><span class="sxs-lookup"><span data-stu-id="b7283-1886">25</span></span>|<span data-ttu-id="b7283-1887">重复</span><span class="sxs-lookup"><span data-stu-id="b7283-1887">dup</span></span>|<span data-ttu-id="b7283-1888">复制堆栈顶部的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1888">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="b7283-1889">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1889">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1890">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1890">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1891">`value`从堆栈中弹出以进行复制。</span><span class="sxs-lookup"><span data-stu-id="b7283-1891">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="b7283-1892">`value`被推送回堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1892">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-1893">将重复的值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1893">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1894">`dup`指令复制堆栈的顶部元素, 并将两个相同的值保留在其中。</span><span class="sxs-lookup"><span data-stu-id="b7283-1894">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="b7283-1895">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`dup`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1895">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1896">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1896">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1897">将控制从异常的 <see langword="filter" /> 子句转移回公共语言结构 (CLI) 异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1897">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1898">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1899">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1899">Format</span></span>|<span data-ttu-id="b7283-1900">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1900">Assembly Format</span></span>|<span data-ttu-id="b7283-1901">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1902">FE 11</span><span class="sxs-lookup"><span data-stu-id="b7283-1902">FE 11</span></span>|<span data-ttu-id="b7283-1903">执行 endfilter</span><span class="sxs-lookup"><span data-stu-id="b7283-1903">endfilter</span></span>|<span data-ttu-id="b7283-1904">SEH 异常处理的结束筛选器子句。</span><span class="sxs-lookup"><span data-stu-id="b7283-1904">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="b7283-1905">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1906">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1906">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1907">`value`从堆栈中弹出;`endfilter`执行, 并将控制权传输到异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1907">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="b7283-1908">`Value`(必须为类型`int32` , 并且是从筛选子句返回的一组特定值中的一组值)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1908">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="b7283-1909">它应该是以下其中之一:</span><span class="sxs-lookup"><span data-stu-id="b7283-1909">It should be one of:</span></span>  
  
-   <span data-ttu-id="b7283-1910">`exception_continue_search`(`value` = 0) 以继续搜索异常处理程序</span><span class="sxs-lookup"><span data-stu-id="b7283-1910">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="b7283-1911">`exception_execute_handler`(`value` = 1), 用于启动异常处理的第二个阶段, 其中 finally 块将一直运行, 直到找到与此筛选器子句关联的处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1911">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="b7283-1912">发现后, 将执行处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1912">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="b7283-1913">其他整数值将产生未指定的结果。</span><span class="sxs-lookup"><span data-stu-id="b7283-1913">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="b7283-1914">筛选器的入口点 (如方法的异常表中所示) 必须是筛选器的代码块中的第一个指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-1914">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="b7283-1915">指令必须是筛选器的代码块中的最后一个指令 (因此, 对于任何单个筛选`endfilter`器块, 只能有一个)。 `endfilter`</span><span class="sxs-lookup"><span data-stu-id="b7283-1915">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="b7283-1916">执行`endfilter`指令后, 控件以逻辑方式流回 CLI 异常处理机制。</span><span class="sxs-lookup"><span data-stu-id="b7283-1916">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="b7283-1917">不能将控件传输到筛选器块中, 除非通过异常机制。</span><span class="sxs-lookup"><span data-stu-id="b7283-1917">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="b7283-1918">除了通过使用`throw`指令或通过执行最后一个`endfilter`指令以外, 不能从筛选器块中转移控件。</span><span class="sxs-lookup"><span data-stu-id="b7283-1918">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="b7283-1919">不能将`try`块嵌入到`filter`块中。</span><span class="sxs-lookup"><span data-stu-id="b7283-1919">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="b7283-1920">如果在`filter`块内引发异常, 则将被截获并返回值 0 (`exception_continue_search`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-1920">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="b7283-1921">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`endfilter`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1921">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1922">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1922">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1923">将控制从异常块的 <see langword="fault" /> 或 <see langword="finally" /> 子句转移回公共语言结构 (CLI) 异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1923">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1924">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1924">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1925">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1925">Format</span></span>|<span data-ttu-id="b7283-1926">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1926">Assembly Format</span></span>|<span data-ttu-id="b7283-1927">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1927">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1928">DC</span><span class="sxs-lookup"><span data-stu-id="b7283-1928">DC</span></span>|<span data-ttu-id="b7283-1929">执行 endfinally</span><span class="sxs-lookup"><span data-stu-id="b7283-1929">endfinally</span></span><br /><br /> <span data-ttu-id="b7283-1930">endfault</span><span class="sxs-lookup"><span data-stu-id="b7283-1930">endfault</span></span>|<span data-ttu-id="b7283-1931">结束异常`finally`块`fault`的或子句。</span><span class="sxs-lookup"><span data-stu-id="b7283-1931">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="b7283-1932">此指令没有堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-1932">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-1933">`Endfinally`并`endfault`向`finally`或子句的末尾发出信号,以便在调用异常处理程序之前,堆栈展开可以继续。`fault`</span><span class="sxs-lookup"><span data-stu-id="b7283-1933">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="b7283-1934">`endfinally` 或`endfault`指令将控制转移回 CLI 异常机制。</span><span class="sxs-lookup"><span data-stu-id="b7283-1934">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="b7283-1935">然后, 如果受保护的块`finally`退出并带有 leave 指令, 则该机制会搜索链中的下一个子句。</span><span class="sxs-lookup"><span data-stu-id="b7283-1935">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="b7283-1936">如果受保护的块退出但出现异常, 则 CLI 将搜索下一个`finally`或`fault`, 或输入在第一次处理异常过程中选择的异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="b7283-1936">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="b7283-1937">指令只能出现`finally`在块中的词法上。 `endfinally`</span><span class="sxs-lookup"><span data-stu-id="b7283-1937">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="b7283-1938">与说明不同, 不要求块以`endfinally`指令结束, 并且在所需的块中可以有任意数量`endfinally`的指令。 `endfilter`</span><span class="sxs-lookup"><span data-stu-id="b7283-1938">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="b7283-1939">这些相同的`endfault`限制适用于指令`fault`和块。</span><span class="sxs-lookup"><span data-stu-id="b7283-1939">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="b7283-1940">不能将控件传输到`finally` (或`fault`) 块中, 除非通过异常机制。</span><span class="sxs-lookup"><span data-stu-id="b7283-1940">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="b7283-1941">`finally` `fault`除了通过使用`endfinally`指令或执行 (或`endfault`) 指令以外, 不能从 (或) 块中转移控件。 `throw`</span><span class="sxs-lookup"><span data-stu-id="b7283-1941">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="b7283-1942">特别是`finally` , 不能 "跳出" (或`fault`) <xref:System.Reflection.Emit.OpCodes.Ret>块, 也不能在`finally` (或`fault`) <xref:System.Reflection.Emit.OpCodes.Leave>块中执行或指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-1942">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="b7283-1943">请注意`endfinally` ,和说明是别名,它们对应于相同`endfault`的操作码。</span><span class="sxs-lookup"><span data-stu-id="b7283-1943">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="b7283-1944">下面<xref:System.Reflection.Emit.ILGenerator.Emit%2A>的方法重载可以`endfinally`使用 (`endfault`) 操作码`ILGenerator`以及方法<xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>。</span><span class="sxs-lookup"><span data-stu-id="b7283-1944">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="b7283-1945">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1945">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="b7283-1946">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="b7283-1946">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1947">将位于特定地址的内存的指定块初始化为给定大小和初始值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1947">Initializes a specified block of memory at a specific address to a given size and initial value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1948">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1948">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1949">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1949">Format</span></span>|<span data-ttu-id="b7283-1950">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1950">Assembly Format</span></span>|<span data-ttu-id="b7283-1951">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1951">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1952">FE 18</span><span class="sxs-lookup"><span data-stu-id="b7283-1952">FE 18</span></span>|<span data-ttu-id="b7283-1953">initblk</span><span class="sxs-lookup"><span data-stu-id="b7283-1953">initblk</span></span>|<span data-ttu-id="b7283-1954">将内存块中的每个位置设置为给定值。</span><span class="sxs-lookup"><span data-stu-id="b7283-1954">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="b7283-1955">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1955">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1956">起始地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1956">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1957">将初始化值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1957">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-1958">要初始化的字节数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1958">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-1959">从堆栈中弹出字节数、初始化值和起始地址, 并按它们的值执行初始化。</span><span class="sxs-lookup"><span data-stu-id="b7283-1959">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="b7283-1960">`&``unsigned int32` `unsigned int8` `*`指令将从指定的地址 (类型`native int`为、或) 开始的字节数 () 设置为初始化值 (类型为)。 `initblk`</span><span class="sxs-lookup"><span data-stu-id="b7283-1960">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="b7283-1961">`initblk`假定起始地址与计算机的自然大小对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-1961">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="b7283-1962">`initblk`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-1962">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-1963"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-1963"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-1964">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`initblk`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1964">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1965">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-1965">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1966">将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0。</span><span class="sxs-lookup"><span data-stu-id="b7283-1966">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1967">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1967">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1968">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1968">Format</span></span>|<span data-ttu-id="b7283-1969">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1969">Assembly Format</span></span>|<span data-ttu-id="b7283-1970">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1970">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1971">FE 15 <`T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-1971">FE 15 < `T` ></span></span>|<span data-ttu-id="b7283-1972">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="b7283-1972">`initobj` `typeTok`</span></span>|<span data-ttu-id="b7283-1973">初始化值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-1973">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="b7283-1974">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1974">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1975">要初始化的值类型的地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1975">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1976">从堆栈中弹出该地址;指定地址处的值类型初始化为类型`typeTok`。</span><span class="sxs-lookup"><span data-stu-id="b7283-1976">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="b7283-1977">指令将按下推送地址 (类型`native int`为、 `&`或`*`) 指定的值类型的每个字段初始化为空引用或适当的基元类型的0。 `initobj`</span><span class="sxs-lookup"><span data-stu-id="b7283-1977">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="b7283-1978">调用此方法后, 该实例已准备好调用构造函数方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-1978">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="b7283-1979">如果`typeTok`是引用类型, 则此指令具有与`ldnull`后跟`stind.ref`的相同效果。</span><span class="sxs-lookup"><span data-stu-id="b7283-1979">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="b7283-1980">与<xref:System.Reflection.Emit.OpCodes.Newobj>不同`initobj` , 不调用构造函数方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-1980">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="b7283-1981">`Initobj`用于初始化值类型, 而`newobj`用于分配和初始化对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-1981">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="b7283-1982">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`initobj`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-1982">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-1983">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-1983">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-1984">测试对象引用（<see langword="O" /> 类型）是否为特定类的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-1984">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-1985">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-1985">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-1986">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1986">Format</span></span>|<span data-ttu-id="b7283-1987">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-1987">Assembly Format</span></span>|<span data-ttu-id="b7283-1988">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-1988">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-1989">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-1989">75 < `T` ></span></span>|<span data-ttu-id="b7283-1990">isinst`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-1990">isinst `class`</span></span>|<span data-ttu-id="b7283-1991">测试对象引用是否为的实例`class`, 同时返回空引用或该类或接口的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-1991">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="b7283-1992">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-1992">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-1993">对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1993">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-1994">从堆栈中弹出对象引用并对其进行测试, 以查看它是否为传入`class`类的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-1994">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="b7283-1995">结果 (对象引用或空引用) 被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-1995">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-1996">`Class`指示所需类的元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-1996">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="b7283-1997">如果堆栈顶部`class`对象的类实现 (如果`class`是接口) 或是的`class`派生类 (如果`class`是常规类), 则将其强制转换为类型`class` , 并将结果推送到堆栈上。完全像<xref:System.Reflection.Emit.OpCodes.Castclass>调用一样。</span><span class="sxs-lookup"><span data-stu-id="b7283-1997">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="b7283-1998">否则, 在堆栈上推送空引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-1998">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="b7283-1999">如果对象引用本身为空引用, 则`isinst`同样返回空引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-1999">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2000"><xref:System.TypeLoadException>如果找不到类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2000"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="b7283-2001">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-2001">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-2002">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`isinst`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2003">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-2003">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2004">退出当前方法并跳至指定方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-2004">Exits current method and jumps to specified method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2005">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2006">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2006">Format</span></span>|<span data-ttu-id="b7283-2007">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2007">Assembly Format</span></span>|<span data-ttu-id="b7283-2008">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2009">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2009">27 < `T` ></span></span>|<span data-ttu-id="b7283-2010">跳转`method`</span><span class="sxs-lookup"><span data-stu-id="b7283-2010">jmp `method`</span></span>|<span data-ttu-id="b7283-2011">退出当前方法并跳至指定方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-2011">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="b7283-2012">此指令没有堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-2012">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-2013">(跳转) 指令将控制转移到`method`指定的方法, 该方法是方法引用的元数据标记。 `jmp`</span><span class="sxs-lookup"><span data-stu-id="b7283-2013">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="b7283-2014">当前参数将传输到目标方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-2014">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="b7283-2015">执行此指令时, 计算堆栈必须为空。</span><span class="sxs-lookup"><span data-stu-id="b7283-2015">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="b7283-2016">目标地址的调用约定、数量和参数类型必须与当前方法的参数匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-2016">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="b7283-2017">`filter` `try` `finally` `catch`指令不能用于将控制转移出、、或块。 `jmp`</span><span class="sxs-lookup"><span data-stu-id="b7283-2017">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="b7283-2018">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`jmp`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2019">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-2019">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2020">将参数（由指定索引值引用）加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2020">Loads an argument (referenced by a specified index value) onto the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2021">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2022">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2022">Format</span></span>|<span data-ttu-id="b7283-2023">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2023">Assembly Format</span></span>|<span data-ttu-id="b7283-2024">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2025">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2025">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-2026">ldarg`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2026">ldarg `index`</span></span>|<span data-ttu-id="b7283-2027">将参数`index`加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2027">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="b7283-2028">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2029">位于处`index`的参数值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2029">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2030">指令将在处`index`编制索引的自变量推送到计算堆栈上, 其中自变量的索引从0开始。 `ldarg`</span><span class="sxs-lookup"><span data-stu-id="b7283-2030">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2031">`ldarg`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2031">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2032">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2032">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2033">对于采用可变长度参数列表的过程, `ldarg`指令只能用于初始固定参数, 而不能用于签名的变量部分中的参数 (有关详细信息, <xref:System.Reflection.Emit.OpCodes.Arglist>请参阅指令)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2033">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="b7283-2034">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2034">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2035">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2035">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2036">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2037">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-2037">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2038">将索引为 0 的参数加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2038">Loads the argument at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2039">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2040">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2040">Format</span></span>|<span data-ttu-id="b7283-2041">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2041">Assembly Format</span></span>|<span data-ttu-id="b7283-2042">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2043">02</span><span class="sxs-lookup"><span data-stu-id="b7283-2043">02</span></span>|<span data-ttu-id="b7283-2044">ldarg</span><span class="sxs-lookup"><span data-stu-id="b7283-2044">ldarg.0</span></span>|<span data-ttu-id="b7283-2045">将参数0加载到堆栈上</span><span class="sxs-lookup"><span data-stu-id="b7283-2045">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="b7283-2046">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2047">将索引0处的参数值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2047">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2048">`ldarg.0`指令是用于在索引0处加载参数值的有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2048">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="b7283-2049">指令`ldarg.0`将索引为0的参数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2049">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2050">`ldarg.0`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2050">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2051">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2051">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2052">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2052">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2053">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2053">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2054">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg.0`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2055">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2056">将索引 1 处的参数加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2056">Loads the argument at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2057">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2058">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2058">Format</span></span>|<span data-ttu-id="b7283-2059">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2059">Assembly Format</span></span>|<span data-ttu-id="b7283-2060">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2061">03</span><span class="sxs-lookup"><span data-stu-id="b7283-2061">03</span></span>|<span data-ttu-id="b7283-2062">ldarg</span><span class="sxs-lookup"><span data-stu-id="b7283-2062">ldarg.1</span></span>|<span data-ttu-id="b7283-2063">将参数1加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2063">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="b7283-2064">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2065">将索引为1的参数值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2065">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2066">`ldarg.1`指令是用于在索引1处加载参数值的有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2066">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="b7283-2067">`ldarg.1`指令将索引为1的参数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2067">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2068">`ldarg.1`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2068">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2069">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2069">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2070">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2070">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2071">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2072">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg.1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2074">将索引 2 处的参数加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2074">Loads the argument at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2075">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2076">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2076">Format</span></span>|<span data-ttu-id="b7283-2077">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2077">Assembly Format</span></span>|<span data-ttu-id="b7283-2078">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2079">04</span><span class="sxs-lookup"><span data-stu-id="b7283-2079">04</span></span>|<span data-ttu-id="b7283-2080">ldarg</span><span class="sxs-lookup"><span data-stu-id="b7283-2080">ldarg.2</span></span>|<span data-ttu-id="b7283-2081">将参数2加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2081">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="b7283-2082">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2083">索引2处的参数值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2083">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2084">`ldarg.2`指令是用于在索引2处加载参数值的有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2084">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="b7283-2085">`ldarg.2`指令将索引为2的参数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2085">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2086">`ldarg.2`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2086">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2087">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2087">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2088">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2088">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2089">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2089">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2090">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg.2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2091">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2092">将索引 3 处的参数加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2092">Loads the argument at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2093">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2094">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2094">Format</span></span>|<span data-ttu-id="b7283-2095">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2095">Assembly Format</span></span>|<span data-ttu-id="b7283-2096">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2097">05</span><span class="sxs-lookup"><span data-stu-id="b7283-2097">05</span></span>|<span data-ttu-id="b7283-2098">ldarg</span><span class="sxs-lookup"><span data-stu-id="b7283-2098">ldarg.3</span></span>|<span data-ttu-id="b7283-2099">将参数3加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2099">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="b7283-2100">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2101">将索引为3的参数值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2101">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2102">`ldarg.3`指令是用于在索引3处加载参数值的有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2102">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="b7283-2103">`ldarg.3`指令将索引为3的参数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2103">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2104">`ldarg.3`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2104">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2105">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2105">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2106">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2106">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2107">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2107">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2108">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg.3`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2109">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2110">将参数（由指定的短格式索引引用）加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2110">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2111">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2112">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2112">Format</span></span>|<span data-ttu-id="b7283-2113">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2113">Assembly Format</span></span>|<span data-ttu-id="b7283-2114">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2115">0E < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2115">0E < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-2116">ldarg`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2116">ldarg.s `index`</span></span>|<span data-ttu-id="b7283-2117">将参数`index`加载到堆栈上 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2117">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="b7283-2118">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2119">位于处`index`的参数值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2119">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2120">`ldarg.s`指令是用于加载从4到255的索引参数的有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2120">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="b7283-2121">指令将在处`index`编制索引的自变量推送到计算堆栈上, 其中自变量的索引从0开始。 `ldarg.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-2121">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2122">`ldarg.s`指令可用于通过从传入参数复制来将值类型或基元值加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2122">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="b7283-2123">参数值的类型与参数的类型相同, 后者由当前方法的签名指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2123">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-2124">对于采用可变长度参数列表的过程, `ldarg.s`指令只能用于初始固定参数, 而不能用于签名的变量部分中的参数 (有关详细信息, <xref:System.Reflection.Emit.OpCodes.Arglist>请参阅指令)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2124">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="b7283-2125">如果参数包含小于4个字节的整数值, 则在将其`int32`加载到堆栈上时, 将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2125">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-2126">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2126">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-2127">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarg.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2128">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-2128">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2129">将参数地址加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2129">Load an argument address onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2130">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2131">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2131">Format</span></span>|<span data-ttu-id="b7283-2132">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2132">Assembly Format</span></span>|<span data-ttu-id="b7283-2133">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2134">FE 0A < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2134">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-2135">ldarga`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2135">ldarga `index`</span></span>|<span data-ttu-id="b7283-2136">提取由`index`索引的参数的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-2136">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="b7283-2137">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2138">索引的`addr`自变量的地址被推送到堆栈上。`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2138">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2139">指令获取`*`索引`index`的自变量的地址 (类型), 其中参数从0开始编制索引。 `ldarga`</span><span class="sxs-lookup"><span data-stu-id="b7283-2139">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="b7283-2140">地址`addr`始终与目标计算机上的自然边界对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2140">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="b7283-2141">对于采用可变长度参数列表的过程, `ldarga`指令只能用于初始固定参数, 而不能用于签名的变量部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-2141">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="b7283-2142">`ldarga`用于通过引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-2142">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="b7283-2143">对于其他情况, <xref:System.Reflection.Emit.OpCodes.Ldarg>应<xref:System.Reflection.Emit.OpCodes.Starg>使用和。</span><span class="sxs-lookup"><span data-stu-id="b7283-2143">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="b7283-2144">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarga`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2145">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-2145">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2146">以短格式将参数地址加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2146">Load an argument address, in short form, onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2147">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2148">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2148">Format</span></span>|<span data-ttu-id="b7283-2149">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2149">Assembly Format</span></span>|<span data-ttu-id="b7283-2150">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2151">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2151">0F < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-2152">ldarga`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2152">ldarga.s `index`</span></span>|<span data-ttu-id="b7283-2153">提取按`index`短格式索引的参数的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-2153">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="b7283-2154">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2155">索引的`addr`自变量的地址被推送到堆栈上。`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2155">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2156">`ldarga.s`(的缩写形式`ldarga`) 应用于0到255之间的参数号, 并且是一种更有效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2156">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="b7283-2157">指令获取`*`索引`index`的自变量的地址 (类型), 其中参数从0开始编制索引。 `ldarga.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-2157">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="b7283-2158">地址`addr`始终与目标计算机上的自然边界对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2158">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="b7283-2159">对于采用可变长度参数列表的过程, `ldarga.s`指令只能用于初始固定参数, 而不能用于签名的变量部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-2159">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="b7283-2160">`ldarga.s`用于通过引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-2160">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="b7283-2161">对于其他情况, <xref:System.Reflection.Emit.OpCodes.Ldarg_S>应<xref:System.Reflection.Emit.OpCodes.Starg_S>使用和。</span><span class="sxs-lookup"><span data-stu-id="b7283-2161">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="b7283-2162">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldarga.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2162">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2163">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-2163">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2164">将所提供的 <see langword="int32" /> 类型的值作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2164">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2165">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2165">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2166">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2166">Format</span></span>|<span data-ttu-id="b7283-2167">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2167">Assembly Format</span></span>|<span data-ttu-id="b7283-2168">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2168">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2169">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2169">20 < `int32` ></span></span>|<span data-ttu-id="b7283-2170">ldc. i4`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-2170">ldc.i4 `num`</span></span>|<span data-ttu-id="b7283-2171">将值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2171">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2172">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2172">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2173">值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2173">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2174">请注意, 对于从-128 到127的整数, 会有特殊的简短编码 (因而更有效), 尤其是-1 到8的短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2174">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="b7283-2175">所有短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2175">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="b7283-2176">较长的编码用于8字节整数、4字节和8字节浮点数, 以及不符合短格式的4字节值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2176">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="b7283-2177">有三种方法可将8字节整数常量推送到堆栈上</span><span class="sxs-lookup"><span data-stu-id="b7283-2177">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="b7283-2178">对于必须以32多位表示的常量, 请使用指令。<xref:System.Reflection.Emit.OpCodes.Ldc_I8></span><span class="sxs-lookup"><span data-stu-id="b7283-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="b7283-2179">对需要9到32位的常量使用后跟<xref:System.Reflection.Emit.OpCodes.Ldc_I4> <xref:System.Reflection.Emit.OpCodes.Conv_I8>的指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2179">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="b7283-2180">对于可以用8个或更少<xref:System.Reflection.Emit.OpCodes.Conv_I8>位表示的常量, 请使用短格式指令, 后面跟有一个。</span><span class="sxs-lookup"><span data-stu-id="b7283-2180">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="b7283-2181">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2181">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2182">ILGenerator (OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="b7283-2182">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2183">将整数值 0 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2183">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2184">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2184">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2185">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2185">Format</span></span>|<span data-ttu-id="b7283-2186">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2186">Assembly Format</span></span>|<span data-ttu-id="b7283-2187">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2187">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2188">16</span><span class="sxs-lookup"><span data-stu-id="b7283-2188">16</span></span>|<span data-ttu-id="b7283-2189">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="b7283-2189">ldc.i4.0</span></span>|<span data-ttu-id="b7283-2190">将0推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2190">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2191">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2191">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2192">值0被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2192">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2193">这是一个用于推送整数值0的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2193">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="b7283-2194">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2194">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2195">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.0`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2195">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2196">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2196">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2197">将整数值 1 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2197">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2198">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2198">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2199">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2199">Format</span></span>|<span data-ttu-id="b7283-2200">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2200">Assembly Format</span></span>|<span data-ttu-id="b7283-2201">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2201">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2202">17</span><span class="sxs-lookup"><span data-stu-id="b7283-2202">17</span></span>|<span data-ttu-id="b7283-2203">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="b7283-2203">ldc.i4.1</span></span>|<span data-ttu-id="b7283-2204">将1推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2204">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2205">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2205">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2206">值1被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2206">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2207">这是用于推送整数值1的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2207">This is a special short encoding for the push of the integer value 1.</span></span> <span data-ttu-id="b7283-2208">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2208">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2209">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2209">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2210">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2210">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2211">将整数值 2 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2211">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2212">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2212">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2213">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2213">Format</span></span>|<span data-ttu-id="b7283-2214">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2214">Assembly Format</span></span>|<span data-ttu-id="b7283-2215">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2215">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2216">18</span><span class="sxs-lookup"><span data-stu-id="b7283-2216">18</span></span>|<span data-ttu-id="b7283-2217">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="b7283-2217">ldc.i4.2</span></span>|<span data-ttu-id="b7283-2218">将2推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2218">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2219">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2219">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2220">值2被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2220">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2221">这是用于推送整数值2的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2221">This is a special short encoding for the push of the integer value 2.</span></span> <span data-ttu-id="b7283-2222">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2222">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2223">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2224">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2224">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2225">将整数值 3 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2225">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2226">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2227">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2227">Format</span></span>|<span data-ttu-id="b7283-2228">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2228">Assembly Format</span></span>|<span data-ttu-id="b7283-2229">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2230">19</span><span class="sxs-lookup"><span data-stu-id="b7283-2230">19</span></span>|<span data-ttu-id="b7283-2231">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="b7283-2231">ldc.i4.3</span></span>|<span data-ttu-id="b7283-2232">将3推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2232">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2233">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2234">值3被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2234">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2235">这是用于推送整数值3的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2235">This is a special short encoding for the push of the integer value 3.</span></span> <span data-ttu-id="b7283-2236">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2236">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2237">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.3`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2237">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2238">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2238">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2239">将整数值 4 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2239">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2240">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2240">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2241">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2241">Format</span></span>|<span data-ttu-id="b7283-2242">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2242">Assembly Format</span></span>|<span data-ttu-id="b7283-2243">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2243">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2244">1A</span><span class="sxs-lookup"><span data-stu-id="b7283-2244">1A</span></span>|<span data-ttu-id="b7283-2245">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="b7283-2245">ldc.i4.4</span></span>|<span data-ttu-id="b7283-2246">将4推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2246">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2247">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2247">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2248">值4被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2248">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2249">这是一个用于推送整数值4的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2249">This is a special short encoding for the push of the integer value 4.</span></span> <span data-ttu-id="b7283-2250">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2250">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2251">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2252">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2252">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2253">将整数值 5 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2253">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2254">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2255">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2255">Format</span></span>|<span data-ttu-id="b7283-2256">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2256">Assembly Format</span></span>|<span data-ttu-id="b7283-2257">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2258">1B</span><span class="sxs-lookup"><span data-stu-id="b7283-2258">1B</span></span>|<span data-ttu-id="b7283-2259">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="b7283-2259">ldc.i4.5</span></span>|<span data-ttu-id="b7283-2260">将5推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2260">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2261">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2262">值5被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2262">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2263">这是一个用于推送整数值5的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2263">This is a special short encoding for the push of the integer value 5.</span></span> <span data-ttu-id="b7283-2264">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2264">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2265">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.5`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2265">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2266">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2266">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2267">将整数值 6 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2267">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2268">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2268">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2269">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2269">Format</span></span>|<span data-ttu-id="b7283-2270">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2270">Assembly Format</span></span>|<span data-ttu-id="b7283-2271">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2271">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2272">1C</span><span class="sxs-lookup"><span data-stu-id="b7283-2272">1C</span></span>|<span data-ttu-id="b7283-2273">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="b7283-2273">ldc.i4.6</span></span>|<span data-ttu-id="b7283-2274">将6推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2274">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2275">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2275">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2276">值6被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2276">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2277">这是一个用于推送整数值6的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2277">This is a special short encoding for the push of the integer value 6.</span></span> <span data-ttu-id="b7283-2278">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2278">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2279">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.6`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2281">将整数值 7 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2281">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2282">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2283">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2283">Format</span></span>|<span data-ttu-id="b7283-2284">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2284">Assembly Format</span></span>|<span data-ttu-id="b7283-2285">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2286">1D</span><span class="sxs-lookup"><span data-stu-id="b7283-2286">1D</span></span>|<span data-ttu-id="b7283-2287">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="b7283-2287">ldc.i4.7</span></span>|<span data-ttu-id="b7283-2288">将7推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2288">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2289">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2290">值7被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2290">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2291">这是一个用于推送整数值7的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2291">This is a special short encoding for the push of the integer value 7.</span></span> <span data-ttu-id="b7283-2292">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2292">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2293">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.7`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2293">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2294">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2294">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2295">将整数值 8 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2295">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2296">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2296">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2297">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2297">Format</span></span>|<span data-ttu-id="b7283-2298">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2298">Assembly Format</span></span>|<span data-ttu-id="b7283-2299">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2299">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2300">1E</span><span class="sxs-lookup"><span data-stu-id="b7283-2300">1E</span></span>|<span data-ttu-id="b7283-2301">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="b7283-2301">ldc.i4.8</span></span>|<span data-ttu-id="b7283-2302">将8推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2302">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2303">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2303">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2304">值8被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2304">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2305">这是用于推送整数值8的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2305">This is a special short encoding for the push of the integer value 8.</span></span> <span data-ttu-id="b7283-2306">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2306">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2307">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2308">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2309">将整数值 -1 作为 <see langword="int32" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2309">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2310">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2311">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2311">Format</span></span>|<span data-ttu-id="b7283-2312">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2312">Assembly Format</span></span>|<span data-ttu-id="b7283-2313">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2314">15</span><span class="sxs-lookup"><span data-stu-id="b7283-2314">15</span></span>|<span data-ttu-id="b7283-2315">ldc.i4.m1</span><span class="sxs-lookup"><span data-stu-id="b7283-2315">ldc.i4.m1</span></span>|<span data-ttu-id="b7283-2316">将-1 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2316">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2317">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2318">值-1 被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2318">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2319">这是用于推送整数值-1 的特殊短编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2319">This is a special short encoding for the push of the integer value -1.</span></span> <span data-ttu-id="b7283-2320">所有特殊的短编码将4字节整数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2320">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="b7283-2321">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.m1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2321">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2322">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2322">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2323">将提供的 <see langword="int8" /> 值作为 <see langword="int32" /> 推送到计算堆栈上（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-2323">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2324">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2325">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2325">Format</span></span>|<span data-ttu-id="b7283-2326">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2326">Assembly Format</span></span>|<span data-ttu-id="b7283-2327">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2328">1F <`int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2328">1F < `int8` ></span></span>|<span data-ttu-id="b7283-2329">ldc. i4`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-2329">ldc.i4.s `num`</span></span>|<span data-ttu-id="b7283-2330">`num` 以`int32`短格式推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2330">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="b7283-2331">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2332">值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2332">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2333">`ldc.i4.s`是一种更有效的编码方式, 用于将从-128 到127的整数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2333">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2334">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i4.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2335">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-2335">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2336">将所提供的 <see langword="int64" /> 类型的值作为 <see langword="int64" /> 推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2336">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2337">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2338">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2338">Format</span></span>|<span data-ttu-id="b7283-2339">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2339">Assembly Format</span></span>|<span data-ttu-id="b7283-2340">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2341">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2341">21 < `int64` ></span></span>|<span data-ttu-id="b7283-2342">ldc.i8 `num`</span><span class="sxs-lookup"><span data-stu-id="b7283-2342">ldc.i8 `num`</span></span>|<span data-ttu-id="b7283-2343">将`num` 作为`int64`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2343">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="b7283-2344">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2345">值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2345">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2346">此编码将`int64`值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2346">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2347">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2348">ILGenerator (操作码, 长)</span><span class="sxs-lookup"><span data-stu-id="b7283-2348">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2349">将所提供的 <see langword="float32" /> 类型的值作为 <see langword="F" /> (float) 类型推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2349">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2350">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2351">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2351">Format</span></span>|<span data-ttu-id="b7283-2352">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2352">Assembly Format</span></span>|<span data-ttu-id="b7283-2353">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2354">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2354">22 < `float32` ></span></span>|<span data-ttu-id="b7283-2355">ldc. r4`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-2355">ldc.r4 `num`</span></span>|<span data-ttu-id="b7283-2356">将`num` 作为`F`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2356">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2357">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2358">值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2358">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2359">此编码将`float32`值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2359">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2360">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2361">ILGenerator (操作码, single)</span><span class="sxs-lookup"><span data-stu-id="b7283-2361">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2362">将所提供的 <see langword="float64" /> 类型的值作为 <see langword="F" /> (float) 类型推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2362">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2363">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2364">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2364">Format</span></span>|<span data-ttu-id="b7283-2365">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2365">Assembly Format</span></span>|<span data-ttu-id="b7283-2366">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2367">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2367">23 < `float64` ></span></span>|<span data-ttu-id="b7283-2368">ldc. r8`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-2368">ldc.r8 `num`</span></span>|<span data-ttu-id="b7283-2369">将`num` 作为`F`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2369">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2370">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2371">值`num`推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2371">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2372">此编码将`float64`值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2372">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2373">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldc.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2373">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2374">ILGenerator (操作码, 双精度)</span><span class="sxs-lookup"><span data-stu-id="b7283-2374">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2375">按照指令中指定的类型，将指定数组索引中的元素加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2375">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2376">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2376">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2377">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2377">Format</span></span>|<span data-ttu-id="b7283-2378">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2378">Assembly Format</span></span>|<span data-ttu-id="b7283-2379">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2379">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2380">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2380">A3 < `T` ></span></span>|<span data-ttu-id="b7283-2381">ldelem`typeTok`</span><span class="sxs-lookup"><span data-stu-id="b7283-2381">ldelem `typeTok`</span></span>|<span data-ttu-id="b7283-2382">将元素`index`作为类型`typeTok`加载到堆栈顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2382">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="b7283-2383">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2383">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2384">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2384">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2385">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2385">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2386">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2386">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2387">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2387">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2388">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem`</span><span class="sxs-lookup"><span data-stu-id="b7283-2388">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2389">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2389">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2390">返回值的类型由指令中的标记`typeTok`指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2390">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="b7283-2391"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2391"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2392"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的上限`array`, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2392"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2393">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2393">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2394">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-2394">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2395">将位于指定数组索引处的 <see langword="native int" /> 类型的元素作为 <see langword="native int" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2395">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2396">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2396">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2397">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2397">Format</span></span>|<span data-ttu-id="b7283-2398">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2398">Assembly Format</span></span>|<span data-ttu-id="b7283-2399">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2399">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2400">97</span><span class="sxs-lookup"><span data-stu-id="b7283-2400">97</span></span>|<span data-ttu-id="b7283-2401">ldelem。 i</span><span class="sxs-lookup"><span data-stu-id="b7283-2401">ldelem.i</span></span>|<span data-ttu-id="b7283-2402">将`native int` 类型`native int`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2402">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="b7283-2403">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2403">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2404">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2404">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2405">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2405">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2406">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2406">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2407">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2407">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2408">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.i`</span><span class="sxs-lookup"><span data-stu-id="b7283-2408">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2409">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2409">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2410">的返回值`ldelem.i`为`native int`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2410">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="b7283-2411">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2411">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2412"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2412"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2413"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2413"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2414"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2414"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2415">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2415">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2416">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2416">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2417">将位于指定数组索引处的 <see langword="int8" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2417">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2418">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2418">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2419">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2419">Format</span></span>|<span data-ttu-id="b7283-2420">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2420">Assembly Format</span></span>|<span data-ttu-id="b7283-2421">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2421">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2422">90</span><span class="sxs-lookup"><span data-stu-id="b7283-2422">90</span></span>|<span data-ttu-id="b7283-2423">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="b7283-2423">ldelem.i1</span></span>|<span data-ttu-id="b7283-2424">将`int8` 类型`int32`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2424">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2425">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2425">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2426">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2426">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2427">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2427">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2428">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2428">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2429">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2429">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2430">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.i1`</span><span class="sxs-lookup"><span data-stu-id="b7283-2430">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2431">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2431">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2432">的返回值`ldelem.i1`为`int8`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2432">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="b7283-2433">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2433">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2434"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2434"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2435"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2435"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2436"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2436"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2437">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2437">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2438">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2438">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2439">将位于指定数组索引处的 <see langword="int16" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2439">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2440">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2440">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2441">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2441">Format</span></span>|<span data-ttu-id="b7283-2442">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2442">Assembly Format</span></span>|<span data-ttu-id="b7283-2443">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2443">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2444">92</span><span class="sxs-lookup"><span data-stu-id="b7283-2444">92</span></span>|<span data-ttu-id="b7283-2445">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="b7283-2445">ldelem.i2</span></span>|<span data-ttu-id="b7283-2446">将`int16` 类型`int32`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2446">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2447">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2447">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2448">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2448">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2449">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2449">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2450">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2450">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2451">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2451">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2452">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.i2`</span><span class="sxs-lookup"><span data-stu-id="b7283-2452">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2453">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2453">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2454">的返回值`ldelem.i2`为`int16`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2454">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="b7283-2455">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2455">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2456"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2456"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2457"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2457"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2458"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2458"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2459">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2461">将位于指定数组索引处的 <see langword="int32" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2461">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2462">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2463">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2463">Format</span></span>|<span data-ttu-id="b7283-2464">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2464">Assembly Format</span></span>|<span data-ttu-id="b7283-2465">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2466">94</span><span class="sxs-lookup"><span data-stu-id="b7283-2466">94</span></span>|<span data-ttu-id="b7283-2467">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="b7283-2467">ldelem.i4</span></span>|<span data-ttu-id="b7283-2468">将`int32` 类型`int32`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2468">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2469">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2470">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2470">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2471">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2471">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2472">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2472">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2473">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2473">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2474">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.i4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2474">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2475">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2475">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2476">的返回值`ldelem.i4`为`int32`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2476">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2477">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2477">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2478"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2478"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2479"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2479"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2480"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2480"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2481">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2481">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2482">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2482">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2483">将位于指定数组索引处的 <see langword="int64" /> 类型的元素作为 <see langword="int64" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2483">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2484">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2484">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2485">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2485">Format</span></span>|<span data-ttu-id="b7283-2486">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2486">Assembly Format</span></span>|<span data-ttu-id="b7283-2487">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2487">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2488">96</span><span class="sxs-lookup"><span data-stu-id="b7283-2488">96</span></span>|<span data-ttu-id="b7283-2489">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="b7283-2489">ldelem.i8</span></span>|<span data-ttu-id="b7283-2490">将`int64` 类型`int64`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2490">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="b7283-2491">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2491">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2492">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2492">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2493">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2493">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2494">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2494">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2495">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2495">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2496">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.i8`</span><span class="sxs-lookup"><span data-stu-id="b7283-2496">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2497">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2497">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2498">的返回值`ldelem.i8`为`int64`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2498">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="b7283-2499">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2499">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2500"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2500"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2501"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2501"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2502"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2502"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2503">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2503">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2504">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2504">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2505">将位于指定数组索引处的 <see langword="float32" /> 类型的元素作为 <see langword="F" /> 类型（浮点型）加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2505">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2506">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2506">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2507">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2507">Format</span></span>|<span data-ttu-id="b7283-2508">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2508">Assembly Format</span></span>|<span data-ttu-id="b7283-2509">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2509">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2510">98</span><span class="sxs-lookup"><span data-stu-id="b7283-2510">98</span></span>|<span data-ttu-id="b7283-2511">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="b7283-2511">ldelem.r4</span></span>|<span data-ttu-id="b7283-2512">将类型`float32` `F`为的元素作为类型加载到堆栈顶部。`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2512">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2513">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2513">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2514">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2514">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2515">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2515">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2516">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2516">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2517">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2517">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2518">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.r4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2518">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2519">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2519">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2520">的返回值`ldelem.r4`为`float32`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2520">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="b7283-2521">将浮点值加载到计算堆栈上`F`时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2521">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2522"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2522"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2523"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2523"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2524"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2524"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2525">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2525">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2526">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2526">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2527">将位于指定数组索引处的 <see langword="float64" /> 类型的元素作为 <see langword="F" /> 类型（浮点型）加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2527">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2528">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2528">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2529">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2529">Format</span></span>|<span data-ttu-id="b7283-2530">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2530">Assembly Format</span></span>|<span data-ttu-id="b7283-2531">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2531">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2532">99</span><span class="sxs-lookup"><span data-stu-id="b7283-2532">99</span></span>|<span data-ttu-id="b7283-2533">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="b7283-2533">ldelem.r8</span></span>|<span data-ttu-id="b7283-2534">将类型`float64` `F`为的元素作为类型加载到堆栈顶部。`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-2534">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2535">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2535">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2536">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2536">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2537">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2537">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2538">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2538">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2539">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2539">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2540">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.r8`</span><span class="sxs-lookup"><span data-stu-id="b7283-2540">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2541">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2541">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2542">的返回值`ldelem.r8`为`float64`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2542">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="b7283-2543">将浮点值加载到计算堆栈上`F`时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2543">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2544"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2544"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2545"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2545"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2546"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2546"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2547">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2547">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2548">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2548">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2549">将位于指定数组索引处的包含对象引用的元素作为 <see langword="O" /> 类型（对象引用）加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2549">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2550">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2550">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2551">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2551">Format</span></span>|<span data-ttu-id="b7283-2552">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2552">Assembly Format</span></span>|<span data-ttu-id="b7283-2553">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2553">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2554">9A</span><span class="sxs-lookup"><span data-stu-id="b7283-2554">9A</span></span>|<span data-ttu-id="b7283-2555">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="b7283-2555">ldelem.ref</span></span>|<span data-ttu-id="b7283-2556">将具有对象引用`index`的元素作为类型`O`加载到堆栈顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2556">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="b7283-2557">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2557">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2558">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2558">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2559">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2559">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2560">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2560">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2561">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2561">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2562">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.ref`</span><span class="sxs-lookup"><span data-stu-id="b7283-2562">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2563">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2563">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2564">的返回值`ldelem.ref`为类型`O` (对象引用)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2564">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="b7283-2565"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2565"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2566"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2566"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2567"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2567"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2568">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.ref`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2568">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2569">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2569">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2570">将位于指定数组索引处的 <see langword="unsigned int8" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2570">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2571">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2571">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2572">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2572">Format</span></span>|<span data-ttu-id="b7283-2573">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2573">Assembly Format</span></span>|<span data-ttu-id="b7283-2574">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2574">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2575">91</span><span class="sxs-lookup"><span data-stu-id="b7283-2575">91</span></span>|<span data-ttu-id="b7283-2576">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="b7283-2576">ldelem.u1</span></span>|<span data-ttu-id="b7283-2577">将`unsigned int8` 类型`int32`为的元素作为加载到堆栈顶部`index` 。</span><span class="sxs-lookup"><span data-stu-id="b7283-2577">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2578">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2578">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2579">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2579">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2580">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2580">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2581">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2581">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2582">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2582">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2583">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.u1`</span><span class="sxs-lookup"><span data-stu-id="b7283-2583">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2584">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2584">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2585">的返回值`ldelem.u1`为`int8`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2585">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="b7283-2586">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2586">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2587"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2587"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2588"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2588"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2589"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2589"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2590">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.u1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2590">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2591">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2591">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2592">将位于指定数组索引处的 <see langword="unsigned int16" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2592">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2593">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2593">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2594">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2594">Format</span></span>|<span data-ttu-id="b7283-2595">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2595">Assembly Format</span></span>|<span data-ttu-id="b7283-2596">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2596">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2597">93</span><span class="sxs-lookup"><span data-stu-id="b7283-2597">93</span></span>|<span data-ttu-id="b7283-2598">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="b7283-2598">ldelem.u2</span></span>|<span data-ttu-id="b7283-2599">`unsigned int16` 将`int32`位于索引处的类型的元素作为加载到堆栈顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2599">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2600">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2600">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2601">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2601">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2602">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2602">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2603">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2603">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2604">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2604">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2605">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.u2`</span><span class="sxs-lookup"><span data-stu-id="b7283-2605">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2606">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2606">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2607">的返回值`ldelem.u2`为`int16`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2607">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="b7283-2608">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2608">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2609"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2609"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2610"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2610"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2611"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2611"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2612">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.u2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2612">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2613">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2613">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2614">将位于指定数组索引处的 <see langword="unsigned int32" /> 类型的元素作为 <see langword="int32" /> 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2614">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2615">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2615">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2616">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2616">Format</span></span>|<span data-ttu-id="b7283-2617">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2617">Assembly Format</span></span>|<span data-ttu-id="b7283-2618">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2618">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2619">95</span><span class="sxs-lookup"><span data-stu-id="b7283-2619">95</span></span>|<span data-ttu-id="b7283-2620">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="b7283-2620">ldelem.u4</span></span>|<span data-ttu-id="b7283-2621">`unsigned int32` 将`int32`位于索引处的类型的元素作为加载到堆栈顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2621">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2622">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2622">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2623">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2623">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2624">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2624">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2625">`index`将`array`从堆栈中弹出和, 并在中`array`查找存储`index`在位置的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2625">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2626">值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2626">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2627">指令在从零开始的一维数组`array`中`index`加载带有`native int`索引 (类型) 的元素的值, 并将其放在堆栈顶部。 `ldelem.u4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2627">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2628">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2628">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2629">的返回值`ldelem.u4`为`int32`。</span><span class="sxs-lookup"><span data-stu-id="b7283-2629">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2630">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2630">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2631"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2631"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2632"><xref:System.ArrayTypeMismatchException>如果数组不包含所需类型的元素, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2632"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2633"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2633"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2634">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelem.u4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2634">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2635">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2635">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2636">将位于指定数组索引的数组元素的地址作为 <see langword="&amp;" /> 类型（托管指针）加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2636">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2637">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2637">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2638">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2638">Format</span></span>|<span data-ttu-id="b7283-2639">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2639">Assembly Format</span></span>|<span data-ttu-id="b7283-2640">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2640">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2641">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2641">8F < `T` ></span></span>|<span data-ttu-id="b7283-2642">ldelema`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-2642">ldelema `class`</span></span>|<span data-ttu-id="b7283-2643">将数组元素`index`的地址作为类型`&` (托管指针) 加载到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-2643">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="b7283-2644">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2644">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2645">对象引用`array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2645">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2646">索引值`index`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2646">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-2647">`index`和`array`是从堆栈中弹出的; 查找存储在中`index` `array`位置的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-2647">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="b7283-2648">该地址将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2648">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2649">用于检索对象数组中特定索引处的对象的地址 (类型`class`为)。 `ldelema`</span><span class="sxs-lookup"><span data-stu-id="b7283-2649">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="b7283-2650">指令在从零开始的一维数组`array`中`index`的索引`native int`(类型) 处加载值的地址, 并将其放在堆栈顶部。 `ldelema`</span><span class="sxs-lookup"><span data-stu-id="b7283-2650">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="b7283-2651">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2651">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-2652">该值必须是随指令传递`class`的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2652">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="b7283-2653">的返回值`ldelema`为托管指针 (类型`&`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2653">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="b7283-2654">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2654">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2655"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2655"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-2656"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2656"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-2657"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2657"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-2658">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldelema`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2658">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2659">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-2659">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2660">查找对象中其引用当前位于计算堆栈的字段的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2660">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2661">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2661">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2662">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2662">Format</span></span>|<span data-ttu-id="b7283-2663">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2663">Assembly Format</span></span>|<span data-ttu-id="b7283-2664">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2664">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2665">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2665">7B < `T` ></span></span>|<span data-ttu-id="b7283-2666">ldfld`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-2666">ldfld `field`</span></span>|<span data-ttu-id="b7283-2667">将指定对象中的字段的值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2667">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2668">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2668">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2669">对象引用 (或指针) 被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2669">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2670">从堆栈中弹出对象引用 (或指针);找到对象中指定字段的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2670">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="b7283-2671">存储在字段中的值将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2671">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2672">`ldfld`指令将位于对象中的字段的值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2672">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="b7283-2673">对象必须位于堆栈上, 作为`O`对象引用 (类型)、托管指针 (类型`&`)、非托管指针 (类型`native int`)、暂时性指针 (类型`*`) 或值类型的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-2673">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="b7283-2674">可验证代码中不允许使用非托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-2674">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="b7283-2675">对象的字段由必须引用字段成员的元数据标记指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2675">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="b7283-2676">返回类型与字段关联的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-2676">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="b7283-2677">字段可以是实例字段 (在这种情况下, 对象不得为空引用) 或静态字段。</span><span class="sxs-lookup"><span data-stu-id="b7283-2677">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="b7283-2678">指令前面可以是<xref:System.Reflection.Emit.OpCodes.Unaligned>和<xref:System.Reflection.Emit.OpCodes.Volatile> /或前缀。 `ldfld`</span><span class="sxs-lookup"><span data-stu-id="b7283-2678">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="b7283-2679"><xref:System.NullReferenceException>如果对象为 null, 并且该字段不是静态的, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2679"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="b7283-2680"><xref:System.MissingFieldException>如果在元数据中找不到指定的字段, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2680"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="b7283-2681">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是在运行时, 通常会检查此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-2681">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="b7283-2682">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldfld`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2682">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2683">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-2683">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2684">查找对象中其引用当前位于计算堆栈的字段的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-2684">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2685">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2685">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2686">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2686">Format</span></span>|<span data-ttu-id="b7283-2687">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2687">Assembly Format</span></span>|<span data-ttu-id="b7283-2688">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2688">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2689">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2689">7C < `T` ></span></span>|<span data-ttu-id="b7283-2690">ldflda`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-2690">ldflda `field`</span></span>|<span data-ttu-id="b7283-2691">将指定对象`field`中的地址推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2691">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2692">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2692">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2693">对象引用 (或指针) 被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2693">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2694">从堆栈中弹出对象引用 (或指针);找到对象中指定字段的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-2694">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="b7283-2695">指定字段的地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2695">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2696">`ldflda`指令将位于对象中的字段的地址推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2696">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="b7283-2697">对象必须位于堆栈上, 作为`O`对象引用 (类型)、托管指针 (类型`&`)、非托管指针 (类型`native int`)、暂时性指针 (类型`*`) 或值类型的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-2697">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="b7283-2698">可验证代码中不允许使用非托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-2698">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="b7283-2699">对象的字段由必须引用字段成员的元数据标记指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-2699">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="b7283-2700">返回`ldflda`的值是托管指针 (类型`&`), 除非该对象被推送到堆栈上作为非托管指针, 在这种情况下, 返回地址也是非托管指针 ( `native int`类型)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2700">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="b7283-2701">指令前面可以是<xref:System.Reflection.Emit.OpCodes.Unaligned>和<xref:System.Reflection.Emit.OpCodes.Volatile> /或前缀。 `ldflda`</span><span class="sxs-lookup"><span data-stu-id="b7283-2701">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="b7283-2702"><xref:System.InvalidOperationException>如果对象不在从中访问它的应用程序域中, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2702"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="b7283-2703">不在访问应用程序域中的字段的地址无法加载。</span><span class="sxs-lookup"><span data-stu-id="b7283-2703">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="b7283-2704"><xref:System.NullReferenceException>如果对象为 null, 并且该字段不是静态的, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2704"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="b7283-2705"><xref:System.MissingFieldException>如果在元数据中找不到指定的字段, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2705"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="b7283-2706">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是在运行时, 通常会检查此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-2706">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="b7283-2707">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldflda`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2707">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2708">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-2708">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2709">将指向实现特定方法的本机代码的非托管指针（<see langword="native int" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2709">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2710">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2710">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2711">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2711">Format</span></span>|<span data-ttu-id="b7283-2712">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2712">Assembly Format</span></span>|<span data-ttu-id="b7283-2713">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2713">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2714">FE 06 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-2714">FE 06 < `T` ></span></span>|<span data-ttu-id="b7283-2715">ldftn`method`</span><span class="sxs-lookup"><span data-stu-id="b7283-2715">ldftn `method`</span></span>|<span data-ttu-id="b7283-2716">将一个指针推送到堆栈`method`上的引用的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-2716">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2717">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2717">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2718">指向特定方法的非托管指针将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2718">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2719">如果特定方法 (`method`) 引用托管方法 (或<xref:System.Reflection.Emit.OpCodes.Calli>从托管代码转换为非托管代码的存根), 则可以使用指令进行调用。</span><span class="sxs-lookup"><span data-stu-id="b7283-2719">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="b7283-2720">返回的值指向使用 CLR 调用约定的本机代码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2720">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="b7283-2721">此方法指针不应作为回调例程传递到非托管的本机代码。</span><span class="sxs-lookup"><span data-stu-id="b7283-2721">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="b7283-2722">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldftn`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2723">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-2723">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2724">将 <see langword="native int" /> 类型的值作为 <see langword="native int" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2724">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2725">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2726">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2726">Format</span></span>|<span data-ttu-id="b7283-2727">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2727">Assembly Format</span></span>|<span data-ttu-id="b7283-2728">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2729">4D</span><span class="sxs-lookup"><span data-stu-id="b7283-2729">4D</span></span>|<span data-ttu-id="b7283-2730">ldind。 i</span><span class="sxs-lookup"><span data-stu-id="b7283-2730">ldind.i</span></span>|<span data-ttu-id="b7283-2731">将`native int` `addr`地址处的值作为加载到堆栈上。`native int`</span><span class="sxs-lookup"><span data-stu-id="b7283-2731">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="b7283-2732">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2733">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2733">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2734">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2734">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2735">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2735">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2736">`native int` `native int` `&`指令将一个值从指定的地址 (类型为、或 \*) 作为`native int`直接加载到堆栈上。 `ldind.i`</span><span class="sxs-lookup"><span data-stu-id="b7283-2736">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="b7283-2737">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2737">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2738">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2738">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2739">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2739">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2740">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2740">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2741">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2741">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2742">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2742">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2743">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2743">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2744">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2744">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2745"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2745"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2746">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2746">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2747">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2747">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2748">将 <see langword="int8" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2748">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2749">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2749">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2750">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2750">Format</span></span>|<span data-ttu-id="b7283-2751">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2751">Assembly Format</span></span>|<span data-ttu-id="b7283-2752">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2752">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2753">46</span><span class="sxs-lookup"><span data-stu-id="b7283-2753">46</span></span>|<span data-ttu-id="b7283-2754">ldind</span><span class="sxs-lookup"><span data-stu-id="b7283-2754">ldind.i1</span></span>|<span data-ttu-id="b7283-2755">将地址`int8` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2755">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2756">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2756">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2757">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2757">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2758">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2758">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2759">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2759">The fetched value is pushed onto the stack.</span></span> 
  
 <span data-ttu-id="b7283-2760">`int8` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.i1`</span><span class="sxs-lookup"><span data-stu-id="b7283-2760">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2761">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2761">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2762">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2762">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2763">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2763">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2764">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2764">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2765">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2765">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2766">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2766">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2767">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2767">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2768">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2768">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2769"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2769"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2770">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2770">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2771">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2771">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2772">将 <see langword="int16" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2772">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2773">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2773">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2774">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2774">Format</span></span>|<span data-ttu-id="b7283-2775">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2775">Assembly Format</span></span>|<span data-ttu-id="b7283-2776">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2776">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2777">48</span><span class="sxs-lookup"><span data-stu-id="b7283-2777">48</span></span>|<span data-ttu-id="b7283-2778">ldind</span><span class="sxs-lookup"><span data-stu-id="b7283-2778">ldind.i2</span></span>|<span data-ttu-id="b7283-2779">将地址`int16` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2779">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2780">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2780">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2781">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2781">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2782">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2782">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2783">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2783">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2784">`int16` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.i2`</span><span class="sxs-lookup"><span data-stu-id="b7283-2784">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2785">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2785">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2786">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2786">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2787">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2787">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2788">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2788">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2789">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2789">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2790">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2790">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2791">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2791">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2792">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2792">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2793"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2793"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2794">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2794">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2795">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2795">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2796">将 <see langword="int32" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2796">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2797">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2797">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2798">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2798">Format</span></span>|<span data-ttu-id="b7283-2799">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2799">Assembly Format</span></span>|<span data-ttu-id="b7283-2800">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2800">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2801">4A</span><span class="sxs-lookup"><span data-stu-id="b7283-2801">4A</span></span>|<span data-ttu-id="b7283-2802">ldind. i4</span><span class="sxs-lookup"><span data-stu-id="b7283-2802">ldind.i4</span></span>|<span data-ttu-id="b7283-2803">将地址`int32` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2803">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2804">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2804">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2805">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2805">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2806">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2806">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2807">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2807">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2808">`int32` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.i4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2808">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2809">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2809">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2810">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2810">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2811">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2811">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2812">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2812">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2813">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2813">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2814">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2814">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2815">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2815">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2816">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2816">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2817"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2817"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2818">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2820">将 <see langword="int64" /> 类型的值作为 <see langword="int64" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2820">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2821">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2822">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2822">Format</span></span>|<span data-ttu-id="b7283-2823">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2823">Assembly Format</span></span>|<span data-ttu-id="b7283-2824">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2825">4C</span><span class="sxs-lookup"><span data-stu-id="b7283-2825">4C</span></span>|<span data-ttu-id="b7283-2826">ldind. i8</span><span class="sxs-lookup"><span data-stu-id="b7283-2826">ldind.i8</span></span>|<span data-ttu-id="b7283-2827">将地址`int64` `addr`处的值作为加载`int64`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2827">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="b7283-2828">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2829">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2829">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2830">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2830">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2831">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2831">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2832">`int64` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int64`直接加载到堆栈上。 `ldind.i8`</span><span class="sxs-lookup"><span data-stu-id="b7283-2832">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="b7283-2833">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2833">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2834">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2834">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2835">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2835">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2836">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2836">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2837">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2837">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2838">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2838">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2839">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2839">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2840">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2840">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2841"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2841"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2842">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2842">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2843">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2843">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2844">将 <see langword="float32" /> 类型的值作为 <see langword="F" /> (float) 类型间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2844">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2845">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2845">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2846">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2846">Format</span></span>|<span data-ttu-id="b7283-2847">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2847">Assembly Format</span></span>|<span data-ttu-id="b7283-2848">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2848">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2849">4E</span><span class="sxs-lookup"><span data-stu-id="b7283-2849">4E</span></span>|<span data-ttu-id="b7283-2850">ldind. r4</span><span class="sxs-lookup"><span data-stu-id="b7283-2850">ldind.r4</span></span>|<span data-ttu-id="b7283-2851">将地址`float32` `addr`处的值作为类型`F`加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2851">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2852">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2852">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2853">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2853">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2854">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2854">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2855">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2855">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2856">`float32` `native int` `&`指令将值从指定的地址 (类型为、或 \*) 中作为类型`F`间接加载到堆栈上。 `ldind.r4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2856">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="b7283-2857">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2857">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2858">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2858">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2859">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2859">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2860">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2860">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2861">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2861">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2862">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2862">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2863">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2863">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2864">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2864">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2865"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2865"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2866">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2866">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2867">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2867">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2868">将 <see langword="float64" /> 类型的值作为 <see langword="F" /> (float) 类型间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2868">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2869">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2869">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2870">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2870">Format</span></span>|<span data-ttu-id="b7283-2871">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2871">Assembly Format</span></span>|<span data-ttu-id="b7283-2872">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2872">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2873">4F</span><span class="sxs-lookup"><span data-stu-id="b7283-2873">4F</span></span>|<span data-ttu-id="b7283-2874">ldind. r8</span><span class="sxs-lookup"><span data-stu-id="b7283-2874">ldind.r8</span></span>|<span data-ttu-id="b7283-2875">将地址`float64` `addr`处的值作为类型`F`加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2875">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="b7283-2876">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2876">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2877">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2877">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2878">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2878">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2879">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2879">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2880">`float64` `native int` `&`指令将一个值从指定的地址 (类型为、或 \*) 作为`float64`直接加载到堆栈上。 `ldind.r8`</span><span class="sxs-lookup"><span data-stu-id="b7283-2880">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="b7283-2881">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2881">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2882">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2882">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2883">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2883">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2884">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2884">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2885">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2885">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2886">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2886">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2887">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2887">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2888">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2888">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2889"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2889"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2890">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2890">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2891">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2891">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2892">将对象引用作为 <see langword="O" />（对象引用）类型间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2892">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2893">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2893">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2894">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2894">Format</span></span>|<span data-ttu-id="b7283-2895">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2895">Assembly Format</span></span>|<span data-ttu-id="b7283-2896">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2896">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2897">50</span><span class="sxs-lookup"><span data-stu-id="b7283-2897">50</span></span>|<span data-ttu-id="b7283-2898">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="b7283-2898">ldind.ref</span></span>|<span data-ttu-id="b7283-2899">将地址`addr`处的对象引用作为类型加载到堆栈上`O`</span><span class="sxs-lookup"><span data-stu-id="b7283-2899">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="b7283-2900">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2900">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2901">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2901">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2902">从堆栈中弹出该地址;提取位于地址处的对象引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-2902">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2903">提取的引用将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2903">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2904">指令将对象引用 (类型`native int`为、 `&`或 \*) 的指定地址作为类型`O`间接加载到堆栈上。 `ldind.ref`</span><span class="sxs-lookup"><span data-stu-id="b7283-2904">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="b7283-2905">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2905">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2906">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2906">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2907">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2907">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2908">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2908">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2909">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2909">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2910">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2910">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2911">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2911">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2912">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2912">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2913"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2913"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2914">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.ref`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2916">将 <see langword="unsigned int8" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2916">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2917">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2918">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2918">Format</span></span>|<span data-ttu-id="b7283-2919">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2919">Assembly Format</span></span>|<span data-ttu-id="b7283-2920">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2921">47</span><span class="sxs-lookup"><span data-stu-id="b7283-2921">47</span></span>|<span data-ttu-id="b7283-2922">ldind</span><span class="sxs-lookup"><span data-stu-id="b7283-2922">ldind.u1</span></span>|<span data-ttu-id="b7283-2923">将地址`unsigned int8` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2923">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2924">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2925">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2925">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2926">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2926">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2927">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2927">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2928">`unsigned int8` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.u1`</span><span class="sxs-lookup"><span data-stu-id="b7283-2928">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2929">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2929">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2930">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2930">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2931">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2931">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2932">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2932">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2933">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2933">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2934">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2934">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2935">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2935">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2936">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2936">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2937"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2937"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2938">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.u1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2938">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2939">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2939">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2940">将 <see langword="unsigned int16" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2940">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2941">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2942">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2942">Format</span></span>|<span data-ttu-id="b7283-2943">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2943">Assembly Format</span></span>|<span data-ttu-id="b7283-2944">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2945">49</span><span class="sxs-lookup"><span data-stu-id="b7283-2945">49</span></span>|<span data-ttu-id="b7283-2946">ldind</span><span class="sxs-lookup"><span data-stu-id="b7283-2946">ldind.u2</span></span>|<span data-ttu-id="b7283-2947">将地址`unsigned int16` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2947">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2948">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2949">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2949">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2950">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2950">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2951">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2951">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2952">`unsigned int16` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.u2`</span><span class="sxs-lookup"><span data-stu-id="b7283-2952">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2953">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2953">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2954">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2954">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2955">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2955">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2956">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2956">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2957">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2957">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2958">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2958">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2959">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2959">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2960">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2960">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2961"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2961"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2962">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.u2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2962">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2963">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2963">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2964">将 <see langword="unsigned int32" /> 类型的值作为 <see langword="int32" /> 间接加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2964">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2965">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2965">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2966">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2966">Format</span></span>|<span data-ttu-id="b7283-2967">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2967">Assembly Format</span></span>|<span data-ttu-id="b7283-2968">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2968">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2969">4B</span><span class="sxs-lookup"><span data-stu-id="b7283-2969">4B</span></span>|<span data-ttu-id="b7283-2970">ldind. u4</span><span class="sxs-lookup"><span data-stu-id="b7283-2970">ldind.u4</span></span>|<span data-ttu-id="b7283-2971">将地址`unsigned int32` `addr`处的值作为加载`int32`到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2971">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="b7283-2972">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2972">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2973">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2973">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2974">从堆栈中弹出该地址;获取位于地址的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-2974">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="b7283-2975">提取的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2975">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-2976">`unsigned int32` `native int` `&`指令将值从指定的地址 (类型为、、或 \*) 作为`int32`直接加载到堆栈上。 `ldind.u4`</span><span class="sxs-lookup"><span data-stu-id="b7283-2976">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="b7283-2977">所有说明都是指定相应内置值<xref:System.Reflection.Emit.OpCodes.Ldobj>类的指令的快捷方式。 `ldind`</span><span class="sxs-lookup"><span data-stu-id="b7283-2977">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="b7283-2978">请注意, 小于4个字节的整数值在加载`int32`到计算`native int`堆栈上时将扩展到 (而不是)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2978">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="b7283-2979">将浮点值加载到计算堆栈`F`上时, 会将其转换为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-2979">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-2980">格式正确的 Microsoft 中间语言 (MSIL) 可确保`ldind`以与指针类型一致的方式使用指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-2980">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="b7283-2981">最初推送到堆栈上的地址必须与计算机上对象的自然大小对齐, 否则<xref:System.NullReferenceException>可能会发生 (请参阅预防措施的<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀说明)。</span><span class="sxs-lookup"><span data-stu-id="b7283-2981">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="b7283-2982">返回地址 (例如<xref:System.Reflection.Emit.OpCodes.Ldloca>和<xref:System.Reflection.Emit.OpCodes.Ldarga>) 的所有 MSIL 指令的结果都安全对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-2982">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="b7283-2983">对于大于1个字节的数据类型, 字节排序依赖于目标 CPU。</span><span class="sxs-lookup"><span data-stu-id="b7283-2983">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="b7283-2984">依赖于字节排序的代码可能无法在所有平台上运行。</span><span class="sxs-lookup"><span data-stu-id="b7283-2984">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="b7283-2985"><xref:System.NullReferenceException>如果检测到无效地址, 则可能会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-2985"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="b7283-2986">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldind.u4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-2986">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-2987">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-2987">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-2988">将从零开始的、一维数组的元素的数目推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2988">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-2989">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-2989">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-2990">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2990">Format</span></span>|<span data-ttu-id="b7283-2991">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-2991">Assembly Format</span></span>|<span data-ttu-id="b7283-2992">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-2992">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-2993">8E</span><span class="sxs-lookup"><span data-stu-id="b7283-2993">8E</span></span>|<span data-ttu-id="b7283-2994">ldlen</span><span class="sxs-lookup"><span data-stu-id="b7283-2994">ldlen</span></span>|<span data-ttu-id="b7283-2995">将数组的长度 (类型`natural unsigned int`) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2995">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-2996">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-2996">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-2997">对数组的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2997">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-2998">从堆栈中弹出数组引用并计算长度。</span><span class="sxs-lookup"><span data-stu-id="b7283-2998">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="b7283-2999">长度被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-2999">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3000">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3000">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3001">长度以形式`natural unsigned int`返回。</span><span class="sxs-lookup"><span data-stu-id="b7283-3001">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="b7283-3002"><xref:System.NullReferenceException>如果数组引用为空引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3002"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3003">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldlen`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3003">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3004">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3004">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3005">将指定索引处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3005">Loads the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3006">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3006">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3007">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3007">Format</span></span>|<span data-ttu-id="b7283-3008">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3008">Assembly Format</span></span>|<span data-ttu-id="b7283-3009">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3009">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3010">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3010">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-3011">ldloc`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-3011">ldloc `index`</span></span>|<span data-ttu-id="b7283-3012">将索引`index`处的局部变量加载到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3012">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="b7283-3013">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3013">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3014">将指定索引处的本地变量值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3014">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3015">`ldloc`指令将传递的索引处的局部变量号的内容推送到计算堆栈上, 其中本地变量从0开始编号。</span><span class="sxs-lookup"><span data-stu-id="b7283-3015">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-3016">仅当方法的 initialize 标志为 true 时, 才在输入方法之前, 将局部变量初始化为0。</span><span class="sxs-lookup"><span data-stu-id="b7283-3016">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="b7283-3017">可能存在 65535 (2 ^ 16-1) 个本地变量 (0-65534)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3017">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="b7283-3018">索引65535无效, 因为可能的实现将使用2字节整数跟踪本地的索引, 以及给定方法的局部变量总数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3018">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="b7283-3019">如果已将65535的索引设为有效, 则需要更宽的整数来跟踪此类方法中的局部变量的数目。</span><span class="sxs-lookup"><span data-stu-id="b7283-3019">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="b7283-3020">、、和指令`ldloc.3`为访问前四个局部变量提供了有效编码。 `ldloc.1` `ldloc.0` `ldloc.2`</span><span class="sxs-lookup"><span data-stu-id="b7283-3020">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="b7283-3021">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3021">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3022">请参阅 Partition I. 小于4个字节的局部变量在加载到堆栈上时`int32`将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3022">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3023">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3023">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3024">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3024">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3025">ILGenerator (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="b7283-3025">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="b7283-3026">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-3026">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3027">将索引 0 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3027">Loads the local variable at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3028">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3028">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3029">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3029">Format</span></span>|<span data-ttu-id="b7283-3030">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3030">Assembly Format</span></span>|<span data-ttu-id="b7283-3031">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3031">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3032">06</span><span class="sxs-lookup"><span data-stu-id="b7283-3032">06</span></span>|<span data-ttu-id="b7283-3033">ldloc</span><span class="sxs-lookup"><span data-stu-id="b7283-3033">ldloc.0</span></span>|<span data-ttu-id="b7283-3034">将索引 0 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3034">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="b7283-3035">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3035">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3036">将索引0处的局部变量值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3036">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3037">`ldloc.0`是的<xref:System.Reflection.Emit.OpCodes.Ldloc>有效编码, 允许访问索引0处的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3037">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="b7283-3038">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3038">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3039">在将小于4个字节的局部变量加载到堆栈上时`int32` , 它们将展开为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3039">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3040">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3040">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3041">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc.0`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3041">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3042">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3042">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3043">将索引 1 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3043">Loads the local variable at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3044">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3044">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3045">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3045">Format</span></span>|<span data-ttu-id="b7283-3046">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3046">Assembly Format</span></span>|<span data-ttu-id="b7283-3047">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3047">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3048">07</span><span class="sxs-lookup"><span data-stu-id="b7283-3048">07</span></span>|<span data-ttu-id="b7283-3049">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="b7283-3049">ldloc.1</span></span>|<span data-ttu-id="b7283-3050">将索引 1 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3050">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="b7283-3051">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3051">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3052">位于索引1处的局部变量值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3052">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3053">`ldloc.1`是的一个特别高效的<xref:System.Reflection.Emit.OpCodes.Ldloc>编码, 允许访问索引1处的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3053">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="b7283-3054">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3054">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3055">在将小于4个字节的局部变量加载到堆栈上时`int32` , 它们将展开为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3055">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3056">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3056">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3057">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc.1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3057">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3058">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3058">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3059">将索引 2 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3059">Loads the local variable at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3060">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3060">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3061">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3061">Format</span></span>|<span data-ttu-id="b7283-3062">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3062">Assembly Format</span></span>|<span data-ttu-id="b7283-3063">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3063">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3064">08</span><span class="sxs-lookup"><span data-stu-id="b7283-3064">08</span></span>|<span data-ttu-id="b7283-3065">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="b7283-3065">ldloc.2</span></span>|<span data-ttu-id="b7283-3066">将索引 2 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3066">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="b7283-3067">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3067">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3068">将索引2处的局部变量值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3068">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3069">`ldloc.2`是的一个特别高效的<xref:System.Reflection.Emit.OpCodes.Ldloc>编码, 允许访问索引2处的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3069">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="b7283-3070">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3070">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3071">在将小于4个字节的局部变量加载到堆栈上时`int32` , 它们将展开为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3071">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3072">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3072">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3073">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc.2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3075">将索引 3 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3075">Loads the local variable at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3076">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3077">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3077">Format</span></span>|<span data-ttu-id="b7283-3078">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3078">Assembly Format</span></span>|<span data-ttu-id="b7283-3079">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3080">09</span><span class="sxs-lookup"><span data-stu-id="b7283-3080">09</span></span>|<span data-ttu-id="b7283-3081">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="b7283-3081">ldloc.3</span></span>|<span data-ttu-id="b7283-3082">将索引 3 处的局部变量加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3082">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="b7283-3083">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3084">将索引为3的本地变量值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3084">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3085">`ldloc.3`是的一个特别高效的<xref:System.Reflection.Emit.OpCodes.Ldloc>编码, 允许访问索引3处的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3085">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="b7283-3086">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3086">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3087">在将小于4个字节的局部变量加载到堆栈上时`int32` , 它们将展开为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3087">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3088">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3089">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc.3`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3091">将特定索引处的局部变量加载到计算堆栈上（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-3091">Loads the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3092">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3093">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3093">Format</span></span>|<span data-ttu-id="b7283-3094">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3094">Assembly Format</span></span>|<span data-ttu-id="b7283-3095">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3096">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3096">11 < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-3097">ldloc`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-3097">ldloc.s `index`</span></span>|<span data-ttu-id="b7283-3098">将索引`index`处的局部变量加载到堆栈上 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3098">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="b7283-3099">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3100">将指定索引处的本地变量值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3100">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3101">`ldloc.s`指令将传递的索引处的局部变量号的内容推送到计算堆栈上, 其中本地变量从0开始编号。</span><span class="sxs-lookup"><span data-stu-id="b7283-3101">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-3102">如果对方法的 initialize 标志为 true, 则在输入方法之前, 本地变量将初始化为0。</span><span class="sxs-lookup"><span data-stu-id="b7283-3102">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="b7283-3103">可以使用 256 (2 ^ 8) 个本地变量 (0-255), 这是一个比`ldloc`更有效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-3103">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="b7283-3104">值的类型与在方法头中指定的局部变量的类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3104">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="b7283-3105">请参阅 Partition I. 小于4个字节的局部变量在加载到堆栈上时`int32`将扩展为类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3105">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="b7283-3106">浮点值扩展为其本机大小 (类型`F`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="b7283-3107">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloc.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3108">ILGenerator (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="b7283-3108">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="b7283-3109">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-3109">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3110">将位于特定索引处的局部变量的地址加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3110">Loads the address of the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3111">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3112">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3112">Format</span></span>|<span data-ttu-id="b7283-3113">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3113">Assembly Format</span></span>|<span data-ttu-id="b7283-3114">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3115">FE OD <`unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3115">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-3116">ldloca`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-3116">ldloca `index`</span></span>|<span data-ttu-id="b7283-3117">将局部变量`index`的地址加载到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3117">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="b7283-3118">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3119">存储在本地变量中指定索引处的地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3119">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3120">`ldloca`指令将传递的索引处的局部变量号的地址推送到堆栈上, 其中局部变量从0开始编号。</span><span class="sxs-lookup"><span data-stu-id="b7283-3120">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-3121">在堆栈上推送的值已正确对齐, 可用于<xref:System.Reflection.Emit.OpCodes.Ldind_I>和<xref:System.Reflection.Emit.OpCodes.Stind_I>等说明。</span><span class="sxs-lookup"><span data-stu-id="b7283-3121">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="b7283-3122">结果为暂时性指针 (类型`*`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3122">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="b7283-3123">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloca`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3123">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3124">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-3124">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3125">将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-3125">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3126">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3126">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3127">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3127">Format</span></span>|<span data-ttu-id="b7283-3128">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3128">Assembly Format</span></span>|<span data-ttu-id="b7283-3129">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3129">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3130">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3130">12 < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-3131">ldloca`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-3131">ldloca.s `index`</span></span>|<span data-ttu-id="b7283-3132">将局部变量`index`的地址加载到计算堆栈上 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3132">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="b7283-3133">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3133">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3134">存储在本地变量中指定索引处的地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3134">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3135">`ldloca.s`指令将传递的索引处的局部变量号的地址推送到堆栈上, 其中局部变量从0开始编号。</span><span class="sxs-lookup"><span data-stu-id="b7283-3135">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-3136">在堆栈上推送的值已正确对齐, 可用于<xref:System.Reflection.Emit.OpCodes.Ldind_I>和<xref:System.Reflection.Emit.OpCodes.Stind_I>等说明。</span><span class="sxs-lookup"><span data-stu-id="b7283-3136">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="b7283-3137">结果为暂时性指针 (类型`*`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3137">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="b7283-3138">`ldloca.s`说明提供了一个有效的编码, 可与局部变量0到255一起使用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3138">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="b7283-3139">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldloca.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3139">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3140">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-3140">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3141">将空引用（<see langword="O" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3141">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3142">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3142">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3143">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3143">Format</span></span>|<span data-ttu-id="b7283-3144">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3144">Assembly Format</span></span>|<span data-ttu-id="b7283-3145">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3145">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3146">14</span><span class="sxs-lookup"><span data-stu-id="b7283-3146">14</span></span>|<span data-ttu-id="b7283-3147">ldnull</span><span class="sxs-lookup"><span data-stu-id="b7283-3147">ldnull</span></span>|<span data-ttu-id="b7283-3148">在堆栈上推送空引用</span><span class="sxs-lookup"><span data-stu-id="b7283-3148">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="b7283-3149">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3149">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3150">空对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3150">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3151">`ldnull`将空引用 (类型`O`) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3151">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="b7283-3152">这用于在使用数据填充位置之前或在位置被弃用时初始化位置。</span><span class="sxs-lookup"><span data-stu-id="b7283-3152">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="b7283-3153">`ldnull`提供一个与大小无关的空引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3153">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="b7283-3154">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldnull`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3154">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3155">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3155">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3156">将地址指向的值类型对象复制到计算堆栈的顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-3156">Copies the value type object pointed to by an address to the top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3157">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3157">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3158">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3158">Format</span></span>|<span data-ttu-id="b7283-3159">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3159">Assembly Format</span></span>|<span data-ttu-id="b7283-3160">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3160">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3161">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3161">71 < `T` ></span></span>|<span data-ttu-id="b7283-3162">ldobj`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-3162">ldobj `class`</span></span>|<span data-ttu-id="b7283-3163">将值类型`class`的实例复制到堆栈中。</span><span class="sxs-lookup"><span data-stu-id="b7283-3163">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3164">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3164">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3165">值类型对象的地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3165">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3166">从堆栈中弹出该地址, 并查找该特定地址处的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-3166">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="b7283-3167">存储在该地址的对象的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3167">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3168">`ldobj`指令用于作为参数传递值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3168">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="b7283-3169">`ldobj`指令将`addrOfValObj` (类型`&`为、 `*`或)指向的值复制到堆栈的顶部。`native int`</span><span class="sxs-lookup"><span data-stu-id="b7283-3169">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="b7283-3170">已复制的字节数取决于类 (由`class`参数指定) 的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-3170">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="b7283-3171">`class`参数是表示值类型的元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3171">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="b7283-3172">`ldobj`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-3172">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-3173"><xref:System.TypeLoadException>如果找不到类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3173"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="b7283-3174">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-3174">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-3175">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldobj`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3176">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3176">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3177">将静态字段的值推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3177">Pushes the value of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3178">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3179">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3179">Format</span></span>|<span data-ttu-id="b7283-3180">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3180">Assembly Format</span></span>|<span data-ttu-id="b7283-3181">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3182">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3182">7E < `T` ></span></span>|<span data-ttu-id="b7283-3183">ldsfld`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-3183">ldsfld `field`</span></span>|<span data-ttu-id="b7283-3184">将的`field`值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3184">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3185">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3186">将特定字段的值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3186">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3187">`ldsfld`指令将静态 (在类的所有实例中共享) 字段的值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3187">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="b7283-3188">返回类型是与传递的元数据标记`field`相关联的。</span><span class="sxs-lookup"><span data-stu-id="b7283-3188">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="b7283-3189">`ldsfld`指令可以<xref:System.Reflection.Emit.OpCodes.Volatile>有前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-3189">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="b7283-3190">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldsfld`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3190">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3191">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3191">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3192">将静态字段的地址推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3192">Pushes the address of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3193">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3193">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3194">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3194">Format</span></span>|<span data-ttu-id="b7283-3195">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3195">Assembly Format</span></span>|<span data-ttu-id="b7283-3196">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3196">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3197">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3197">7F < `T` ></span></span>|<span data-ttu-id="b7283-3198">ldsflda`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-3198">ldsflda `field`</span></span>|<span data-ttu-id="b7283-3199">推送堆栈上的`field`地址</span><span class="sxs-lookup"><span data-stu-id="b7283-3199">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="b7283-3200">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3200">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3201">将特定字段的地址推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3201">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3202">`ldsflda`指令将静态的地址 (在类的所有实例中共享) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3202">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="b7283-3203">如果元数据标记`*` `field`引用其内存被管理的类型, 则该地址可以表示为暂时性指针 (类型)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3203">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="b7283-3204">否则, 它对应于非托管指针 (类型`native int`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3204">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="b7283-3205">请注意`field` , 可以是静态全局的, 它具有分配的相对虚拟地址 (该字段的偏移量, 其中其包含的 PE 文件将加载到内存中), 其中内存是非托管的。</span><span class="sxs-lookup"><span data-stu-id="b7283-3205">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="b7283-3206">`ldsflda`指令可以<xref:System.Reflection.Emit.OpCodes.Volatile>有前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-3206">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="b7283-3207"><xref:System.MissingFieldException>如果在元数据中找不到字段, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3207"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="b7283-3208">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检查此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-3208">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="b7283-3209">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldsflda`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3209">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3210">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3210">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3211">推送对元数据中存储的字符串的新对象引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3211">Pushes a new object reference to a string literal stored in the metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3212">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3212">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3213">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3213">Format</span></span>|<span data-ttu-id="b7283-3214">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3214">Assembly Format</span></span>|<span data-ttu-id="b7283-3215">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3215">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3216">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3216">72 < `T` ></span></span>|<span data-ttu-id="b7283-3217">ldstr`mdToken`</span><span class="sxs-lookup"><span data-stu-id="b7283-3217">ldstr `mdToken`</span></span>|<span data-ttu-id="b7283-3218">为元数据字符串标记`mdToken`推送字符串对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-3218">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="b7283-3219">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3219">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3220">将对字符串的对象引用推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3220">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3221">指令将对象引用 (类型`O`) 推送到表示元数据中存储的特定字符串文本的新字符串对象。 `ldstr`</span><span class="sxs-lookup"><span data-stu-id="b7283-3221">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="b7283-3222">`ldstr`指令分配所需的内存量, 并执行任何格式转换, 以将字符串文本从文件中使用的格式转换为运行时所需的字符串格式。</span><span class="sxs-lookup"><span data-stu-id="b7283-3222">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="b7283-3223">公共语言基础结构 (CLI) 保证两个`ldstr`指令的结果引用两个具有相同字符序列的元数据标记, 这会完全返回相同的字符串对象 (称为 "字符串暂留" 的过程)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3223">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="b7283-3224">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldstr`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3224">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3225">ILGenerator (OpCode, string)</span><span class="sxs-lookup"><span data-stu-id="b7283-3225">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3226">将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3226">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3227">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3227">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3228">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3228">Format</span></span>|<span data-ttu-id="b7283-3229">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3229">Assembly Format</span></span>|<span data-ttu-id="b7283-3230">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3230">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3231">D0 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3231">D0 < `T` ></span></span>|<span data-ttu-id="b7283-3232">ldtoken`token`</span><span class="sxs-lookup"><span data-stu-id="b7283-3232">ldtoken `token`</span></span>|<span data-ttu-id="b7283-3233">将元数据标记转换为其运行时表示形式。</span><span class="sxs-lookup"><span data-stu-id="b7283-3233">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="b7283-3234">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3234">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3235">传递的标记将转换为`RuntimeHandle`并推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3235">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3236">`ldtoken`指令`RuntimeHandle`为指定的元数据标记推送。</span><span class="sxs-lookup"><span data-stu-id="b7283-3236">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="b7283-3237">`RuntimeHandle`可以是`typeref/typedef`、或`methodref/methoddef`。 `fieldref/fielddef`</span><span class="sxs-lookup"><span data-stu-id="b7283-3237">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="b7283-3238">可以在对系统类库中的方法的调用中使用`Reflection`推送到堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3238">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="b7283-3239">有关运行时句柄的信息, 请参阅以下<xref:System.RuntimeFieldHandle>类<xref:System.RuntimeTypeHandle>:、 <xref:System.RuntimeMethodHandle>和。</span><span class="sxs-lookup"><span data-stu-id="b7283-3239">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="b7283-3240">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldtoken`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3241">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3241">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="b7283-3242">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3242">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="b7283-3243">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3243">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3244">将指向实现与指定对象关联的特定虚方法的本机代码的非托管指针（<see langword="native int" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3244">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3245">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3245">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3246">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3246">Format</span></span>|<span data-ttu-id="b7283-3247">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3247">Assembly Format</span></span>|<span data-ttu-id="b7283-3248">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3248">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3249">FE 07 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3249">FE 07 < `T` ></span></span>|<span data-ttu-id="b7283-3250">ldvirtftn`method`</span><span class="sxs-lookup"><span data-stu-id="b7283-3250">ldvirtftn `method`</span></span>|<span data-ttu-id="b7283-3251">将指针推送到堆栈上对象的虚拟`method`方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-3251">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3252">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3252">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3253">对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3253">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3254">从堆栈中弹出对象引用, 并查找方法 (由元数据标记`method`指定) 的入口点地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3254">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="b7283-3255">指向`method`的指针将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3255">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3256">如果通过`ldvirtftn`指令将生成的非托管指针引用托管方法 (或从托管<xref:System.Reflection.Emit.OpCodes.Calli>代码转换为非托管代码的存根), 则可以使用指令调用该指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-3256">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="b7283-3257">非托管指针使用 CLR 调用约定指向本机代码。</span><span class="sxs-lookup"><span data-stu-id="b7283-3257">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="b7283-3258">此方法指针不应作为回调例程传递到非托管的本机代码。</span><span class="sxs-lookup"><span data-stu-id="b7283-3258">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="b7283-3259">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ldvirtftn`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3260">ILGenerator (操作码, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3260">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3261">退出受保护的代码区域，无条件将控制转移到特定目标指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3261">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3262">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3263">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3263">Format</span></span>|<span data-ttu-id="b7283-3264">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3264">Assembly Format</span></span>|<span data-ttu-id="b7283-3265">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3266">DD < `int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3266">DD < `int32` ></span></span>|<span data-ttu-id="b7283-3267">遗留`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-3267">leave `target`</span></span>|<span data-ttu-id="b7283-3268">退出受保护的代码区域。</span><span class="sxs-lookup"><span data-stu-id="b7283-3268">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="b7283-3269">没有为此指令指定堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3269">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-3270">`leave`指令无条件地将控制转移到特定目标指令, 表示为从当前指令后面的指令开头开始的4字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3270">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-3271">`br` `try` `filter`指令与指令类似, 但它可用于退出、或`catch`阻止, 而普通分支指令只能在此类块中用于传输控制`leave`以便.</span><span class="sxs-lookup"><span data-stu-id="b7283-3271">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="b7283-3272">指令`leave`将清空计算堆栈, 并确保执行适当的周围`finally`块。</span><span class="sxs-lookup"><span data-stu-id="b7283-3272">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="b7283-3273">不能使用`leave`指令`finally`退出块。</span><span class="sxs-lookup"><span data-stu-id="b7283-3273">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="b7283-3274">为了简化异常处理程序的代码生成, 从 catch 块内部有效, 使用`leave`指令将控制转移到关联`try`块中的任何指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3274">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="b7283-3275">如果指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-3275">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="b7283-3276">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`leave`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3276">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3277">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-3277">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3278">退出受保护的代码区域，无条件将控制转移到目标指令（缩写形式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-3278">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3279">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3279">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3280">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3280">Format</span></span>|<span data-ttu-id="b7283-3281">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3281">Assembly Format</span></span>|<span data-ttu-id="b7283-3282">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3282">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3283">DE < `int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3283">DE < `int8` ></span></span>|<span data-ttu-id="b7283-3284">离开`target`</span><span class="sxs-lookup"><span data-stu-id="b7283-3284">leave.s `target`</span></span>|<span data-ttu-id="b7283-3285">退出受保护的代码区域 (缩写形式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3285">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="b7283-3286">没有为此指令指定堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3286">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-3287">`leave.s`指令无条件地将控制转移到传递的目标指令, 表示为从当前指令后面的指令开头开始的1字节有符号偏移量。</span><span class="sxs-lookup"><span data-stu-id="b7283-3287">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="b7283-3288">`br` `try` `filter`指令与指令类似, 但它可用于退出、或`catch`阻止, 而普通分支指令只能在此类块中用于传输控制`leave.s`以便.</span><span class="sxs-lookup"><span data-stu-id="b7283-3288">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="b7283-3289">指令`leave.s`将清空计算堆栈, 并确保执行适当的周围`finally`块。</span><span class="sxs-lookup"><span data-stu-id="b7283-3289">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="b7283-3290">不能使用`leave.s`指令`finally`退出块。</span><span class="sxs-lookup"><span data-stu-id="b7283-3290">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="b7283-3291">为了简化异常处理程序的代码生成, 从 catch 块内部有效, 使用`leave.s`指令将控制转移到关联`try`块中的任何指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3291">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="b7283-3292">如果指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-3292">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="b7283-3293">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`leave.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3293">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3294">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-3294">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3295">从本地动态内存池分配特定数目的字节并将第一个分配的字节的地址（瞬态指针，<see langword="*" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3295">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3296">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3296">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3297">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3297">Format</span></span>|<span data-ttu-id="b7283-3298">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3298">Assembly Format</span></span>|<span data-ttu-id="b7283-3299">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3299">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3300">FE 0F</span><span class="sxs-lookup"><span data-stu-id="b7283-3300">FE 0F</span></span>|<span data-ttu-id="b7283-3301">localloc</span><span class="sxs-lookup"><span data-stu-id="b7283-3301">localloc</span></span>|<span data-ttu-id="b7283-3302">从本地堆中分配空间。</span><span class="sxs-lookup"><span data-stu-id="b7283-3302">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="b7283-3303">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3303">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3304">要分配的字节数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3304">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3305">从堆栈中弹出字节数;与该大小相对应的内存量从本地堆中分配。</span><span class="sxs-lookup"><span data-stu-id="b7283-3305">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="b7283-3306">指向分配的内存的第一个字节的指针被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3306">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3307">指令从本地`size`动态内存`natural unsigned int`池分配 (类型) 字节, 并返回第一个分配的字节的地址 (瞬态`*`指针, 类型)。 `localloc`</span><span class="sxs-lookup"><span data-stu-id="b7283-3307">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="b7283-3308">仅当方法的 initialize 标志为时`true`, 返回的内存块才会初始化为0。</span><span class="sxs-lookup"><span data-stu-id="b7283-3308">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="b7283-3309">当当前方法执行<xref:System.Reflection.Emit.OpCodes.Ret>时, 本地内存池可供重复使用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3309">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="b7283-3310">生成的地址是对齐的, `stind`以便可以使用指令 ( <xref:System.Reflection.Emit.OpCodes.Stind_I4>如`ldind` ) 将任何基元数据类型存储在此处, 并使用指令 (如<xref:System.Reflection.Emit.OpCodes.Ldind_I4>) 加载。</span><span class="sxs-lookup"><span data-stu-id="b7283-3310">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="b7283-3311">`filter` `catch` `finally`指令不能出现在、、或`fault`块中。 `localloc`</span><span class="sxs-lookup"><span data-stu-id="b7283-3311">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="b7283-3312"><xref:System.StackOverflowException>如果没有足够的内存来为请求提供服务, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3312"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="b7283-3313">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`localloc`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3313">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3314">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3314">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3315">将对特定类型实例的类型化引用推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3315">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3316">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3316">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3317">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3317">Format</span></span>|<span data-ttu-id="b7283-3318">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3318">Assembly Format</span></span>|<span data-ttu-id="b7283-3319">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3319">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3320">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3320">C6 < `T` ></span></span>|<span data-ttu-id="b7283-3321">mkrefany`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-3321">mkrefany `class`</span></span>|<span data-ttu-id="b7283-3322">将类型的类型`class`化引用推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3322">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3323">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3323">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3324">指向片段的数据被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3324">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3325">弹出指针并将其转换为类型`class`的类型化引用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3325">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="b7283-3326">类型化的引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3326">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3327">`mkrefany`指令支持动态类型化引用的传递。</span><span class="sxs-lookup"><span data-stu-id="b7283-3327">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="b7283-3328">指针必须是、 `&` `*`或`native int`类型, 并保存数据片段的有效地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3328">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="b7283-3329">`Class`类标记, 用于描述指针所引用的数据的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3329">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="b7283-3330">`Mkrefany`将类型化引用推送到堆栈上, 并提供指针和类型`class`的不透明说明符。</span><span class="sxs-lookup"><span data-stu-id="b7283-3330">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="b7283-3331">对类型化引用允许的唯一有效操作是将其传递到要求类型化引用作为参数的方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-3331">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="b7283-3332">然后, 调用方可以使用<xref:System.Reflection.Emit.OpCodes.Refanytype>和<xref:System.Reflection.Emit.OpCodes.Refanyval>指令分别检索类型 (类) 和地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3332">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="b7283-3333"><xref:System.TypeLoadException>如果`class`找不到, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3333"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="b7283-3334">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-3334">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-3335">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`mkrefany`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3335">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3336">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3336">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3337">将两个值相乘并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3337">Multiplies two values and pushes the result on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3338">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3338">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3339">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3339">Format</span></span>|<span data-ttu-id="b7283-3340">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3340">Assembly Format</span></span>|<span data-ttu-id="b7283-3341">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3341">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3342">5A</span><span class="sxs-lookup"><span data-stu-id="b7283-3342">5A</span></span>|<span data-ttu-id="b7283-3343">mul</span><span class="sxs-lookup"><span data-stu-id="b7283-3343">mul</span></span>|<span data-ttu-id="b7283-3344">将两个值相乘。</span><span class="sxs-lookup"><span data-stu-id="b7283-3344">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3345">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3345">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3346">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3346">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3347">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3347">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3348">`value2`和`value1`从堆栈中弹出;`value1` 与`value2`相乘。</span><span class="sxs-lookup"><span data-stu-id="b7283-3348">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="b7283-3349">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3349">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3350">`mul` 指令`value1`乘以并将结果推送到堆栈上。`value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-3350">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="b7283-3351">整数运算在溢出时无提示截断高位。</span><span class="sxs-lookup"><span data-stu-id="b7283-3351">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="b7283-3352">有关<xref:System.Reflection.Emit.OpCodes.Mul_Ovf>使用溢出处理的特定于整数的乘法运算, 请参阅。</span><span class="sxs-lookup"><span data-stu-id="b7283-3352">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="b7283-3353">对于浮点类型, 为 0 \* 无穷 = NaN。</span><span class="sxs-lookup"><span data-stu-id="b7283-3353">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="b7283-3354">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`mul`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3354">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3355">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3355">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3356">将两个整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3356">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3357">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3357">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3358">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3358">Format</span></span>|<span data-ttu-id="b7283-3359">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3359">Assembly Format</span></span>|<span data-ttu-id="b7283-3360">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3360">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3361">D8</span><span class="sxs-lookup"><span data-stu-id="b7283-3361">D8</span></span>|<span data-ttu-id="b7283-3362">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="b7283-3362">mul.ovf</span></span>|<span data-ttu-id="b7283-3363">使用溢出检查将堆栈上的两个整数值相乘。</span><span class="sxs-lookup"><span data-stu-id="b7283-3363">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-3364">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3364">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3365">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3365">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3366">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3366">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3367">`value2`和`value1`从堆栈中弹出;`value1`乘以,并`value2`进行溢出检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-3367">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="b7283-3368">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3368">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3369">指令`mul.ovf`将`value1` 整数`value2`乘以整数并将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3369">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="b7283-3370">如果结果类型中不能容纳结果, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-3370">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="b7283-3371"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3371"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-3372">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`mul.ovf`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3373">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3373">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3374">将两个无符号整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3374">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3375">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3375">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3376">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3376">Format</span></span>|<span data-ttu-id="b7283-3377">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3377">Assembly Format</span></span>|<span data-ttu-id="b7283-3378">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3379">D9</span><span class="sxs-lookup"><span data-stu-id="b7283-3379">D9</span></span>|<span data-ttu-id="b7283-3380">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="b7283-3380">mul.ovf.un</span></span>|<span data-ttu-id="b7283-3381">将堆栈上的两个无符号值与溢出检查相乘。</span><span class="sxs-lookup"><span data-stu-id="b7283-3381">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-3382">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3383">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3383">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3384">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3384">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3385">`value2`和`value1`从堆栈中弹出;`value1`乘以,并`value2`进行溢出检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-3385">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="b7283-3386">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3386">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3387">指令`mul.ovf.un`将无符号整数`value1`乘以无符号`value2`整数, 并将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3387">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="b7283-3388">如果结果类型中不能容纳结果, 则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-3388">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="b7283-3389"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3389"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-3390">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`mul.ovf.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3390">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3391">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3391">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3392">对一个值执行求反并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3392">Negates a value and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3393">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3393">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3394">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3394">Format</span></span>|<span data-ttu-id="b7283-3395">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3395">Assembly Format</span></span>|<span data-ttu-id="b7283-3396">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3396">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3397">65</span><span class="sxs-lookup"><span data-stu-id="b7283-3397">65</span></span>|<span data-ttu-id="b7283-3398">neg</span><span class="sxs-lookup"><span data-stu-id="b7283-3398">neg</span></span>|<span data-ttu-id="b7283-3399">对当前位于堆栈顶部的值求反。</span><span class="sxs-lookup"><span data-stu-id="b7283-3399">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3400">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3400">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3401">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3401">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3402">从堆栈中弹出一个值并对其进行求反。</span><span class="sxs-lookup"><span data-stu-id="b7283-3402">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="b7283-3403">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3403">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3404">`neg`指令对值进行求反并将结果推送到堆栈顶部。</span><span class="sxs-lookup"><span data-stu-id="b7283-3404">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="b7283-3405">返回类型与操作数类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3405">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="b7283-3406">整数值的求反是标准2的补码反运算。</span><span class="sxs-lookup"><span data-stu-id="b7283-3406">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="b7283-3407">特别是, 取消最多负数 (不具有正号) 将产生最大的负数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3407">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="b7283-3408">若要检测此溢出<xref:System.Reflection.Emit.OpCodes.Sub_Ovf> , 请改用指令 (即从0中减去)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3408">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="b7283-3409">取消浮点数不能溢出, 取消 NaN 返回 NaN。</span><span class="sxs-lookup"><span data-stu-id="b7283-3409">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="b7283-3410">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`neg`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3411">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3411">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3412">将对新的从零开始的一维数组（其元素属于特定类型）的对象引用推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3412">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3413">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3413">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3414">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3414">Format</span></span>|<span data-ttu-id="b7283-3415">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3415">Assembly Format</span></span>|<span data-ttu-id="b7283-3416">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3416">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3417">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3417">8D < `T` ></span></span>|<span data-ttu-id="b7283-3418">newarr`etype`</span><span class="sxs-lookup"><span data-stu-id="b7283-3418">newarr `etype`</span></span>|<span data-ttu-id="b7283-3419">创建具有类型`etype`的元素的新数组。</span><span class="sxs-lookup"><span data-stu-id="b7283-3419">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="b7283-3420">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3420">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3421">数组中的元素数被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3421">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3422">从堆栈中弹出元素数并创建数组。</span><span class="sxs-lookup"><span data-stu-id="b7283-3422">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="b7283-3423">对新数组的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3423">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3424">指令将对象引用 (类型`O`) 推送到新的从零开始的一维数组, 该数组的元素类型`etype`为 (描述该类型的元数据标记)。 `newarr`</span><span class="sxs-lookup"><span data-stu-id="b7283-3424">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="b7283-3425">新数组中的元素数应指定为`native int`。</span><span class="sxs-lookup"><span data-stu-id="b7283-3425">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="b7283-3426">有效的数组索引范围从零到最大元素数减一。</span><span class="sxs-lookup"><span data-stu-id="b7283-3426">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="b7283-3427">数组元素可以是任何类型, 包括值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3427">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="b7283-3428">从零开始的一维数组, 使用引用适当值类型 (<xref:System.Int32>等) 的元数据标记创建。</span><span class="sxs-lookup"><span data-stu-id="b7283-3428">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="b7283-3429">数组的元素初始化为适当类型的0。</span><span class="sxs-lookup"><span data-stu-id="b7283-3429">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="b7283-3430"><xref:System.Reflection.Emit.OpCodes.Newobj> 使用`newarr`而不是创建从零开始的一维数组和多维数组。</span><span class="sxs-lookup"><span data-stu-id="b7283-3430">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="b7283-3431">通常, 它们是使用 .NET Framework 中的<xref:System.Array>类的方法创建的。</span><span class="sxs-lookup"><span data-stu-id="b7283-3431">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="b7283-3432"><xref:System.OutOfMemoryException>如果内存不足, 无法满足请求, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3432"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="b7283-3433"><xref:System.OverflowException>小于0时`numElems`引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3433"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="b7283-3434">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`newarr`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3434">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3435">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3435">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3436">创建一个值类型的新对象或新实例，并将对象引用（<see langword="O" /> 类型）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3436">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3437">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3438">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3438">Format</span></span>|<span data-ttu-id="b7283-3439">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3439">Assembly Format</span></span>|<span data-ttu-id="b7283-3440">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3441">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3441">73 < `T` ></span></span>|<span data-ttu-id="b7283-3442">newobj`ctor`</span><span class="sxs-lookup"><span data-stu-id="b7283-3442">newobj `ctor`</span></span>|<span data-ttu-id="b7283-3443">分配未初始化的对象或值类型, 并调用构造`ctor`函数方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-3443">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="b7283-3444">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3445">自变量`arg1`按顺序推送到堆栈上。 `argn`</span><span class="sxs-lookup"><span data-stu-id="b7283-3445">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="b7283-3446">`ctor`通过`argn` 从堆栈中弹出并将参数传递给来创建对象。`arg1`</span><span class="sxs-lookup"><span data-stu-id="b7283-3446">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="b7283-3447">对新的对象的引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3447">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3448">`newobj`指令创建新的对象或值类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-3448">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="b7283-3449">`Ctor`是要调用的构造函数`methodref`的`methoddef`名称、类和签名的元数据标记 (或必须标记为构造函数的或)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3449">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="b7283-3450">指令分配与`ctor`关联的类的新实例, 并根据需要将新实例中的所有字段初始化为 0 (适当的类型) 或空引用。 `newobj`</span><span class="sxs-lookup"><span data-stu-id="b7283-3450">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="b7283-3451">然后, 它将调用`ctor`具有给定参数的构造函数和新创建的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-3451">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="b7283-3452">调用构造函数后, 即会将初始化的对象引用 (类型`O`) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3452">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="b7283-3453">从构造函数的角度来看, 未初始化的对象是参数 0, 传递给 newobj 的其他参数按照顺序排列。</span><span class="sxs-lookup"><span data-stu-id="b7283-3453">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="b7283-3454">使用<xref:System.Reflection.Emit.OpCodes.Newarr>而不`newobj`是创建所有从零开始的一维数组。</span><span class="sxs-lookup"><span data-stu-id="b7283-3454">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="b7283-3455">另一方面, 将使用`newobj`创建所有其他数组 (不止一个维度, 或一维但不是从零开始的数组)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3455">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="b7283-3456">通常不使用`newobj`创建值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3456">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="b7283-3457">它们通常作为参数或局部变量分配, 使用`newarr` (对于从零开始的一维数组) 或作为对象的字段。</span><span class="sxs-lookup"><span data-stu-id="b7283-3457">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="b7283-3458">分配后, 将使用<xref:System.Reflection.Emit.OpCodes.Initobj>对其进行初始化。</span><span class="sxs-lookup"><span data-stu-id="b7283-3458">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="b7283-3459">但是, `newobj`可以使用指令在堆栈上创建值类型的新实例, 然后可以将该实例作为参数进行传递, 并将其存储在本地, 依此类推。</span><span class="sxs-lookup"><span data-stu-id="b7283-3459">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="b7283-3460"><xref:System.OutOfMemoryException>如果内存不足, 无法满足请求, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3460"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="b7283-3461"><xref:System.MissingMethodException>如果找不到具有指定`ctor`名称、类和签名的构造函数方法, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3461"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="b7283-3462">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-3462">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-3463">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`newobj`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3463">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3464">ILGenerator (OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-3464">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3465">如果修补操作码，则填充空间。</span><span class="sxs-lookup"><span data-stu-id="b7283-3465">Fills space if opcodes are patched.</span></span> <span data-ttu-id="b7283-3466">尽管可能消耗处理周期，但未执行任何有意义的操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3466">No meaningful operation is performed although a processing cycle can be consumed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3467">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3467">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3468">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3468">Format</span></span>|<span data-ttu-id="b7283-3469">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3469">Assembly Format</span></span>|<span data-ttu-id="b7283-3470">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3470">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3471">00</span><span class="sxs-lookup"><span data-stu-id="b7283-3471">00</span></span>|<span data-ttu-id="b7283-3472">nop</span><span class="sxs-lookup"><span data-stu-id="b7283-3472">nop</span></span>|<span data-ttu-id="b7283-3473">执行不具有行为的操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3473">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="b7283-3474">没有为此指令定义堆栈过渡行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3474">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-3475">`nop`操作不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3475">The `nop` operation does nothing.</span></span> <span data-ttu-id="b7283-3476">它用于在对操作码进行修补时填充空间。</span><span class="sxs-lookup"><span data-stu-id="b7283-3476">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="b7283-3477">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`nop`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3477">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3478">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3478">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3479">计算堆栈顶部整数值的按位求补并将结果作为相同的类型推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3479">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3480">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3480">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3481">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3481">Format</span></span>|<span data-ttu-id="b7283-3482">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3482">Assembly Format</span></span>|<span data-ttu-id="b7283-3483">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3483">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3484">66</span><span class="sxs-lookup"><span data-stu-id="b7283-3484">66</span></span>|<span data-ttu-id="b7283-3485">not</span><span class="sxs-lookup"><span data-stu-id="b7283-3485">not</span></span>|<span data-ttu-id="b7283-3486">计算值的按位求补。</span><span class="sxs-lookup"><span data-stu-id="b7283-3486">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="b7283-3487">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3487">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3488">`value`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3488">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3489">`value`从堆栈中弹出, 并计算按位求补。</span><span class="sxs-lookup"><span data-stu-id="b7283-3489">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="b7283-3490">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3490">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3491">`not`指令计算整数值的按位求补并将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3491">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="b7283-3492">返回类型与操作数类型相同。</span><span class="sxs-lookup"><span data-stu-id="b7283-3492">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="b7283-3493">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`not`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3493">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3494">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3494">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3495">计算位于堆栈顶部的两个整数值的按位求补并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3495">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3496">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3496">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3497">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3497">Format</span></span>|<span data-ttu-id="b7283-3498">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3498">Assembly Format</span></span>|<span data-ttu-id="b7283-3499">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3499">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3500">60</span><span class="sxs-lookup"><span data-stu-id="b7283-3500">60</span></span>|<span data-ttu-id="b7283-3501">or</span><span class="sxs-lookup"><span data-stu-id="b7283-3501">or</span></span>|<span data-ttu-id="b7283-3502">计算两个整数值的按位 "或", 返回整数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3502">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="b7283-3503">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3503">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3504">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3504">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3505">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3505">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3506">`value2`和`value1`从堆栈中弹出, 并按位或计算。</span><span class="sxs-lookup"><span data-stu-id="b7283-3506">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="b7283-3507">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3507">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3508">`or`指令计算堆栈顶部的两个值的按位 "或", 并将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3508">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3509">`Or`是特定于整数的操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3509">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="b7283-3510">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`or`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3510">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3511">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3511">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3512">移除当前位于计算堆栈顶部的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3512">Removes the value currently on top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3513">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3513">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3514">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3514">Format</span></span>|<span data-ttu-id="b7283-3515">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3515">Assembly Format</span></span>|<span data-ttu-id="b7283-3516">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3516">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3517">26</span><span class="sxs-lookup"><span data-stu-id="b7283-3517">26</span></span>|<span data-ttu-id="b7283-3518">pop</span><span class="sxs-lookup"><span data-stu-id="b7283-3518">pop</span></span>|<span data-ttu-id="b7283-3519">从堆栈中弹出顶部值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3519">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3520">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3520">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3521">顶部值从堆栈中弹出。</span><span class="sxs-lookup"><span data-stu-id="b7283-3521">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="b7283-3522">`pop`指令从堆栈中移除顶部元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3522">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="b7283-3523">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`pop`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3523">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3524">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3524">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3525">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3525">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3526">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3526">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3527">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3527">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3528">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3528">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3529">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3529">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3530">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3530">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3531">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3531">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3532">此指令为保留指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3532">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3533">指定后面的数组地址操作在运行时不执行类型检查，并且返回可变性受限的托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-3533">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3534">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3534">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3535">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3535">Format</span></span>|<span data-ttu-id="b7283-3536">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3536">Assembly Format</span></span>|<span data-ttu-id="b7283-3537">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3537">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3538">FE 1E</span><span class="sxs-lookup"><span data-stu-id="b7283-3538">FE 1E</span></span>|<span data-ttu-id="b7283-3539">只读.</span><span class="sxs-lookup"><span data-stu-id="b7283-3539">readonly.</span></span>|<span data-ttu-id="b7283-3540">指定后续数组地址操作在运行时不执行类型检查, 并且它返回具有受限可变性的托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-3540">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="b7283-3541">此前缀只能出现在`ldelema`指令之前, 并调用数组的特殊`Address`方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-3541">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="b7283-3542">其对后续操作的影响是双重的:</span><span class="sxs-lookup"><span data-stu-id="b7283-3542">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="b7283-3543">在运行时, 不执行任何类型检查操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3543">At run time, no type check operation is performed.</span></span> <span data-ttu-id="b7283-3544">请注意, 在引用类型数组上使用时, `ldelema`通常`stelem`会对和说明进行隐式类型检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-3544">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="b7283-3545">没有值类的运行时类型检查, 因此`readonly`在这种情况下, 不会执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-3545">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="b7283-3546">验证程序将操作地址操作的结果视为具有受限可变性的托管指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-3546">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="b7283-3547">指针被称为具有受限的可变性, 因为定义类型控制值是否可转变。</span><span class="sxs-lookup"><span data-stu-id="b7283-3547">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="b7283-3548">对于公开无公共字段或更新就地值的方法的值类, 该指针为只读 (因此为前缀的名称)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3548">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="b7283-3549">特别是, 表示基元类型的类 (例如, System.object) 不公开赋值函数, 因此它们是只读的。</span><span class="sxs-lookup"><span data-stu-id="b7283-3549">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="b7283-3550">以这种方式限制的托管指针只能通过以下方式使用:</span><span class="sxs-lookup"><span data-stu-id="b7283-3550">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="b7283-3551">为`ldfld`、 `object` 、、`ldflda`或指令`constrained callvirt`的参数`stfld`。 `call`</span><span class="sxs-lookup"><span data-stu-id="b7283-3551">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="b7283-3552">作为`ldobj`指令`pointer`的参数`ldind`或指令的参数之一。</span><span class="sxs-lookup"><span data-stu-id="b7283-3552">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="b7283-3553">作为`cpobj`指令`source`的参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3553">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="b7283-3554">不允许所有其他操作, 包括`stobj`、 `initobj`、或`mkrefany`操作, 或者任何`stind`说明。</span><span class="sxs-lookup"><span data-stu-id="b7283-3554">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="b7283-3555">`readonly`前缀的用途是在从泛型代码中的数组获取元素时避免类型检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-3555">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="b7283-3556">例如, 如果数组`arr[i].m()` `arr`的元素类型是一个已被约束为具有方法`m`的接口的泛型类型, 则该表达式可能会编译为以下 MSIL。</span><span class="sxs-lookup"><span data-stu-id="b7283-3556">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="b7283-3557">如果没有`ldelema`前缀, 则指令将在! 0 是引用类型的情况下执行类型检查。 `readonly`</span><span class="sxs-lookup"><span data-stu-id="b7283-3557">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="b7283-3558">这种类型的检查不仅低效, 而且它在语义上不正确。</span><span class="sxs-lookup"><span data-stu-id="b7283-3558">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="b7283-3559">的类型检查`ldelema`是完全匹配, 这太强。</span><span class="sxs-lookup"><span data-stu-id="b7283-3559">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="b7283-3560">如果数组持有类型为! 0 的子类, 则上述代码将无法通过类型检查。</span><span class="sxs-lookup"><span data-stu-id="b7283-3560">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="b7283-3561">提取数组元素的地址, 而不是元素本身, 以获得适用于值类型和引用类型`arr[i]`的的句柄, 因此可将其传递`constrained callvirt`给指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-3561">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="b7283-3562">通常, 如果数组持有引用类型的元素, 则跳过运行时检查是不安全的。</span><span class="sxs-lookup"><span data-stu-id="b7283-3562">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="b7283-3563">为安全起见, 需要确保不通过此指针对数组进行任何修改。</span><span class="sxs-lookup"><span data-stu-id="b7283-3563">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="b7283-3564">验证程序规则确保这一点。</span><span class="sxs-lookup"><span data-stu-id="b7283-3564">The verifier rules ensure this.</span></span> <span data-ttu-id="b7283-3565">受限制的托管指针可以作为实例方法调用的对象进行传递, 因此对于值类型而言, 并不严格地说是只读的, 但对于值类型, 不存在任何类型安全问题。</span><span class="sxs-lookup"><span data-stu-id="b7283-3565">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="b7283-3566">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`readonly`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3566">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3567">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3567">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3568">检索嵌入在类型化引用内的类型标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3568">Retrieves the type token embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3569">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3569">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3570">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3570">Format</span></span>|<span data-ttu-id="b7283-3571">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3571">Assembly Format</span></span>|<span data-ttu-id="b7283-3572">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3572">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3573">FE 1D</span><span class="sxs-lookup"><span data-stu-id="b7283-3573">FE 1D</span></span>|<span data-ttu-id="b7283-3574">refanytype</span><span class="sxs-lookup"><span data-stu-id="b7283-3574">refanytype</span></span>|<span data-ttu-id="b7283-3575">推送在类型化引用中存储的类型标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3575">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="b7283-3576">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3576">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3577">值类型引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3577">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3578">类型化引用从堆栈中弹出, 并检索其相应的类型标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3578">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="b7283-3579">类型标记被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3579">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3580">类型化引用包含对象实例的类型标记和地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3580">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="b7283-3581">`refanytype`指令检索嵌入在类型化引用中的类型标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3581">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="b7283-3582">有关创建类型化引用的信息, 请参阅说明。<xref:System.Reflection.Emit.OpCodes.Mkrefany></span><span class="sxs-lookup"><span data-stu-id="b7283-3582">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="b7283-3583">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`refanytype`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3583">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3584">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3584">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3585">检索嵌入在类型化引用内的地址（<see langword="&amp;" /> 类型）。</span><span class="sxs-lookup"><span data-stu-id="b7283-3585">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3586">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3586">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3587">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3587">Format</span></span>|<span data-ttu-id="b7283-3588">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3588">Assembly Format</span></span>|<span data-ttu-id="b7283-3589">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3589">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3590">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3590">C2 < `T` ></span></span>|<span data-ttu-id="b7283-3591">refanyval`type`</span><span class="sxs-lookup"><span data-stu-id="b7283-3591">refanyval `type`</span></span>|<span data-ttu-id="b7283-3592">推送在类型化引用中存储的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3592">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="b7283-3593">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3593">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3594">值类型引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3594">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3595">从堆栈中弹出类型化引用和检索到相应的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3595">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="b7283-3596">该地址将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3596">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3597">类型化引用包含对象实例的类型标记和地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3597">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="b7283-3598">`refanyval`指令检索嵌入在类型化引用中的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-3598">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="b7283-3599">在堆栈上提供的类型化引用中嵌入的类型必须与`type` (元数据标记, `typedef`或`typeref`) 指定的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-3599">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="b7283-3600">请参阅<xref:System.Reflection.Emit.OpCodes.Mkrefany>相关内容的说明。</span><span class="sxs-lookup"><span data-stu-id="b7283-3600">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="b7283-3601"><xref:System.InvalidCastException>如果`type`与类型引用中存储的类型 (在这种情况下, 是提供给<xref:System.Reflection.Emit.OpCodes.Mkrefany>构造`type`的类型化引用的指令) 不完全相同, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3601"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="b7283-3602"><xref:System.TypeLoadException>如果`type`找不到, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3602"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="b7283-3603">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`refanyval`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3603">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3604">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3604">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3605">将两个值相除并将余数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3605">Divides two values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3606">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3606">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3607">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3607">Format</span></span>|<span data-ttu-id="b7283-3608">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3608">Assembly Format</span></span>|<span data-ttu-id="b7283-3609">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3609">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3610">5D</span><span class="sxs-lookup"><span data-stu-id="b7283-3610">5D</span></span>|<span data-ttu-id="b7283-3611">剩余</span><span class="sxs-lookup"><span data-stu-id="b7283-3611">rem</span></span>|<span data-ttu-id="b7283-3612">将除除以`value1` `value2`的余数推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3612">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="b7283-3613">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3614">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3615">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3616">`value2`和`value1`将从堆栈中弹出和`value2`计算的`value1` `div`其余部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="b7283-3617">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3618">`result` = `value1``rem` 满足`value2`下列条件:</span><span class="sxs-lookup"><span data-stu-id="b7283-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="b7283-3619">`result` = `value1` - `value2``×` (`value1` )和:`div` `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="b7283-3620">0 = &#124; `result` &#124; < &#124; (`result`) = `div` sign (`value1`), 其中是向零截断的除法指令。 `value2` &#124;</span><span class="sxs-lookup"><span data-stu-id="b7283-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="b7283-3621">如果`value2`为零或`value1`无穷大, 则结果为 NaN。</span><span class="sxs-lookup"><span data-stu-id="b7283-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="b7283-3622">如果`value2`是无限的, 则结果`value1`为 (对`-infinity`求反)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="b7283-3623"><xref:System.DivideByZeroException> 如果`value2`为零, 则引发整数运算。</span><span class="sxs-lookup"><span data-stu-id="b7283-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="b7283-3624">请注意, 在基于 Intel 的平台<xref:System.OverflowException>上, 计算时将引发 (minint `rem` -1)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="b7283-3625">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`rem`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3627">将两个无符号值相除并将余数推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3628">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3629">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3629">Format</span></span>|<span data-ttu-id="b7283-3630">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3630">Assembly Format</span></span>|<span data-ttu-id="b7283-3631">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3632">5E</span><span class="sxs-lookup"><span data-stu-id="b7283-3632">5E</span></span>|<span data-ttu-id="b7283-3633">rem.un</span><span class="sxs-lookup"><span data-stu-id="b7283-3633">rem.un</span></span>|<span data-ttu-id="b7283-3634">将未`value1` `value2`签名的的剩余部分推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3635">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3636">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3637">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3638">`value2`和`value1`将从堆栈中弹出和`value2`计算的`value1` `div`其余部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="b7283-3639">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3640">`result` = `value1``rem.un` 满足`value2`下列条件:</span><span class="sxs-lookup"><span data-stu-id="b7283-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="b7283-3641">`result` = `value1` - `value2`x (`value1` `div.un` )和`value2`:</span><span class="sxs-lookup"><span data-stu-id="b7283-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="b7283-3642">0 = `result`  <  ,其中`div.un`是无符号除法指令。 `value2`</span><span class="sxs-lookup"><span data-stu-id="b7283-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="b7283-3643">`rem.un`指令计算`result`并将其推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="b7283-3644">`Rem.un`将其参数视为无符号整数, <xref:System.Reflection.Emit.OpCodes.Rem>同时将它们视为有符号整数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="b7283-3645">`Rem.un`对于浮点数未指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="b7283-3646"><xref:System.DivideByZeroException> 如果`value2`为零, 则引发整数运算。</span><span class="sxs-lookup"><span data-stu-id="b7283-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="b7283-3647">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`rem.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3649">从当前方法返回，并将返回值（如果存在）从调用方的计算堆栈推送到被调用方的计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3650">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3651">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3651">Format</span></span>|<span data-ttu-id="b7283-3652">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3652">Assembly Format</span></span>|<span data-ttu-id="b7283-3653">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3654">2A</span><span class="sxs-lookup"><span data-stu-id="b7283-3654">2A</span></span>|<span data-ttu-id="b7283-3655">ret</span><span class="sxs-lookup"><span data-stu-id="b7283-3655">ret</span></span>|<span data-ttu-id="b7283-3656">从方法返回, 可能返回值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="b7283-3657">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3658">从被调用方的计算堆栈中弹出返回值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3659">在步骤1中获取的返回值被推送到调用方计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="b7283-3660">如果返回值不在被调用方的计算堆栈上, 则不返回任何值 (对于被调用方或调用方方法, 不返回任何堆栈转换行为)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="b7283-3661">当前方法的返回值的类型 (如果有) 确定要从堆栈顶部获取的值的类型, 并将其复制到调用当前方法的方法的堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="b7283-3662">当前方法的计算堆栈必须为空, 但要返回的值除外。</span><span class="sxs-lookup"><span data-stu-id="b7283-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="b7283-3663">`filter``try` `finally` `catch`指令不能用于将控制传输到、、或块。 `ret`</span><span class="sxs-lookup"><span data-stu-id="b7283-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="b7283-3664">从`try`或`catch`中, 将<xref:System.Reflection.Emit.OpCodes.Leave>指令与所有封闭异常块之外的`ret`指令的目标结合使用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="b7283-3665">`filter`因为和`finally`块在逻辑上是异常处理的一部分, 而不是其代码的嵌入方法, 所以, 正确生成的 Microsoft 中间语言 (MSIL) 指令并不执行从`filter`或。`finally`</span><span class="sxs-lookup"><span data-stu-id="b7283-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="b7283-3666">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`ret`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3668">再次引发当前异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-3668">Rethrows the current exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3669">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3670">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3670">Format</span></span>|<span data-ttu-id="b7283-3671">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3671">Assembly Format</span></span>|<span data-ttu-id="b7283-3672">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3673">FE 1A</span><span class="sxs-lookup"><span data-stu-id="b7283-3673">FE 1A</span></span>|<span data-ttu-id="b7283-3674">重新引发</span><span class="sxs-lookup"><span data-stu-id="b7283-3674">rethrow</span></span>|<span data-ttu-id="b7283-3675">重新引发当前异常</span><span class="sxs-lookup"><span data-stu-id="b7283-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="b7283-3676">没有为此指令定义堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-3677">仅允许在`catch`处理程序的主体中使用指令。`rethrow`</span><span class="sxs-lookup"><span data-stu-id="b7283-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="b7283-3678">它将引发与此处理程序捕获的异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="b7283-3679">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`rethrow`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3681">将整数值左移（用零填充）指定的位数，并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3682">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3683">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3683">Format</span></span>|<span data-ttu-id="b7283-3684">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3684">Assembly Format</span></span>|<span data-ttu-id="b7283-3685">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3686">62</span><span class="sxs-lookup"><span data-stu-id="b7283-3686">62</span></span>|<span data-ttu-id="b7283-3687">shl</span><span class="sxs-lookup"><span data-stu-id="b7283-3687">shl</span></span>|<span data-ttu-id="b7283-3688">向左移动一个整数 (以零为变化)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="b7283-3689">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3690">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3691">要移动的位数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3692">要移动的位数以及从堆栈中弹出的值的数目;该值将向左移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="b7283-3693">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3694">指令`shl`将值 (类型`int32`, `int64`或`native int`) 向左移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="b7283-3695">位数为或`int32` `native int`类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="b7283-3696">如果要移位的位数大于或等于所提供值的宽度 (以位为单位), 则返回值为未指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="b7283-3697">`Shl`在每个移位的最小位置插入零位。</span><span class="sxs-lookup"><span data-stu-id="b7283-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="b7283-3698">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`shl`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3700">将整数值右移（保留符号）指定的位数，并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3701">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3702">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3702">Format</span></span>|<span data-ttu-id="b7283-3703">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3703">Assembly Format</span></span>|<span data-ttu-id="b7283-3704">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3705">63</span><span class="sxs-lookup"><span data-stu-id="b7283-3705">63</span></span>|<span data-ttu-id="b7283-3706">shr</span><span class="sxs-lookup"><span data-stu-id="b7283-3706">shr</span></span>|<span data-ttu-id="b7283-3707">向右移动一个整数 (移位)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="b7283-3708">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3709">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3710">要移动的位数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3711">要移动的位数以及从堆栈中弹出的值的数目;值向右移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="b7283-3712">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3713">指令将值 (类型`int32`, `int64`或`native int`) 向右移动指定的位数。 `shr.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="b7283-3714">位数为或`int32` `native int`类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="b7283-3715">如果要移位的位数大于或等于所提供值的宽度 (以位为单位), 则返回值为未指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="b7283-3716">`Shr`复制每个移位上的高序位, 同时保留中`result`原始值的符号。</span><span class="sxs-lookup"><span data-stu-id="b7283-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="b7283-3717">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`shr`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3719">将无符号整数值右移（用零填充）指定的位数，并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3720">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3721">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3721">Format</span></span>|<span data-ttu-id="b7283-3722">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3722">Assembly Format</span></span>|<span data-ttu-id="b7283-3723">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3724">64</span><span class="sxs-lookup"><span data-stu-id="b7283-3724">64</span></span>|<span data-ttu-id="b7283-3725">shr</span><span class="sxs-lookup"><span data-stu-id="b7283-3725">shr.un</span></span>|<span data-ttu-id="b7283-3726">向右移动一个整数 (以零为变化)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="b7283-3727">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3728">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3729">要移动的位数将被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3730">要移动的位数以及从堆栈中弹出的值的数目;值向右移动指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="b7283-3731">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3732">指令将值 (类型`int32`, `int64`或`native int`) 向右移动指定的位数。 `shr.un`</span><span class="sxs-lookup"><span data-stu-id="b7283-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="b7283-3733">位数为`int32` `int64`或类型的值。`native int`</span><span class="sxs-lookup"><span data-stu-id="b7283-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="b7283-3734">如果要移位的位数大于或等于所提供值的宽度 (以位为单位), 则返回值为未指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="b7283-3735">`Shr.un`在每个移位上的最高位置插入零位。</span><span class="sxs-lookup"><span data-stu-id="b7283-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="b7283-3736">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`shr.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3738">将提供的值类型的大小（以字节为单位）推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3739">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3740">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3740">Format</span></span>|<span data-ttu-id="b7283-3741">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3741">Assembly Format</span></span>|<span data-ttu-id="b7283-3742">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3743">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="b7283-3744">sizeof`valType`</span><span class="sxs-lookup"><span data-stu-id="b7283-3744">sizeof `valType`</span></span>|<span data-ttu-id="b7283-3745">将值类型的大小 (以字节为单位) 作为`unsigned int32`推送。</span><span class="sxs-lookup"><span data-stu-id="b7283-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="b7283-3746">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3747">将提供的值类型 (`valType`) 的大小 (以字节为单位) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3748">`valType`必须是元数据标记 ( `typeref`或`typedef`), 它指定值类型、引用类型或泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="b7283-3749">对于引用类型, 返回的大小为相应类型的引用值的大小 (32 位系统上为4个字节), 而不是存储在引用值引用的对象中的数据的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="b7283-3750">泛型类型参数只能在定义它的类型或方法的主体中使用。</span><span class="sxs-lookup"><span data-stu-id="b7283-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="b7283-3751">当对该类型或方法进行实例化时, 泛型类型参数被替换为值类型或引用类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="b7283-3752">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`sizeof`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3753">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3754">将位于计算堆栈顶部的值存储到位于指定索引的参数槽中。</span><span class="sxs-lookup"><span data-stu-id="b7283-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3755">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3756">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3756">Format</span></span>|<span data-ttu-id="b7283-3757">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3757">Assembly Format</span></span>|<span data-ttu-id="b7283-3758">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3759">FE 0B <`unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-3760">starg`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-3760">starg `num`</span></span>|<span data-ttu-id="b7283-3761">从堆栈中弹出顶部值并将其存储在参数槽`num`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="b7283-3762">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3763">当前位于堆栈顶部的值会弹出并置于参数槽`num`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="b7283-3764">指令从堆栈中弹出一个值, 并将该值放入参数`num`槽。 `starg`</span><span class="sxs-lookup"><span data-stu-id="b7283-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="b7283-3765">值的类型必须与当前方法的签名中指定的参数的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-3766">对于采用变量参数列表的过程, `starg`指令只能用于初始固定参数, 而不能用于签名的变量部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="b7283-3767">如果将存储区的参数保留为小于4个字节的整数值, 则会在从堆栈移到参数时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="b7283-3768">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-3769">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`starg`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3770">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3771">将位于计算堆栈顶部的值存储在参数槽中的指定索引处（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3772">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3773">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3773">Format</span></span>|<span data-ttu-id="b7283-3774">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3774">Assembly Format</span></span>|<span data-ttu-id="b7283-3775">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-3777">starg`num`</span><span class="sxs-lookup"><span data-stu-id="b7283-3777">starg.s `num`</span></span>|<span data-ttu-id="b7283-3778">从堆栈中弹出顶部值并将其存储在参数槽`num`中 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="b7283-3779">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3780">当前位于堆栈顶部的值会弹出并置于参数槽`num`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="b7283-3781">指令从堆栈中弹出一个值, 并将该值放入参数`num`槽。 `starg.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="b7283-3782">值的类型必须与当前方法的签名中指定的参数的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="b7283-3783">`starg.s`说明提供了一个有效的编码, 可用于前256个参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="b7283-3784">对于采用变量参数列表的过程, `starg.s`指令只能用于初始固定参数, 而不能用于签名的变量部分。</span><span class="sxs-lookup"><span data-stu-id="b7283-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="b7283-3785">如果将存储区的参数保留为小于4个字节的整数值, 则会在从堆栈移到参数时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="b7283-3786">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-3787">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`starg.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3788">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3789">用计算堆栈中的值替换给定索引处的数组元素，其类型在指令中指定。</span><span class="sxs-lookup"><span data-stu-id="b7283-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3790">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3791">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3791">Format</span></span>|<span data-ttu-id="b7283-3792">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3792">Assembly Format</span></span>|<span data-ttu-id="b7283-3793">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3794">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3794">A4 < `T` ></span></span>|<span data-ttu-id="b7283-3795">stelem`typeTok`</span><span class="sxs-lookup"><span data-stu-id="b7283-3795">stelem `typeTok`</span></span>|<span data-ttu-id="b7283-3796">将所提供索引处的数组元素替换为堆栈上的`typeTok`类型值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3797">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3798">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3799">的索引值`index` `array`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3800">指令中指定的类型的值被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3801">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3802">指令用值替换一维数组`array`中提供的从零开始的索引处的元素的值。 `stelem`</span><span class="sxs-lookup"><span data-stu-id="b7283-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="b7283-3803">值具有指令中的标记`typeTok`所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="b7283-3804">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3805">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3806"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3807"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3808"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3809">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3810">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3811">用计算堆栈上的 <see langword="native int" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3812">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3813">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3813">Format</span></span>|<span data-ttu-id="b7283-3814">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3814">Assembly Format</span></span>|<span data-ttu-id="b7283-3815">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3816">9B</span><span class="sxs-lookup"><span data-stu-id="b7283-3816">9B</span></span>|<span data-ttu-id="b7283-3817">stelem。 i</span><span class="sxs-lookup"><span data-stu-id="b7283-3817">stelem.i</span></span>|<span data-ttu-id="b7283-3818">将所提供的索引处的数组元素替换`native int`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3819">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3820">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3821">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3822">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3823">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3824">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`native int` `stelem.i`</span><span class="sxs-lookup"><span data-stu-id="b7283-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3825">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3826">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3827"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3828"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3829"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3830">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3832">用计算堆栈上的 <see langword="int8" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3833">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3834">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3834">Format</span></span>|<span data-ttu-id="b7283-3835">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3835">Assembly Format</span></span>|<span data-ttu-id="b7283-3836">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3837">9C</span><span class="sxs-lookup"><span data-stu-id="b7283-3837">9C</span></span>|<span data-ttu-id="b7283-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="b7283-3838">stelem.i1</span></span>|<span data-ttu-id="b7283-3839">将所提供的索引处的数组元素替换`int8`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3840">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3841">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3842">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3843">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3844">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3845">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`int8` `stelem.i1`</span><span class="sxs-lookup"><span data-stu-id="b7283-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3846">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3847">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3848"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3849"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3850"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3851">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3853">用计算堆栈上的 <see langword="int16" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3854">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3855">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3855">Format</span></span>|<span data-ttu-id="b7283-3856">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3856">Assembly Format</span></span>|<span data-ttu-id="b7283-3857">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3858">9D</span><span class="sxs-lookup"><span data-stu-id="b7283-3858">9D</span></span>|<span data-ttu-id="b7283-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="b7283-3859">stelem.i2</span></span>|<span data-ttu-id="b7283-3860">将所提供的索引处的数组元素替换`int16`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3861">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3862">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3863">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3864">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3865">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3866">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`int16` `stelem.i2`</span><span class="sxs-lookup"><span data-stu-id="b7283-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3867">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3868">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3869"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3870"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3871"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3872">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3874">用计算堆栈上的 <see langword="int32" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3875">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3876">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3876">Format</span></span>|<span data-ttu-id="b7283-3877">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3877">Assembly Format</span></span>|<span data-ttu-id="b7283-3878">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3879">9E</span><span class="sxs-lookup"><span data-stu-id="b7283-3879">9E</span></span>|<span data-ttu-id="b7283-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="b7283-3880">stelem.i4</span></span>|<span data-ttu-id="b7283-3881">将所提供的索引处的数组元素替换`int32`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3882">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3883">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3884">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3885">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3886">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3887">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`int32` `stelem.i4`</span><span class="sxs-lookup"><span data-stu-id="b7283-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3888">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3889">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3890"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3891"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3892"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3893">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3895">用计算堆栈上的 <see langword="int64" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3896">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3897">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3897">Format</span></span>|<span data-ttu-id="b7283-3898">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3898">Assembly Format</span></span>|<span data-ttu-id="b7283-3899">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3900">9F</span><span class="sxs-lookup"><span data-stu-id="b7283-3900">9F</span></span>|<span data-ttu-id="b7283-3901">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="b7283-3901">stelem.i8</span></span>|<span data-ttu-id="b7283-3902">将所提供的索引处的数组元素替换`int64`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3903">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3904">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3905">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3906">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3907">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3908">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`int64` `stelem.i8`</span><span class="sxs-lookup"><span data-stu-id="b7283-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3909">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3910">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3911"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3912"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3913"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3914">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3916">用计算堆栈上的 <see langword="float32" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3917">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3918">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3918">Format</span></span>|<span data-ttu-id="b7283-3919">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3919">Assembly Format</span></span>|<span data-ttu-id="b7283-3920">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3921">A0</span><span class="sxs-lookup"><span data-stu-id="b7283-3921">A0</span></span>|<span data-ttu-id="b7283-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="b7283-3922">stelem.r4</span></span>|<span data-ttu-id="b7283-3923">将所提供的索引处的数组元素替换`float32`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3924">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3925">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3926">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3927">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3928">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3929">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`float32` `stelem.r4`</span><span class="sxs-lookup"><span data-stu-id="b7283-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3930">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3931">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3932"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3933"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3934"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3935">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3937">用计算堆栈上的 <see langword="float64" /> 值替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3938">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3939">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3939">Format</span></span>|<span data-ttu-id="b7283-3940">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3940">Assembly Format</span></span>|<span data-ttu-id="b7283-3941">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3942">A1</span><span class="sxs-lookup"><span data-stu-id="b7283-3942">A1</span></span>|<span data-ttu-id="b7283-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="b7283-3943">stelem.r8</span></span>|<span data-ttu-id="b7283-3944">将所提供的索引处的数组元素替换`float64`为堆栈上的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3945">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3946">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3947">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3948">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3949">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3950">指令用`index` 推送到`array`堆栈上的值替换一维数组中的元素的值。`float64` `stelem.r8`</span><span class="sxs-lookup"><span data-stu-id="b7283-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3951">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3952">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3953"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3954"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3955"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3956">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3958">用计算堆栈上的对象 ref 值（<see langword="O" /> 类型）替换给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3959">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3960">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3960">Format</span></span>|<span data-ttu-id="b7283-3961">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3961">Assembly Format</span></span>|<span data-ttu-id="b7283-3962">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3963">A2</span><span class="sxs-lookup"><span data-stu-id="b7283-3963">A2</span></span>|<span data-ttu-id="b7283-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="b7283-3964">stelem.ref</span></span>|<span data-ttu-id="b7283-3965">将所提供的索引处的数组元素替换`ref`为堆栈上`O`的值 (类型)。</span><span class="sxs-lookup"><span data-stu-id="b7283-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="b7283-3966">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3967">对数组`array`的对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3968">将中`array`元素的有效索引推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3969">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="b7283-3970">从堆栈中弹出值、索引和数组引用;将值放入给定索引处的数组元素。</span><span class="sxs-lookup"><span data-stu-id="b7283-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="b7283-3971">指令将在一维数组`array`中所提供索引处的元素的值替换为`ref`堆栈上推送的 ( `O`类型) 值。 `stelem.ref`</span><span class="sxs-lookup"><span data-stu-id="b7283-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-3972">数组是对象, 因此表示为类型`O`的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="b7283-3973">索引的类型`native int`为。</span><span class="sxs-lookup"><span data-stu-id="b7283-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="b7283-3974">请注意`stelem.ref` , 在为数组元素赋值之前, 会将`array`提供的值隐式转换为的元素类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="b7283-3975">此强制转换可能会失败, 即使对于已验证的代码也是如此。</span><span class="sxs-lookup"><span data-stu-id="b7283-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="b7283-3976">因此, `stelem.ref`该指令可能<xref:System.InvalidCastException>会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="b7283-3977">对于不是从零开始的一维数组和多维数组, <xref:System.Array>该类提供了一个<xref:System.Array.SetValue%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b7283-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="b7283-3978"><xref:System.NullReferenceException>如果`array`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-3979"><xref:System.IndexOutOfRangeException>如果`index`为负或大于的`array`界限, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="b7283-3980"><xref:System.ArrayTypeMismatchException>如果`array`不包含所需类型的元素, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="b7283-3981">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stelem.ref`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-3983">用新值替换在对象引用或指针的字段中存储的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-3984">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-3985">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3985">Format</span></span>|<span data-ttu-id="b7283-3986">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-3986">Assembly Format</span></span>|<span data-ttu-id="b7283-3987">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-3988">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-3988">7D < `T` ></span></span>|<span data-ttu-id="b7283-3989">stfld`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-3989">stfld `field`</span></span>|<span data-ttu-id="b7283-3990">将对象的值`field`替换为新值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="b7283-3991">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-3992">对象引用或指针被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-3993">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-3994">从堆栈中弹出值和对象引用/指针;对象`field`中的值将替换为提供的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="b7283-3995">`native int` `&` `*`指令替换对象 (类型`O`) 的字段的值, 或通过指针 (类型、或) 替换给定的值。 `stfld`</span><span class="sxs-lookup"><span data-stu-id="b7283-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="b7283-3996">`Field`引用字段成员引用的元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="b7283-3997">指令可以具有和<xref:System.Reflection.Emit.OpCodes.Unaligned> <xref:System.Reflection.Emit.OpCodes.Volatile>/或的前缀。 `stfld`</span><span class="sxs-lookup"><span data-stu-id="b7283-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="b7283-3998"><xref:System.NullReferenceException>如果对象引用或指针为空引用, 并且该字段不是静态的, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="b7283-3999"><xref:System.MissingFieldException>如果`field`在元数据中找不到, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="b7283-4000">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检查此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="b7283-4001">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stfld`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4002">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4003">在所提供的地址存储 <see langword="native int" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4004">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4005">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4005">Format</span></span>|<span data-ttu-id="b7283-4006">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4006">Assembly Format</span></span>|<span data-ttu-id="b7283-4007">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4008">DF</span><span class="sxs-lookup"><span data-stu-id="b7283-4008">DF</span></span>|<span data-ttu-id="b7283-4009">stind。 i</span><span class="sxs-lookup"><span data-stu-id="b7283-4009">stind.i</span></span>|<span data-ttu-id="b7283-4010">`native int`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4011">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4012">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4013">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4014">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4015">`native int` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.i`</span><span class="sxs-lookup"><span data-stu-id="b7283-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4016">类型安全操作要求`stind.i`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4017">`stind.i`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4018"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4019">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.i`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4021">在所提供的地址存储 <see langword="int8" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4022">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4023">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4023">Format</span></span>|<span data-ttu-id="b7283-4024">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4024">Assembly Format</span></span>|<span data-ttu-id="b7283-4025">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4026">52</span><span class="sxs-lookup"><span data-stu-id="b7283-4026">52</span></span>|<span data-ttu-id="b7283-4027">stind</span><span class="sxs-lookup"><span data-stu-id="b7283-4027">stind.i1</span></span>|<span data-ttu-id="b7283-4028">`int8`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4029">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4030">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4031">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4032">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4033">`int8` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.i1`</span><span class="sxs-lookup"><span data-stu-id="b7283-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4034">类型安全操作要求`stind.i1`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4035">`stind.i1`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4036"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4037">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.i1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4039">在所提供的地址存储 <see langword="int16" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4040">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4041">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4041">Format</span></span>|<span data-ttu-id="b7283-4042">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4042">Assembly Format</span></span>|<span data-ttu-id="b7283-4043">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4044">53</span><span class="sxs-lookup"><span data-stu-id="b7283-4044">53</span></span>|<span data-ttu-id="b7283-4045">stind</span><span class="sxs-lookup"><span data-stu-id="b7283-4045">stind.i2</span></span>|<span data-ttu-id="b7283-4046">`int16`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4047">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4048">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4049">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4050">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4051">`int16` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.i2`</span><span class="sxs-lookup"><span data-stu-id="b7283-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4052">类型安全操作要求`stind.2i`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4053">`stind.i2`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4054"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4055">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.i2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4057">在所提供的地址存储 <see langword="int32" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4058">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4059">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4059">Format</span></span>|<span data-ttu-id="b7283-4060">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4060">Assembly Format</span></span>|<span data-ttu-id="b7283-4061">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4062">54</span><span class="sxs-lookup"><span data-stu-id="b7283-4062">54</span></span>|<span data-ttu-id="b7283-4063">stind. i4</span><span class="sxs-lookup"><span data-stu-id="b7283-4063">stind.i4</span></span>|<span data-ttu-id="b7283-4064">`int32`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4065">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4066">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4067">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4068">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4069">`int32` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.i4`</span><span class="sxs-lookup"><span data-stu-id="b7283-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4070">类型安全操作要求`stind.i4`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4071">`stind.i4`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4072"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4073">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.i4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4075">在所提供的地址存储 <see langword="int64" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4076">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4077">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4077">Format</span></span>|<span data-ttu-id="b7283-4078">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4078">Assembly Format</span></span>|<span data-ttu-id="b7283-4079">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4080">55</span><span class="sxs-lookup"><span data-stu-id="b7283-4080">55</span></span>|<span data-ttu-id="b7283-4081">stind. i8</span><span class="sxs-lookup"><span data-stu-id="b7283-4081">stind.i8</span></span>|<span data-ttu-id="b7283-4082">`int64`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4083">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4084">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4085">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4086">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4087">`int64` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.i8`</span><span class="sxs-lookup"><span data-stu-id="b7283-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4088">类型安全操作要求`stind.i8`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4089">`stind.i`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4090"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4091">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.i8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4093">在所提供的地址存储 <see langword="float32" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4094">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4095">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4095">Format</span></span>|<span data-ttu-id="b7283-4096">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4096">Assembly Format</span></span>|<span data-ttu-id="b7283-4097">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4098">56</span><span class="sxs-lookup"><span data-stu-id="b7283-4098">56</span></span>|<span data-ttu-id="b7283-4099">stind.r4</span><span class="sxs-lookup"><span data-stu-id="b7283-4099">stind.r4</span></span>|<span data-ttu-id="b7283-4100">`float32`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4101">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4102">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4103">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4104">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4105">`float32` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.r4`</span><span class="sxs-lookup"><span data-stu-id="b7283-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4106">类型安全操作要求`stind.r4`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4107">`stind.r4`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4108"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4109">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.r4`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4111">在所提供的地址存储 <see langword="float64" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4112">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4113">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4113">Format</span></span>|<span data-ttu-id="b7283-4114">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4114">Assembly Format</span></span>|<span data-ttu-id="b7283-4115">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4116">57</span><span class="sxs-lookup"><span data-stu-id="b7283-4116">57</span></span>|<span data-ttu-id="b7283-4117">stind. r8</span><span class="sxs-lookup"><span data-stu-id="b7283-4117">stind.r8</span></span>|<span data-ttu-id="b7283-4118">`float64`将值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4119">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4120">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4121">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4122">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4123">`float64` `native int` `*`指令将值存储在所提供的地址上 (类型为、 `&`或)。 `stind.r8`</span><span class="sxs-lookup"><span data-stu-id="b7283-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4124">类型安全操作要求`stind.r8`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4125">`stind.r8`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4126"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4127">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.r8`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4129">存储所提供地址处的对象引用值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4129">Stores a object reference value at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4130">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4131">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4131">Format</span></span>|<span data-ttu-id="b7283-4132">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4132">Assembly Format</span></span>|<span data-ttu-id="b7283-4133">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4134">51</span><span class="sxs-lookup"><span data-stu-id="b7283-4134">51</span></span>|<span data-ttu-id="b7283-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="b7283-4135">stind.ref</span></span>|<span data-ttu-id="b7283-4136">将对象引用 (类型`O`) 值存储在给定地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="b7283-4137">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4138">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4139">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4140">从堆栈中弹出值和地址;值存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4141">指令将对象引用值存储在所提供的地址上 ( `native int`类型`*`为、 `&`或)。 `stind.ref`</span><span class="sxs-lookup"><span data-stu-id="b7283-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="b7283-4142">类型安全操作要求`stind.ref`指令的使用方式与指针的类型一致。</span><span class="sxs-lookup"><span data-stu-id="b7283-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="b7283-4143">`stind.ref`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4144"><xref:System.NullReferenceException>如果`addr`对指令后缀隐含的参数类型不进行自然对齐, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="b7283-4145">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stind.ref`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4147">从计算堆栈的顶部弹出当前值并将其存储到指定索引处的局部变量列表中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4148">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4149">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4149">Format</span></span>|<span data-ttu-id="b7283-4150">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4150">Assembly Format</span></span>|<span data-ttu-id="b7283-4151">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4152">FE 0E <`unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="b7283-4153">stloc`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-4153">stloc `index`</span></span>|<span data-ttu-id="b7283-4154">从堆栈中弹出一个值并将其存储在局部变量`index`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="b7283-4155">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4156">从堆栈中弹出一个值并将其放入本地变量`index`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="b7283-4157">指令从计算堆栈中弹出顶部值并将其移动到局部变量号`index`, 其中局部变量从0开始编号。 `stloc`</span><span class="sxs-lookup"><span data-stu-id="b7283-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-4158">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4159">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4160">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4161">更正 Microsoft 中间语言 (MSIL) 指令需要为`index`有效的本地索引。</span><span class="sxs-lookup"><span data-stu-id="b7283-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="b7283-4162">对于指令, `index`必须在0到65534的范围内 (具体而言, 65535 是无效的)。 `stloc`</span><span class="sxs-lookup"><span data-stu-id="b7283-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="b7283-4163">排除65535的原因是实际的: 可能的实现将使用2字节整数跟踪本地的索引, 以及给定方法的局部变量总数。</span><span class="sxs-lookup"><span data-stu-id="b7283-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="b7283-4164">如果已将65535的索引设为有效, 则需要更宽的整数来跟踪此类方法中的局部变量的数目。</span><span class="sxs-lookup"><span data-stu-id="b7283-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="b7283-4165">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4166">ILGenerator (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="b7283-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="b7283-4167">ILGenerator (操作码, short)</span><span class="sxs-lookup"><span data-stu-id="b7283-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4168">从计算堆栈的顶部弹出当前值并将其存储到索引 0 处的局部变量列表中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4169">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4170">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4170">Format</span></span>|<span data-ttu-id="b7283-4171">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4171">Assembly Format</span></span>|<span data-ttu-id="b7283-4172">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4173">0A</span><span class="sxs-lookup"><span data-stu-id="b7283-4173">0A</span></span>|<span data-ttu-id="b7283-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="b7283-4174">stloc.0</span></span>|<span data-ttu-id="b7283-4175">将值从堆栈中弹出到局部变量0中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="b7283-4176">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4177">从堆栈中弹出一个值, 并将其放入索引为0的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="b7283-4178">`stloc.0`指令从计算堆栈中弹出顶部值, 并将其移动到索引为0的局部变量中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="b7283-4179">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4180">`stloc.0`是用于将值存储在局部变量0中的特别有效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="b7283-4181">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4182">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4183">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc.0`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4185">从计算堆栈的顶部弹出当前值并将其存储到索引 1 处的局部变量列表中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4186">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4187">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4187">Format</span></span>|<span data-ttu-id="b7283-4188">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4188">Assembly Format</span></span>|<span data-ttu-id="b7283-4189">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4190">0B</span><span class="sxs-lookup"><span data-stu-id="b7283-4190">0B</span></span>|<span data-ttu-id="b7283-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="b7283-4191">stloc.1</span></span>|<span data-ttu-id="b7283-4192">将值从堆栈中弹出到局部变量1中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="b7283-4193">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4194">从堆栈中弹出一个值, 并将其放入索引为1的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="b7283-4195">`stloc.1`指令从计算堆栈中弹出顶部值, 并将其移动到索引为1的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="b7283-4196">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4197">`stloc.1`是用于在局部变量1中存储值的一个特别高效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="b7283-4198">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4199">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4200">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc.1`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4202">从计算堆栈的顶部弹出当前值并将其存储到索引 2 处的局部变量列表中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4203">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4204">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4204">Format</span></span>|<span data-ttu-id="b7283-4205">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4205">Assembly Format</span></span>|<span data-ttu-id="b7283-4206">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4207">0C</span><span class="sxs-lookup"><span data-stu-id="b7283-4207">0C</span></span>|<span data-ttu-id="b7283-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="b7283-4208">stloc.2</span></span>|<span data-ttu-id="b7283-4209">将值从堆栈中弹出到局部变量2中</span><span class="sxs-lookup"><span data-stu-id="b7283-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="b7283-4210">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4211">从堆栈中弹出一个值, 并将其放入索引为2的局部变量中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="b7283-4212">`stloc.2`指令从计算堆栈中弹出顶部值, 并将其移动到索引为2的局部变量中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="b7283-4213">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4214">`stloc.2`是用于将值存储在局部变量2中的一个特别高效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="b7283-4215">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4216">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4217">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc.2`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4219">从计算堆栈的顶部弹出当前值并将其存储到索引 3 处的局部变量列表中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4220">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4221">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4221">Format</span></span>|<span data-ttu-id="b7283-4222">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4222">Assembly Format</span></span>|<span data-ttu-id="b7283-4223">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4224">0D</span><span class="sxs-lookup"><span data-stu-id="b7283-4224">0D</span></span>|<span data-ttu-id="b7283-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="b7283-4225">stloc.3</span></span>|<span data-ttu-id="b7283-4226">从堆栈中弹出一个值到局部变量3</span><span class="sxs-lookup"><span data-stu-id="b7283-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="b7283-4227">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4228">从堆栈中弹出一个值, 并将其放入索引为3的局部变量。</span><span class="sxs-lookup"><span data-stu-id="b7283-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="b7283-4229">`stloc.3`指令从计算堆栈中弹出顶部值, 并将其移动到索引为3的本地变量中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="b7283-4230">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4231">`stloc.3`是用于将值存储在局部变量3中的一个特别高效的编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="b7283-4232">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4233">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4234">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc.3`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4236">从计算堆栈的顶部弹出当前值并将其存储在局部变量列表中的 <paramref name="index" /> 处（短格式）。</span><span class="sxs-lookup"><span data-stu-id="b7283-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4237">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4238">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4238">Format</span></span>|<span data-ttu-id="b7283-4239">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4239">Assembly Format</span></span>|<span data-ttu-id="b7283-4240">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-4242">stloc`index`</span><span class="sxs-lookup"><span data-stu-id="b7283-4242">stloc.s `index`</span></span>|<span data-ttu-id="b7283-4243">从堆栈中弹出一个值并将其存储在本地`index`变量中 (短格式)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="b7283-4244">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4245">从堆栈中弹出一个值并将其放入本地变量`index`中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="b7283-4246">指令从计算堆栈中弹出顶部值并将其移动到局部变量号`index`, 其中局部变量从0开始编号。 `stloc.s`</span><span class="sxs-lookup"><span data-stu-id="b7283-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="b7283-4247">值的类型必须与当前方法本地签名中指定的局部变量的类型匹配。</span><span class="sxs-lookup"><span data-stu-id="b7283-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="b7283-4248">`stloc.s`指令为局部变量0到255提供有效编码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="b7283-4249">如果存储在保持小于4个字节的整数值的局部变量中, 长时间将在从堆栈移到局部变量时截断值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="b7283-4250">浮点值从其本机大小 (类型`F`) 舍入到与参数关联的大小。</span><span class="sxs-lookup"><span data-stu-id="b7283-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="b7283-4251">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stloc.s`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4252">ILGenerator (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="b7283-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="b7283-4253">ILGenerator (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4254">将指定类型的值从计算堆栈复制到所提供的内存地址中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4255">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4256">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4256">Format</span></span>|<span data-ttu-id="b7283-4257">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4257">Assembly Format</span></span>|<span data-ttu-id="b7283-4258">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4259">81 < `T` ></span></span>|<span data-ttu-id="b7283-4260">stobj`class`</span><span class="sxs-lookup"><span data-stu-id="b7283-4260">stobj `class`</span></span>|<span data-ttu-id="b7283-4261">将类型`class`的值存储在内存中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="b7283-4262">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4263">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4264">类型`class`的值类型对象被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4265">从堆栈中弹出对象和地址;值类型对象存储在地址上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="b7283-4266">指令将值类型对象复制到地址指定的地址 (类型`native int`为、 `*`或`&`的指针)。 `stobj`</span><span class="sxs-lookup"><span data-stu-id="b7283-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="b7283-4267">已复制的字节数取决于由表示`class`的类的大小, 即表示值类型的元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="b7283-4268">`stobj`指令的操作可以通过紧靠上<xref:System.Reflection.Emit.OpCodes.Volatile>或<xref:System.Reflection.Emit.OpCodes.Unaligned>前缀指令来更改。</span><span class="sxs-lookup"><span data-stu-id="b7283-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="b7283-4269"><xref:System.TypeLoadException>如果找不到类, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="b7283-4270">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="b7283-4271">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stobj`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4272">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4273">用来自计算堆栈的值替换静态字段的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4273">Replaces the value of a static field with a value from the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4274">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4275">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4275">Format</span></span>|<span data-ttu-id="b7283-4276">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4276">Assembly Format</span></span>|<span data-ttu-id="b7283-4277">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4278">80 < `T` ></span></span>|<span data-ttu-id="b7283-4279">stsfld`field`</span><span class="sxs-lookup"><span data-stu-id="b7283-4279">stsfld `field`</span></span>|<span data-ttu-id="b7283-4280">将中`field`的值替换为提供的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="b7283-4281">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4282">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4283">从堆栈中弹出一个值并将其存储`field`在中。</span><span class="sxs-lookup"><span data-stu-id="b7283-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="b7283-4284">`stsfld`指令用来自堆栈的值替换静态字段的值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="b7283-4285">`field`必须引用静态字段成员的元数据标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="b7283-4286">指令可以为<xref:System.Reflection.Emit.OpCodes.Volatile>前缀。 `stsfld`</span><span class="sxs-lookup"><span data-stu-id="b7283-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="b7283-4287"><xref:System.MissingFieldException>如果在元数据中找不到字段, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="b7283-4288">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是在运行时, 通常会检查此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="b7283-4289">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`stsfld`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4290">ILGenerator (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="b7283-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4291">从其他值中减去一个值并将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4292">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4293">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4293">Format</span></span>|<span data-ttu-id="b7283-4294">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4294">Assembly Format</span></span>|<span data-ttu-id="b7283-4295">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4296">59</span><span class="sxs-lookup"><span data-stu-id="b7283-4296">59</span></span>|<span data-ttu-id="b7283-4297">sub</span><span class="sxs-lookup"><span data-stu-id="b7283-4297">sub</span></span>|<span data-ttu-id="b7283-4298">从一个值中减去另一个值, 返回新的数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="b7283-4299">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4300">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4301">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4302">`value2`和`value1`从堆栈中弹出;`value2`从中`value1`减去。</span><span class="sxs-lookup"><span data-stu-id="b7283-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="b7283-4303">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4304">未检测到用于整数运算的溢出 (有关正确的溢出处理<xref:System.Reflection.Emit.OpCodes.Sub_Ovf>, 请参阅)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="b7283-4305">整数减法环绕, 而不是尽量充满。</span><span class="sxs-lookup"><span data-stu-id="b7283-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="b7283-4306">例如: 假设8位整数, 其中`value1`设置为 0, 且`value2`设置为 1, 则 "已包装" 结果将为255。</span><span class="sxs-lookup"><span data-stu-id="b7283-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="b7283-4307">浮点溢出返回`+inf` (`PositiveInfinity`) 或`-inf` (`NegativeInfinity`)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="b7283-4308">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`sub`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4310">从另一值中减去一个整数值，执行溢出检查，并且将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4311">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4312">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4312">Format</span></span>|<span data-ttu-id="b7283-4313">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4313">Assembly Format</span></span>|<span data-ttu-id="b7283-4314">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4315">DA</span><span class="sxs-lookup"><span data-stu-id="b7283-4315">DA</span></span>|<span data-ttu-id="b7283-4316">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="b7283-4316">sub.ovf</span></span>|<span data-ttu-id="b7283-4317">使用溢出检查从一个整数值中减去另一个整数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-4318">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4319">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4320">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4321">`value2`和`value1`从堆栈中弹出;`value2`从中`value1`减去, 并选中溢出。</span><span class="sxs-lookup"><span data-stu-id="b7283-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="b7283-4322">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4323"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-4324">此操作在有符号整数上执行;对于浮点值, 请使用<xref:System.Reflection.Emit.OpCodes.Sub>。</span><span class="sxs-lookup"><span data-stu-id="b7283-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="b7283-4325">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`sub.ovf`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4327">从另一值中减去一个无符号整数值，执行溢出检查，并且将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4328">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4329">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4329">Format</span></span>|<span data-ttu-id="b7283-4330">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4330">Assembly Format</span></span>|<span data-ttu-id="b7283-4331">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4332">DB</span><span class="sxs-lookup"><span data-stu-id="b7283-4332">DB</span></span>|<span data-ttu-id="b7283-4333">sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="b7283-4333">sub.ovf.un</span></span>|<span data-ttu-id="b7283-4334">使用溢出检查从一个无符号整数值减去另一个无符号整数值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="b7283-4335">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4336">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4337">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4338">`value2`和`value1`从堆栈中弹出;`value2`从中`value1`减去, 并选中溢出。</span><span class="sxs-lookup"><span data-stu-id="b7283-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="b7283-4339">将结果推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4340"><xref:System.OverflowException>如果结果不能用结果类型表示, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="b7283-4341">此操作在有符号整数上执行;对于浮点值, 请使用<xref:System.Reflection.Emit.OpCodes.Sub>。</span><span class="sxs-lookup"><span data-stu-id="b7283-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="b7283-4342">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`sub.ovf.un`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4344">实现跳转表。</span><span class="sxs-lookup"><span data-stu-id="b7283-4344">Implements a jump table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4345">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4346">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4346">Format</span></span>|<span data-ttu-id="b7283-4347">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4347">Assembly Format</span></span>|<span data-ttu-id="b7283-4348">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4349">45 < `unsigned int32` > < `int32` > .。。<`int32` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="b7283-4350">switch (`N`, `t1`, `t2`.。。`tN`)</span><span class="sxs-lookup"><span data-stu-id="b7283-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="b7283-4351">跳转到其中`N`一个值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="b7283-4352">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4353">将值推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4354">该值将从堆栈中弹出, 并按照值索引的偏移量 (其中值小于`N`) 将执行传输到指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="b7283-4355">`switch`指令实现跳转表。</span><span class="sxs-lookup"><span data-stu-id="b7283-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="b7283-4356">指令`unsigned int32`的格式表示目标`N`的数量, 后跟`N`指定跳转目标的 int32 值。</span><span class="sxs-lookup"><span data-stu-id="b7283-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="b7283-4357">在此`switch`指令后面的指令的开头, 这些目标表示为偏移量 (正面或负数)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="b7283-4358">指令从堆栈中弹出一个值, 并将其作为无符号整数与进行`N`比较。 `switch`</span><span class="sxs-lookup"><span data-stu-id="b7283-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="b7283-4359">如果值小于`N`, 执行将传输到通过值索引的目标, 其中目标从0开始编号 (例如, 值0采用第一个目标, 值为 1, 则使用第二个目标, 依此类推)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="b7283-4360">如果该值大于或等于`N`, 则继续执行下一条指令 (贯穿)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="b7283-4361">如果目标指令具有一个或多个前缀代码, 则只能将控制转移到其中的第一个前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="b7283-4362">此指令无法执行控制传入`try`和`catch`传出`filter`、、 `finally`和块的控制。</span><span class="sxs-lookup"><span data-stu-id="b7283-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="b7283-4363">(此类传输受到严格限制, 因此必须改用 leave 指令)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="b7283-4364">下面<xref:System.Reflection.Emit.ILGenerator.Emit%2A>的方法重载可以`switch`使用操作码。</span><span class="sxs-lookup"><span data-stu-id="b7283-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="b7283-4365">`Label[]`参数是表示32位偏移量的标签数组。</span><span class="sxs-lookup"><span data-stu-id="b7283-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="b7283-4366">ILGenerator.Emit(OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="b7283-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7283-4367">下面的代码示例说明了如何使用`Switch`操作码来使用<xref:System.Reflection.Emit.Label>数组生成跳转表。</span><span class="sxs-lookup"><span data-stu-id="b7283-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4368">执行后缀的方法调用指令，以便在执行实际调用指令前移除当前方法的堆栈帧。</span><span class="sxs-lookup"><span data-stu-id="b7283-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4369">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4370">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4370">Format</span></span>|<span data-ttu-id="b7283-4371">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4371">Assembly Format</span></span>|<span data-ttu-id="b7283-4372">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="b7283-4373">FE 14</span></span>|<span data-ttu-id="b7283-4374">侧.</span><span class="sxs-lookup"><span data-stu-id="b7283-4374">tail.</span></span>|<span data-ttu-id="b7283-4375">后续调用终止当前方法</span><span class="sxs-lookup"><span data-stu-id="b7283-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="b7283-4376">没有为此指令定义堆栈转换行为。</span><span class="sxs-lookup"><span data-stu-id="b7283-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="b7283-4377">前缀指令必须紧跟在<xref:System.Reflection.Emit.OpCodes.Call>、 <xref:System.Reflection.Emit.OpCodes.Calli>或<xref:System.Reflection.Emit.OpCodes.Callvirt>指令之前。 `tail`</span><span class="sxs-lookup"><span data-stu-id="b7283-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="b7283-4378">它指示在执行调用指令之前应移除当前方法的堆栈帧。</span><span class="sxs-lookup"><span data-stu-id="b7283-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="b7283-4379">它还意味着从以下调用返回的值也是当前方法返回的值, 因此可以将调用转换为交叉方法跳转。</span><span class="sxs-lookup"><span data-stu-id="b7283-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="b7283-4380">堆栈必须为空, 但通过以下调用传输的参数除外。</span><span class="sxs-lookup"><span data-stu-id="b7283-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="b7283-4381">调用指令后面的指令必须是 ret。因此, 唯一有效的代码序列`tail. call`是 ( `calli` `callvirt`或)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="b7283-4382">更正 Microsoft 中间语言 (MSIL) 指令不能分支到`call`指令, 但它们可能会分支到后面<xref:System.Reflection.Emit.OpCodes.Ret>的。</span><span class="sxs-lookup"><span data-stu-id="b7283-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="b7283-4383">如果控件从不受信任的代码传输到受信任的代码, 则无法放弃当前帧, 因为这会危及代码标识安全性。</span><span class="sxs-lookup"><span data-stu-id="b7283-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="b7283-4384">因此, .NET Framework 安全检查可能会导致`tail`忽略, 而保留标准<xref:System.Reflection.Emit.OpCodes.Call>说明。</span><span class="sxs-lookup"><span data-stu-id="b7283-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="b7283-4385">同样, 若要允许在调用返回后退出已同步的区域, 则在用于退出标记`tail`为已同步的方法时将忽略该前缀。</span><span class="sxs-lookup"><span data-stu-id="b7283-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="b7283-4386">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`tail`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst"><span data-ttu-id="b7283-4388">操作码对象的实例。</span><span class="sxs-lookup"><span data-stu-id="b7283-4388">An instance of an Opcode object.</span></span></param>
        <summary><span data-ttu-id="b7283-4389">如果提供的操作码采用单字节参数则返回真或假。</span><span class="sxs-lookup"><span data-stu-id="b7283-4389">Returns true or false if the supplied opcode takes a single byte argument.</span></span></summary>
        <returns><span data-ttu-id="b7283-4390"><see langword="true" /> 或 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b7283-4390"><see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4391">此方法可用于查找要在优化代码中使用的 MSIL 操作码为 "短格式"。</span><span class="sxs-lookup"><span data-stu-id="b7283-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="b7283-4392">`TakesSingleByteArgument`如果实例在以下情况下采用单个字节参数, 则返回`true`: <xref:System.Reflection.Emit.OpCode></span><span class="sxs-lookup"><span data-stu-id="b7283-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="b7283-4393">操作码对字节大小的地址 (例如<xref:System.Reflection.Emit.OpCodes.Br_S>和<xref:System.Reflection.Emit.OpCodes.Bgt_S>) 执行分支指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="b7283-4394">操作码将一个字节值推送到堆栈上 (例如, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="b7283-4395">操作码通过字节大小的 "缩写" (例如, <xref:System.Reflection.Emit.OpCodes.Ldloc_S>和<xref:System.Reflection.Emit.OpCodes.Stloc_S>) 引用变量或参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="b7283-4396">否则，它将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b7283-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="b7283-4397">下面的示例演示了`TakesSingleByteArgument` `OpCodes`如何通过反射到类并进行测试来查看每个`OpCode`字段是否采用单字节参数。</span><span class="sxs-lookup"><span data-stu-id="b7283-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4398">引发当前位于计算堆栈上的异常对象。</span><span class="sxs-lookup"><span data-stu-id="b7283-4398">Throws the exception object currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4399">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4400">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4400">Format</span></span>|<span data-ttu-id="b7283-4401">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4401">Assembly Format</span></span>|<span data-ttu-id="b7283-4402">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4403">7A</span><span class="sxs-lookup"><span data-stu-id="b7283-4403">7A</span></span>|<span data-ttu-id="b7283-4404">throw</span><span class="sxs-lookup"><span data-stu-id="b7283-4404">throw</span></span>|<span data-ttu-id="b7283-4405">引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="b7283-4406">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4407">将对象引用 (对异常) 推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4408">从堆栈中弹出对象引用并引发异常。</span><span class="sxs-lookup"><span data-stu-id="b7283-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="b7283-4409">指令引发当前堆栈上的异常对象`O`(类型)。 `throw`</span><span class="sxs-lookup"><span data-stu-id="b7283-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="b7283-4410"><xref:System.NullReferenceException>如果对象引用为空引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-4411">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`throw`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4413">指示当前位于计算堆栈上的地址可能没有与紧接的 <see langword="ldind" />、<see langword="stind" />、<see langword="ldfld" />、<see langword="stfld" />、<see langword="ldobj" />、<see langword="stobj" />、<see langword="initblk" /> 或 <see langword="cpblk" /> 指令的自然大小对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4414">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4415">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4415">Format</span></span>|<span data-ttu-id="b7283-4416">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4416">Assembly Format</span></span>|<span data-ttu-id="b7283-4417">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4418">FE 12 <`unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="b7283-4419">未对齐.</span><span class="sxs-lookup"><span data-stu-id="b7283-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="b7283-4420">指示后面的指针指令可能是不对齐的。</span><span class="sxs-lookup"><span data-stu-id="b7283-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="b7283-4421">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4422">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4423">`Unaligned`指定堆栈上的地址 (非托管指针`native int`) 可能不会与`ldind`紧跟其后的`stobj`、 `stind`、 `ldfld`、 `stfld` `ldobj`、、、`initblk`或`cpblk`指令。</span><span class="sxs-lookup"><span data-stu-id="b7283-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="b7283-4424">也就是说, 对于<xref:System.Reflection.Emit.OpCodes.Ldind_I4>说明, 地址的对齐方式可能不会为4字节边界。</span><span class="sxs-lookup"><span data-stu-id="b7283-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="b7283-4425">对于`initblk`和`cpblk` , 默认对齐方式取决于体系结构依赖 (32 位 cpu 上的4个字节, 64 位 cpu 上的8个字节)。</span><span class="sxs-lookup"><span data-stu-id="b7283-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="b7283-4426">如果在编译时不知道对齐方式为8字节, 则不会将其`unaligned`输出限制为32位 word 的代码生成器必须使用。</span><span class="sxs-lookup"><span data-stu-id="b7283-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="b7283-4427">"对齐" 的值必须是1、2或 4, 这意味着生成的代码应分别假定地址是字节、双字节或4字节对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="b7283-4428">请注意, 临时指针 ( `*`类型) 始终对齐。</span><span class="sxs-lookup"><span data-stu-id="b7283-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="b7283-4429">尽管`cpblk`指令的对齐在逻辑上需要两个数字 (一个用于源, 另一个用于目标), 但如果只指定了较小的数字, 则不会对性能产生显著影响。</span><span class="sxs-lookup"><span data-stu-id="b7283-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="b7283-4430">`unaligned` 和`volatile`前缀可以按任意顺序进行组合。</span><span class="sxs-lookup"><span data-stu-id="b7283-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="b7283-4431">它们`ldind`必须紧跟在`stind` `ldfld`、 、、`stfld`、、、或`cpblk`指令之前。 `ldobj` `stobj` `initblk`</span><span class="sxs-lookup"><span data-stu-id="b7283-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="b7283-4432">和说明只允许使用<xref:System.Reflection.Emit.OpCodes.Volatile> 前缀。<xref:System.Reflection.Emit.OpCodes.Stsfld> <xref:System.Reflection.Emit.OpCodes.Ldsfld></span><span class="sxs-lookup"><span data-stu-id="b7283-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="b7283-4433">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`unaligned`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4434">ILGenerator (操作码、标签)</span><span class="sxs-lookup"><span data-stu-id="b7283-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="b7283-4435">ILGenerator (Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="b7283-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4436">将值类型的已装箱的表示形式转换为其未装箱的形式。</span><span class="sxs-lookup"><span data-stu-id="b7283-4436">Converts the boxed representation of a value type to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4437">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4438">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4438">Format</span></span>|<span data-ttu-id="b7283-4439">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4439">Assembly Format</span></span>|<span data-ttu-id="b7283-4440">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4441">79 < `T` ></span></span>|<span data-ttu-id="b7283-4442">装箱`valType`</span><span class="sxs-lookup"><span data-stu-id="b7283-4442">unbox `valType`</span></span>|<span data-ttu-id="b7283-4443">从其装箱表示形式中`obj`提取值类型数据。</span><span class="sxs-lookup"><span data-stu-id="b7283-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="b7283-4444">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4445">对象引用被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4446">从堆栈中弹出对象引用, 并取消装箱到值类型指针。</span><span class="sxs-lookup"><span data-stu-id="b7283-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="b7283-4447">值类型指针被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4448">值类型在公共语言基础结构 (CLI) 中具有两种不同的表示形式:</span><span class="sxs-lookup"><span data-stu-id="b7283-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="b7283-4449">当值类型嵌入到另一个对象中时使用的 "原始" 窗体。</span><span class="sxs-lookup"><span data-stu-id="b7283-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="b7283-4450">"装箱" 窗体, 其中值类型中的数据被包装 (装箱) 到对象中, 因此它可以作为独立实体存在。</span><span class="sxs-lookup"><span data-stu-id="b7283-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="b7283-4451">指令将对象引用 (类型`O`)、值类型的装箱表示形式转换为值类型指针 (托管指针、类型`&`)、其未装箱形式。 `unbox`</span><span class="sxs-lookup"><span data-stu-id="b7283-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="b7283-4452">提供的值类型 (`valType`) 是元数据标记, 用于指示装箱对象中包含的值类型类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="b7283-4453">与<xref:System.Reflection.Emit.OpCodes.Box>(需要创建值类型的副本以便在对象中使用) `unbox`不需要从对象复制值类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="b7283-4454">通常, 它只是计算装箱对象内已存在的值类型的地址。</span><span class="sxs-lookup"><span data-stu-id="b7283-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="b7283-4455"><xref:System.InvalidCastException>如果对象未装箱为`valType`, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="b7283-4456"><xref:System.NullReferenceException>如果对象引用为空引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-4457"><xref:System.TypeLoadException>如果找不到值类型`valType` , 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="b7283-4458">当 Microsoft 中间语言 (MSIL) 指令转换为本机代码而不是运行时, 通常会检测到此情况。</span><span class="sxs-lookup"><span data-stu-id="b7283-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="b7283-4459">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`unbox`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4460">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4461">将指令中指定类型的已装箱的表示形式转换成未装箱形式。</span><span class="sxs-lookup"><span data-stu-id="b7283-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4462">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4463">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4463">Format</span></span>|<span data-ttu-id="b7283-4464">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4464">Assembly Format</span></span>|<span data-ttu-id="b7283-4465">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4466">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="b7283-4466">A5 < `T` ></span></span>|<span data-ttu-id="b7283-4467">取消装箱。`typeTok`</span><span class="sxs-lookup"><span data-stu-id="b7283-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="b7283-4468">从`obj`中提取数据, 其装箱表示形式。</span><span class="sxs-lookup"><span data-stu-id="b7283-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="b7283-4469">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4470">对象引用`obj`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4471">从堆栈中弹出对象引用, 并取消装箱到指令中指定的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="b7283-4472">生成的对象引用或值类型被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4473">当应用于值类型的装箱形式`unbox.any`时, 指令提取中`obj`包含的值 (类型`O`为), 因而等效`unbox`于后面的`ldobj`。</span><span class="sxs-lookup"><span data-stu-id="b7283-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="b7283-4474">当应用于引用类型时, `unbox.any`指令与具有相同的`castclass` `typeTok`效果。</span><span class="sxs-lookup"><span data-stu-id="b7283-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="b7283-4475">如果操作数`typeTok`是泛型类型参数, 则运行时行为取决于为该泛型类型参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="b7283-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="b7283-4476"><xref:System.InvalidCastException>如果`obj`不是装箱类型, 则会引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="b7283-4477"><xref:System.NullReferenceException>如果`obj`为 null 引用, 则引发。</span><span class="sxs-lookup"><span data-stu-id="b7283-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="b7283-4478">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`unbox.any`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4479">ILGenerator (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="b7283-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4480">指定当前位于计算堆栈顶部的地址可以是易失的，并且读取该位置的结果不能被缓存，或者对该地址的多个存储区不能被取消。</span><span class="sxs-lookup"><span data-stu-id="b7283-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4481">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4482">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4482">Format</span></span>|<span data-ttu-id="b7283-4483">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4483">Assembly Format</span></span>|<span data-ttu-id="b7283-4484">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="b7283-4485">FE 13</span></span>|<span data-ttu-id="b7283-4486">失效.</span><span class="sxs-lookup"><span data-stu-id="b7283-4486">volatile.</span></span>|<span data-ttu-id="b7283-4487">指示后续指针引用是可变的。</span><span class="sxs-lookup"><span data-stu-id="b7283-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="b7283-4488">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4489">地址被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4490">`volatile`。</span><span class="sxs-lookup"><span data-stu-id="b7283-4490">`volatile`.</span></span> <span data-ttu-id="b7283-4491">指定该地址是一个可变地址 (即, 可以从外部引用到当前执行线程), 并且无法缓存读取该位置的结果, 或者无法禁止显示此位置的多个存储。</span><span class="sxs-lookup"><span data-stu-id="b7283-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="b7283-4492">将访问标记为`volatile`只影响单一访问权限; 对同一位置的其他访问必须单独标记。</span><span class="sxs-lookup"><span data-stu-id="b7283-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="b7283-4493">不需要以原子方式执行对可变位置的访问。</span><span class="sxs-lookup"><span data-stu-id="b7283-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="b7283-4494"><xref:System.Reflection.Emit.OpCodes.Unaligned> 和`volatile`前缀可以按任意顺序进行组合。</span><span class="sxs-lookup"><span data-stu-id="b7283-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="b7283-4495">它们`ldind`必须紧跟在`stind` `ldfld`、 、、`stfld`、、、或`cpblk`指令之前。 `ldobj` `stobj` `initblk`</span><span class="sxs-lookup"><span data-stu-id="b7283-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="b7283-4496">和说明只允许使用`volatile` 前缀。<xref:System.Reflection.Emit.OpCodes.Stsfld> <xref:System.Reflection.Emit.OpCodes.Ldsfld></span><span class="sxs-lookup"><span data-stu-id="b7283-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="b7283-4497">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`volatile`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b7283-4499">计算位于计算堆栈顶部的两个值的按位异或，并且将结果推送到计算堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7283-4500">下表列出了指令的十六进制和 Microsoft 中间语言 (MSIL) 程序集格式以及简短的参考摘要:</span><span class="sxs-lookup"><span data-stu-id="b7283-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="b7283-4501">格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4501">Format</span></span>|<span data-ttu-id="b7283-4502">程序集格式</span><span class="sxs-lookup"><span data-stu-id="b7283-4502">Assembly Format</span></span>|<span data-ttu-id="b7283-4503">说明</span><span class="sxs-lookup"><span data-stu-id="b7283-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="b7283-4504">61</span><span class="sxs-lookup"><span data-stu-id="b7283-4504">61</span></span>|<span data-ttu-id="b7283-4505">xor</span><span class="sxs-lookup"><span data-stu-id="b7283-4505">xor</span></span>|<span data-ttu-id="b7283-4506">计算两个整数值的按位 XOR 并返回整数。</span><span class="sxs-lookup"><span data-stu-id="b7283-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="b7283-4507">堆栈转换行为顺序如下:</span><span class="sxs-lookup"><span data-stu-id="b7283-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="b7283-4508">`value1`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="b7283-4509">`value2`被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="b7283-4510">`value2`从`value1`堆栈中弹出和, 并计算按位 XOR。</span><span class="sxs-lookup"><span data-stu-id="b7283-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="b7283-4511">`value2` 和`value1`的按位 XOR 被推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="b7283-4512">`xor`指令计算堆栈顶部两个值的按位 XOR, 并将结果保留在堆栈上。</span><span class="sxs-lookup"><span data-stu-id="b7283-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="b7283-4513">`Xor`是特定于整数的操作。</span><span class="sxs-lookup"><span data-stu-id="b7283-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="b7283-4514">以下<xref:System.Reflection.Emit.ILGenerator.Emit%2A>方法重载可以`xor`使用操作码:</span><span class="sxs-lookup"><span data-stu-id="b7283-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="b7283-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="b7283-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

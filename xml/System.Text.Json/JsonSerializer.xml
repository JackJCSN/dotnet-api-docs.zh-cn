<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55efe259c3954694d75aef7b8fdde8fe9e9d2cf0" /><Meta Name="ms.sourcegitcommit" Value="8544f14c8194a55eb22d46721b0bbe46f345c063" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/21/2019" /><Meta Name="ms.locfileid" Value="69669162" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1ff49-101">提供将对象或值类型序列化为 JSON 以及将 JSON 反序列化为对象或值类型的功能。</span><span class="sxs-lookup"><span data-stu-id="1ff49-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="1ff49-102">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="1ff49-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="1ff49-103">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-104">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="1ff49-105">将表示单个 JSON 值的 UTF-8 编码文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="1ff49-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="1ff49-106">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ff49-107"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-108">Json 无效，<paramref name="returnType" /> 与 JSON 不兼容，或者流中存在剩余数据时。</span><span class="sxs-lookup"><span data-stu-id="1ff49-108">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="1ff49-109">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="1ff49-109">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="1ff49-110">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-110">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-111">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-111">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="1ff49-112">将表示单个 JSON 值的文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="1ff49-112">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="1ff49-113">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-113">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-114"><xref:System.String>使用的不如使用 utf-8 方法, 因为实现本身使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="1ff49-114">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ff49-115"><paramref name="json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-115"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-116">Json 无效，<paramref name="returnType" /> 与 JSON 不兼容，或者流中存在剩余数据时。</span><span class="sxs-lookup"><span data-stu-id="1ff49-116">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1ff49-117">要用于读取的读取器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-117">The reader to read.</span></span></param>
        <param name="returnType"><span data-ttu-id="1ff49-118">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-118">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-119">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-119">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="1ff49-120">从提供的读取器读取一个 JSON 值（包括对象或数组）并将它转换为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="1ff49-120">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="1ff49-121">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-121">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-122"><xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>如果的<xref:System.Text.Json.Utf8JsonReader.TokenType> `reader`属性为<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, 则通过调用来使读取器前进, 以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="1ff49-122">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="1ff49-123">此方法完成后, `reader`将位于 JSON 值中的最终标记处。</span><span class="sxs-lookup"><span data-stu-id="1ff49-123">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="1ff49-124">如果引发了异常, 则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="1ff49-124">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="1ff49-125">此方法会创建读取器所处理的数据的副本, 因此, 不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="1ff49-125">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="1ff49-126">用于<xref:System.Text.Json.JsonReaderOptions>创建实例<xref:System.Text.Json.Utf8JsonReader>的的在冲突<xref:System.Text.Json.JsonSerializerOptions>时优先于。</span><span class="sxs-lookup"><span data-stu-id="1ff49-126">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="1ff49-127">因此, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>在读取时<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>使用、、和。</span><span class="sxs-lookup"><span data-stu-id="1ff49-127">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ff49-128"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-128"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-129">Json 无效，<paramref name="returnType" /> 与 JSON 不兼容，或者无法从读取器读取值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-129">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1ff49-130"><paramref name="reader" /> 使用的是不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-130"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-131">UTF-8 编码文本的目标类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-131">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="1ff49-132">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="1ff49-132">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-133">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-133">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="1ff49-134">将表示单个 JSON 值的 UTF-8 编码文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="1ff49-134">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="1ff49-135">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-135">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-136">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="1ff49-136">The JSON is invalid.</span></span>
          
<span data-ttu-id="1ff49-137">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-137">-or-</span></span>

<span data-ttu-id="1ff49-138"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="1ff49-138"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="1ff49-139">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1ff49-139">-or-</span></span>

<span data-ttu-id="1ff49-140">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-140">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-141">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-141">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="1ff49-142">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="1ff49-142">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-143">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-143">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="1ff49-144">将表示单个 JSON 值的文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="1ff49-144">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="1ff49-145">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-145">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-146"><xref:System.String>使用的不如使用 utf-8 方法, 因为实现本身使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="1ff49-146">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ff49-147"><paramref name="json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-147"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-148">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="1ff49-148">The JSON is invalid.</span></span>
          
<span data-ttu-id="1ff49-149">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-149">-or-</span></span>

<span data-ttu-id="1ff49-150"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="1ff49-150"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="1ff49-151">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-151">-or-</span></span>

<span data-ttu-id="1ff49-152">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-152">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-153">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-153">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="1ff49-154">要用于读取的读取器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-154">The reader to read.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-155">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-155">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="1ff49-156">将一个 JSON 值（包括对象或数组）从提供的读取器读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="1ff49-156">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="1ff49-157">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-157">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-158"><xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>如果的<xref:System.Text.Json.Utf8JsonReader.TokenType> `reader`属性为<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, 则通过调用来使读取器前进, 以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="1ff49-158">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="1ff49-159">此方法完成后, `reader`将位于 JSON 值中的最终标记处。</span><span class="sxs-lookup"><span data-stu-id="1ff49-159">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="1ff49-160">如果引发了异常, 则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="1ff49-160">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="1ff49-161">此方法会创建读取器所处理的数据的副本, 因此, 不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="1ff49-161">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="1ff49-162">用于<xref:System.Text.Json.JsonReaderOptions>创建实例<xref:System.Text.Json.Utf8JsonReader>的的在冲突<xref:System.Text.Json.JsonSerializerOptions>时优先于。</span><span class="sxs-lookup"><span data-stu-id="1ff49-162">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="1ff49-163">因此, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>在读取时<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>使用、、和。</span><span class="sxs-lookup"><span data-stu-id="1ff49-163">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-164">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="1ff49-164">The JSON is invalid.</span></span>
          
<span data-ttu-id="1ff49-165">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-165">-or-</span></span>

<span data-ttu-id="1ff49-166"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="1ff49-166"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="1ff49-167">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-167">-or-</span></span>

<span data-ttu-id="1ff49-168">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-168">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1ff49-169"><paramref name="reader" /> 不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-169"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="1ff49-170">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-170">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="1ff49-171">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-171">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-172">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-172">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="1ff49-173">可能用于取消读取操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="1ff49-173">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="1ff49-174">将表示单个 JSON 值的 UTF-8 编码文本异步读取到指定类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="1ff49-174">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="1ff49-175">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="1ff49-175">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="1ff49-176">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-176">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1ff49-177"><paramref name="utf8Json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-177"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-178">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="1ff49-178">The JSON is invalid.</span></span>
          
<span data-ttu-id="1ff49-179">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-179">-or-</span></span>

<span data-ttu-id="1ff49-180"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="1ff49-180"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="1ff49-181">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-181">-or-</span></span>

<span data-ttu-id="1ff49-182">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-182">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-183">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-183">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="1ff49-184">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-184">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-185">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-185">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="1ff49-186">可能用于取消读取操作的标记。</span><span class="sxs-lookup"><span data-stu-id="1ff49-186">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="1ff49-187">将表示单个 JSON 值的 UTF-8 编码文本异步读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="1ff49-187">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="1ff49-188">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="1ff49-188">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="1ff49-189">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="1ff49-189">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="1ff49-190">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="1ff49-190">The JSON is invalid.</span></span>
          
<span data-ttu-id="1ff49-191">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1ff49-191">-or-</span></span>

<span data-ttu-id="1ff49-192"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="1ff49-192"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="1ff49-193">或</span><span class="sxs-lookup"><span data-stu-id="1ff49-193">-or-</span></span>

<span data-ttu-id="1ff49-194">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="1ff49-194">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1ff49-195">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-195">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="1ff49-196">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-196">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-197">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-197">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-198">将指定类型的值转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-198">Converts the value of a specified type into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="1ff49-199">值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="1ff49-199">The string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-200">使用的<xref:System.String>不如使用 utf-8 编码, 因为在内部实现使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="1ff49-200">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="1ff49-201">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="1ff49-201">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="1ff49-202">JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-202">The JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="1ff49-203">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-203">The value to convert and write.</span></span></param>
        <param name="type"><span data-ttu-id="1ff49-204">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-204">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-205">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-205">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-206">将指定类型的一个 JSON 值（包括对象或数组）写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-206">Writes one JSON value (including objects or arrays) of a specified type to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-207">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-207">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="1ff49-208">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-208">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-209">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-209">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-210">将泛型类型参数指定的类型的值转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="1ff49-210">Converts the value of a type specified by a generic type parameter into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="1ff49-211">值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="1ff49-211">A string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1ff49-212">使用的<xref:System.String>不如使用 utf-8 编码, 因为在内部实现使用 utf-8。</span><span class="sxs-lookup"><span data-stu-id="1ff49-212">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="1ff49-213">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="1ff49-213">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-214">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-214">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="1ff49-215">JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-215">A JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="1ff49-216">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-216">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-217">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-217">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-218">将泛型类型参数指定的类型的一个 JSON 值（包括对象或数组）写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="1ff49-218">Writes one JSON value (including objects or arrays) of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="1ff49-219">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="1ff49-219">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="1ff49-220">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-220">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="1ff49-221">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-221">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-222">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-222">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="1ff49-223">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="1ff49-223">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="1ff49-224">将指定类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入指定流。</span><span class="sxs-lookup"><span data-stu-id="1ff49-224">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="1ff49-225">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="1ff49-225">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-226">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-226">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="1ff49-227">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="1ff49-227">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="1ff49-228">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-228">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-229">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-229">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="1ff49-230">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="1ff49-230">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="1ff49-231">将泛型类型参数指定的类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入流。</span><span class="sxs-lookup"><span data-stu-id="1ff49-231">Asynchronously converts a value of a type specified by a generic type parametaer to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="1ff49-232">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="1ff49-232">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1ff49-233">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-233">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="1ff49-234">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-234">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-235">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-235">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-236">将指定类型的值转换为 UTF8 编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="1ff49-236">Converts a value of the specified type into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="1ff49-237">值的 UTF-8 表示形式。</span><span class="sxs-lookup"><span data-stu-id="1ff49-237">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="1ff49-238">值的类型。</span><span class="sxs-lookup"><span data-stu-id="1ff49-238">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="1ff49-239">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="1ff49-239">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="1ff49-240">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="1ff49-240">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="1ff49-241">将泛型类型参数指定的类型的值转换为 UTF8 编码的字节数组。</span><span class="sxs-lookup"><span data-stu-id="1ff49-241">Converts the value of a type specifed by a generic type parameter into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="1ff49-242">值的 UTF-8 表示形式。</span><span class="sxs-lookup"><span data-stu-id="1ff49-242">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

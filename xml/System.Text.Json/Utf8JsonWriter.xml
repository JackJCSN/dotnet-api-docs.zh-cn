<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f3fe7c9f43d78e08083ff3bf78a5adad02329b8" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68434900" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1da9b-101">提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</span><span class="sxs-lookup"><span data-stu-id="1da9b-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="1da9b-102">`Utf8JsonWriter`在不使用缓存的情况下按顺序写入文本, 并且默认情况下将遵循[JSON RFC](https://tools.ietf.org/html/rfc8259), 但写入注释除外。</span><span class="sxs-lookup"><span data-stu-id="1da9b-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="1da9b-103">当启用验证时, 尝试编写无效 JSON 的方法引发了<xref:System.InvalidOperationException> , 并引发了上下文特定的错误消息。</span><span class="sxs-lookup"><span data-stu-id="1da9b-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="1da9b-104">由于此类型是 ref 结构, 因此它不直接支持异步。</span><span class="sxs-lookup"><span data-stu-id="1da9b-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="1da9b-105">但是, 它确实支持重新进入以写入部分数据并继续以区块写入。</span><span class="sxs-lookup"><span data-stu-id="1da9b-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>

<span data-ttu-id="1da9b-106">若要能够格式化缩进和空格的输出或跳过验证, 请创建一个实例<xref:System.Text.Json.JsonWriterOptions>并将其传递给编写器。</span><span class="sxs-lookup"><span data-stu-id="1da9b-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="1da9b-107">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="1da9b-107">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="1da9b-108">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="1da9b-108">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="1da9b-109">使用指定的 <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" /> 构造新的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-109">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1da9b-110"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1da9b-110"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="1da9b-111">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="1da9b-111">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="1da9b-112">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="1da9b-112">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="1da9b-113">使用指定的 <paramref name="utf8Json" /> 构造新的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-113">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1da9b-114"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1da9b-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1da9b-115">获取目前为止当前实例提交到输出的字节总数。</span><span class="sxs-lookup"><span data-stu-id="1da9b-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="1da9b-116">迄今为止提交给输出<see cref="T:System.Text.Json.Utf8JsonWriter" />的总字节数。</span><span class="sxs-lookup"><span data-stu-id="1da9b-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-117">对于<xref:System.Buffers.IBufferWriter%601>, 此属性指示 IBufferWriter 的高级内容。</span><span class="sxs-lookup"><span data-stu-id="1da9b-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="1da9b-118">对于<xref:System.IO.Stream>, 此属性指示写入到流中的数据量。</span><span class="sxs-lookup"><span data-stu-id="1da9b-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1da9b-119">获取目前为止由 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写但尚未刷新到输出并提交的字节数。</span><span class="sxs-lookup"><span data-stu-id="1da9b-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1da9b-120">获取当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="1da9b-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="1da9b-121">当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="1da9b-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="1da9b-122">`CurrentDepth`属性跟踪迄今为止写入的 JSON 文本中的嵌套对象/数组的递归深度。</span><span class="sxs-lookup"><span data-stu-id="1da9b-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-123">提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="1da9b-123">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-124">对于 IBufferWriter, 这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="1da9b-124">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="1da9b-125">对于 Stream, 这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="1da9b-125">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="1da9b-126">无法<xref:System.Text.Json.Utf8JsonWriter>在释放后重用该实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-126">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-127">异步提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="1da9b-127">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-128">对于 IBufferWriter, 这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="1da9b-128">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="1da9b-129">对于 Stream, 这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="1da9b-129">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="1da9b-130">无法<xref:System.Text.Json.Utf8JsonWriter>在释放后重用该实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-130">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>
            
            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-131">提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="1da9b-131">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-132">对于 IBufferWriter, 这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="1da9b-132">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="1da9b-133">对于<xref:System.IO.Stream>, 这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="1da9b-133">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1da9b-134">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-134">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary><span data-ttu-id="1da9b-135">异步提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="1da9b-135">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-136">对于 IBufferWriter, 这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="1da9b-136">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="1da9b-137">对于<xref:System.IO.Stream>, 这会将数据写入流并在监视取消请求时异步刷新。</span><span class="sxs-lookup"><span data-stu-id="1da9b-137">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1da9b-138">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-138">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1da9b-139">获取使用此实例编写 JSON 时的自定义行为，以指示在编写时是否格式化输出以及是否跳过结构化 JSON 验证。</span><span class="sxs-lookup"><span data-stu-id="1da9b-139">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-140">重置此实例的内部状态，以便可以重复使用它。</span><span class="sxs-lookup"><span data-stu-id="1da9b-140">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-141">将继续使用原始写入器选项和原始输出<xref:System.Buffers.IBufferWriter`1> (或<xref:System.IO.Stream>) 作为目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="1da9b-141">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1da9b-142">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-142">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="1da9b-143">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="1da9b-143">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="1da9b-144">重置此实例的内部状态，以便可以结合 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="1da9b-144">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-145">将继续使用原始写入器选项, 但现在将`bufferWriter`写入作为新目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="1da9b-145">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1da9b-146"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1da9b-146"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1da9b-147">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-147">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="1da9b-148">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="1da9b-148">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="1da9b-149">重置此实例的内部状态，以便可以结合 <see cref="T:System.IO.Stream" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="1da9b-149">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-150">将继续使用原始写入器选项, 但现在将`utf8Json`写入作为新目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="1da9b-150">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1da9b-151"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1da9b-151"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1da9b-152">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="1da9b-152">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-153">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-153">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-154">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-154">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-155">编写指定为字节只读范围的属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-155">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-156">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-156">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-157">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-157">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-158">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-158">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-159">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-159">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-160">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-160">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-161">编写指定为只读字符范围的属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-161">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-162">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-162">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-163">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-163">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-164">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-164">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-165">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-165">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-166">要写为 JSON 文本“true”或“false”且作为名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-166">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-167">编写指定为字符串的属性名称和 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-167">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-168">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-168">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-169">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-169">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-170">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-170">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-171">要编写为 JSON 文本“true”或“false”且作为 JSON 数组元素的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-171">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-172">编写 <see cref="T:System.Boolean" /> 值（写为 JSON 文本“true”或“false”）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-172">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-173">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-173">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="1da9b-174">要在 /*..*/ 中编写为 JSON 注释的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-174">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="1da9b-175">将 UTF-8 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="1da9b-175">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-176">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-176">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-177">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-177">The specified value is too large.</span></span>
        
<span data-ttu-id="1da9b-178">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-178">-or-</span></span>

<span data-ttu-id="1da9b-179"><paramref name="utf8Value" /> 包含注释分隔符（即 \*/）。</span><span class="sxs-lookup"><span data-stu-id="1da9b-179"><paramref name="utf8Value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-180">要在 /*..*/ 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-180">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="1da9b-181">将 UTF-16 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="1da9b-181">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-182">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-182">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-183">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-183">The specified value is too large OR.</span></span>
        
<span data-ttu-id="1da9b-184">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1da9b-184">-or-</span></span>

<span data-ttu-id="1da9b-185"><paramref name="value" /> 包含注释分隔符（即 \*/）。</span><span class="sxs-lookup"><span data-stu-id="1da9b-185"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-186">要在 /*..*/ 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-186">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="1da9b-187">将字符串文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="1da9b-187">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-188">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-188">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-189">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-189">The specified value is too large.</span></span>
        
<span data-ttu-id="1da9b-190">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-190">-or-</span></span>

<span data-ttu-id="1da9b-191"><paramref name="value" /> 包含注释分隔符（即 \*/）。</span><span class="sxs-lookup"><span data-stu-id="1da9b-191"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-192">编写 JSON 数组的结尾。</span><span class="sxs-lookup"><span data-stu-id="1da9b-192">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-193">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-193">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-194">编写 JSON 对象的结尾。</span><span class="sxs-lookup"><span data-stu-id="1da9b-194">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-195">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-195">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-196">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-196">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="1da9b-197">编写指定为字节只读范围的属性名称和 JSON 文本“null”，作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-197">Writes a property name specified as a read-only span of bytes and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-198">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-198">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-199">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-199">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-200">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-200">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-201">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-201">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-202">编写指定为只读字符范围的属性名称和 JSON 文本“null”，作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-202">Writes a property name specified as a read-only character span and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-203">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-203">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-204">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-204">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-205">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-205">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-206">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-206">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-207">编写指定为字符串的属性名称和 JSON 文本“null”，作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-207">Writes a property name specified as a string and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="1da9b-208">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-208">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-209">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-209">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-210">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-210">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-211">编写 JSON 文本“NULL”作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-211">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-212">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-213">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-214">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-215">编写指定为字节只读范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-215">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-216">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Decimal>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-216">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-217">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-217">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-218">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-218">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-219">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-219">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-220">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-220">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-221">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-221">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-222">编写指定为字节只读范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-222">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-223">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Double>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-223">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-224">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-224">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-225">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-225">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-226">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-226">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-227">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-227">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-228">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-228">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-229">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-229">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-230">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-230">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-231">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-231">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-232">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-232">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-233">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-233">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-234">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-234">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-235">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-235">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-236">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-236">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-237">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-237">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-238">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-238">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-239">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-240">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-241">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-241">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-242">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-242">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-243">编写指定为字节只读范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-243">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-244">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Single>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-244">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-245">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-245">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-246">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-246">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-247">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-247">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-248">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-249">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-250">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-250">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-251">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-251">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-252">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-252">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-253">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-253">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-254">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-254">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-255">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-255">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-256">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-256">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-257">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-257">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-258">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-258">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-259">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-259">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-260">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-260">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-261">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-261">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-262">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-262">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-263">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-263">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-264">编写指定为只读字符范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-264">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-265">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Decimal>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-265">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-266">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-266">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-267">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-267">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-268">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-268">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-269">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-269">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-270">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-270">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-271">编写指定为只读字符范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-271">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-272">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Double>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-272">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-273">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-273">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-274">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-274">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-275">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-275">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-276">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-276">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-277">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-277">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-278">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-278">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-279">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-279">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-280">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-280">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-281">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-281">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-282">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-282">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-283">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-283">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-284">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-284">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-285">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-285">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-286">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-286">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-287">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-287">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-288">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-288">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-289">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-289">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-290">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-290">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-291">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-291">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-292">编写指定为只读字符范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-292">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-293">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Single>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-293">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-294">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-294">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-295">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-295">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-296">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-296">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-297">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-297">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-298">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-298">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-299">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-299">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-300">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-300">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-301">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-301">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-302">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-302">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-303">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-303">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-304">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-304">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-305">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-305">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-306">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-306">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-307">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-307">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-308">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-308">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-309">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-309">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-310">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-310">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-311">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-311">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-312">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-312">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-313">编写指定为字符串的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-313">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-314">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Decimal>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-314">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-315">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-315">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-316">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-316">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-317">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-317">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-318">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-318">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-319">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-319">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-320">编写指定为字符串的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-320">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-321">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Double>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-321">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-322">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-322">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-323">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-323">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-324">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-324">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-325">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-326">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-327">编写指定为字符串的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-327">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-328">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-328">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-329">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-329">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-330">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-330">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-331">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-331">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-332">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-332">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-333">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-333">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-334">编写指定为字符串的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-334">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-335">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Int64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-335">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-336">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-336">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-337">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-337">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-338">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-338">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-339">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-339">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-340">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-340">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-341">编写指定为字符串的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-341">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-342">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Single>"G")。</span><span class="sxs-lookup"><span data-stu-id="1da9b-342">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G').</span></span> <span data-ttu-id="1da9b-343">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-343">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-344">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-344">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-345">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-345">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-346">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-346">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-347">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-347">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-348">编写指定为字符串的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-348">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-349">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt32>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-349">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-350">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-350">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-351">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-351">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-352">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-352">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-353">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-353">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-354">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-354">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-355">编写指定为字符串的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-355">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-356">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.UInt64>"G"), 例如:32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-356">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (i.e. 'G'), for example: 32767.</span></span> <span data-ttu-id="1da9b-357">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-357">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-358">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-358">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-359">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-359">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-360">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-360">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-361">编写 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-361">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-362">此方法使用默认<xref:System.Decimal> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-362">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-363">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-363">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-364">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-364">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-365">编写 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-365">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-366">此方法使用默认<xref:System.Double> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-366">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-367">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-367">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-368">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-368">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-369">编写 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-369">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-370">此方法使用默认<xref:System.Int32> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-370">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="1da9b-371">例如, 32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-371">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-372">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-372">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-373">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-373">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-374">编写 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-374">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-375">此方法使用默认<xref:System.Int64> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-375">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="1da9b-376">例如, 32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-376">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-377">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-377">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-378">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-378">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-379">编写 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-379">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-380">此方法使用默认<xref:System.Single> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-380">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-381">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-381">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-382">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-382">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-383">编写 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-383">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-384">此方法使用默认<xref:System.UInt32> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-384">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="1da9b-385">例如, 32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-385">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-386">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-386">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-387">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-387">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-388">编写 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-388">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-389">此方法使用默认<xref:System.UInt64> <xref:System.Buffers.StandardFormat>值 (即 "G") 写入值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-389">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="1da9b-390">例如, 32767。</span><span class="sxs-lookup"><span data-stu-id="1da9b-390">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-391">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-391">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-392">编写 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="1da9b-392">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-393">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-393">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="1da9b-394">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-394">-or-</span></span>

<span data-ttu-id="1da9b-395">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-395">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-396">要编写的 JSON 数组的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-396">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="1da9b-397">编写 JSON 数组的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-397">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-398">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-398">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-399">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-399">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-400">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-400">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="1da9b-401">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-401">-or-</span></span>
       
<span data-ttu-id="1da9b-402">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-402">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-403">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-403">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-404">编写 JSON 数组的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-404">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-405">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-405">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-406">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-406">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-407">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-407">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="1da9b-408">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1da9b-408">-or-</span></span>
       
<span data-ttu-id="1da9b-409">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-409">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-410">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-410">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-411">编写 JSON 数组的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-411">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-412">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-412">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-413">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-413">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-414">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-414">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="1da9b-415">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1da9b-415">-or-</span></span>
       
<span data-ttu-id="1da9b-416">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-416">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1da9b-417">编写 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="1da9b-417">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-418">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-418">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="1da9b-419">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1da9b-419">-or-</span></span>

<span data-ttu-id="1da9b-420">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-420">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-421">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-421">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="1da9b-422">编写 JSON 对象的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-422">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-423">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-423">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-424">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-424">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-425">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-425">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="1da9b-426">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-426">-or-</span></span>
       
<span data-ttu-id="1da9b-427">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-427">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-428">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-428">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-429">编写 JSON 对象的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-429">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-430">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-430">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-431">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-431">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-432">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-432">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="1da9b-433">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-433">-or-</span></span>
       
<span data-ttu-id="1da9b-434">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-434">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-435">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-435">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="1da9b-436">编写 JSON 对象的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="1da9b-436">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-437">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-437">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-438">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-438">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-439">JSON 的深度超过最大深度 1000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-439">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="1da9b-440">或</span><span class="sxs-lookup"><span data-stu-id="1da9b-440">-or-</span></span>
       
<span data-ttu-id="1da9b-441">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-441">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-442">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-442">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-443">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-443">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-444">编写 UTF-8 属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-444">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-445">使用往返 ("O") <xref:System.Buffers.StandardFormat>写入。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="1da9b-445">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="1da9b-446">例如, 2017-06-12T05:30: 45.7680000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-446">For example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="1da9b-447">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-447">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-448">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-448">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-449">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-449">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-450">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-450">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-451">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-451">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-452">编写 UTF-8 属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-452">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-453">使用往返 ("O") <xref:System.Buffers.StandardFormat>编写, 例如: <xref:System.DateTimeOffset>2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="1da9b-453">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat> , for example: 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="1da9b-454">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-454">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-455">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-455">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-456">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-456">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-457">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-457">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-458">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-458">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-459">编写 UTF-8 属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-459">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-460">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Guid>"D"), 如下所示: nnnnnnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="1da9b-460">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="1da9b-461">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-461">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-462">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-462">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-463">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-463">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-464">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-464">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="1da9b-465">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-465">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-466">编写 UTF-8 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-466">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-467">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-467">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-468">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-468">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-469">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-469">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-470">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-470">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-471">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-471">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-472">编写 UTF-8 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-472">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-473">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-473">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-474">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-474">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-475">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-475">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="1da9b-476">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-476">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-477">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-477">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-478">编写 UTF-8 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-478">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-479">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-479">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-480">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-480">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-481">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-481">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-482">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-482">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-483">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-483">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-484">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-484">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-485">使用往返 ("O") <xref:System.Buffers.StandardFormat>编写, 例如: <xref:System.DateTime>2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="1da9b-485">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat> , for example: 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="1da9b-486">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-486">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-487">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-487">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-488">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-488">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-489">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-489">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-490">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-490">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-491">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-491">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-492">使用往返 ("O") <xref:System.Buffers.StandardFormat>编写, 例如: <xref:System.DateTimeOffset>2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="1da9b-492">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat> , for example: 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="1da9b-493">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-493">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-494">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-494">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-495">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-495">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-496">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-496">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-497">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-497">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-498">编写指定为只读字符范围的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-498">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-499">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Guid>"D"), 如下所示: nnnnnnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="1da9b-499">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="1da9b-500">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-500">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-501">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-501">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-502">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-502">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-503">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-503">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="1da9b-504">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-504">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-505">编写 UTF-16 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-505">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-506">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-506">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-507">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-507">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-508">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-508">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-509">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-509">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-510">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-510">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-511">编写 UTF-16 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-511">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-512">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-512">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-513">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-513">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-514">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-514">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-515">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-515">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-516">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-516">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-517">编写 UTF-16 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-517">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-518">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-518">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-519">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-519">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-520">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-520">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-521">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-522">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-523">编写指定为字符串的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-523">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-524">使用往返 ("O") <xref:System.Buffers.StandardFormat>编写, 例如: <xref:System.DateTime>2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="1da9b-524">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat> , for example: 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="1da9b-525">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-525">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-526">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-526">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-527">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-527">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-528">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-528">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-529">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-529">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-530">编写指定为字符串的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-530">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-531">使用往返 ("O") <xref:System.Buffers.StandardFormat>编写, 例如: <xref:System.DateTimeOffset>2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="1da9b-531">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat> , for example: 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="1da9b-532">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-532">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-533">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-533">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-534">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-534">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-535">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-535">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-536">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-536">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-537">编写指定为字符串的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-537">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-538">使用默认值<xref:System.Buffers.StandardFormat>(即 <xref:System.Guid>"D"), 如下所示: nnnnnnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="1da9b-538">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="1da9b-539">在写入之前, 属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-539">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-540">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="1da9b-540">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-541">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-541">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-542">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-542">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="1da9b-543">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-543">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-544">编写指定为字符串的属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-544">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-545">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-545">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-546">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-546">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-547">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-547">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-548">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-548">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-549">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-549">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-550">编写指定为字符串的属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-550">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-551">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-551">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-552">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-552">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-553">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-553">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="1da9b-554">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="1da9b-554">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="1da9b-555">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-555">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="1da9b-556">编写指定为字符串的属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="1da9b-556">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-557">在写入之前, 将转义属性名称和值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-557">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-558">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-558">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-559">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-559">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="utf8Value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-560">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-560">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-561">编写 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-561">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-562">此方法<xref:System.DateTime>使用往返 ("O") <xref:System.Buffers.StandardFormat>来写入。</span><span class="sxs-lookup"><span data-stu-id="1da9b-562">This method writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="1da9b-563">例如, 2017-06-12T05:30: 45.7680000。</span><span class="sxs-lookup"><span data-stu-id="1da9b-563">For example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-564">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-564">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-565">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-565">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-566">编写 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-566">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-567">此方法<xref:System.DateTimeOffset>使用往返 ("O") <xref:System.Buffers.StandardFormat>来写入。</span><span class="sxs-lookup"><span data-stu-id="1da9b-567">This method writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="1da9b-568">例如, 2017-06-12T05:30: 45.7680000-07:00。</span><span class="sxs-lookup"><span data-stu-id="1da9b-568">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-569">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-569">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-570">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-570">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-571">编写 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-571">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="1da9b-572">此方法使用默认<xref:System.Guid> <xref:System.Buffers.StandardFormat>值 (即 "d") 编写值, 如下所示: nnnnnnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="1da9b-572">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-573">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-573">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="1da9b-574">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-574">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-575">编写 UTF-8 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-575">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-576">在写入之前, 将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-576">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-577">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-577">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-578">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-578">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-579">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-579">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-580">编写 UTF-16 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-580">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-581">在写入之前, 将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-581">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-582">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-582">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-583">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-583">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1da9b-584">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="1da9b-584">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="1da9b-585">编写字符串文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="1da9b-585">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="1da9b-586">在写入之前, 将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="1da9b-586">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1da9b-587">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="1da9b-587">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1da9b-588">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="1da9b-588">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
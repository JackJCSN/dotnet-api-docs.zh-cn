<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0289f40fe104361daf9e25a0bd3e7e2a913bae5" /><Meta Name="ms.sourcegitcommit" Value="afd69abf5c74cea01418aeaf877504b5f8ea1b02" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/11/2019" /><Meta Name="ms.locfileid" Value="70902298" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="13add-101">提供高性能的 API，以便提供 UTF-8 编码 JSON 文本的只进和非缓存编写权限。</span><span class="sxs-lookup"><span data-stu-id="13add-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-102">`Utf8JsonWriter`在不使用缓存的情况下按顺序写入文本，并且默认情况下将遵循[JSON RFC](https://tools.ietf.org/html/rfc8259)，但写入注释除外。</span><span class="sxs-lookup"><span data-stu-id="13add-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="13add-103">当启用验证时，尝试编写无效 JSON 的方法将引发<xref:System.InvalidOperationException> ，其中包含特定于上下文的错误消息。</span><span class="sxs-lookup"><span data-stu-id="13add-103">A method that attempts to write invalid JSON when validation is enabled throws an <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="13add-104">若要能够使用缩进和空格设置输出的格式、跳过验证或自定义转义行为，请创建一个实例<xref:System.Text.Json.JsonWriterOptions>并将其传递给编写器。</span><span class="sxs-lookup"><span data-stu-id="13add-104">To be able to format the output with indentation and white space, to skip validation, OR to customize the escaping behavior, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="13add-105">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="13add-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="13add-106">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="13add-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="13add-107">默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="13add-107">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="13add-108">使用要写入输出的指定 <see cref="T:System.Buffers.IBufferWriter`1" /> 和自定义选项初始化 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="13add-108">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-109"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-109"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="13add-110">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="13add-110">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="13add-111">定义 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="13add-111">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="13add-112">默认情况下，它会编写最小化的 JSON（不含额外空格）并根据 JSON RFC 验证正在编写的 JSON 在结构上是否有效。</span><span class="sxs-lookup"><span data-stu-id="13add-112">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="13add-113">使用要写入输出的指定流和自定义选项初始化 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="13add-113">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-114"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13add-115">获取目前为止当前实例提交到输出的字节总数。</span><span class="sxs-lookup"><span data-stu-id="13add-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="13add-116">迄今为止提交给输出<see cref="T:System.Text.Json.Utf8JsonWriter" />的总字节数。</span><span class="sxs-lookup"><span data-stu-id="13add-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-117">对于<xref:System.Buffers.IBufferWriter%601>，此属性指示 IBufferWriter 的高级内容。</span><span class="sxs-lookup"><span data-stu-id="13add-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="13add-118">对于<xref:System.IO.Stream>，此属性指示写入到流中的数据量。</span><span class="sxs-lookup"><span data-stu-id="13add-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13add-119">获取目前为止由 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 编写但尚未刷新到输出并提交的字节数。</span><span class="sxs-lookup"><span data-stu-id="13add-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="13add-120">到目前为止<see cref="T:System.Text.Json.Utf8JsonWriter" /> ，尚未刷新到输出并提交的字节数。</span><span class="sxs-lookup"><span data-stu-id="13add-120">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13add-121">获取当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="13add-121">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="13add-122">当前标记的深度。</span><span class="sxs-lookup"><span data-stu-id="13add-122">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-123">`CurrentDepth`属性跟踪迄今为止写入的 JSON 文本中的嵌套对象/数组的递归深度。</span><span class="sxs-lookup"><span data-stu-id="13add-123">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-124">提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="13add-124">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-125">对于 IBufferWriter，这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="13add-125">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="13add-126">对于 Stream，这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="13add-126">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="13add-127">无法<xref:System.Text.Json.Utf8JsonWriter>在释放后重用该实例。</span><span class="sxs-lookup"><span data-stu-id="13add-127">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-128">异步提交尚未刷新的所有剩余 JSON 文本，并释放当前实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="13add-128">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="13add-129">表示异步释放操作的任务。</span><span class="sxs-lookup"><span data-stu-id="13add-129">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-130">对于 IBufferWriter，这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="13add-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="13add-131">对于 Stream，这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="13add-131">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="13add-132">无法<xref:System.Text.Json.Utf8JsonWriter>在释放后重用该实例。</span><span class="sxs-lookup"><span data-stu-id="13add-132">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-133">提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="13add-133">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-134">对于 IBufferWriter，这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="13add-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="13add-135">对于<xref:System.IO.Stream>，这会将数据写入流并对其进行刷新。</span><span class="sxs-lookup"><span data-stu-id="13add-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="13add-136">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="13add-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="13add-137">要监视取消请求的标记。</span><span class="sxs-lookup"><span data-stu-id="13add-137">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="13add-138">默认值为 <see cref="T:System.Threading.CancellationToken.None" />。</span><span class="sxs-lookup"><span data-stu-id="13add-138">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="13add-139">异步提交目前为止编写的 JSON 文本，使其对输出目标可见。</span><span class="sxs-lookup"><span data-stu-id="13add-139">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="13add-140">表示异步刷新操作的任务。</span><span class="sxs-lookup"><span data-stu-id="13add-140">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-141">对于 IBufferWriter，这将基于迄今为止编写的内容<xref:System.Buffers.IBufferWriter`1>来改进基础。</span><span class="sxs-lookup"><span data-stu-id="13add-141">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="13add-142">对于<xref:System.IO.Stream>，这会将数据写入流并在监视取消请求时异步刷新。</span><span class="sxs-lookup"><span data-stu-id="13add-142">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="13add-143">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="13add-143">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13add-144">获取使用此实例编写 JSON 时的自定义行为，以指示在编写时是否格式化输出，是否跳过结构化 JSON 验证以及要转义哪些字符。</span><span class="sxs-lookup"><span data-stu-id="13add-144">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</span></span></summary>
        <value><span data-ttu-id="13add-145">此编写器实例的自定义行为，用于设置格式、验证和转义。</span><span class="sxs-lookup"><span data-stu-id="13add-145">The custom behavior of this instance of the writer for formatting, validating, and escaping.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-146">重置此实例的内部状态，以便可以重复使用它。</span><span class="sxs-lookup"><span data-stu-id="13add-146">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-147">将继续使用原始写入器选项和原始输出<xref:System.Buffers.IBufferWriter`1> （或<xref:System.IO.Stream>）作为目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="13add-147">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="13add-148">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="13add-148">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="13add-149">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="13add-149">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="13add-150">重置此实例的内部状态，以便可以结合 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="13add-150">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-151">将继续使用原始写入器选项，但现在将`bufferWriter`写入作为新目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="13add-151">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-152"><paramref name="bufferWriter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-152"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="13add-153">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="13add-153">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="13add-154">用于编写 JSON 文本的目标。</span><span class="sxs-lookup"><span data-stu-id="13add-154">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="13add-155">重置此实例的内部状态，以便可以结合 <see cref="T:System.IO.Stream" /> 的新实例重复使用它。</span><span class="sxs-lookup"><span data-stu-id="13add-155">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-156">将继续使用原始写入器选项，但现在将`utf8Json`写入作为新目标。 <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="13add-156">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-157"><paramref name="utf8Json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-157"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="13add-158">已释放此实例。</span><span class="sxs-lookup"><span data-stu-id="13add-158">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-159">要写入的属性的 UTF-8 编码名称。</span><span class="sxs-lookup"><span data-stu-id="13add-159">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="13add-160">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="13add-160">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="13add-161">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-161">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-162">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="13add-162">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="13add-163">超过此限制将<xref:System.ArgumentException>导致引发。</span><span class="sxs-lookup"><span data-stu-id="13add-163">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="13add-164">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="13add-164">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-165">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-165">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-166">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-166">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-167">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-167">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="13add-168">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="13add-168">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="13add-169">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-169">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-170">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="13add-170">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="13add-171">超过此限制将<xref:System.ArgumentException>导致引发。</span><span class="sxs-lookup"><span data-stu-id="13add-171">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="13add-172">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="13add-172">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-173">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-173">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-174">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-175">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-175">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="13add-176">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="13add-176">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="13add-177">将属性名称和原始字节值（作为 Base 64 编码的 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-177">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-178">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="13add-178">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="13add-179">超过此限制将<xref:System.ArgumentException>导致引发。</span><span class="sxs-lookup"><span data-stu-id="13add-179">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="13add-180">属性名称经过转义并在写入之前编码。</span><span class="sxs-lookup"><span data-stu-id="13add-180">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-181">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-181">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-182">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-182">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-183"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-183">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-184">要写入的属性的 JSON 编码名称。</span><span class="sxs-lookup"><span data-stu-id="13add-184">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="13add-185">要编写为 Base64 编码文本的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="13add-185">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="13add-186">将预编码属性名称和原始字节值（作为 Base64 编码的 JSON 字符串）编写为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-186">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-187">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="13add-187">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="13add-188">超过此限制将<xref:System.ArgumentException>导致引发。</span><span class="sxs-lookup"><span data-stu-id="13add-188">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="13add-189">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-189">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-190">字节在写入前进行编码。</span><span class="sxs-lookup"><span data-stu-id="13add-190">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-191">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-191">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-192">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-192">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="13add-193">要编写为某个 JSON 数组的 Base 64 编码的 JSON 字符串元素的二进制数据。</span><span class="sxs-lookup"><span data-stu-id="13add-193">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-194">将原始字节值以 Base64 编码的 JSON 字符串形式编写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-194">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-195">要作为 Base64 写入的二进制数据的最大允许大小为125000000字节（或大约 125 MB）。</span><span class="sxs-lookup"><span data-stu-id="13add-195">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="13add-196">超过此限制将<xref:System.ArgumentException>导致引发。</span><span class="sxs-lookup"><span data-stu-id="13add-196">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="13add-197">字节在写入前进行编码。</span><span class="sxs-lookup"><span data-stu-id="13add-197">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-198">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-198">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-199">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-199">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-200">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-200">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-201">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-201">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-202">将指定为只读字节范围的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-202">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-203">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-203">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-204">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-204">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-205">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-205">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-206">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-206">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-207">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-207">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-208">将指定为只读字符范围的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-208">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-209">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-209">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-210">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-210">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-211">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-211">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-212">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-212">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-213">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-213">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-214">将指定为字符串的属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-214">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-215">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-215">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-216">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-216">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-217">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-217">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-218"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-218">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-219">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-219">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-220">要作为 JSON 文本 <b>true</b> 或 <b>false</b> 写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-220">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-221">将预编码属性名称和一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-221">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-222">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-222">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-223">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-223">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-224">要以 JSON 文本 <b>true</b> 或 <b>false</b> 的形式写入 JSON 数组元素的值。</span><span class="sxs-lookup"><span data-stu-id="13add-224">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-225">将一个 <see cref="T:System.Boolean" /> 值（作为 JSON 文本 <b>true</b> 或 <b>false</b>）写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-225">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-226">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-226">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="13add-227">要在 `/*..*/` 中编写为 JSON 注释的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-227">The UTF-8 encoded value to be written as a JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="13add-228">将 UTF-8 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="13add-228">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-229">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="13add-229">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-230">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-230">The specified value is too large.</span></span>
        
<span data-ttu-id="13add-231">或</span><span class="sxs-lookup"><span data-stu-id="13add-231">-or-</span></span>

<span data-ttu-id="13add-232"><paramref name="utf8Value" /> 包含注释分隔符（即 `*/`）。</span><span class="sxs-lookup"><span data-stu-id="13add-232"><paramref name="utf8Value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-233">要在 `/*..*/` 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-233">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="13add-234">将 UTF-16 文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="13add-234">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-235">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="13add-235">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-236">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-236">The specified value is too large.</span></span>
        
<span data-ttu-id="13add-237">- 或 -</span><span class="sxs-lookup"><span data-stu-id="13add-237">-or-</span></span>

<span data-ttu-id="13add-238"><paramref name="value" /> 包含注释分隔符（即 `*/`）。</span><span class="sxs-lookup"><span data-stu-id="13add-238"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-239">要在 `/*..*/` 中编写为 UTF-8 转码 JSON 注释的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-239">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="13add-240">将字符串文本值编写为 JSON 注释。</span><span class="sxs-lookup"><span data-stu-id="13add-240">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-241">注释值在写入前未被转义。</span><span class="sxs-lookup"><span data-stu-id="13add-241">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-242">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-242">The specified value is too large.</span></span>
        
<span data-ttu-id="13add-243">或</span><span class="sxs-lookup"><span data-stu-id="13add-243">-or-</span></span>

<span data-ttu-id="13add-244"><paramref name="value" /> 包含注释分隔符（即 `*/`）。</span><span class="sxs-lookup"><span data-stu-id="13add-244"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-245"><paramref name="value" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-245">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-246">编写 JSON 数组的结尾。</span><span class="sxs-lookup"><span data-stu-id="13add-246">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-247">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-247">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-248">编写 JSON 对象的结尾。</span><span class="sxs-lookup"><span data-stu-id="13add-248">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-249">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-249">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-250">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-250">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="13add-251">将指定为只读字节范围的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-251">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-252">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-252">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-253">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-253">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-254">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-254">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-255">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-255">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-256">将指定为只读字符范围的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-256">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-257">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-257">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-258">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-258">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-259">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-259">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-260">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-260">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-261">将指定为字符串的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-261">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-262">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-263">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-264">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-265"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-265">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-266">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-266">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-267">将预编码的属性名称和 JSON 文本 <b>null</b> 写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-267">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-268">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-268">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-269">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-269">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-270">将 JSON 文本 <b>null</b> 写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-270">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-271">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-271">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-272">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-273">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-274">编写指定为字节只读范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-274">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="13add-275">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）来写入。 <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="13add-275">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="13add-276">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-277">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-278">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-279">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-280">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-281">编写指定为字节只读范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-281">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-282">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="13add-282">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-283">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="13add-283">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="13add-284">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-284">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-285">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-285">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-286">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-286">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-287">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-287">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-288">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-288">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-289">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-289">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-290">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="13add-290">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-291">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-291">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-292">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-292">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-293">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-293">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-294">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-294">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-295">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-295">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-296">编写指定为字节只读范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-296">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-297">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="13add-297">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-298">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-298">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-299">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-299">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-300">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-300">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-301">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-301">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-302">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-302">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-303">编写指定为字节只读范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-303">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-304">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="13add-304">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-305">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="13add-305">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="13add-306">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-306">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-307">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-307">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-308">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-308">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-309">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-309">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-310">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-310">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-311">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-311">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-312">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="13add-312">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-313">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-313">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-314">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-314">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-315">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-315">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-316">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-316">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-317">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-317">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-318">编写指定为字节只读范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-318">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-319">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="13add-319">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-320">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-320">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-321">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-321">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-322">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-322">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-323">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-323">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-324">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-324">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-325">编写指定为只读字符范围的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-325">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-326">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）来写入。 <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="13add-326">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="13add-327">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-327">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-328">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-328">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-329">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-329">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-330">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-330">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-331">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-331">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-332">编写指定为只读字符范围的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-332">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-333">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="13add-333">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-334">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="13add-334">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="13add-335">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-335">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-336">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-336">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-337">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-337">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-338">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-338">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-339">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-339">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-340">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-340">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-341">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="13add-341">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-342">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-342">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-343">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-343">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-344">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-344">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-345">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-345">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-346">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-346">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-347">编写指定为只读字符范围的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-347">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-348">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="13add-348">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-349">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-349">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-350">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-350">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-351">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-351">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-352">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-352">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-353">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-353">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-354">编写指定为只读字符范围的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-354">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-355">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="13add-355">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-356">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="13add-356">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="13add-357">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-357">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-358">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-358">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-359">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-359">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-360">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-360">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-361">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-361">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-362">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-362">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-363">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="13add-363">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-364">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-364">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-365">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-365">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-366">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-366">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-367">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-367">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-368">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-368">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-369">编写指定为只读字符范围的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-369">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-370">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="13add-370">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-371">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-371">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-372">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-372">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-373">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-373">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-374">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-374">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-375">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-375">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-376">编写指定为字符串的属性名称和 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-376">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-377">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）来写入。 <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="13add-377">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="13add-378">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-378">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-379">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-379">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-380">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-380">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-381"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-381">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-382">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-382">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-383">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-383">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-384">编写指定为字符串的属性名称和 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-384">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-385">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="13add-385">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-386">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="13add-386">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="13add-387">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-387">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-388">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-388">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-389">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-389">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-390"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-390">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-391">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-391">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-392">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-392">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-393">编写指定为字符串的属性名称和 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-393">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-394">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="13add-394">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-395">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-395">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-396">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-396">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-397">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-397">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-398"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-398">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-399">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-399">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-400">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-400">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-401">编写指定为字符串的属性名称和 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-401">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-402">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="13add-402">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-403">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-403">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-404">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-404">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-405">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-405">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-406"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-406">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-407">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-407">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-408">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-408">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-409">编写指定为字符串的属性名称和 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-409">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-410">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="13add-410">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-411">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="13add-411">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="13add-412">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-412">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-413">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-413">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-414">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-414">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-415"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-415">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-416">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-416">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-417">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-417">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-418">编写指定为字符串的属性名称和 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-418">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-419">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="13add-419">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-420">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-420">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-421">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-421">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-422">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-422">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-423"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-423">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-424">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-424">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-425">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-426">编写指定为字符串的属性名称和 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-426">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-427">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="13add-427">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-428">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-428">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-429">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-429">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-430">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-430">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-431"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-431">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-432">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-432">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-433">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-433">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-434">将预编码的属性名称和 <see cref="T:System.Decimal" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-434">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-435">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）来写入。 <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="13add-435">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="13add-436">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-436">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-437">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-437">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-438">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-438">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-439">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-439">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-440">将预编码的属性名称和 <see cref="T:System.Double" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-440">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-441">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="13add-441">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-442">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="13add-442">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="13add-443">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-443">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-444">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-444">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-445">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-445">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-446">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-446">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-447">将预编码的属性名称和 <see cref="T:System.Int32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-447">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-448">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="13add-448">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-449">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-449">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-450">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-450">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-451">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-451">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-452">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-452">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-453">将预编码的属性名称和 <see cref="T:System.Int64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-453">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-454">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）写入，例如32767。 <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="13add-454">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-455">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-455">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-456">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-456">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-457">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-457">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-458">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-458">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-459">将预编码的属性名称和 <see cref="T:System.Single" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-459">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-460">使用 .net Core 3.0 或<xref:System.Buffers.StandardFormat>更高版本上的默认值（即 "G"）来写入。 <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="13add-460">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-461">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="13add-461">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="13add-462">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-462">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-463">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-463">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-464">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-464">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-465">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-465">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-466">将预编码的属性名称和 <see cref="T:System.UInt32" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-466">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-467">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="13add-467">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-468">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-468">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-469">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-469">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-470">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-470">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-471">要以 JSON 数字形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-471">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-472">将预编码的属性名称和 <see cref="T:System.UInt64" /> 值（作为 JSON 数字）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-472">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-473">使用默认值<xref:System.Buffers.StandardFormat> （即 "G"）编写，例如32767。 <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="13add-473">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="13add-474">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-474">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-475">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-475">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-476">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-477">编写 <see cref="T:System.Decimal" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-477">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-478">此方法使用默认<xref:System.Decimal> <xref:System.Buffers.StandardFormat>值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-478">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-479">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-479">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-480">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-480">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-481">编写 <see cref="T:System.Double" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-481">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-482">此方法使用 .net <xref:System.Double> Core 3.0 或更<xref:System.Buffers.StandardFormat>高版本上的默认值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-482">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-483">在任何其他框架上使用 "G17"。</span><span class="sxs-lookup"><span data-stu-id="13add-483">Uses 'G17' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-484">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-484">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-485">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-485">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-486">编写 <see cref="T:System.Int32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-486">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-487">此方法使用默认<xref:System.Int32> <xref:System.Buffers.StandardFormat>值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-487">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="13add-488">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="13add-488">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-489">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-489">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-490">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-490">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-491">编写 <see cref="T:System.Int64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-491">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-492">此方法使用默认<xref:System.Int64> <xref:System.Buffers.StandardFormat>值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-492">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="13add-493">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="13add-493">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-494">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-494">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-495">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-495">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-496">编写 <see cref="T:System.Single" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-496">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-497">此方法使用 .net <xref:System.Single> Core 3.0 或更<xref:System.Buffers.StandardFormat>高版本上的默认值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-497">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="13add-498">在任何其他框架上使用 "G9"。</span><span class="sxs-lookup"><span data-stu-id="13add-498">Uses 'G9' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-499">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-499">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-500">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-500">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-501">编写 <see cref="T:System.UInt32" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-501">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-502">此方法使用默认<xref:System.UInt32> <xref:System.Buffers.StandardFormat>值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-502">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="13add-503">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="13add-503">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-504">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-504">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-505">要以 JSON 数字形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-505">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-506">编写 <see cref="T:System.UInt64" /> 值（写为 JSON 数字）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-506">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-507">此方法使用默认<xref:System.UInt64> <xref:System.Buffers.StandardFormat>值（即 "G"）写入值。</span><span class="sxs-lookup"><span data-stu-id="13add-507">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="13add-508">例如，32767。</span><span class="sxs-lookup"><span data-stu-id="13add-508">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-509">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-509">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-510">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-510">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="13add-511">编写 UTF-8 属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-511">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-512">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-512">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-513">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-513">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-514">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-514">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-515">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-515">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-516">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-516">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-517">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-517">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-518">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-518">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-519">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-519">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-520">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-520">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-521">编写属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-521">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-522">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-522">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-523">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-523">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-524">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-524">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-525"><paramref name="propertyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-525"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-526">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-526">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-527">编写预编码属性名称（作为 JSON 字符串）作为 JSON 对象的名称/值对的第一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-527">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-528">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-528">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-529">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-529">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-530">编写 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="13add-530">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-531">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-531">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="13add-532">或</span><span class="sxs-lookup"><span data-stu-id="13add-532">-or-</span></span>

<span data-ttu-id="13add-533">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-533">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-534">要编写的 JSON 数组的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-534">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="13add-535">编写 JSON 数组的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-535">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-536">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-536">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-537">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-537">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-538">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-538">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="13add-539">- 或 -</span><span class="sxs-lookup"><span data-stu-id="13add-539">-or-</span></span>
       
<span data-ttu-id="13add-540">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-540">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-541">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-541">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-542">编写 JSON 数组的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-542">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-543">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-543">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-544">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-544">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-545">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-545">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="13add-546">或</span><span class="sxs-lookup"><span data-stu-id="13add-546">-or-</span></span>
       
<span data-ttu-id="13add-547">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-547">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-548">要进行转码并写为 UTF-8 的 JSON 数字的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-548">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-549">编写 JSON 数组的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-549">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-550">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-550">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-551">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-551">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-552">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-552">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="13add-553">或</span><span class="sxs-lookup"><span data-stu-id="13add-553">-or-</span></span>
       
<span data-ttu-id="13add-554">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-554">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-555"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-555">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-556">要进行转码并写为 UTF-8 的 JSON 数字的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-556">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-557">编写将预编码属性名称作为键的 JSON 数组的开头。</span><span class="sxs-lookup"><span data-stu-id="13add-557">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-558">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-558">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-559">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-559">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
    
<span data-ttu-id="13add-560">或</span><span class="sxs-lookup"><span data-stu-id="13add-560">-or-</span></span>

<span data-ttu-id="13add-561">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-561">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13add-562">编写 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="13add-562">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-563">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-563">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="13add-564">或</span><span class="sxs-lookup"><span data-stu-id="13add-564">-or-</span></span>

<span data-ttu-id="13add-565">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-565">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-566">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-566">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="13add-567">编写 JSON 对象的开头，将指定为字节只读范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-567">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-568">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-568">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-569">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-569">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-570">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-570">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="13add-571">- 或 -</span><span class="sxs-lookup"><span data-stu-id="13add-571">-or-</span></span>
       
<span data-ttu-id="13add-572">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-572">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-573">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-573">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-574">编写 JSON 对象的开头，将指定为只读字符范围的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-574">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-575">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-575">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-576">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-576">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-577">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-577">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="13add-578">- 或 -</span><span class="sxs-lookup"><span data-stu-id="13add-578">-or-</span></span>
       
<span data-ttu-id="13add-579">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-579">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-580">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-580">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-581">编写 JSON 对象的开头，将指定为字符串的属性名称作为键。</span><span class="sxs-lookup"><span data-stu-id="13add-581">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-582">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-582">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-583">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-583">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-584">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-584">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="13add-585">或</span><span class="sxs-lookup"><span data-stu-id="13add-585">-or-</span></span>
       
<span data-ttu-id="13add-586">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-586">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-587"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-587">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-588">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-588">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="13add-589">编写将预编码属性名称作为键的 JSON 对象的开头。</span><span class="sxs-lookup"><span data-stu-id="13add-589">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-590">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-590">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-591">JSON 的深度超过最大深度 1,000。</span><span class="sxs-lookup"><span data-stu-id="13add-591">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
          
<span data-ttu-id="13add-592">或</span><span class="sxs-lookup"><span data-stu-id="13add-592">-or-</span></span>

<span data-ttu-id="13add-593">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-593">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-594">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-594">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-595">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-595">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-596">编写 UTF-8 属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-596">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-597">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30：45.7680000。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="13add-597">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="13add-598">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-598">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-599">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-599">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-600">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-600">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-601">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-601">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-602">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-602">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-603">编写 UTF-8 属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-603">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-604">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30： 45.7680000-07：00。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="13add-604">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="13add-605">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-605">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-606">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-606">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-607">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-607">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-608">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-608">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-609">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-609">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-610">编写 UTF-8 属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-610">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-611">使用默认值<xref:System.Buffers.StandardFormat> （即 "d"）写入，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。 <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="13add-611">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="13add-612">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-612">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-613">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-613">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-614">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-614">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-615">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-615">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="13add-616">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-616">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-617">编写 UTF-8 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-617">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-618">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-618">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-619">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-619">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-620">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-620">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-621">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-621">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-622">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-622">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-623">编写 UTF-8 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-623">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-624">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-624">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-625">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-625">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-626">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-626">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-627">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-627">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-628">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-628">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-629">编写 UTF-8 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-629">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-630">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-630">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="13add-631">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-631">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-632">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-632">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-633">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-633">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="13add-634">要编写的 JSON 对象的 UTF-8 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-634">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="13add-635">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-635">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-636">将 UTF-8 属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="13add-636">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-637">创建实例<xref:System.Text.Json.JsonEncodedText>时，该值应该已经转义。</span><span class="sxs-lookup"><span data-stu-id="13add-637">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-638">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-638">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-639">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-639">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-640">系统已启用验证，此方法将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-640">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-641">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-641">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-642">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-642">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-643">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-643">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-644">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30：45.7680000。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="13add-644">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="13add-645">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-645">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-646">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-646">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-647">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-647">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-648">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-648">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-649">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-649">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-650">编写指定为只读字符范围的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-650">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-651">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30： 45.7680000-07：00。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="13add-651">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="13add-652">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-652">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-653">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-653">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-654">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-654">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-655">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-655">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-656">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-656">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-657">编写指定为只读字符范围的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-657">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-658">使用默认值<xref:System.Buffers.StandardFormat> （即 "d"）写入，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。 <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="13add-658">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="13add-659">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-659">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-660">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-660">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-661">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-661">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-662">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-662">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="13add-663">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-663">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-664">编写 UTF-16 属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-664">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-665">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-665">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-666">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-666">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-667">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-667">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-668">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-668">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-669">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-669">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-670">编写 UTF-16 属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-670">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-671">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-671">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-672">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-672">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-673">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-673">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-674">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-674">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-675">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-675">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-676">编写 UTF-16 属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-676">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-677">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-677">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="13add-678">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-678">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-679">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-679">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-680">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-680">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-681">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-681">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-682">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-682">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-683">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="13add-683">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-684">创建实例<xref:System.Text.Json.JsonEncodedText>时，该值应该已经转义。</span><span class="sxs-lookup"><span data-stu-id="13add-684">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-685">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-685">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-686">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-686">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-687">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-687">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-688">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-688">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-689">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-689">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-690">编写指定为字符串的属性名称和 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-690">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-691">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30：45.7680000。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="13add-691">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="13add-692">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-692">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-693">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-693">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-694">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-694">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-695"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-695">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-696">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-696">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-697">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-697">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-698">编写指定为字符串的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-698">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-699">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30： 45.7680000-07：00。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="13add-699">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="13add-700">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-700">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-701">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-701">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-702">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-702">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-703"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-703">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-704">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-704">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-705">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-705">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-706">编写指定为字符串的属性名称和 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-706">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-707">使用默认值<xref:System.Buffers.StandardFormat> （即 "d"）写入，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。 <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="13add-707">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="13add-708">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-708">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-709">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-709">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-710">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-710">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-711"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-711">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-712">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-712">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="13add-713">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-713">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-714">编写指定为字符串的属性名称和 UTF-8 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-714">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-715">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-715">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-716">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-716">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-717">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-717">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-718"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-718">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-719">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-719">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-720">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-720">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-721">编写指定为字符串的属性名称和 UTF-16 文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-721">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-722">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-722">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-723">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-723">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-724">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-724">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-725"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-725">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-726">要进行转码并写为 UTF-8 的 JSON 对象的 UTF-16 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-726">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-727">要以 UTF-8 转码的 JSON 字符串形式作为名称/值对的一部分编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-727">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-728">编写指定为字符串的属性名称和字符串文本值（写为 JSON 字符串）作为 JSON 对象的名称/值对的一部分。</span><span class="sxs-lookup"><span data-stu-id="13add-728">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-729">在写入之前，对属性名称和值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-729">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="13add-730">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-730">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-731">指定的属性名称或值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-731">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-732">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-733"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-733">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-734">要进行转码并写为 UTF-8 的 JSON 对象的属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-734">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-735">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-735">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-736">将属性名称和预编码值（作为 JSON 字符串）写入 JSON 对象的名称/值对分。</span><span class="sxs-lookup"><span data-stu-id="13add-736">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-737">创建实例<xref:System.Text.Json.JsonEncodedText>时，该值应该已经转义。</span><span class="sxs-lookup"><span data-stu-id="13add-737">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-738">在写入之前，属性名称经过转义。</span><span class="sxs-lookup"><span data-stu-id="13add-738">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-739">指定的属性名称过长。</span><span class="sxs-lookup"><span data-stu-id="13add-739">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-740">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-740">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13add-741"><paramref name="propertyName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13add-741">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-742">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-742">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-743">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-743">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-744">将预编码的属性名称和 <see cref="T:System.DateTime" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-744">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-745">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30：45.7680000。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="13add-745">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="13add-746">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-746">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-747">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-747">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-748">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-748">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-749">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-749">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-750">将预编码的属性名称和 <see cref="T:System.DateTimeOffset" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-750">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-751">使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30： 45.7680000-07：00。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="13add-751">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="13add-752">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-752">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-753">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-753">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-754">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-754">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-755">要以 JSON 字符串形式作为名称/值对的一部分编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-755">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-756">将预编码的属性名称和 <see cref="T:System.Guid" /> 值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-756">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-757">使用默认值<xref:System.Buffers.StandardFormat> （即 "d"）写入，格式为： nnnnnnnn-nnnn-nnnnnnnnnnnn。 <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="13add-757">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="13add-758">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-758">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-759">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-759">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-760">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-760">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="13add-761">要以 JSON 字符串形式作为名称/值对的一部分编写的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-761">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-762">将预编码的属性名称和 UTF-8 文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-762">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-763">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-763">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-764">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-764">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-765">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-765">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-766">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-766">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-767">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-767">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-768">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-768">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-769">将预编码的属性名称和文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-769">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-770">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-770">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-771">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-771">The value is escaped before writing.</span></span>

<span data-ttu-id="13add-772">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-772">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-773">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-773">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-774">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-774">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-775">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-775">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-776">要作为 UTF-8 转码的 JSON 字符串写入名称/值对的值。</span><span class="sxs-lookup"><span data-stu-id="13add-776">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-777">将预编码的属性名称和字符串文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-777">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-778">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-778">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="13add-779">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-779">The value is escaped before writing.</span></span>

<span data-ttu-id="13add-780">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-780">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-781">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-781">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-782">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-782">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="13add-783">要进行转码并写为 UTF-8 的 JSON 对象的 JSON 编码属性名称。</span><span class="sxs-lookup"><span data-stu-id="13add-783">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="13add-784">要以 UTF-8 转码的 JSON 字符串形式写入名称/值对的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-784">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="13add-785">将预编码的属性名称和预编码的文本值（作为 JSON 字符串）写入 JSON 对象的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="13add-785">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-786">创建实例<xref:System.Text.Json.JsonEncodedText>时，属性名称和值应已转义。</span><span class="sxs-lookup"><span data-stu-id="13add-786">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-787">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-787">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-788">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-788">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-789">编写 <see cref="T:System.DateTime" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-789">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-790">此方法<xref:System.DateTime>使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30：45.7680000。</span><span class="sxs-lookup"><span data-stu-id="13add-790">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-791">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-791">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-792">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-792">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-793">编写 <see cref="T:System.DateTimeOffset" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-793">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-794">此方法<xref:System.DateTimeOffset>使用 ISO 8601-1 扩展格式（请参阅 12T05[中的 DateTime 和 DateTimeOffset 支持](~/docs/standard/datetime/system-text-json-support.md)）来编写; 例如，2017-06-：30： 45.7680000-07：00。</span><span class="sxs-lookup"><span data-stu-id="13add-794">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-795">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-795">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-796">要以 JSON 字符串形式作为 JSON 数组的元素编写的值。</span><span class="sxs-lookup"><span data-stu-id="13add-796">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-797">编写 <see cref="T:System.Guid" /> 值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-797">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-798">此方法使用默认<xref:System.Guid> <xref:System.Buffers.StandardFormat>值（即 "d"）编写值，如下所示： nnnnnnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="13add-798">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-799">系统已启用验证，该操作将导致编写无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-799">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="13add-800">要编写为 JSON 数组的 JSON 字符串元素的 UTF-8 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-800">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-801">编写 UTF-8 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-801">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-802">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-802">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-803">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-803">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-804">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-804">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-805">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-805">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-806">编写 UTF-16 文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-806">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-807">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-807">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-808">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-808">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-809">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-809">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-810">作为 JSON 数组的 UTF-8 转码的 JSON 字符串元素编写的 UTF-16 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-810">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-811">编写字符串文本值（写为 JSON 字符串）作为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-811">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="13add-812">在写入之前，将对值进行转义。</span><span class="sxs-lookup"><span data-stu-id="13add-812">The value is escaped before writing.</span></span>

<span data-ttu-id="13add-813">如果`value` <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue>为`null`，则将写入 JSON **null**值，就像调用方法一样。</span><span class="sxs-lookup"><span data-stu-id="13add-813">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13add-814">指定的值太大。</span><span class="sxs-lookup"><span data-stu-id="13add-814">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-815">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-815">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13add-816">要写为 JSON 数组的 UTF-8 转码的 JSON 字符串元素的 JSON 编码值。</span><span class="sxs-lookup"><span data-stu-id="13add-816">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="13add-817">将预编码的文本值（作为 JSON 字符串）写为 JSON 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="13add-817">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13add-818">创建实例<xref:System.Text.Json.JsonEncodedText>时，该值应该已经转义。</span><span class="sxs-lookup"><span data-stu-id="13add-818">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13add-819">系统已启用验证，该编写操作将生成无效的 JSON。</span><span class="sxs-lookup"><span data-stu-id="13add-819">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

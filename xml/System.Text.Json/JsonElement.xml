<Type Name="JsonElement" FullName="System.Text.Json.JsonElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86f1a8d53bfb1e9a53fd41995a116513f5cde610" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67243764" /></Metadata><TypeSignature Language="C#" Value="public struct JsonElement" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonElement extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonElement" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonElement" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonElement" />
  <TypeSignature Language="F#" Value="type JsonElement = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Text.Json.JsonDocument" /> 中的特定 JSON 值。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Text.Json.JsonElement" Usage="jsonElement.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取可在超过原始 <see cref="T:System.Text.Json.JsonDocument" /> 的生存期安全存储的 JsonElement。</summary>
        <returns>可在超过原始 <see cref="T:System.Text.Json.JsonDocument" /> 的生存期安全存储的 JsonElement。</returns>
        <remarks>
          <format><![CDATA[
          
如果此 JsonElement 本身就是以前调用的输出`Clone`或另一个 JsonElement 这是上一次调用的输出中包含的值为`Clone`，此方法会导致任何额外的内存分配。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateArray">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement.ArrayEnumerator EnumerateArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement/ArrayEnumerator EnumerateArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.EnumerateArray" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateArray () As JsonElement.ArrayEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement::ArrayEnumerator EnumerateArray();" />
      <MemberSignature Language="F#" Value="member this.EnumerateArray : unit -&gt; System.Text.Json.JsonElement.ArrayEnumerator" Usage="jsonElement.EnumerateArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement+ArrayEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 数组中的值。</summary>
        <returns>一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 数组中的值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Array" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateObject">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement.ObjectEnumerator EnumerateObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement/ObjectEnumerator EnumerateObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.EnumerateObject" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateObject () As JsonElement.ObjectEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement::ObjectEnumerator EnumerateObject();" />
      <MemberSignature Language="F#" Value="member this.EnumerateObject : unit -&gt; System.Text.Json.JsonElement.ObjectEnumerator" Usage="jsonElement.EnumerateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement+ObjectEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 对象中的属性。</summary>
        <returns>一个枚举器，它用于枚举由该 JsonElement 表示的 JSON 对象中的属性。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetArrayLength">
      <MemberSignature Language="C#" Value="public int GetArrayLength ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetArrayLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetArrayLength" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayLength () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayLength();" />
      <MemberSignature Language="F#" Value="member this.GetArrayLength : unit -&gt; int" Usage="jsonElement.GetArrayLength " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前数组值中包含的值的数量。</summary>
        <returns>当前数组值中包含的值的数量。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Array" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="jsonElement.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取元素的值（<see cref="T:System.Boolean" /> 形式）。</summary>
        <returns>元素的值（<see cref="T:System.Boolean" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
          
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 既不是 <see cref="F:System.Text.Json.JsonValueType.True" />，也不是 <see cref="F:System.Text.Json.JsonValueType.False" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="jsonElement.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="jsonElement.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取元素的值（<see cref="T:System.DateTime" /> 形式）。</summary>
        <returns>元素的值（<see cref="T:System.DateTime" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 JSON 字符串以外的值的日期时间表示形式。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.DateTime" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="jsonElement.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取元素的值（<see cref="T:System.DateTimeOffset" /> 形式）。</summary>
        <returns>元素的值（<see cref="T:System.DateTimeOffset" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 JSON 字符串以外的值的 DateTimeOffset 表示形式。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.DateTimeOffset" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="jsonElement.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.Decimal" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.Decimal" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
          This method does not parse the contents of a JSON string value.
          
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Decimal" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="jsonElement.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.Double" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.Double" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
               
此方法返回.NET Core<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>的值大于<xref:System.Double.MaxValue?displayProperty=nameWithType>，并返回<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>的值小于<xref:System.Double.MinValue?displayProperty=nameWithType>。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Double" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="jsonElement.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取元素的值（<see cref="T:System.Guid" /> 形式）。</summary>
        <returns>元素的值（<see cref="T:System.Guid" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 Guid 表示 JSON 字符串以外的值。
    
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Guid" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="jsonElement.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.Int32" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.Int32" /> 形式）。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Int32" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="jsonElement.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.Int64" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.Int64" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
          
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Int64" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement GetProperty (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement GetProperty(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (utf8PropertyName As ReadOnlySpan(Of Byte)) As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement GetProperty(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.GetProperty : ReadOnlySpan&lt;byte&gt; -&gt; System.Text.Json.JsonElement" Usage="jsonElement.GetProperty utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要返回的属性名称的 UTF-8 表示形式（没有字节顺序标记 (BOM)）。</param>
        <summary>获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="utf8PropertyName" /> 标识的所需属性的值。</summary>
        <returns>一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
               
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到带有所请求名称的属性。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement GetProperty (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement GetProperty(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (propertyName As ReadOnlySpan(Of Char)) As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement GetProperty(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetProperty : ReadOnlySpan&lt;char&gt; -&gt; System.Text.Json.JsonElement" Usage="jsonElement.GetProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">要返回其值的属性的名称。</param>
        <summary>获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="propertyName" /> 标识的所需属性的值。</summary>
        <returns>一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
               
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到带有所请求名称的属性。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement GetProperty (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonElement GetProperty(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (propertyName As String) As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonElement GetProperty(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.GetProperty : string -&gt; System.Text.Json.JsonElement" Usage="jsonElement.GetProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要返回其值的属性的名称。</param>
        <summary>获取一个 <see cref="T:System.Text.Json.JsonElement" />，它表示由 <paramref name="propertyName" /> 标识的所需属性的值。</summary>
        <returns>一个 <see cref="T:System.Text.Json.JsonElement" />，它表示所需属性的值。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
            
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">找不到带有所请求名称的属性。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="propertyName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRawText">
      <MemberSignature Language="C#" Value="public string GetRawText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetRawText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetRawText" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRawText () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetRawText();" />
      <MemberSignature Language="F#" Value="member this.GetRawText : unit -&gt; string" Usage="jsonElement.GetRawText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个字符串，它表示支持该值的原始输入数据。</summary>
        <returns>支持该值的原始输入数据。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="jsonElement.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.Single" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.Single" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
               
此方法返回.NET Core<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>的值大于<xref:System.Single.MaxValue?displayProperty=nameWithType>并<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>的值小于<xref:System.Single.MinValue?displayProperty=nameWithType>。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.Single" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="jsonElement.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取元素的值（<see cref="T:System.String" /> 形式）。</summary>
        <returns>元素的值（<see cref="T:System.String" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 JSON 字符串以外的值的字符串表示形式。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 既不是 <see cref="F:System.Text.Json.JsonValueType.String" />，也不是 <see cref="F:System.Text.Json.JsonValueType.Null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="jsonElement.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.UInt32" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.UInt32" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.UInt32" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="jsonElement.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前 JSON 数字（<see cref="T:System.UInt64" /> 形式）。</summary>
        <returns>当前 JSON 数字（<see cref="T:System.UInt64" /> 形式）。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.FormatException">此值不能以 <see cref="T:System.UInt64" /> 形式表示。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonElement.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement default[int] { System::Text::Json::JsonElement get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonElement.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>获取当前值为 <see cref="F:System.Text.Json.JsonValueType.Array" /> 时指定索引处的值。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Array" />。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> 不在范围 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) 内。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="jsonElement.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取适合于值类型的当前值的字符串表示形式。</summary>
        <returns>适合于值类型的当前值的字符串表示形式。</returns>
        <remarks>
          <format><![CDATA[
          
有关<xref:System.Text.Json.JsonValueType.Null?displayProperty=nameWithType>，<xref:System.String.Empty?displayProperty=nameWithType>返回。
               
有关<xref:System.Text.Json.JsonValueType.True?displayProperty=nameWithType>，<xref:System.Boolean.TrueString?displayProperty=nameWithType>返回。
               
有关<xref:System.Text.Json.JsonValueType.False?displayProperty=nameWithType>，<xref:System.Boolean.FalseString?displayProperty=nameWithType>返回。
               
有关<xref:System.Text.Json.JsonValueType.String?displayProperty=nameWithType>，值<xref:System.Text.Json.JsonElement.GetString>返回。
               
对于其他类型的值<xref:System.Text.Json.JsonElement.GetRawText>返回。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 :  -&gt; bool" Usage="jsonElement.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="jsonElement.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 字符串等效的日期和时间值。</param>
        <summary>尝试以 <see cref="T:System.DateTime" /> 形式表示当前 JSON 字符串。</summary>
        <returns>如果可以 <see cref="T:System.DateTime" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 JSON 字符串以外的值的日期时间表示形式。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="jsonElement.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 字符串等效的日期和时间。</param>
        <summary>尝试以 <see cref="T:System.DateTimeOffset" /> 形式表示当前 JSON 字符串。</summary>
        <returns>如果可以 <see cref="T:System.DateTimeOffset" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 JSON 字符串以外的值的 DateTimeOffset 表示形式。
          
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="jsonElement.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含当前 JSON 数字的十进制等效值。</param>
        <summary>尝试以 <see cref="T:System.Decimal" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.Decimal" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="jsonElement.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的双精度浮点值。</param>
        <summary>尝试以 <see cref="T:System.Double" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.Double" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
               
在.NET Core 上，此方法不会返回`false`的值大于<xref:System.Double.MaxValue?displayProperty=nameWithType>或小于<xref:System.Double.MinValue?displayProperty=nameWithType>。 相反，它会返回 < langword ="true >，并将分配<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>或<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>到`value`。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="jsonElement.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 字符串等效的 GUID。</param>
        <summary>尝试以 <see cref="T:System.Guid" /> 形式表示当前 JSON 字符串。</summary>
        <returns>如果可以 <see cref="T:System.Guid" /> 形式表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不创建 Guid 表示 JSON 字符串以外的值。
          
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.String" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="jsonElement.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的 32 位整数值。</param>
        <summary>尝试以 <see cref="T:System.Int32" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.Int32" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="jsonElement.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的 64 位整数值。</param>
        <summary>尝试以 <see cref="T:System.Int64" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.Int64" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty">
      <MemberSignature Language="C#" Value="public bool TryGetProperty (ReadOnlySpan&lt;byte&gt; utf8PropertyName, out System.Text.Json.JsonElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetProperty(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, [out] valuetype System.Text.Json.JsonElement&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetProperty (utf8PropertyName As ReadOnlySpan(Of Byte), ByRef value As JsonElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetProperty(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, [Runtime::InteropServices::Out] System::Text::Json::JsonElement % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetProperty : ReadOnlySpan&lt;byte&gt; *  -&gt; bool" Usage="jsonElement.TryGetProperty (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonElement" RefType="out" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">要返回的属性名称的 UTF-8 表示形式（没有字节顺序标记 (BOM)）。</param>
        <param name="value">接收已找到的属性的值。</param>
        <summary>查找当前对象中名为 <paramref name="utf8PropertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，该方法会将其值分配给 <paramref name="value" /> 参数。</summary>
        <returns>如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
               
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty">
      <MemberSignature Language="C#" Value="public bool TryGetProperty (ReadOnlySpan&lt;char&gt; propertyName, out System.Text.Json.JsonElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetProperty(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, [out] valuetype System.Text.Json.JsonElement&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetProperty (propertyName As ReadOnlySpan(Of Char), ByRef value As JsonElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetProperty(ReadOnlySpan&lt;char&gt; propertyName, [Runtime::InteropServices::Out] System::Text::Json::JsonElement % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetProperty : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="jsonElement.TryGetProperty (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonElement" RefType="out" />
      </Parameters>
      <Docs>
        <param name="propertyName">要查找的属性的名称。</param>
        <param name="value">此方法返回时，包含指定属性的值。</param>
        <summary>查找当前对象中名为 <paramref name="propertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，该方法会将其值分配给 <paramref name="value" /> 参数。</summary>
        <returns>如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
               
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty">
      <MemberSignature Language="C#" Value="public bool TryGetProperty (string propertyName, out System.Text.Json.JsonElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetProperty(string propertyName, [out] valuetype System.Text.Json.JsonElement&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetProperty (propertyName As String, ByRef value As JsonElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetProperty(System::String ^ propertyName, [Runtime::InteropServices::Out] System::Text::Json::JsonElement % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetProperty : string *  -&gt; bool" Usage="jsonElement.TryGetProperty (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonElement" RefType="out" />
      </Parameters>
      <Docs>
        <param name="propertyName">要查找的属性的名称。</param>
        <param name="value">此方法返回时，包含指定属性的值。</param>
        <summary>查找当前对象中名为 <paramref name="propertyName" /> 的属性，返回一个指示此类属性是否存在的值。 如果此属性存在，会将其值分配给 <paramref name="value" /> 参数。</summary>
        <returns>如果找到该属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
属性名称匹配会执行的顺序，区分大小写的比较。
               
如果为同一对象多次定义属性，方法与匹配的最后一个这样的定义。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Object" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="propertyName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="jsonElement.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的单精度浮点值。</param>
        <summary>尝试以 <see cref="T:System.Single" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.Single" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。
               
在.NET Core 中，此方法不会返回`false`的值大于<xref:System.Single.MaxValue?displayProperty=nameWithType>或小于<xref:System.Single.MinValue?displayProperty=nameWithType>)。 相反，它会返回`false`，并将分配<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>或<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>到`value`参数。
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="jsonElement.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的 32 位无符号整数值。</param>
        <summary>尝试以 <see cref="T:System.UInt32" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.UInt32" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="jsonElement.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">此方法返回时，包含与当前 JSON 数字等效的 64 位无符号整数值。</param>
        <summary>尝试以 <see cref="T:System.UInt64" /> 形式表示当前 JSON 数字。</summary>
        <returns>如果可以 <see cref="T:System.UInt64" /> 形式表示数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format><![CDATA[
          
此方法不会分析 JSON 字符串值的内容。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 不是 <see cref="F:System.Text.Json.JsonValueType.Number" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonValueType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonValueType Type" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonElement.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As JsonValueType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonValueType Type { System::Text::Json::JsonValueType get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Text.Json.JsonValueType" Usage="System.Text.Json.JsonElement.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonValueType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 JSON 元素的类型。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsProperty">
      <MemberSignature Language="C#" Value="public void WriteAsProperty (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.Utf8JsonWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsProperty(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, class System.Text.Json.Utf8JsonWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.WriteAsProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.Utf8JsonWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsProperty (utf8PropertyName As ReadOnlySpan(Of Byte), writer As Utf8JsonWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsProperty(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::Utf8JsonWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsProperty : ReadOnlySpan&lt;byte&gt; * System.Text.Json.Utf8JsonWriter -&gt; unit" Usage="jsonElement.WriteAsProperty (utf8PropertyName, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">表示 JSON 对象中的该值的名称的 UTF8 编码文本。</param>
        <param name="writer">编写器。</param>
        <summary>将此元素作为其名称由 UTF8 编码文本定义的对象属性写入所提供的编写器。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 是 <see cref="F:System.Text.Json.JsonValueType.Undefined" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsProperty">
      <MemberSignature Language="C#" Value="public void WriteAsProperty (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.Utf8JsonWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsProperty(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, class System.Text.Json.Utf8JsonWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.WriteAsProperty(System.ReadOnlySpan{System.Char},System.Text.Json.Utf8JsonWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsProperty (propertyName As ReadOnlySpan(Of Char), writer As Utf8JsonWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsProperty(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::Utf8JsonWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsProperty : ReadOnlySpan&lt;char&gt; * System.Text.Json.Utf8JsonWriter -&gt; unit" Usage="jsonElement.WriteAsProperty (propertyName, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
      </Parameters>
      <Docs>
        <param name="propertyName">一个字符范围，它指定了 JSON 对象中该值的名称。</param>
        <param name="writer">编写器。</param>
        <summary>将此元素作为其名称由指定字符范围定义的对象属性写入所提供的编写器。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 是 <see cref="F:System.Text.Json.JsonValueType.Undefined" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsProperty">
      <MemberSignature Language="C#" Value="public void WriteAsProperty (string propertyName, System.Text.Json.Utf8JsonWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsProperty(string propertyName, class System.Text.Json.Utf8JsonWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.WriteAsProperty(System.String,System.Text.Json.Utf8JsonWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsProperty (propertyName As String, writer As Utf8JsonWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsProperty(System::String ^ propertyName, System::Text::Json::Utf8JsonWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsProperty : string * System.Text.Json.Utf8JsonWriter -&gt; unit" Usage="jsonElement.WriteAsProperty (propertyName, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsValue">
      <MemberSignature Language="C#" Value="public void WriteAsValue (System.Text.Json.Utf8JsonWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAsValue(class System.Text.Json.Utf8JsonWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonElement.WriteAsValue(System.Text.Json.Utf8JsonWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAsValue (writer As Utf8JsonWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAsValue(System::Text::Json::Utf8JsonWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsValue : System.Text.Json.Utf8JsonWriter -&gt; unit" Usage="jsonElement.WriteAsValue writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
      </Parameters>
      <Docs>
        <param name="writer">编写器。</param>
        <summary>将此元素作为值写入所提供的编写器。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">此值的 <see cref="P:System.Text.Json.JsonElement.Type" /> 是 <see cref="F:System.Text.Json.JsonValueType.Undefined" />。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放父级 <see cref="T:System.Text.Json.JsonDocument" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
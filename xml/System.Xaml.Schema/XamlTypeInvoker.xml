<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cab8b4ba43d15f1dca4640d35056935ab7791fdb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69416518" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个扩展点，该扩展点可通过除反射和构造函数之外的其他技术来构造 XAML 类型的实例。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的用途<xref:System.Xaml.Schema.XamlTypeInvoker>是启用可扩展 XAML 类型系统、架构和不完全依赖于 clr 功能 (如 clr 特性、通过<xref:System.Type>和<xref:System.Reflection.MemberInfo>的反射信息等) 的工作运行时。 的<xref:System.Xaml.Schema.XamlTypeInvoker>子类用作 XAML 架构类 (如) <xref:System.Xaml.XamlType>的备用构造函数的输入参数。 将<xref:System.Xaml.Schema.XamlTypeInvoker>从<xref:System.Xaml.XamlType>子类中传递并将传递到基构造函数。 除了<xref:System.Xaml.Schema.XamlTypeInvoker>为构造函数定义外, 还必须为至少部分`Lookup`方法<xref:System.Xaml.XamlType>提供重写。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>具有默认实现。 默认实现遵循类似于 XAML 架构类型<xref:System.Xaml.XamlType>的默认实现的模型, 以及<xref:System.Xaml.XamlMember>: clr 类型系统用于实例化、值和查找, <xref:System.Type>包括使用 CLR 特性和<xref:System.Reflection.MemberInfo>等。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker>提供基本实例化 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 和方法的方法, 这些方法与<xref:System.Xaml.XamlType>表示集合、字典或数组的类型 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现为空。  
  
 此构造函数在内部调用以提供的值<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>。 对于子类, 应将<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>签名用作构造, 或提供作为基调用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>的重写。 <xref:System.Xaml.Schema.XamlTypeInvoker> 提供实现默认模式, 其中<xref:System.Xaml.Schema.XamlTypeInvoker>是不可变的。 <xref:System.Xaml.XamlType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">与此 <see cref="T:System.Xaml.XamlType" /> 相关的特定 XAML 类型的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
        <summary>基于提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数基于用于构造的<xref:System.Xaml.XamlType> <xref:System.Xaml.Schema.XamlTypeInvoker> , 在内部调用。 此处`type`提供的与所有其他方法<xref:System.Xaml.Schema.XamlTypeInvoker>调用相关。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <param name="item">要添加的项。</param>
        <summary>将所提供的项添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只应在表示集合的上<xref:System.Xaml.XamlType>调用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
在其相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />, 则此帮助程序始终引发, 其中包含<see cref="P:System.Xaml.XamlType.UnderlyingType" />的为的<see cref="T:System.Xaml.XamlType" /> <see langword="null" />情况。  
  
在内部, 基实现调用<see cref="P:System.Xaml.XamlType.IsCollection" />, 并在结果为时<see langword="false" />引发。  
  
基实现不一定要使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />的实现。 首先, 尝试将转换<paramref name="instance" />为<see cref="T:System.Collections.IList" /> 。 如果此方法成功, <see cref="M:System.Collections.IList.Add(System.Object)" />则调用, 并返回。 否则, 基实现<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />使用 CLR 来调用基础<see langword="Add" />方法, 此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />方法是通过调用来<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />获取的。  
  
在基实现中, 如果<paramref name="item" />为, <see langword="null" />则在此级别不引发异常。 在调用时, 基础<see langword="Add" />方法仍然可能会引发异常。 如果<see cref="P:System.Xaml.XamlType.ItemType" />不返回有效的结果, 则可能出现其他运行时异常。</para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <param name="key">要添加的项的字典键。</param>
        <param name="item">要添加的项值。</param>
        <summary>将所提供的密钥和项值添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只应在表示字典的上<xref:System.Xaml.XamlType>调用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
已在其相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />, 则此帮助程序始终引发, 其中包含<see cref="P:System.Xaml.XamlType.UnderlyingType" />的为的<see cref="T:System.Xaml.XamlType" /> <see langword="null" />情况。  
  
在内部, 基实现调用<see cref="P:System.Xaml.XamlType.IsDictionary" />, 并在结果为时<see langword="false" />引发。  
  
基实现不一定要使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />的实现。 首先, 尝试将转换<paramref name="instance" />为<see cref="T:System.Collections.IDictionary" /> 。 如果此方法成功, <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />则调用, 并返回。 否则, 基实现<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />使用 CLR 来调用基础<see langword="Add" />方法, 此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />方法是通过调用来<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />获取的。  
  
在基实现中, 如果<paramref name="item" />或<paramref name="key" />为<see langword="null" />, 则不会在此级别引发异常。 在调用时, 基础<see langword="Add" />方法仍然可能会引发异常。 如果<see cref="P:System.Xaml.XamlType.ItemType" />不返回有效的结果, 则可能出现其他运行时异常。</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">一个对象数组，这些对象为实例提供 <see langword="x:ConstructorArgs" />。 对于不需要或者不使用 <see langword="null" /> 的类型可能为 <see langword="x:ConstructorArgs" />。</param>
        <summary>基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 创建对象实例。</summary>
        <returns>基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所创建的实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">未能解析构造函数。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />, 则此帮助程序始终引发, 其中包含<see cref="P:System.Xaml.XamlType.UnderlyingType" />的为的<see cref="T:System.Xaml.XamlType" /> <see langword="null" />情况。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><see langword="Add" /> 方法所使用的项类型的 <see cref="T:System.Xaml.XamlType" />。</param>
        <summary>返回与集合或字典相关的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的相关 <see langword="Add" /> 方法。</summary>
        <returns><see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 信息，或为 NULL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法应返回`null` , <xref:System.Xaml.XamlType>其中对于, 这<xref:System.Xaml.Schema.XamlTypeInvoker>不是可写的集合或字典。 具体而言, 应`null`在<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>返回`None`的情况下返回。  
  
> [!IMPORTANT]
>  如果不是访问完全受信任的 XAML 类型系统, 则此方法可能会向调用方<xref:System.Reflection.MethodInfo>报告错误信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para><see langword="null" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> <see langword="null" />如果基于未知<see cref="T:System.Xaml.XamlType" /> ,则基实现返回,其中包含的为的情况。<see cref="T:System.Xaml.XamlType" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 如果<see langword="null" /> <see langword="null" /> 为,则此方法<see cref="P:System.Xaml.XamlType.ItemType" />也会返回。  
  
Xaml 集合可能具有多<see langword="Add" />个方法, 因为 xaml 集合可能支持多个内容类型 (有关 WPF 中的此概念的一个实现的信息, <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />请参见<see cref="P:System.Xaml.XamlType.AllowedContentTypes" />)。 默认实现使用内部逻辑根据签名和提供<paramref name="contentType" />的类型返回最佳匹配项。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个对象，该对象表示可对项进行枚举的方法。</summary>
        <returns>枚举器方法的 <see cref="T:System.Reflection.MethodInfo" />，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>返回`null` 的`None`情况, 应返回。  
  
> [!IMPORTANT]
>  如果不是访问完全受信任的 XAML 类型系统, 则此方法可能会向调用方<xref:System.Reflection.MethodInfo>报告错误信息。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>基实现调用内部 helper 方法。 对于基于未知<see langword="null" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> <see cref="P:System.Xaml.XamlType.UnderlyingType" /> 的情况<see cref="T:System.Xaml.XamlType" /> , 该帮助程序返回, 其中包含的为<see langword="null" />的情况。 <see cref="T:System.Xaml.XamlType" /> 对于<see langword="null" /> <see cref="M:System.Xaml.XamlType.LookupCollectionKind" />返回的<see langword="None" />情况, 它也会返回。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <summary>返回一个表示项集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，或为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
在相关类型不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括对内部 helper <c>ThrowIfUnknown</c>的调用。 如果<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />, 则此帮助程序始终引发, 其中包含<see cref="P:System.Xaml.XamlType.UnderlyingType" />的为的<see cref="T:System.Xaml.XamlType" /> <see langword="null" />情况。  
  
基实现不一定要使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />的实现。 首先, 尝试将转换<paramref name="instance" />为<see cref="T:System.Collections.IEnumerable" /> 。 如果成功, <see cref="M:System.Collections.IEnumerable.GetEnumerator" />则对进行调用, 并且方法返回此返回值。 否则, 基实现<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />使用 CLR 来调用基础<see langword="GetEnumerator" />方法, 此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />方法是通过调用来<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />获取的。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 时使用的处理程序。</summary>
        <value>一个处理此情况的处理程序实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件处理程序基于<xref:System.EventHandler%601> <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据的约束。  
  
 返回的值调用<xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>基于的的行为。 <xref:System.Xaml.XamlType> <xref:System.Xaml.Schema.XamlTypeInvoker>  
  
 返回值`null` <xref:System.Xaml.Schema.XamlTypeInvoker>针对的是基于未知<xref:System.Xaml.XamlType>的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现的 <see cref="T:System.ComponentModel.TypeConverter" /> 时使用的处理程序。</summary>
        <value>一个处理此情况的处理程序实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件处理程序基于<xref:System.EventHandler%601> <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据的约束。  
  
 返回的值调用<xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>基于的的行为。 <xref:System.Xaml.XamlType> <xref:System.Xaml.Schema.XamlTypeInvoker>  
  
 返回值`null` <xref:System.Xaml.Schema.XamlTypeInvoker>针对的是基于未知<xref:System.Xaml.XamlType>的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
        <value>一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 system.exception 定义的 API <xref:System.Xaml.Schema.XamlTypeInvoker>的参数提供此值通常会导致调用的代码引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

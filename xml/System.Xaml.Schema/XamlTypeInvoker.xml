<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72072e8653351184162571e5947209dee435f820" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64175120" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个扩展点，该扩展点可通过除反射和构造函数之外的其他技术来构造 XAML 类型的实例。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目的<xref:System.Xaml.Schema.XamlTypeInvoker>是一个可扩展的 XAML 类型系统、 架构和一个有效的运行时不依赖于完全 CLR 功能，例如 CLR 特性，通过反射信息能够<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。 子类<xref:System.Xaml.Schema.XamlTypeInvoker>用作输入参数的 XAML 架构类的备用构造函数如<xref:System.Xaml.XamlType>。 创建子类<xref:System.Xaml.XamlType>，并将传递<xref:System.Xaml.Schema.XamlTypeInvoker>通过向基构造函数。 以及定义<xref:System.Xaml.Schema.XamlTypeInvoker>的构造函数中，你还必须提供替代至少一部分`Lookup`方法的<xref:System.Xaml.XamlType>。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 具有默认实现。 默认实现遵循类似的模型的默认实现的 XAML 架构类型到<xref:System.Xaml.XamlType>并<xref:System.Xaml.XamlMember>: CLR 类型系统用于实例化、 值和查找操作，包括使用 CLR 属性<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 提供基本实例化的方法 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 和相关的类型的方法，<xref:System.Xaml.XamlType>表示集合、 字典或数组 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现为空。  
  
 在内部调用此构造函数提供的值<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>。 有关<xref:System.Xaml.Schema.XamlTypeInvoker>子类，应可以使用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>构造签名或提供重写调用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>作为基类。 提供<xref:System.Xaml.XamlType>实现默认模式 where<xref:System.Xaml.Schema.XamlTypeInvoker>是固定不变。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">与此 <see cref="T:System.Xaml.XamlType" /> 相关的特定 XAML 类型的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
        <summary>基于提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此构造函数在内部根据<xref:System.Xaml.XamlType>其中<xref:System.Xaml.Schema.XamlTypeInvoker>用于构造。 `type`本文提供与所有其他方法调用的<xref:System.Xaml.Schema.XamlTypeInvoker>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <param name="item">要添加的项。</param>
        <summary>将所提供的项添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只应在调用此方法<xref:System.Xaml.XamlType>表示集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
在其相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括调用内部帮助程序<c>ThrowIfUnknown</c>。 此帮助器的情况下总是会引发位置<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。  
  
在内部，基实现调用<see cref="P:System.Xaml.XamlType.IsCollection" />，如果结果是，则引发<see langword="false" />。  
  
基实现不一定使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />实现。 首先，将强制转换<paramref name="instance" />到<see cref="T:System.Collections.IList" />尝试。 如果成功，调用<see cref="M:System.Collections.IList.Add(System.Object)" />进行并且该方法返回。 否则，基实现将使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />来调用基础<see langword="Add" />方法，如通过调用获取<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。  
  
在此级别的基实现中引发任何异常<paramref name="item" />是<see langword="null" />。 仍有可能，基础<see langword="Add" />方法将引发异常时调用。 可使用其他运行的时异常如果<see cref="P:System.Xaml.XamlType.ItemType" />不返回有效的结果。</para></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <param name="key">要添加的项的字典键。</param>
        <param name="item">要添加的项值。</param>
        <summary>将所提供的密钥和项值添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只应在调用此方法<xref:System.Xaml.XamlType>表示字典。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
已在其相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括调用内部帮助程序<c>ThrowIfUnknown</c>。 此帮助器的情况下总是会引发位置<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。  
  
在内部，基实现调用<see cref="P:System.Xaml.XamlType.IsDictionary" />，如果结果是，则引发<see langword="false" />。  
  
基实现不一定使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />实现。 首先，将强制转换<paramref name="instance" />到<see cref="T:System.Collections.IDictionary" />尝试。 如果成功，调用<see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />进行并且该方法返回。 否则，基实现将使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />来调用基础<see langword="Add" />方法，如通过调用获取<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。  
  
在此级别的基实现中引发任何异常<paramref name="item" />或<paramref name="key" />是<see langword="null" />。 仍有可能，基础<see langword="Add" />方法将引发异常时调用。 可使用其他运行的时异常如果<see cref="P:System.Xaml.XamlType.ItemType" />不返回有效的结果。</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">一个对象数组，这些对象为实例提供 <see langword="x:ConstructorArgs" />。 对于不需要或者不使用 <see langword="null" /> 的类型可能为 <see langword="x:ConstructorArgs" />。</param>
        <summary>基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 创建对象实例。</summary>
        <returns>基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所创建的实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">未能解析构造函数。</exception>
        <block subset="none" type="overrides"><para>基实现包括调用内部帮助程序<c>ThrowIfUnknown</c>。 此帮助器的情况下总是会引发位置<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><see langword="Add" /> 方法所使用的项类型的 <see cref="T:System.Xaml.XamlType" />。</param>
        <summary>返回与集合或字典相关的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的相关 <see langword="Add" /> 方法。</summary>
        <returns><see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 信息，或为 NULL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法应返回`null`的情况下，<xref:System.Xaml.XamlType>此<xref:System.Xaml.Schema.XamlTypeInvoker>不是可写集合或字典。 具体而言，应返回`null`的情况下，<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>返回`None`。  
  
> [!IMPORTANT]
>  如果你没有访问完全受信任的 XAML 类型系统，此方法有可能对报告虚假<xref:System.Reflection.MethodInfo>向调用方的信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现返回<see langword="null" />的情况下，<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。 它还会返回<see langword="null" />如果<see cref="P:System.Xaml.XamlType.ItemType" />是<see langword="null" />。  
  
XAML 集合可能有多个<see langword="Add" />方法，因为 XAML 集合可能可以支持多个内容类型 (请参阅<see cref="P:System.Xaml.XamlType.AllowedContentTypes" />，或参阅<see cref="T:System.Windows.Markup.ContentWrapperAttribute" />了解这一概念在 WPF 中的一种实现)。 默认实现使用内部逻辑，返回根据签名和所提供的类型的最佳匹配项<paramref name="contentType" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个对象，该对象表示可对项进行枚举的方法。</summary>
        <returns>枚举器方法的 <see cref="T:System.Reflection.MethodInfo" />，或为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应返回`null`的情况下，<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType>返回`None`。  
  
> [!IMPORTANT]
>  如果你没有访问完全受信任的 XAML 类型系统，此方法有可能对报告虚假<xref:System.Reflection.MethodInfo>向调用方的信息。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>基实现调用内部帮助器方法。 该帮助器返回<see langword="null" />的情况下，<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。 它还会返回<see langword="null" />的情况下，<see cref="M:System.Xaml.XamlType.LookupCollectionKind" />返回<see langword="None" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
        <summary>返回一个表示项集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，或为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  
  
 - 或 -  
  
在相关类型不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instance" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>基实现包括调用内部帮助程序<c>ThrowIfUnknown</c>。 此帮助器的情况下总是会引发位置<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />基于未知<see cref="T:System.Xaml.XamlType" />，其中包括事例<see cref="P:System.Xaml.XamlType.UnderlyingType" />的<see cref="T:System.Xaml.XamlType" />是<see langword="null" />。  
  
基实现不一定使用其自己<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />实现。 首先，将强制转换<paramref name="instance" />到<see cref="T:System.Collections.IEnumerable" />尝试。 如果成功，调用<see cref="M:System.Collections.IEnumerable.GetEnumerator" />由方法返回的返回值。 否则，基实现将使用 CLR<see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" />来调用基础<see langword="GetEnumerator" />方法，如通过调用获取<see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />此<paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 时使用的处理程序。</summary>
        <value>一个处理此情况的处理程序实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件处理程序基于<xref:System.EventHandler%601>限制而<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据。  
  
 返回的值调用<xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>的行为<xref:System.Xaml.XamlType>的<xref:System.Xaml.Schema.XamlTypeInvoker>为基础。  
  
 返回值是`null`有关<xref:System.Xaml.Schema.XamlTypeInvoker>基于未知<xref:System.Xaml.XamlType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现的 <see cref="T:System.ComponentModel.TypeConverter" /> 时使用的处理程序。</summary>
        <value>一个处理此情况的处理程序实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件处理程序基于<xref:System.EventHandler%601>限制而<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据。  
  
 返回的值调用<xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>的行为<xref:System.Xaml.XamlType>的<xref:System.Xaml.Schema.XamlTypeInvoker>为基础。  
  
 返回值是`null`有关<xref:System.Xaml.Schema.XamlTypeInvoker>基于未知<xref:System.Xaml.XamlType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
        <value>一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为此值提供<xref:System.Xaml.Schema.XamlTypeInvoker>System.Xaml 参数定义 API 通常会导致调用的代码引发异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
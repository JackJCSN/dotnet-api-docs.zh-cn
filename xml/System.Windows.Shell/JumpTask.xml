<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7c6d46e716ec5eaa57c9e39139af9303f0c0b42c" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64192124" /></Metadata><TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示某应用程序在 Windows 7 任务栏跳转列表中的快捷方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Windows.Shell.JumpTask>可视为应用程序的快捷方式。 通过设置指定的可执行文件的路径<xref:System.Windows.Shell.JumpTask.ApplicationPath%2A>属性。 如果<xref:System.Windows.Shell.JumpTask.ApplicationPath%2A>未设置，则暗示当前正在运行的进程的路径。 您可以选择指定<xref:System.Windows.Shell.JumpTask.Arguments%2A>要传递给在启动应用程序。  
  
 你可以设置基本显示属性，如<xref:System.Windows.Shell.JumpTask.Title%2A>， <xref:System.Windows.Shell.JumpTask.Description%2A>，和<xref:System.Windows.Shell.JumpTask.IconResourcePath%2A>跳转列表中指定任务的外观。 与一起使用的图标<xref:System.Windows.Shell.JumpTask>必须可用作本机资源。 如果多个图标资源的 DLL 或可执行文件中，指定是要使用通过指示中的偏移量<xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A>属性。  
  
 默认情况下<xref:System.Windows.Shell.JumpTask>将被放入**任务**跳转列表的类别。 可以通过设置指定的任务的自定义分组<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>属性。  
  
 通过创建来直观地分隔跳转列表中的项<xref:System.Windows.Shell.JumpTask>不具有<xref:System.Windows.Shell.JumpTask.Title%2A>和<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>指定。 此空<xref:System.Windows.Shell.JumpTask>将显示为一条水平线跳转列表中。 在这种情况下，可以设置其他属性，但它们没有任何影响。  
  
   
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 下面的示例演示如何配置<xref:System.Windows.Shell.JumpTask>在代码中。 <xref:System.Windows.Shell.JumpTask>打开计算器应用程序。  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Shell.JumpTask" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序的路径。</summary>
        <value>应用程序的路径。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Shell.JumpTask.ApplicationPath%2A>属性未指定，则为隐式端口当前正在运行的进程的路径。 应用程序可以包含非自身的可执行文件的任务。  
  
   
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 下面的示例演示如何配置<xref:System.Windows.Shell.JumpTask>在代码中。 <xref:System.Windows.Shell.JumpTask>打开计算器应用程序。  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置启动时要传递给应用程序的参数。</summary>
        <value>启动时要传递给应用程序的参数。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置针对跳转列表中的任务在工具提示中显示的文本。</summary>
        <value>针对任务在工具提示中显示的文本。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 下面的示例演示如何配置<xref:System.Windows.Shell.JumpTask>在代码中。 <xref:System.Windows.Shell.JumpTask>打开计算器应用程序。  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置嵌入在资源中的图标的索引，索引从零开始。</summary>
        <value>图标的从零开始的索引；如果未使用图标，则为 -1。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与一起使用的图标<xref:System.Windows.Shell.JumpTask>必须可用作本机资源。 如果 DLL 或可执行文件中提供了多个图标，指定是要使用通过指示中的偏移量<xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A>属性。  
  
 如果未不指定任何图标资源，或者如果找不到指定的图标，将显示标准系统图标。 若要指定将显示任何图标，设置<xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A>属性设置为-1。  
  
   
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置资源的路径，该资源包含要在跳转列表中显示的图标。</summary>
        <value>包含图标的资源的路径。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与一起使用的图标<xref:System.Windows.Shell.JumpTask>必须可用作本机资源。 如果 DLL 或可执行文件中提供了多个图标，指定是要使用通过指示中的偏移量<xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A>属性。  
  
 如果未不指定任何图标资源，或者如果找不到指定的图标，将显示标准系统图标。 若要指定将显示任何图标，设置<xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A>属性设置为-1。  
  
   
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 下面的示例演示如何配置<xref:System.Windows.Shell.JumpTask>在代码中。 <xref:System.Windows.Shell.JumpTask>打开计算器应用程序。  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置针对跳转列表中的任务显示的文本。</summary>
        <value>针对跳转列表中的任务显示的文本。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Windows.Shell.JumpTask.Title%2A>属性必须设置为<xref:System.Windows.Shell.JumpTask>才会出现在跳转列表作为可单击的任务。  
  
 或者，你以可视方式可以通过创建分隔跳转列表中的项<xref:System.Windows.Shell.JumpTask>不具有<xref:System.Windows.Shell.JumpTask.Title%2A>和<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>指定。 此空<xref:System.Windows.Shell.JumpTask>将显示为一条水平线跳转列表中。 在这种情况下，可以设置其他属性，但它们没有任何影响。  
  
   
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>打开文本文件名称`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 下面的示例演示如何配置<xref:System.Windows.Shell.JumpTask>在代码中。 <xref:System.Windows.Shell.JumpTask>打开计算器应用程序。  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置启动时应用程序的工作目录。</summary>
        <value>启动时应用程序的工作目录。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何声明<xref:System.Windows.Shell.JumpTask>标记中。 <xref:System.Windows.Shell.JumpTask>将打开一个名为文本文件`readme.txt`记事本应用程序中。  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
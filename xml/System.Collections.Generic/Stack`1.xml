<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2409c164a0ca9c6c66b0ade4f4206bf45a23a4d9" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63908333" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="cb55d-101">指定堆栈中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="cb55d-101">Specifies the type of elements in the stack.</span></span></typeparam>
    <summary><span data-ttu-id="cb55d-102">表示相同指定类型的实例可变大小的后进先出 (LIFO) 集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-103"><xref:System.Collections.Generic.Stack%601> 作为数组实现。</span><span class="sxs-lookup"><span data-stu-id="cb55d-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="cb55d-104">堆栈和队列都是有用的信息; 需要临时存储时即当您可能想要检索其值后，放弃元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="cb55d-105">使用<xref:System.Collections.Generic.Queue%601>如果需要访问存储在集合中的相同顺序中的信息。</span><span class="sxs-lookup"><span data-stu-id="cb55d-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="cb55d-106">使用<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>如果你需要按相反的顺序访问的信息。</span><span class="sxs-lookup"><span data-stu-id="cb55d-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="cb55d-107">使用<xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType>和<xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType>类型需要同时从多个线程访问集合时。</span><span class="sxs-lookup"><span data-stu-id="cb55d-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="cb55d-108">一个常见用途<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>是在对其他过程的调用过程中保留变量状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="cb55d-109">可以对执行三个主要操作<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>及其元素：</span><span class="sxs-lookup"><span data-stu-id="cb55d-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="cb55d-110"><xref:System.Collections.Generic.Stack%601.Push%2A> 在顶部插入一个元素<xref:System.Collections.Stack>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="cb55d-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> 从顶部移除一个元素<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="cb55d-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> 返回位于顶部的元素<xref:System.Collections.Generic.Stack%601>但不会删除从<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-113">容量<xref:System.Collections.Generic.Stack%601>是元素数目<xref:System.Collections.Generic.Stack%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cb55d-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="cb55d-114">元素添加到<xref:System.Collections.Generic.Stack%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="cb55d-115">可以通过调用减少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-116">如果<xref:System.Collections.Generic.Stack%601.Count%2A>是在堆栈的容量小于<xref:System.Collections.Generic.Stack%601.Push%2A>是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cb55d-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="cb55d-117">如果需要增加以容纳新元素，容量<xref:System.Collections.Generic.Stack%601.Push%2A>会成为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="cb55d-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> 是 o （1） 的操作。</span><span class="sxs-lookup"><span data-stu-id="cb55d-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="cb55d-119"><xref:System.Collections.Generic.Stack%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-120">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cb55d-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="cb55d-121">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-122">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-123"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-124"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-126">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-127">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-129"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="cb55d-130">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员是线程安全。</span><span class="sxs-lookup"><span data-stu-id="cb55d-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="cb55d-131">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="cb55d-131">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="cb55d-132">一个<see cref="T:System.Collections.Generic.Stack`1" />，只要不修改该集合可以同时支持多个读取器。</span><span class="sxs-lookup"><span data-stu-id="cb55d-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="cb55d-133">即便如此，枚举整个集合本质上不是线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="cb55d-134">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-135">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="cb55d-136">迭代器（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="cb55d-136">Iterators (C# and Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cb55d-137">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cb55d-137">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-138">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。</span><span class="sxs-lookup"><span data-stu-id="cb55d-138">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-139">容量<xref:System.Collections.Generic.Stack%601>是元素数目的<xref:System.Collections.Generic.Stack%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cb55d-139">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="cb55d-140">元素添加到<xref:System.Collections.Generic.Stack%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-140">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cb55d-141">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-141">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-142">可以通过调用减少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-142">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-143">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cb55d-143">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-144">下面的代码示例演示了此构造函数和多个方法的<xref:System.Collections.Generic.Stack%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cb55d-144">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="cb55d-145">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-145">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-146">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-146">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-147"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-147">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-148"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-148">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-149"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-149">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-150">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-150">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-151">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-151">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-152"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-152">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-153"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-153">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="cb55d-154">从其中复制元素的集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-154">The collection to copy elements from.</span></span></param>
        <summary><span data-ttu-id="cb55d-155">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-155">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-156">容量<xref:System.Collections.Generic.Stack%601>是元素数目的<xref:System.Collections.Generic.Stack%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cb55d-156">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="cb55d-157">元素添加到<xref:System.Collections.Generic.Stack%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-157">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cb55d-158">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-158">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-159">可以通过调用减少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-159">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-160">将元素复制到<xref:System.Collections.Generic.Stack%601>按相同顺序读取这些<xref:System.Collections.Generic.IEnumerator%601>的集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-160">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="cb55d-161">此构造函数是 O (`n`) 操作，其中`n`是中的元素数`collection`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-161">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-162">下面的代码示例演示了此构造函数和多个方法的<xref:System.Collections.Generic.Stack%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="cb55d-162">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="cb55d-163">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-163">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-164">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-164">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-165"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-165">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-166"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-166">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-167"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-167">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-168">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-168">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-169">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-169">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-170"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-170">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-171"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-171">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb55d-172"><paramref name="collection" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-172"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="cb55d-173"><see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-173">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="cb55d-174">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</span><span class="sxs-lookup"><span data-stu-id="cb55d-174">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-175">容量<xref:System.Collections.Generic.Stack%601>是元素数目的<xref:System.Collections.Generic.Stack%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="cb55d-175">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="cb55d-176">元素添加到<xref:System.Collections.Generic.Stack%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-176">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="cb55d-177">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-177">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-178">可以通过调用减少容量<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-178">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-179">此构造函数是 O (`n`) 操作，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-179">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cb55d-180"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="cb55d-180"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-181">从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-181">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-182"><xref:System.Collections.Generic.Stack%601.Count%2A> 已设置为零，并且对其他对象的集合的元素也被释放。</span><span class="sxs-lookup"><span data-stu-id="cb55d-182"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="cb55d-183">容量保持不变。</span><span class="sxs-lookup"><span data-stu-id="cb55d-183">The capacity remains unchanged.</span></span> <span data-ttu-id="cb55d-184">若要重置的容量<xref:System.Collections.Generic.Stack%601>，调用<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-184">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="cb55d-185">截去空<xref:System.Collections.Generic.Stack%601>的容量设置<xref:System.Collections.Generic.Stack%601>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="cb55d-185">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="cb55d-186">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-186">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-187">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Clear%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-187">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-188">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-188">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-189">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-189">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-190"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-190">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-191"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-191">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-192"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-192">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-193">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-193">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-194">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-194">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-195"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-195">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-196"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-196">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cb55d-197">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-197">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="cb55d-198">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-198">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="cb55d-199">确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</span><span class="sxs-lookup"><span data-stu-id="cb55d-199">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="cb55d-200">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Stack`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-200"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-201">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="cb55d-201">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="cb55d-202">此方法执行线性搜索;因此，此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-202">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-203">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Contains%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-203">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-204">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-204">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-205">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-205">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-206"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-206">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-207"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-207">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-208"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-208">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-209">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-209">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-210">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-210">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-211"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-211">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-212"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-212">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="cb55d-213">在集合中执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="cb55d-213">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cb55d-214">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="cb55d-214">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="cb55d-215"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="cb55d-215">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="cb55d-216"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-216">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="cb55d-217">从指定数组索引开始将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到现有一维 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="cb55d-217">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-218">将元素复制到数组中先出 (LIFO) 顺序，由一系列调用返回的元素的顺序类似<xref:System.Collections.Generic.Stack%601.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-218">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-219">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-219">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-220">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-220">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-221">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-221">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-222">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-222">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-223"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-223">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-224"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-224">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-225"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-225">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-226">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-226">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-227">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-227">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-228"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-228">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-229"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-229">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb55d-230"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-230"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cb55d-231"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="cb55d-231"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cb55d-232">源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="cb55d-232">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb55d-233">获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-233">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <value><span data-ttu-id="cb55d-234"><see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-234">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-235">容量<xref:System.Collections.Generic.Stack%601>是元素数目的<xref:System.Collections.Generic.Stack%601>可以存储。</span><span class="sxs-lookup"><span data-stu-id="cb55d-235">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="cb55d-236"><xref:System.Collections.Generic.Stack%601.Count%2A> 是中的实际的元素数目<xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-236"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-237">容量始终是大于或等于<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-237">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="cb55d-238">如果<xref:System.Collections.Generic.Stack%601.Count%2A>添加元素时超过容量，容量会增加通过在复制旧元素和添加新元素之前自动重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-238">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="cb55d-239">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cb55d-239">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-240">下面的代码示例演示了几个属性和方法<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Count%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="cb55d-240">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="cb55d-241">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-241">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-242">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-242">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-243"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-243">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-244"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-244">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-245"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-245">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-246">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-247">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-247">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-248"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-248">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-249"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-249">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-250">返回 <see cref="T:System.Collections.Generic.Stack`1" /> 的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-250">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="cb55d-251"><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的一个 <see cref="T:System.Collections.Generic.Stack`1" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-251">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-252">`foreach`语句的C#语言 (`for each`中C++，`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="cb55d-252">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="cb55d-253">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-253">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="cb55d-254">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-254">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="cb55d-255">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="cb55d-255">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="cb55d-256">在此位置上，未定义 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-256">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-257">因此，在读取 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-257">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-258">在调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-258"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="cb55d-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="cb55d-260">如果<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-260">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="cb55d-261">当枚举数位于此位置上，对后续调用<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-261">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="cb55d-262">如果最后一次调用到<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="cb55d-262">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-263">无法再次将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="cb55d-263">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="cb55d-264">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="cb55d-264">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="cb55d-265">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-265">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="cb55d-266">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-266">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="cb55d-267">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-267">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-268">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-268">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cb55d-269">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-269">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="cb55d-270">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cb55d-270">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-271">下面的代码示例演示<xref:System.Collections.Generic.Stack%601>泛型类是可枚举。</span><span class="sxs-lookup"><span data-stu-id="cb55d-271">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="cb55d-272">`foreach`语句 (`For Each`在 Visual Basic`for each`在C++) 用于枚举队列。</span><span class="sxs-lookup"><span data-stu-id="cb55d-272">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="cb55d-273">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-273">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-274">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-274">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-275"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-275">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-276"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-276">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-277"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-277">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-278">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-278">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-279">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-279">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-280"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-280">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-281"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-281">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-282">返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象但不将其移除。</span><span class="sxs-lookup"><span data-stu-id="cb55d-282">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="cb55d-283">位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-283">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-284">此方法类似于 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-284">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-285">如果类型`T`是引用类型，`null`可以被推送到<xref:System.Collections.Generic.Stack%601>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cb55d-285">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="cb55d-286">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cb55d-286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-287">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Peek%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-287">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-288">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-288">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-289">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-289">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-290"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-290">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-291"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-291">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-292"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-292">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-293">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-293">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-294">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-294">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-295"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-295">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-296"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-296">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cb55d-297"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-297">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-298">移除并返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-298">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="cb55d-299">从 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部移除的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-299">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-300">此方法类似于 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-300">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="cb55d-301">如果类型`T`是引用类型，`null`可以被推送到<xref:System.Collections.Generic.Stack%601>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cb55d-301">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="cb55d-302"><xref:System.Collections.Generic.Stack%601> 作为数组实现。</span><span class="sxs-lookup"><span data-stu-id="cb55d-302"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="cb55d-303">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cb55d-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-304">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Pop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-305">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-305">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-306">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-306">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-307"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-307">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-308"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-308">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-309"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-309">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-310">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-311">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-311">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-312"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-312">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-313"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-313">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cb55d-314"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-314">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cb55d-315">要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-315">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="cb55d-316">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-316">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="cb55d-317">将对象插入 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部。</span><span class="sxs-lookup"><span data-stu-id="cb55d-317">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-318"><xref:System.Collections.Generic.Stack%601> 作为数组实现。</span><span class="sxs-lookup"><span data-stu-id="cb55d-318"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="cb55d-319">如果<xref:System.Collections.Generic.Stack%601.Count%2A>已经等于容量的容量<xref:System.Collections.Generic.Stack%601>自动重新分配内部数组中，增加和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="cb55d-319">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="cb55d-320">如果类型`T`是引用类型，`null`可以被推送到<xref:System.Collections.Generic.Stack%601>作为占位符，如有需要。</span><span class="sxs-lookup"><span data-stu-id="cb55d-320">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="cb55d-321">它占用堆栈中的槽，并且都被视为任何对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-321">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="cb55d-322">如果<xref:System.Collections.Generic.Stack%601.Count%2A>是在堆栈的容量小于<xref:System.Collections.Generic.Stack%601.Push%2A>是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="cb55d-322">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="cb55d-323">如果需要增加以容纳新元素，容量<xref:System.Collections.Generic.Stack%601.Push%2A>会成为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-323">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-324">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.Push%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-324">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-325">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-325">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-326">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-326">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-327"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-327">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-328"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-328">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-329"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-329">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-330">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-330">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-331">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-331">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-332"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-332">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-333"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-333">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-334">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="cb55d-334">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="cb55d-335">可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-335">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-336">`foreach`语句的C#语言 (`for each`中C++，`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="cb55d-336">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="cb55d-337">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-337">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="cb55d-338">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-338">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="cb55d-339">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="cb55d-339">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="cb55d-340">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-340">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-341">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-341">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-342">在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-342"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="cb55d-343"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-343"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="cb55d-344">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-344">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="cb55d-345">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-345">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="cb55d-346">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="cb55d-346">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-347">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="cb55d-347">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="cb55d-348">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="cb55d-348">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="cb55d-349">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-349">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="cb55d-350">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-350">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="cb55d-351">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-351">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-352">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-352">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cb55d-353">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-353">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="cb55d-354">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cb55d-354">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cb55d-355">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="cb55d-355">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="cb55d-356"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="cb55d-356">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="cb55d-357"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-357">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="cb55d-358">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="cb55d-358">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cb55d-359">如果源的类型<xref:System.Collections.ICollection>不能自动强制转换为目标的类型`array`的非泛型实现<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>引发<xref:System.InvalidCastException>，而泛型实现会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-359">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="cb55d-360">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-360">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb55d-361"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-361"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cb55d-362"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="cb55d-362"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cb55d-363"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="cb55d-363"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="cb55d-364">- 或 -</span><span class="sxs-lookup"><span data-stu-id="cb55d-364">-or-</span></span> 
 <span data-ttu-id="cb55d-365"><paramref name="array" /> 没有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="cb55d-365"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="cb55d-366">- 或 -</span><span class="sxs-lookup"><span data-stu-id="cb55d-366">-or-</span></span> 
<span data-ttu-id="cb55d-367">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="cb55d-367">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="cb55d-368">- 或 -</span><span class="sxs-lookup"><span data-stu-id="cb55d-368">-or-</span></span> 
<span data-ttu-id="cb55d-369">无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="cb55d-369">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb55d-370">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="cb55d-370">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="cb55d-371">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-371"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="cb55d-372">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-372">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-373">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-373">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="cb55d-374">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-374">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="cb55d-375">枚举与写访问的争用的极少数情况下，必须锁定在整个枚举期间的集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-375">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-376">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-376">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cb55d-377"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-377"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="cb55d-378">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="cb55d-378">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="cb55d-379">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cb55d-379">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb55d-380">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-380">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="cb55d-381">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-381">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="cb55d-382">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。</span><span class="sxs-lookup"><span data-stu-id="cb55d-382">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-383">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-383">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="cb55d-384">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-384">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="cb55d-385">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-385">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-386">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-386">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cb55d-387"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-387"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="cb55d-388">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="cb55d-388">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="cb55d-389">下面的代码演示如何使用<xref:System.Collections.ICollection.SyncRoot%2A>属性C#， C++，和 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="cb55d-389">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="cb55d-390">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="cb55d-390">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-391">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-391">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="cb55d-392">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="cb55d-392">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-393">`foreach`语句的C#语言 (`for each`中C++，`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="cb55d-393">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="cb55d-394">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-394">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="cb55d-395">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-395">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="cb55d-396">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="cb55d-396">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="cb55d-397"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="cb55d-397"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="cb55d-398">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-398">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-399">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-399">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-400">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="cb55d-400"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="cb55d-401"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-401"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="cb55d-402">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-402">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="cb55d-403">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="cb55d-403">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="cb55d-404">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="cb55d-404">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="cb55d-405">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-405">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-406">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="cb55d-406">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="cb55d-407">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-407">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="cb55d-408">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="cb55d-408">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="cb55d-409">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-409">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="cb55d-410">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-410">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="cb55d-411">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="cb55d-411">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="cb55d-412">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="cb55d-412">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-413">将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到新数组中。</span><span class="sxs-lookup"><span data-stu-id="cb55d-413">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="cb55d-414">新数组，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素的副本。</span><span class="sxs-lookup"><span data-stu-id="cb55d-414">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-415">将元素复制到数组中先出 (LIFO) 顺序，由一系列调用返回的元素的顺序类似<xref:System.Collections.Generic.Stack%601.Pop%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-415">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-416">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-416">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb55d-417">下面的代码示例演示了几种方法的<xref:System.Collections.Generic.Stack%601>泛型类，其中包括<xref:System.Collections.Generic.Stack%601.ToArray%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-417">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="cb55d-418">代码示例创建字符串的堆栈具有默认容量，并使用<xref:System.Collections.Generic.Stack%601.Push%2A>方法推送到堆栈上的五个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-418">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="cb55d-419">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="cb55d-419">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="cb55d-420"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="cb55d-420">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="cb55d-421"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用来在堆栈中，查看下一项，然后<xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出。</span><span class="sxs-lookup"><span data-stu-id="cb55d-421">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="cb55d-422"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组并将堆栈元素复制到它，然后，该数组传递给<xref:System.Collections.Generic.Stack%601.%23ctor%2A>构造函数采用<xref:System.Collections.Generic.IEnumerable%601>，创建一份堆栈与元素的顺序反转。</span><span class="sxs-lookup"><span data-stu-id="cb55d-422">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="cb55d-423">显示复制的元素。</span><span class="sxs-lookup"><span data-stu-id="cb55d-423">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="cb55d-424">两次的堆栈大小将创建一个数组，和<xref:System.Collections.Generic.Stack%601.CopyTo%2A>方法用于将数组元素数组的中间开始复制。</span><span class="sxs-lookup"><span data-stu-id="cb55d-424">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="cb55d-425"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数以使用反转的元素的顺序创建的堆栈副本; 因此，三个 null 元素位于结尾处。</span><span class="sxs-lookup"><span data-stu-id="cb55d-425">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="cb55d-426"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串"four"在堆栈上，第一个副本<xref:System.Collections.Generic.Stack%601.Clear%2A>方法将清除复制和<xref:System.Collections.Generic.Stack%601.Count%2A>属性将显示在堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="cb55d-426">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb55d-427">如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="cb55d-427">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb55d-428">此方法可用于最小化集合的内存开销如果任何新元素将不添加到集合。</span><span class="sxs-lookup"><span data-stu-id="cb55d-428">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="cb55d-429">重新分配和复制较大的成本<xref:System.Collections.Generic.Stack%601>但是，有时会很大，因此<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>方法不会执行任何操作，如果列表为在多个容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="cb55d-429">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="cb55d-430">这样可以避免产生相对较小增益的大型的重新分配费用。</span><span class="sxs-lookup"><span data-stu-id="cb55d-430">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="cb55d-431">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.Stack%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="cb55d-431">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="cb55d-432">若要重置<xref:System.Collections.Generic.Stack%601>为其初始状态，请在调用<xref:System.Collections.Generic.Stack%601.Clear%2A>方法之前调用<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="cb55d-432">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="cb55d-433">截去空<xref:System.Collections.Generic.Stack%601>的容量设置<xref:System.Collections.Generic.Stack%601>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="cb55d-433">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
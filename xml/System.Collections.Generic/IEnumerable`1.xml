<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a15e40f8b5fcfba97f002f47821b6cc779cd08c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69334995" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">要枚举的对象的类型。</typeparam>
    <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601><xref:System.Collections.Generic>命名空间中的集合的基接口<xref:System.Collections.Generic.List%601>, 如、 <xref:System.Collections.ObjectModel.ObservableCollection%601> <xref:System.Collections.Generic.Dictionary%602>、和<xref:System.Collections.Generic.Stack%601>其他泛型集合 (如和<xref:System.Collections.Concurrent.ConcurrentStack%601>)。 <xref:System.Collections.Generic.IEnumerable%601> 可以`foreach`使用语句来枚举实现的集合。  
  
 有关此接口的非泛型版本, 请参阅<xref:System.Collections.IEnumerable?displayProperty=nameWithType>。  
  
 <xref:System.Collections.Generic.IEnumerable%601>包含实现此接口时必须实现的单个方法;<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>,它<xref:System.Collections.Generic.IEnumerator%601>返回对象。 返回<xref:System.Collections.Generic.IEnumerator%601>的功能通过<xref:System.Collections.Generic.IEnumerator%601.Current%2A>公开属性来循环访问集合。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口以及如何使用该实现创建 LINQ 查询。 实现<xref:System.Collections.Generic.IEnumerable%601>时, 还必须实现<xref:System.Collections.Generic.IEnumerator%601>或, 只能对C#使用[yield](~/docs/csharp/language-reference/keywords/yield.md)关键字。 还<xref:System.Collections.Generic.IEnumerator%601> 需要<xref:System.IDisposable>实现实现, 这将在本示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关演示C#如何实现<xref:System.Collections.Generic.IEnumerable%601>接口的另一个示例, 请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用关键字`yield` , 而不是<xref:System.Collections.Generic.IEnumerator%601>实现。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />包含, 用于与非泛型集合进行奇偶校验;实现<see cref="T:System.Collections.Generic.IEnumerable`1" />允许将泛型集合传递到<see cref="T:System.Collections.IEnumerable" />需要对象的方法。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器（C# 和 Visual Basic）</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">泛型示例</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个循环访问集合的枚举器。</summary>
        <returns>用于循环访问集合的枚举数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回<xref:System.Collections.Generic.IEnumerator%601>的功能通过<xref:System.Collections.Generic.IEnumerator%601.Current%2A>公开属性来循环访问集合。您可以使用枚举器读取集合中的数据, 但不能修改该集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。 因此, 在读取的<xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.Generic.IEnumerator%601.Current%2A>值之前, 必须调用方法, 以将枚举器前进到集合的第一个元素。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>返回相同的对象, <xref:System.Collections.IEnumerator.MoveNext%2A>直到再次调用以<xref:System.Collections.IEnumerator.MoveNext%2A>将<xref:System.Collections.Generic.IEnumerator%601.Current%2A>设置为下一个元素。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合的末尾, 则枚举器将定位在集合中最后一个元素之后, 并<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。 当枚举器位于此位置时, 对<xref:System.Collections.IEnumerator.MoveNext%2A>的后续调用也将返回。 `false` 如果最后一次调用<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A>则未定义。 无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。  

 如果对集合所做的更改 (如添加、修改或删除元素), 则枚举器的行为是不确定的。  
  
 枚举器没有对集合的独占访问权限, 因此只要集合保持不变, 枚举数就会保持有效。 如果对集合进行了更改 (如添加、修改或删除元素), 则枚举器会失效, 你可能会收到意外的结果。 此外, 枚举集合不是线程安全的过程。 若要确保线程安全, 应在枚举器期间锁定集合, 或在集合上实现同步。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType>命名空间中集合的默认实现不会同步。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口, 并使用该实现创建 LINQ 查询。 实现<xref:System.Collections.Generic.IEnumerable%601>时, 还必须实现<xref:System.Collections.Generic.IEnumerator%601>或, 只能对C#使用[yield](~/docs/csharp/language-reference/keywords/yield.md)关键字。 还<xref:System.Collections.Generic.IEnumerator%601> 需要<xref:System.IDisposable>实现实现, 这将在本示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关演示C#如何实现<xref:System.Collections.Generic.IEnumerable%601>接口的另一个示例, 请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用`yield`关键字而不是实现<xref:System.Collections.Generic.IEnumerator%601>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器（C# 和 Visual Basic）</related>
      </Docs>
    </Member>
  </Members>
</Type>

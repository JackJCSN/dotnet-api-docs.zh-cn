<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a15e40f8b5fcfba97f002f47821b6cc779cd08c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70498793" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="4e5c6-101">要枚举的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-101">The type of objects to enumerate.</span></span></typeparam>
    <summary><span data-ttu-id="4e5c6-102">公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-102">Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e5c6-103"><xref:System.Collections.Generic.IEnumerable%601><xref:System.Collections.Generic>命名空间中的集合的基接口<xref:System.Collections.Generic.List%601>，如、 <xref:System.Collections.ObjectModel.ObservableCollection%601> <xref:System.Collections.Generic.Dictionary%602>、和<xref:System.Collections.Generic.Stack%601>其他泛型集合（如和<xref:System.Collections.Concurrent.ConcurrentStack%601>）。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-103"><xref:System.Collections.Generic.IEnumerable%601> is the base interface for collections in the <xref:System.Collections.Generic> namespace such as <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, and <xref:System.Collections.Generic.Stack%601> and other generic collections such as <xref:System.Collections.ObjectModel.ObservableCollection%601> and <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span> <span data-ttu-id="4e5c6-104"><xref:System.Collections.Generic.IEnumerable%601> 可以 `foreach` 使用语句来枚举实现的集合。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-104">Collections that implement <xref:System.Collections.Generic.IEnumerable%601> can be enumerated by using the `foreach` statement.</span></span>  
  
 <span data-ttu-id="4e5c6-105">有关此接口的非泛型版本，请参阅<xref:System.Collections.IEnumerable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-105">For the non-generic version of this interface, see <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4e5c6-106"><xref:System.Collections.Generic.IEnumerable%601>包含实现此接口时必须实现的单个方法;<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>，它 <xref:System.Collections.Generic.IEnumerator%601> 返回对象。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-106"><xref:System.Collections.Generic.IEnumerable%601> contains a single method that you must implement when implementing this interface; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, which returns an <xref:System.Collections.Generic.IEnumerator%601> object.</span></span> <span data-ttu-id="4e5c6-107">返回<xref:System.Collections.Generic.IEnumerator%601>的功能通过<xref:System.Collections.Generic.IEnumerator%601.Current%2A>公开属性来循环访问集合。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-107">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e5c6-108">下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口以及如何使用该实现创建 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-108">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and how to use that implementation to create a LINQ query.</span></span> <span data-ttu-id="4e5c6-109">实现<xref:System.Collections.Generic.IEnumerable%601>时，还必须实现<xref:System.Collections.Generic.IEnumerator%601>或，只能对C#使用[yield](~/docs/csharp/language-reference/keywords/yield.md)关键字。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-109">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="4e5c6-110">还<xref:System.Collections.Generic.IEnumerator%601> 需要 <xref:System.IDisposable> 实现实现，这将在本示例中看到。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-110">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="4e5c6-111">有关演示C#如何实现<xref:System.Collections.Generic.IEnumerable%601>接口的另一个示例，请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-111">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="4e5c6-112">此示例使用关键字`yield` ，而不是<xref:System.Collections.Generic.IEnumerator%601>实现。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-112">This sample uses the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="4e5c6-113">
        <see cref="T:System.Collections.Generic.IEnumerable\`1" />包含，用于与非泛型集合进行奇偶校验;实现<see cref="T:System.Collections.Generic.IEnumerable\`1" />允许将泛型集合传递到<see cref="T:System.Collections.IEnumerable" />需要对象的方法。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-113">
        <see cref="T:System.Collections.Generic.IEnumerable\`1" /> is included for parity with non-generic collections; implementing <see cref="T:System.Collections.Generic.IEnumerable\`1" /> allows a generic collection to be passed to a method that expects an <see cref="T:System.Collections.IEnumerable" /> object.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554"><span data-ttu-id="4e5c6-114">演练：在 Visual Basic 中实现 IEnumerable(Of T)</span><span class="sxs-lookup"><span data-stu-id="4e5c6-114">Walkthrough: Implementing IEnumerable(Of T) in Visual Basic</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="4e5c6-115">迭代器（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="4e5c6-115">Iterators (C# and Visual Basic)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593"><span data-ttu-id="4e5c6-116">泛型示例</span><span class="sxs-lookup"><span data-stu-id="4e5c6-116">Generics Sample</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e5c6-117">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-117">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="4e5c6-118">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-118">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e5c6-119">返回<xref:System.Collections.Generic.IEnumerator%601>的功能通过<xref:System.Collections.Generic.IEnumerator%601.Current%2A>公开属性来循环访问集合。您可以使用枚举器读取集合中的数据，但不能修改该集合。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-119">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property .You can use enumerators to read the data in a collection, but not to modify the collection.</span></span>  
  
 <span data-ttu-id="4e5c6-120">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-120">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4e5c6-121">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-121">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="4e5c6-122">因此，在读取的<xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.Generic.IEnumerator%601.Current%2A>值之前，必须调用方法，以将枚举器前进到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-122">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="4e5c6-123"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>返回相同的对象， <xref:System.Collections.IEnumerator.MoveNext%2A>直到再次调用以<xref:System.Collections.IEnumerator.MoveNext%2A>将<xref:System.Collections.Generic.IEnumerator%601.Current%2A>设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-123"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called again as <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4e5c6-124">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-124">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4e5c6-125">当枚举器位于此位置时，对<xref:System.Collections.IEnumerator.MoveNext%2A>的后续调用也将返回。 `false`</span><span class="sxs-lookup"><span data-stu-id="4e5c6-125">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4e5c6-126">如果最后一次调用<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`， <xref:System.Collections.Generic.IEnumerator%601.Current%2A>则未定义。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-126">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="4e5c6-127">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-127">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  

 <span data-ttu-id="4e5c6-128">如果对集合所做的更改（如添加、修改或删除元素），则枚举器的行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-128">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="4e5c6-129">枚举器没有对集合的独占访问权限，因此只要集合保持不变，枚举数就会保持有效。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-129">An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4e5c6-130">如果对集合进行了更改（如添加、修改或删除元素），则枚举器会失效，你可能会收到意外的结果。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-130">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results.</span></span> <span data-ttu-id="4e5c6-131">此外，枚举集合不是线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-131">Also, enumerating a collection is not a thread-safe procedure.</span></span> <span data-ttu-id="4e5c6-132">若要确保线程安全，应在枚举器期间锁定集合，或在集合上实现同步。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-132">To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.</span></span>  
  
 <span data-ttu-id="4e5c6-133"><xref:System.Collections.Generic?displayProperty=nameWithType>命名空间中集合的默认实现不会同步。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-133">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace aren't synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e5c6-134">下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口，并使用该实现创建 LINQ 查询。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-134">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and uses that implementation to create a LINQ query.</span></span> <span data-ttu-id="4e5c6-135">实现<xref:System.Collections.Generic.IEnumerable%601>时，还必须实现<xref:System.Collections.Generic.IEnumerator%601>或，只能对C#使用[yield](~/docs/csharp/language-reference/keywords/yield.md)关键字。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-135">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="4e5c6-136">还<xref:System.Collections.Generic.IEnumerator%601> 需要 <xref:System.IDisposable> 实现实现，这将在本示例中看到。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-136">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="4e5c6-137">有关演示C#如何实现<xref:System.Collections.Generic.IEnumerable%601>接口的另一个示例，请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-137">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="4e5c6-138">此示例使用`yield`关键字而不是实现<xref:System.Collections.Generic.IEnumerator%601>。</span><span class="sxs-lookup"><span data-stu-id="4e5c6-138">This sample uses of the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554"><span data-ttu-id="4e5c6-139">演练：在 Visual Basic 中实现 IEnumerable(Of T)</span><span class="sxs-lookup"><span data-stu-id="4e5c6-139">Walkthrough: Implementing IEnumerable(Of T) in Visual Basic</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="4e5c6-140">迭代器（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="4e5c6-140">Iterators (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

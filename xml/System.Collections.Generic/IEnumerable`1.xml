<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67d8bd93d39deef2a4d4ae6f1198768fda753482" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63908587" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">要枚举的对象的类型。</typeparam>
    <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> 是中的集合的基接口<xref:System.Collections.Generic>如命名空间<xref:System.Collections.Generic.List%601>， <xref:System.Collections.Generic.Dictionary%602>，和<xref:System.Collections.Generic.Stack%601>和其他泛型集合，如<xref:System.Collections.ObjectModel.ObservableCollection%601>和<xref:System.Collections.Concurrent.ConcurrentStack%601>。 为实现的集合<xref:System.Collections.Generic.IEnumerable%601>可以通过使用枚举`foreach`语句。  
  
 此接口的非泛型版本，请参阅<xref:System.Collections.IEnumerable?displayProperty=nameWithType>。  
  
 <xref:System.Collections.Generic.IEnumerable%601> 包含单个方法来实现此接口; 时，必须实现<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>，它将返回<xref:System.Collections.Generic.IEnumerator%601>对象。 返回<xref:System.Collections.Generic.IEnumerator%601>提供了通过公开循环访问集合的功能<xref:System.Collections.Generic.IEnumerator%601.Current%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>界面以及如何使用该实现，若要创建一个 LINQ 查询。 当您实现<xref:System.Collections.Generic.IEnumerable%601>，还必须实现<xref:System.Collections.Generic.IEnumerator%601>或对于仅限 C#，可以使用[产生](~/docs/csharp/language-reference/keywords/yield.md)关键字。 实现<xref:System.Collections.Generic.IEnumerator%601>还要求<xref:System.IDisposable>来实现，将在此示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关另一个 C# 示例，演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口，请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用`yield`关键字而不是实现<xref:System.Collections.Generic.IEnumerator%601>。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含与非泛型集合; 奇偶校验实现<see cref="T:System.Collections.Generic.IEnumerable`1" />允许将传递给需要的方法的泛型集合<see cref="T:System.Collections.IEnumerable" />对象。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器（C# 和 Visual Basic）</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">泛型示例</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个循环访问集合的枚举器。</summary>
        <returns>用于循环访问集合的枚举数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回<xref:System.Collections.Generic.IEnumerator%601>提供了通过公开循环访问集合的功能<xref:System.Collections.Generic.IEnumerator%601.Current%2A>属性。读取集合中的数据，但不是能修改集合，可以使用枚举器。  
  
 最初，枚举数定位在集合中第一个元素的前面。 在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。 因此，您必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.IEnumerator%601.Current%2A>。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 返回同一对象，直到<xref:System.Collections.IEnumerator.MoveNext%2A>作为再次调用<xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.Generic.IEnumerator%601.Current%2A>到下一个元素。  
  
 如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。 当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是不确定的。 无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。  

 如果更改到集合中，如添加、 修改或删除元素，枚举器的行为未定义。  
  
 一个枚举器没有对集合的独占访问，因此，只要集合保持不变，枚举数就保持有效。 如果对集合进行了更改，如添加、 修改或删除元素，该枚举数将失效，你可能会收到意外的结果。 此外，对集合进行枚举不是线程安全过程。 若要确保线程安全性，应枚举期间锁定集合或集合上实现同步。  
  
 集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>命名空间未同步。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口，并使用该实现若要创建一个 LINQ 查询。 当您实现<xref:System.Collections.Generic.IEnumerable%601>，还必须实现<xref:System.Collections.Generic.IEnumerator%601>或对于仅限 C#，可以使用[产生](~/docs/csharp/language-reference/keywords/yield.md)关键字。 实现<xref:System.Collections.Generic.IEnumerator%601>还要求<xref:System.IDisposable>来实现，将在此示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关另一个 C# 示例，演示如何实现<xref:System.Collections.Generic.IEnumerable%601>接口，请参阅[泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用的`yield`关键字而不是实现<xref:System.Collections.Generic.IEnumerator%601>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器（C# 和 Visual Basic）</related>
      </Docs>
    </Member>
  </Members>
</Type>
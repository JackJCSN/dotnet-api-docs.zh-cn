<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0758038abe314d7edf4ae6dd21fb9aae6a993bd" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898416" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供支持异步方法调用的类的并发管理。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果类需要提供异步行为根据[基于事件的异步模式概述](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)，将会遇到大量的并发管理问题。 这些筛选器是确保线程或适用于应用程序模型的上下文中调用事件处理程序的要求 (例如，Windows 窗体应用程序，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]应用程序、 控制台应用程序等)。 <xref:System.ComponentModel.AsyncOperationManager>提供了方便地创建的类，在支持的所有应用程序模型下正常运行[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。  
  
 <xref:System.ComponentModel.AsyncOperationManager>类具有一种方法， <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，它将返回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>可用于跟踪特定的异步任务的持续时间。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>的一项任务可用于对警报的客户端，当任务完成。 此外可以用于在不终止操作的情况下发布进度更新和增量结果。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下面的代码示例演示了如何使用<xref:System.ComponentModel.AsyncOperationManager>类，以创建支持异步操作的任何应用程序模型的类。 它演示如何实现的类，测试一个数字，以确定是否为质数。 此计算可能较长时间，因此它一个单独的线程上完成。 通过处理进度报告、 增量结果和完成通知<xref:System.ComponentModel.AsyncOperation>类，该类可确保在适当的线程或上下文调用客户端的事件处理程序。  
  
 完整代码列表，请参阅[如何：实现支持基于事件的异步模式的组件](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。 客户端窗体的完整代码列表，请参阅[如何：实现基于事件的异步模式的客户端](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">实现基于事件的异步模式</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">托管线程处理的最佳做法</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</param>
        <summary>返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</summary>
        <returns>可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法将返回<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，可以使用跟踪特定的异步操作的持续时间，并在操作完成时发出警报的应用程序模型。 此外可以使用它在不终止操作的情况下发布进度更新和增量结果。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>将正确封送到适当的线程或上下文的应用程序模型的这些调用。  
  
 如果你实现支持基于事件的异步模式的类，您的类应调用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>每次你*MethodName* `Async`调用方法。 可以使用客户端应用程序对方法的调用`userSuppliedState`参数来唯一地标识每个调用，以便区分异步操作的执行过程中引发的事件。  
  
> [!CAUTION]
>  客户端代码必须提供一个唯一值`userSuppliedState`参数。 非唯一任务 Id 可能会导致您的实现错误地报告进度和其他事件。 你的代码应该检查非唯一任务 ID 并引发<xref:System.ArgumentException?displayProperty=nameWithType>检测到一个。  
  
 你的代码应跟踪每个<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>返回的<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>和相应的基础异步操作中使用该对象以发布更新和终止操作。 此跟踪可以很简单，与传入<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>作为参数的各委托之间。 在更复杂的设计中，您的类可以维护一系列<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>对象，将对象添加启动任务的时间和已完成或已取消任务时删除它们。 此方法允许你检查唯一`userSuppliedState`参数值，它是使用支持多个并发调用的类时应使用的方法。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)。  
  
   
  
## Examples  
 下面的代码示例演示了如何使用<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法来创建<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>用于跟踪异步操作的持续时间。 此代码示例是为提供一个更大示例的一部分<xref:System.ComponentModel.AsyncOperationManager>类。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">实现基于事件的异步模式</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">托管线程处理的最佳做法</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于异步操作的同步上下文。</summary>
        <value>用于异步操作的同步上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现是自由线程实现。  
  
 线程应设置<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A>属性设置为`null`释放自由线程工厂时完成，否则将永远不会释放其工厂。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">用于设置同步上下文。 要求值： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。 关联的状态：</permission>
      </Docs>
    </Member>
  </Members>
</Type>
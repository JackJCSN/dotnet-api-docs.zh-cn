<Type Name="ReadOnlyAttribute" FullName="System.ComponentModel.ReadOnlyAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="320ee091c6a8f9dd3ae6c633cf2599ab47ab2f7e" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63866225" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReadOnlyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReadOnlyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ReadOnlyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReadOnlyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReadOnlyAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ReadOnlyAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.All)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定该特性所绑定到的属性是只读属性还是读/写属性。 无法继承此类</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 成员标记有<xref:System.ComponentModel.ReadOnlyAttribute>设置为`true`或不具有`Set`方法不能进行更改。 成员不具有此属性或标记有<xref:System.ComponentModel.ReadOnlyAttribute>设置为`false`是读/写的并且可以更改它们。 默认值为 <xref:System.ComponentModel.ReadOnlyAttribute.No>。  
  
> [!IMPORTANT]
>  <xref:System.ComponentModel.PropertyDescriptor>类强制执行<xref:System.ComponentModel.ReadOnlyAttribute>设计环境中和在运行时。 标记与某个属性时<xref:System.ComponentModel.ReadOnlyAttribute>设置为`true`，此属性的值设置为常量成员<xref:System.ComponentModel.ReadOnlyAttribute.Yes>。 为与标记的属性<xref:System.ComponentModel.ReadOnlyAttribute>设置为`false`，则这<xref:System.ComponentModel.ReadOnlyAttribute.No>。 因此，当你想要检查在代码中此属性的值，必须指定属性作为<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType>或<xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType>。  
  
 有关更多信息，请参阅[特性](~/docs/standard/attributes/index.md)。  
  
   
  
## Examples  
 下面的代码示例将标记为只读属性。  
  
 [!code-cpp[Classic ReadOnlyAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ReadOnlyAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic ReadOnlyAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#1)]  
  
 下一步的代码示例演示如何检查的值<xref:System.ComponentModel.ReadOnlyAttribute>为`MyProperty`。 首先，代码获取<xref:System.ComponentModel.PropertyDescriptorCollection>与对象的所有属性。 接下来，它通过索引访问<xref:System.ComponentModel.PropertyDescriptorCollection>若要获取`MyProperty`。 然后返回此属性的属性，并将其保存到特性变量中。  
  
 该示例提供了两个不同的方法来检查的值<xref:System.ComponentModel.ReadOnlyAttribute>。 在第二个代码段中，该示例调用<xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A>方法。 在最后一个代码段中，该示例使用<xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A>属性检查的值。  
  
 [!code-cpp[Classic ReadOnlyAttribute Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#2)]
 [!code-csharp[Classic ReadOnlyAttribute Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#2)]
 [!code-vb[Classic ReadOnlyAttribute Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#2)]  
  
 如果您将类标记为<xref:System.ComponentModel.ReadOnlyAttribute>，使用下面的代码示例检查的值。  
  
 [!code-cpp[Classic ReadOnlyAttribute Example#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#3)]
 [!code-csharp[Classic ReadOnlyAttribute Example#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#3)]
 [!code-vb[Classic ReadOnlyAttribute Example#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
    <altmember cref="T:System.ComponentModel.AttributeCollection" />
    <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyAttribute (bool isReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isReadOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyAttribute(bool isReadOnly);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.ReadOnlyAttribute : bool -&gt; System.ComponentModel.ReadOnlyAttribute" Usage="new System.ComponentModel.ReadOnlyAttribute isReadOnly" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isReadOnly">如果该特性所绑定到的属性为只读属性，则为 <see langword="true" />；如果该属性为读/写属性，则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 成员标记有<xref:System.ComponentModel.ReadOnlyAttribute>设置为`true`或不具有`Set`方法不能进行更改。 成员不具有此属性或标记有<xref:System.ComponentModel.ReadOnlyAttribute>设置为`false`是读/写的并且可以更改它们。 默认值为 <xref:System.ComponentModel.ReadOnlyAttribute.No>。  
  
> [!NOTE]
>  标记与某个属性时<xref:System.ComponentModel.ReadOnlyAttribute>设置为`true`，此属性的值设置为常量成员<xref:System.ComponentModel.ReadOnlyAttribute.Yes>。 为与标记的属性<xref:System.ComponentModel.ReadOnlyAttribute>设置为`false`，则这<xref:System.ComponentModel.ReadOnlyAttribute.No>。 因此，当你想要检查在代码中此属性的值，必须指定属性作为<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType>或<xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例将标记为只读属性。 此代码将创建一个新<xref:System.ComponentModel.ReadOnlyAttribute>，其值设置为<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType>，并将其绑定到的属性。  
  
 [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly System.ComponentModel.ReadOnlyAttribute Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.ComponentModel.ReadOnlyAttribute Default" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.ReadOnlyAttribute.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Default As ReadOnlyAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::ComponentModel::ReadOnlyAttribute ^ Default;" />
      <MemberSignature Language="F#" Value=" staticval mutable Default : System.ComponentModel.ReadOnlyAttribute" Usage="System.ComponentModel.ReadOnlyAttribute.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ReadOnlyAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的默认值，为 <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" />（即此特性绑定到的属性是可读/写的）。 此 <see langword="static" /> 字段是只读的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当标记具有此值的属性时，此属性设置为常量成员<xref:System.ComponentModel.ReadOnlyAttribute.No>。 因此，当您想要检查是否为此值在代码中设置该属性，必须指定属性作为<xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
        <altmember cref="F:System.ComponentModel.ReadOnlyAttribute.Yes" />
        <altmember cref="F:System.ComponentModel.ReadOnlyAttribute.No" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlyAttribute.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要比较的另一个对象。</param>
        <summary>指示此实例与指定对象是否相等。</summary>
        <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlyAttribute.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns>当前 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAttribute">
      <MemberSignature Language="C#" Value="public override bool IsDefaultAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefaultAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefaultAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefaultAttribute();" />
      <MemberSignature Language="F#" Value="override this.IsDefaultAttribute : unit -&gt; bool" Usage="readOnlyAttribute.IsDefaultAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定此特性是否为默认特性。</summary>
        <returns>如果此特性是此特性类的默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.ComponentModel.ReadOnlyAttribute.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示该特性绑定到的属性是否为只读属性。</summary>
        <value>如果该特性所绑定到的属性为只读属性，则为 <see langword="true" />；如果该属性为读/写属性，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查以查看是否`MyProperty`是只读的。 首先，此代码可获取的特性`MyProperty`通过执行以下操作：  
  
-   检索<xref:System.ComponentModel.PropertyDescriptorCollection>与对象的所有属性。  
  
-   编入索引<xref:System.ComponentModel.PropertyDescriptorCollection>若要获取`MyProperty`。  
  
-   属性变量以保存此属性的特性。  
  
 然后代码集`myAttribute`的值<xref:System.ComponentModel.ReadOnlyAttribute>中<xref:System.ComponentModel.AttributeCollection>，并检查该属性是只读的。  
  
 [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
        <altmember cref="T:System.Attribute" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.ComponentModel.AttributeCollection" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
      </Docs>
    </Member>
    <Member MemberName="No">
      <MemberSignature Language="C#" Value="public static readonly System.ComponentModel.ReadOnlyAttribute No;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.ComponentModel.ReadOnlyAttribute No" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.ReadOnlyAttribute.No" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly No As ReadOnlyAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::ComponentModel::ReadOnlyAttribute ^ No;" />
      <MemberSignature Language="F#" Value=" staticval mutable No : System.ComponentModel.ReadOnlyAttribute" Usage="System.ComponentModel.ReadOnlyAttribute.No" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ReadOnlyAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定该特性绑定到的属性为读/写属性，可以修改。 此 <see langword="static" /> 字段是只读的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此字段是此属性的默认设置。  
  
 标记与某个属性时<xref:System.ComponentModel.ReadOnlyAttribute>设置为`false`，此属性的值设置为常量成员<xref:System.ComponentModel.ReadOnlyAttribute.No>。 因此，当您想要检查是否为此值在代码中设置该属性，必须指定属性作为<xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
        <altmember cref="F:System.ComponentModel.ReadOnlyAttribute.Yes" />
      </Docs>
    </Member>
    <Member MemberName="Yes">
      <MemberSignature Language="C#" Value="public static readonly System.ComponentModel.ReadOnlyAttribute Yes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.ComponentModel.ReadOnlyAttribute Yes" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.ReadOnlyAttribute.Yes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Yes As ReadOnlyAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::ComponentModel::ReadOnlyAttribute ^ Yes;" />
      <MemberSignature Language="F#" Value=" staticval mutable Yes : System.ComponentModel.ReadOnlyAttribute" Usage="System.ComponentModel.ReadOnlyAttribute.Yes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ReadOnlyAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定此特性绑定到的属性为只读，并且不能在服务器资源管理器中修改。 此 <see langword="static" /> 字段是只读的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 标记与某个属性时<xref:System.ComponentModel.ReadOnlyAttribute>设置为`true`，此属性的值设置为常量成员<xref:System.ComponentModel.ReadOnlyAttribute.Yes>。 因此，当您想要检查是否为此值在代码中设置该属性，必须指定属性作为<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
        <altmember cref="F:System.ComponentModel.ReadOnlyAttribute.No" />
      </Docs>
    </Member>
  </Members>
</Type>
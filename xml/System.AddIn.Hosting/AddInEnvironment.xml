<Type Name="AddInEnvironment" FullName="System.AddIn.Hosting.AddInEnvironment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03861fa059d5a59ed3db5e037b00de56a98d2c50" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63914642" /></Metadata><TypeSignature Language="C#" Value="public sealed class AddInEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInEnvironment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInEnvironment" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInEnvironment sealed" />
  <TypeSignature Language="F#" Value="type AddInEnvironment = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供外接程序的应用程序域和进程的访问权限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类用于将外接程序加载到所需的环境，可以是以下值之一：  
  
-   您有现有应用程序域<xref:System.AppDomain>对象。  
  
-   若要激活外接程序自动生成应用程序域。  
  
-   现有的外部进程。  
  
 若要获取<xref:System.AddIn.Hosting.AddInEnvironment>对象的外接程序，传递外接程序的应用程序域到<xref:System.AddIn.Hosting.AddInEnvironment>类构造函数。 或者，可以使用<xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A>的属性<xref:System.AddIn.Hosting.AddInController>类来获取外接程序的<xref:System.AddIn.Hosting.AddInEnvironment>对象。  
  
 获取后<xref:System.AddIn.Hosting.AddInEnvironment>对象，您可以执行以下操作：  
  
-   将其传递<xref:System.AddIn.Hosting.AddInEnvironment>到相应的对象<xref:System.AddIn.Hosting.AddInToken.Activate%2A>方法重载。 外接程序将激活中的应用程序域和进程由表示<xref:System.AddIn.Hosting.AddInEnvironment>对象。  
  
-   使用<xref:System.AddIn.Hosting.AddInEnvironment.Process%2A>属性来获取<xref:System.AddIn.Hosting.AddInProcess>对象。 然后将该对象传递给相应<xref:System.AddIn.Hosting.AddInToken.Activate%2A>方法重载。 外接程序将会在进程中激活由表示<xref:System.AddIn.Hosting.AddInProcess>对象，但新的应用程序域中。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">外接程序和扩展性</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInEnvironment (AppDomain appDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AppDomain appDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInEnvironment(AppDomain ^ appDomain);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInEnvironment : AppDomain -&gt; System.AddIn.Hosting.AddInEnvironment" Usage="new System.AddIn.Hosting.AddInEnvironment appDomain" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appDomain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="appDomain">包含外接程序的应用程序域。</param>
        <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你有权访问包含外接程序所需的应用程序域时，可以使用此构造函数来获取外接程序的<xref:System.AddIn.Hosting.AddInEnvironment>对象。 否则，可以使用<xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A>的属性<xref:System.AddIn.Hosting.AddInController>类来获取<xref:System.AddIn.Hosting.AddInEnvironment>对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appDomain" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">需要完全信任权限。 调用链中的调用方没有足够权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInProcess Process { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInProcess Process" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Process As AddInProcess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInProcess ^ Process { System::AddIn::Hosting::AddInProcess ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Process : System.AddIn.Hosting.AddInProcess" Usage="System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInProcess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象，该对象表示在其中运行外接程序的进程。</summary>
        <value>在其中运行外接程序的进程。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可用于激活多个加载项在同一进程中但在不同的域中。  
  
 传递<xref:System.AddIn.Hosting.AddInProcess>对象获取与此属性设置为相应<xref:System.AddIn.Hosting.AddInToken.Activate%2A>方法重载。  
  
 如果你想要在外部进程在同一域中激活它们应传递<xref:System.AddIn.Hosting.AddInEnvironment>直接向对象<xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType>方法重载。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
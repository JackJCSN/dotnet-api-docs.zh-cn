<Type Name="FrameworkElementAdapters" FullName="System.AddIn.Pipeline.FrameworkElementAdapters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2aa9016ab992f01e3688ea36fddd600889e28cd" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63914093" /></Metadata><TypeSignature Language="C#" Value="public static class FrameworkElementAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FrameworkElementAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.FrameworkElementAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElementAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElementAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type FrameworkElementAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Presentation</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Windows Presentation Foundation (WPF) 加载项使用 <see cref="T:System.AddIn.Pipeline.FrameworkElementAdapters" />，在 <see cref="T:System.Windows.FrameworkElement" /> 和 <see cref="T:System.AddIn.Contract.INativeHandleContract" /> 之间进行转换。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
Windows Presentation Foundation (WPF) 扩展了.NET Framework 外接程序模型以允许 WPF Ui 的主机应用程序和外接程序之间传递。WPF 要求 WPF Ui 的传递或者直接或间接派生自<xref:System.Windows.FrameworkElement>。 但是，加载项和主机应用程序通常运行在单独的应用程序域中，因此，分隔隔离边界。 出于此原因，.NET Framework 外接程序模型需要跨隔离边界以可远程处理传递的类型。 可远程处理类型符合以下项之一：  
  
-   实现 <xref:System.Runtime.Serialization.ISerializable> 接口。  
  
-   具有<xref:System.SerializableAttribute>应用属性。  
  
-   派生自<xref:System.MarshalByRefObject>类。  
  
 <xref:System.Windows.FrameworkElement> 不是可远程处理和外接程序和主机应用程序之间传递跨隔离边界之前必须转换为可远程处理类型。 您需要为此，请调用静态<xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A>方法将转换<xref:System.Windows.FrameworkElement>到可远程处理的实例<xref:System.AddIn.Contract.INativeHandleContract>。  
  
 一次<xref:System.AddIn.Contract.INativeHandleContract>传递跨隔离边界，则必须转换为可由主机应用程序或外接程序显示类型。 在此情况下，静态<xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A>调用方法来转换<xref:System.AddIn.Contract.INativeHandleContract>到<xref:System.Windows.FrameworkElement>。  
  
 有关更多详细的 WPF 外接程序的说明，请参阅[WPF 外接程序概述](~/docs/framework/wpf/app-development/wpf-add-ins-overview.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContractToViewAdapter">
      <MemberSignature Language="C#" Value="public static System.Windows.FrameworkElement ContractToViewAdapter (System.AddIn.Contract.INativeHandleContract nativeHandleContract);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.FrameworkElement ContractToViewAdapter(class System.AddIn.Contract.INativeHandleContract nativeHandleContract) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContractToViewAdapter (nativeHandleContract As INativeHandleContract) As FrameworkElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FrameworkElement ^ ContractToViewAdapter(System::AddIn::Contract::INativeHandleContract ^ nativeHandleContract);" />
      <MemberSignature Language="F#" Value="static member ContractToViewAdapter : System.AddIn.Contract.INativeHandleContract -&gt; System.Windows.FrameworkElement" Usage="System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter nativeHandleContract" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Presentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FrameworkElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nativeHandleContract" Type="System.AddIn.Contract.INativeHandleContract" />
      </Parameters>
      <Docs>
        <param name="nativeHandleContract">跨主机应用程序和外接程序之间的隔离边界进行传递的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />。</param>
        <summary>返回已从 <see cref="T:System.Windows.FrameworkElement" /> 进行转换的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />。</summary>
        <returns>将在主机应用程序或外接程序中显示的 <see cref="T:System.Windows.FrameworkElement" />，具体取决于 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 在二者之间的传递方向。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="ViewToContractAdapter">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.INativeHandleContract ViewToContractAdapter (System.Windows.FrameworkElement root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.INativeHandleContract ViewToContractAdapter(class System.Windows.FrameworkElement root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ViewToContractAdapter (root As FrameworkElement) As INativeHandleContract" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Contract::INativeHandleContract ^ ViewToContractAdapter(System::Windows::FrameworkElement ^ root);" />
      <MemberSignature Language="F#" Value="static member ViewToContractAdapter : System.Windows.FrameworkElement -&gt; System.AddIn.Contract.INativeHandleContract" Usage="System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter root" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Presentation</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.INativeHandleContract</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="root">要跨主机应用程序和外接程序之间的隔离边界进行传递的 <see cref="T:System.Windows.FrameworkElement" />。</param>
        <summary>返回已从 <see cref="T:System.AddIn.Contract.INativeHandleContract" /> 进行转换的 <see cref="T:System.Windows.FrameworkElement" />。</summary>
        <returns>从主机应用程序或外接程序进行传递的 <see cref="T:System.AddIn.Contract.INativeHandleContract" />，具体取决于 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 在二者之间的传递方向。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="root" /> 不是元素树的根元素。</exception>
        <altmember cref="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/bb913905(v=vs.90)">WPF 外接程序具有多个 Ui 示例</related>
      </Docs>
    </Member>
  </Members>
</Type>
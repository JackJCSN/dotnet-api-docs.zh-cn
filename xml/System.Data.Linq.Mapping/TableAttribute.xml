<Type Name="TableAttribute" FullName="System.Data.Linq.Mapping.TableAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="269173580c93d2a57455256607f1d5db0997bdd8" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="63896076" /></Metadata><TypeSignature Language="C#" Value="public sealed class TableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.TableAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TableAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type TableAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>将某个类指定为与数据库表相关联的实体类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可将类指定为与数据库表或视图关联的实体类。 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 将具有类视为<xref:System.Data.Linq.Mapping.TableAttribute>类视为持久性类的属性。  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 支持仅单表映射。 也就是说，一个实体类必须映射到一个数据库表，和你不能在同一时间将数据库表映射到多个类。  
  
 可以使用<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>属性的<xref:System.Data.Linq.Mapping.TableAttribute>属性来指定表的名称，可以选择使用架构名称来限定表名称。 如果不通过使用指定名称<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>属性，表名称被假定为与类名称相同。  
  
## <a name="schema-qualified-names"></a>架构限定的名称  
 您可以选择使用架构名称来限定表名称。 默认情况下，左侧的第一期的令牌<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字符串被视为架构名称。 表名称被视为名称的余下部分。 提供程序加引号作为相应的表名称。 例如， [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] SQL Server 提供程序可确保，则使用方括号至少所需的位置。  
  
> [!NOTE]
>  在某些情况下，您必须显式属性由于对 SQL Server 提供程序不能自动的括号。 下表显示了一些示例。  
  
|Case|示例:标识符名称|示例:在特性中的预期的字符串|否则为...|  
|----------|------------------------------|--------------------------------------------|----------------|  
|架构名称包含句点|架构："A.B"<br /><br /> 表："C"|"[A.B]。C"|假定第一个期间为单独的表名称的架构名称。|  
|架构/表名称开头 `@`|“@SomeName”|"[@SomeName]"|假定为参数名称。|  
|架构的开头`[`结尾 `]`|"[Schema.Table]"|"[[架构]。[表]]]"|不带引号的标识符类似于带引号的标识符。|  
|表的前`[`结尾 `]`|"[Table]"|"[[表]]]"|不带引号的标识符类似于带引号的标识符。|  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.TableAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表或视图的名称。</summary>
        <value>默认情况下，此值与类名称相同。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不通过使用指定名称<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>，表名称被假定为与类名称相同。  
  
> [!NOTE]
>  您可以选择使用架构名称来限定表名 (例如，Schema3.Table5)。 默认情况下，左侧的第一期的令牌<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字符串被视为该架构名称，并为表名称的其余部分。  
  
 在下面的示例中，默认表名`Customer`，更改为`Customers`。  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="PrintTicket" FullName="System.Printing.PrintTicket">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf1898213ff76011bca0be93e6177c17361537c8" /><Meta Name="ms.sourcegitcommit" Value="087e7080a3f8a7cb9729f7cd398931df8ca81797" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/26/2019" /><Meta Name="ms.locfileid" Value="67399447" /></Metadata><TypeSignature Language="C#" Value="public sealed class PrintTicket : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PrintTicket extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintTicket" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PrintTicket&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintTicket sealed : System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type PrintTicket = class&#xA;    interface INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>ReachFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义打印作业的设置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.Printing.PrintTicket>对象是名为 XML 文档的特定类型的简单-到-工作-具有表示*PrintTicket 文档*。 后者是一组指令告知如何设置它的各种功能 （如自动分页和装订，进行双面打印） 的打印机。 例如，若要指示要打开其装订和装订左上角中的打印作业的打印机，该文档应具有`<JobStapleAllDocuments … >`指定的元素**StapleTopLeft**。 元素，反过来，为由<xref:System.Printing.PrintTicket.Stapling%2A>属性的<xref:System.Printing.PrintTicket>对象。 PrintTicket 文档必须符合[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)。  
  
 <xref:System.Printing.PrintTicket>类使应用程序可以配置打印机的功能而无需进行任何直接编写 XML<xref:System.IO.Stream>对象。  
  
 所有家庭和商业文件和照片打印机的功能最受欢迎的属性由表示<xref:System.Printing.PrintTicket>类。 但[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)定义更多不太常见，功能和它可进行扩展以处理特殊打印设备的功能。 因此，尽管<xref:System.Printing.PrintTicket>并<xref:System.Printing.PrintCapabilities>类不能被继承，可以扩展[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)识别并不表示中的打印设备功能<xref:System.Printing.PrintTicket>或<xref:System.Printing.PrintCapabilities>类。 有关详细信息，请参阅[操作说明：扩展的打印架构并创建新的打印系统类](https://docs.microsoft.com/previous-versions/aa970573(v=vs.100))。  
  
 **请注意**时<xref:System.Printing.PrintTicket>选取 PrintTicket 文档的构造函数创建对象 (作为<xref:System.IO.Stream>) 参数，该整个文档存储在非公共字段的对象，包括在其中的 XML 元素中的express 不太常见的功能不由任何的公共属性所表示<xref:System.Printing.PrintTicket>类。 事实上，如果生成 PrintTicket 文档的驱动程序正在使用的专用扩展[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)、 的私人定义标记也存储为非公共 PrintTicket 文档的一部分。  
  
> [!CAUTION]
>  类中<xref:System.Printing>命名空间不支持的 Windows 服务或 ASP.NET 应用程序或服务中的使用。 尝试使用在这些应用程序类型之一中的这些类可能会产生意外的问题，如降低服务性能和运行时异常。  
  
 如果你想要从 Windows 窗体应用程序打印，请参阅<xref:System.Drawing.Printing>命名空间。  
  
   
  
## Examples  
 下面的示例演示如何确定特定打印机的功能以及如何配置打印作业，以充分利用它们。  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Printing.PrintTicket" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintTicket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintTicket.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintTicket();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Printing.PrintTicket" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何在合并两种打印票证时使用此构造函数。  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintTicket (System.IO.Stream xmlStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintTicket.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintTicket(System::IO::Stream ^ xmlStream);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintTicket : System.IO.Stream -&gt; System.Printing.PrintTicket" Usage="new System.Printing.PrintTicket xmlStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="xmlStream">描述打印作业且符合打印架构的 XML 流。</param>
        <summary>使用符合 XML [打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的 XML 流（其中包含 PrintTicket 文档）初始化 <see cref="T:System.Printing.PrintTicket" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数不会在流的读写位置重置回其原始位置。 相应地，您应后重置它立即调用的构造函数。  
  
 整个 PrintTicket 文档存储在非公共字段中的对象，其中包括 express 不太常见功能不由任何的公共属性所表示的 XML 元素中其<xref:System.Printing.PrintTicket>类。 事实上，如果生成 PrintTicket 文档的驱动程序正在使用的专用扩展[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)、 的私人定义标记也存储为非公共 PrintTicket 文档的一部分。  
  
 验证私有部分的文档，如果有的话，是不通过构造函数中，但所有**打印架构**-定义的部分进行验证，包括未由任何公共属性的部分<xref:System.Printing.PrintTicket>类。 相应地，<xref:System.FormatException>无法引发，即使所有对应的公共属性的 XML 标记都有效。  
  
 当任何一个的属性时<xref:System.Printing.PrintTicket>写入到，此非公共 PrintTicket 文档也会更改。  
  
 它是返回的此非公共 PrintTicket 文档<xref:System.Printing.PrintTicket.GetXmlStream%2A>和<xref:System.Printing.PrintTicket.SaveTo%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlStream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="xmlStream" /> 为无效 XML。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">打印架构</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Printing.PrintTicket Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintTicket Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintTicket.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintTicket ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Printing.PrintTicket" Usage="printTicket.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Printing.PrintTicket" /> 的可修改克隆，从而深度复制此对象的值。</summary>
        <returns>当前对象的可修改复本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collation">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.Collation&gt; Collation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.Collation&gt; Collation" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.Collation" />
      <MemberSignature Language="VB.NET" Value="Public Property Collation As Nullable(Of Collation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::Collation&gt; Collation { Nullable&lt;System::Printing::Collation&gt; get(); void set(Nullable&lt;System::Printing::Collation&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.Collation : Nullable&lt;System.Printing.Collation&gt; with get, set" Usage="System.Printing.PrintTicket.Collation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.Collation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机是否逐份打印其输出。</summary>
        <value>表示打印机是否逐份打印其输出的 <see cref="T:System.Printing.Collation" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`DocumentCollate`关键字，不`JobCollateAllDocuments`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.CollationCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用此属性时测试打印机的功能和配置打印作业来充分利用它们。  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.Collation" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyCount">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CopyCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CopyCount" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.CopyCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CopyCount As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CopyCount { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.CopyCount : Nullable&lt;int&gt; with get, set" Usage="System.Printing.PrintTicket.CopyCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打印作业的份数。</summary>
        <value>一个可以为 null 的 <see cref="T:System.Int32" /> 值，指定要打印的份数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobCopiesAllDocuments`关键字，不`DocumentCopiesAllPages`关键字，或`PageCopies`关键字。  
  
 你可以测试对打印机的最大使用<xref:System.Printing.PrintCapabilities.MaxCopyCount%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为小于 1 的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeviceFontSubstitution">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.DeviceFontSubstitution&gt; DeviceFontSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.DeviceFontSubstitution&gt; DeviceFontSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.DeviceFontSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DeviceFontSubstitution As Nullable(Of DeviceFontSubstitution)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::DeviceFontSubstitution&gt; DeviceFontSubstitution { Nullable&lt;System::Printing::DeviceFontSubstitution&gt; get(); void set(Nullable&lt;System::Printing::DeviceFontSubstitution&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DeviceFontSubstitution : Nullable&lt;System.Printing.DeviceFontSubstitution&gt; with get, set" Usage="System.Printing.PrintTicket.DeviceFontSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.DeviceFontSubstitution&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机是否用基于设备的字体替换打印作业上基于计算机的字体。</summary>
        <value>一个 <see cref="T:System.Printing.DeviceFontSubstitution" /> 值，表示设备是否用基于设备的字体替换当前打印作业中基于计算机的字体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageDeviceFontSubstitution`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.DeviceFontSubstitutionCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.DeviceFontSubstitution" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Duplexing">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.Duplexing&gt; Duplexing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.Duplexing&gt; Duplexing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.Duplexing" />
      <MemberSignature Language="VB.NET" Value="Public Property Duplexing As Nullable(Of Duplexing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::Duplexing&gt; Duplexing { Nullable&lt;System::Printing::Duplexing&gt; get(); void set(Nullable&lt;System::Printing::Duplexing&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.Duplexing : Nullable&lt;System.Printing.Duplexing&gt; with get, set" Usage="System.Printing.PrintTicket.Duplexing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.Duplexing&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机在执行打印作业时使用的双面打印类型（如果有）。</summary>
        <value>一个 <see cref="T:System.Printing.Duplexing" /> 值，该值表示打印机在执行打印作业时使用的双面打印类型（如果有）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobDuplexAllDocumentsContiguously`关键字，不`DocumentDuplex`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.DuplexingCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何在合并两种打印票证时使用此属性。  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.Duplexing" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXmlStream">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetXmlStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetXmlStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintTicket.GetXmlStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlStream () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetXmlStream();" />
      <MemberSignature Language="F#" Value="member this.GetXmlStream : unit -&gt; System.IO.MemoryStream" Usage="printTicket.GetXmlStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.Printing.PrintTicket" /> 属性值的 <see cref="T:System.IO.MemoryStream" /> 对象，作为符合[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的 XML 流。</summary>
        <returns><see cref="T:System.IO.MemoryStream" /> 对象，它描述带有符合<see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">打印架构</see>的 XML 的打印票证。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果任何属性的<xref:System.Printing.PrintTicket>是`null`，它们只是不会包含在 XML 标记中。  
  
 如果<xref:System.Printing.PrintTicket>对象使用包含未由任何表示标记元素的 PrintTicket 文档构造<xref:System.Printing.PrintTicket>类的公共属性，这些元素将包含在此方法返回的 PrintTicket 文档。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">打印架构</related>
      </Docs>
    </Member>
    <Member MemberName="InputBin">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.InputBin&gt; InputBin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.InputBin&gt; InputBin" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.InputBin" />
      <MemberSignature Language="VB.NET" Value="Public Property InputBin As Nullable(Of InputBin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::InputBin&gt; InputBin { Nullable&lt;System::Printing::InputBin&gt; get(); void set(Nullable&lt;System::Printing::InputBin&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.InputBin : Nullable&lt;System.Printing.InputBin&gt; with get, set" Usage="System.Printing.PrintTicket.InputBin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.InputBin&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示要使用的送纸器（纸盒）的值。</summary>
        <value>一个 <see cref="T:System.Printing.InputBin" /> 值，该值表示要使用的送纸器以及是手动选择还是自动选择。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。 也就是说，会有任何标记[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的功能`JobInputBin`， `DocumentInputBin`，或`PageInputBin`。  
  
 当此属性不是`null`，它将具有以下关系中定义的功能[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)。  
  
-   如果 XML 形式<xref:System.Printing.PrintTicket>包含`JobInputBin`，则此属性的值与相同`JobInputBin`(而不考虑是否存在也是`DocumentInputBin`或`PageInputBin`。 中的 XML 版本的标记<xref:System.Printing.PrintTicket>)。  
  
-   如果没有任何`JobInputBin`标记，但没有`DocumentInputBin`，则此属性的值与相同`DocumentInputBin`(而不考虑是否存在也是`PageInputBin`标记) 存在。  
  
-   如果存在既不是`JobInputBin`也不`DocumentInputBin`标记，但没有`PageInputBin`标记，则此属性具有相同的值作为`PageInputBin`。  
  
 当此属性设置为任何<xref:System.Printing.InputBin>值，然后匹配`JobInputBin`会将标记添加到 XML 的打印票证和任何`DocumentInputBin`和`PageInputBin`将删除已存在的标记。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.InputBinCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.InputBin" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputColor">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.OutputColor&gt; OutputColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.OutputColor&gt; OutputColor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.OutputColor" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputColor As Nullable(Of OutputColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::OutputColor&gt; OutputColor { Nullable&lt;System::Printing::OutputColor&gt; get(); void set(Nullable&lt;System::Printing::OutputColor&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.OutputColor : Nullable&lt;System.Printing.OutputColor&gt; with get, set" Usage="System.Printing.PrintTicket.OutputColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.OutputColor&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机如何处理包含颜色或灰影的内容。</summary>
        <value>一个 <see cref="T:System.Printing.OutputColor" /> 值，表示打印机如何处理包含颜色或灰影的内容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageOutputColor`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.OutputColorCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用此属性来配置打印作业。  
  
 [!code-csharp[XpsPrint#OutputColorAndPageOrientation](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#outputcolorandpageorientation)]
 [!code-vb[XpsPrint#OutputColorAndPageOrientation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#outputcolorandpageorientation)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.OutputColor" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputQuality">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.OutputQuality&gt; OutputQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.OutputQuality&gt; OutputQuality" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.OutputQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputQuality As Nullable(Of OutputQuality)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::OutputQuality&gt; OutputQuality { Nullable&lt;System::Printing::OutputQuality&gt; get(); void set(Nullable&lt;System::Printing::OutputQuality&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.OutputQuality : Nullable&lt;System.Printing.OutputQuality&gt; with get, set" Usage="System.Printing.PrintTicket.OutputQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.OutputQuality&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示打印作业输出质量的值。</summary>
        <value>指定所需质量级别的 <see cref="T:System.Printing.OutputQuality" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageOutputQuality`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.OutputQualityCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.OutputQuality" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageBorderless">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PageBorderless&gt; PageBorderless { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PageBorderless&gt; PageBorderless" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageBorderless" />
      <MemberSignature Language="VB.NET" Value="Public Property PageBorderless As Nullable(Of PageBorderless)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PageBorderless&gt; PageBorderless { Nullable&lt;System::Printing::PageBorderless&gt; get(); void set(Nullable&lt;System::Printing::PageBorderless&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PageBorderless : Nullable&lt;System.Printing.PageBorderless&gt; with get, set" Usage="System.Printing.PrintTicket.PageBorderless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PageBorderless&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示设备是将内容打印到介质边缘，还是在边缘周围留出一些空白不打印。</summary>
        <value>指定打印机是否采用无边距打印的 <see cref="T:System.Printing.PageBorderless" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageBorderless`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageBorderlessCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PageBorderless" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageMediaSize">
      <MemberSignature Language="C#" Value="public System.Printing.PageMediaSize PageMediaSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PageMediaSize PageMediaSize" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageMediaSize" />
      <MemberSignature Language="VB.NET" Value="Public Property PageMediaSize As PageMediaSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PageMediaSize ^ PageMediaSize { System::Printing::PageMediaSize ^ get(); void set(System::Printing::PageMediaSize ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PageMediaSize : System.Printing.PageMediaSize with get, set" Usage="System.Printing.PrintTicket.PageMediaSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PageMediaSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打印机在执行打印作业时所用的纸张（或其他介质）的页面大小。</summary>
        <value>一个 <see cref="T:System.Printing.PageMediaSize" /> 对象，使用名称、维度或二者兼之来表示页面大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageMediaSize`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageMediaSizeCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用此属性来缩放可视元素，以使其容纳它是打印在纸张的边距。  
  
 [!code-csharp[XpsPrint#PageMediaSize](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#pagemediasize)]
 [!code-vb[XpsPrint#PageMediaSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#pagemediasize)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试使用至少具有一个 <see langword="null" /> 属性的 <see cref="T:System.Printing.PageMediaSize" /> 对象设置该属性。  
  
或 
调用代码操作尝试使用 <see cref="T:System.Printing.PageMediaSize" /> 对象来设置属性，该对象的 <see cref="P:System.Printing.PageMediaSize.PageMediaSizeName" /> 属性被设置为不在 <see cref="T:System.Printing.PageMediaSizeName" /> 枚举范围之内的值。  
  
或 
调用代码操作尝试使用 <see cref="T:System.Printing.PageMediaSize" /> 对象来设置属性，该对象的 <see cref="P:System.Printing.PageMediaSize.Width" /> 或 <see cref="P:System.Printing.PageMediaSize.Height" /> 属性被设置为小于 1 的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageMediaType">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PageMediaType&gt; PageMediaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PageMediaType&gt; PageMediaType" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageMediaType" />
      <MemberSignature Language="VB.NET" Value="Public Property PageMediaType As Nullable(Of PageMediaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PageMediaType&gt; PageMediaType { Nullable&lt;System::Printing::PageMediaType&gt; get(); void set(Nullable&lt;System::Printing::PageMediaType&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PageMediaType : Nullable&lt;System.Printing.PageMediaType&gt; with get, set" Usage="System.Printing.PrintTicket.PageMediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PageMediaType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机在执行打印作业时所用的纸张或介质的类型。</summary>
        <value>用于指定打印介质（如卡片纸、标签、普通纸或照片纸）的 <see cref="T:System.Printing.PageMediaType" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageMediaType`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageMediaTypeCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PageMediaType" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageOrder">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PageOrder&gt; PageOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PageOrder&gt; PageOrder" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property PageOrder As Nullable(Of PageOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PageOrder&gt; PageOrder { Nullable&lt;System::Printing::PageOrder&gt; get(); void set(Nullable&lt;System::Printing::PageOrder&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PageOrder : Nullable&lt;System.Printing.PageOrder&gt; with get, set" Usage="System.Printing.PrintTicket.PageOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PageOrder&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机是按从后向前还是从前向后的顺序打印多个页面。</summary>
        <value>用于指定先打印末页还是先打印首页的 <see cref="T:System.Printing.PageOrder" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobPageOrder`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageOrderCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PageOrder" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageOrientation">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PageOrientation&gt; PageOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PageOrientation&gt; PageOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageOrientation" />
      <MemberSignature Language="VB.NET" Value="Public Property PageOrientation As Nullable(Of PageOrientation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PageOrientation&gt; PageOrientation { Nullable&lt;System::Printing::PageOrientation&gt; get(); void set(Nullable&lt;System::Printing::PageOrientation&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PageOrientation : Nullable&lt;System.Printing.PageOrientation&gt; with get, set" Usage="System.Printing.PrintTicket.PageOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PageOrientation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印时如何定向页面内容。</summary>
        <value>用于指定如何定向页面内容的 <see cref="T:System.Printing.PageOrientation" /> 值，如 <see cref="F:System.Printing.PageOrientation.Landscape" /> 或 <see cref="F:System.Printing.PageOrientation.ReversePortrait" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageOrientation`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageOrientationCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用此属性来配置打印作业。  
  
 [!code-csharp[XpsPrint#OutputColorAndPageOrientation](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#outputcolorandpageorientation)]
 [!code-vb[XpsPrint#OutputColorAndPageOrientation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#outputcolorandpageorientation)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PageOrientation" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageResolution">
      <MemberSignature Language="C#" Value="public System.Printing.PageResolution PageResolution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PageResolution PageResolution" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageResolution" />
      <MemberSignature Language="VB.NET" Value="Public Property PageResolution As PageResolution" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PageResolution ^ PageResolution { System::Printing::PageResolution ^ get(); void set(System::Printing::PageResolution ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PageResolution : System.Printing.PageResolution with get, set" Usage="System.Printing.PrintTicket.PageResolution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PageResolution</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打印机在执行打印作业时所使用的页面分辨率等级。</summary>
        <value>用于表示定性值、每英寸点数值或二者兼之的分辨率的 <see cref="T:System.Printing.PageResolution" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PageResolution>类具有可以在其中指定 X 和 Y 维度的每英寸点数的属性和属性可以为提供的分辨率的定性表达式。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageResolution`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PageResolutionCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试使用至少具有一个 <see langword="null" /> 属性的 <see cref="T:System.Printing.PageResolution" /> 对象设置该属性。  
  
或 
调用代码操作尝试使用 <see cref="T:System.Printing.PageMediaSize" /> 对象来设置属性，该对象的 <see cref="P:System.Printing.PageResolution.QualitativeResolution" /> 属性被设置为不在 <see cref="T:System.Printing.PageQualitativeResolution" /> 枚举范围之内的值。  
  
- 或 - 
调用代码操作尝试使用 <see cref="T:System.Printing.PageResolution" /> 对象来设置属性，该对象的 <see cref="P:System.Printing.PageResolution.X" /> 或 <see cref="P:System.Printing.PageResolution.Y" /> 属性被设置为小于 1 的值。</exception>
        <altmember cref="T:System.Printing.PageResolution" />
      </Docs>
    </Member>
    <Member MemberName="PageScalingFactor">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; PageScalingFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; PageScalingFactor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PageScalingFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScalingFactor As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; PageScalingFactor { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PageScalingFactor : Nullable&lt;int&gt; with get, set" Usage="System.Printing.PrintTicket.PageScalingFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打印机放大或缩小页面上打印图像的百分率。</summary>
        <value>一个表示百分数的 <see cref="T:System.Int32" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 打印机可以进行缩放的最大和最小限制。 可以使用的规模限制测试<xref:System.Printing.PrintCapabilities.PageScalingFactorRange%2A>。  
  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 这<xref:System.Printing.PrintTicket.PageScalingFactor%2A>属性通常表示**规模**`ScoredProperty`的[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageScaling`关键字。 但有一些复杂问题，如下所示。  
  
 读取时<xref:System.Printing.PrintTicket.PageScalingFactor%2A>属性，该属性的行为，如下所示。  
  
-   PrintTicket XML 文档是否`PageScaling`功能设置为**CustomSquare**选项，和**CustomSquare**选项的**规模**值是正值，然后，是返回的值。  
  
-   PrintTicket XML 文档是否`PageScaling`功能设置为**自定义**选项，和**自定义**选项的**ScaleWidth**值是正值，就在那时，是返回的值。  
  
-   在所有其他情况下，`null`返回。  
  
 设置时<xref:System.Printing.PrintTicket.PageScalingFactor%2A>属性，该属性的行为，如下所示。  
  
-   如果设置为`null`，则`PageScaling`标记已从 PrintTicket XML 文档。  
  
-   否则为`PageScaling`PrintTicket XML 文档中的功能设置为**CustomSquare**并且**CustomSquare**选项的**规模**设置值与传递值。 (请参阅**异常**有关会发生什么情况的属性设置为小于 1 的值。)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为小于 1 的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PagesPerSheet">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; PagesPerSheet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; PagesPerSheet" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PagesPerSheet" />
      <MemberSignature Language="VB.NET" Value="Public Property PagesPerSheet As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; PagesPerSheet { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PagesPerSheet : Nullable&lt;int&gt; with get, set" Usage="System.Printing.PrintTicket.PagesPerSheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打印在一张纸的每一打印面上的页数。</summary>
        <value>一个可以为 null 的 <see cref="T:System.Int32" /> 值，表示打印在一张纸的每个打印面上的页数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大多数打印机支持仅有限的特定的可能性，例如 1、 2、 4、 6、 8 和 16 每侧的页面范围。 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PagesPerSheetCapability%2A>属性。  
  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于**PagesPerSheet** `ScoredProperty`的[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobNUpAllDocumentsContiguously`关键字，不`DocumentNUp`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PagesPerSheetCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为小于 1 的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PagesPerSheetDirection">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PagesPerSheetDirection&gt; PagesPerSheetDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PagesPerSheetDirection&gt; PagesPerSheetDirection" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PagesPerSheetDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property PagesPerSheetDirection As Nullable(Of PagesPerSheetDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PagesPerSheetDirection&gt; PagesPerSheetDirection { Nullable&lt;System::Printing::PagesPerSheetDirection&gt; get(); void set(Nullable&lt;System::Printing::PagesPerSheetDirection&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PagesPerSheetDirection : Nullable&lt;System.Printing.PagesPerSheetDirection&gt; with get, set" Usage="System.Printing.PrintTicket.PagesPerSheetDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PagesPerSheetDirection&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机如何排列打印在一张纸的每一页面上的多页。</summary>
        <value>用于表示打印机如何在一张纸上呈现多页的 <see cref="T:System.Printing.PagesPerSheetDirection" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，打印机可以呈现页中从左到右的行与行堆积上到。  
  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于**PresentationDirection**的 subfeature[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobNUpAllDocumentsContiguously`关键字，不`DocumentNUp`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PagesPerSheetDirectionCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PagesPerSheetDirection" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PhotoPrintingIntent">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.PhotoPrintingIntent&gt; PhotoPrintingIntent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.PhotoPrintingIntent&gt; PhotoPrintingIntent" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.PhotoPrintingIntent" />
      <MemberSignature Language="VB.NET" Value="Public Property PhotoPrintingIntent As Nullable(Of PhotoPrintingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::PhotoPrintingIntent&gt; PhotoPrintingIntent { Nullable&lt;System::Printing::PhotoPrintingIntent&gt; get(); void set(Nullable&lt;System::Printing::PhotoPrintingIntent&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PhotoPrintingIntent : Nullable&lt;System.Printing.PhotoPrintingIntent&gt; with get, set" Usage="System.Printing.PrintTicket.PhotoPrintingIntent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.PhotoPrintingIntent&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示打印机在打印照片时所使用的定性的质量级别。</summary>
        <value>用于表示照片质量级别的 <see cref="T:System.Printing.PhotoPrintingIntent" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 照片打印机驱动程序将转换到特定分辨率和其他因素的定量值中此属性的定性表达式。  
  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PagePhotoPrintingIntent`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.PhotoPrintingIntentCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.PhotoPrintingIntent" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Printing.PrintTicket.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyChanged As PropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Printing.PrintTicket" /> 的任何属性变化时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveTo">
      <MemberSignature Language="C#" Value="public void SaveTo (System.IO.Stream outStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveTo(class System.IO.Stream outStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintTicket.SaveTo(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveTo (outStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveTo(System::IO::Stream ^ outStream);" />
      <MemberSignature Language="F#" Value="member this.SaveTo : System.IO.Stream -&gt; unit" Usage="printTicket.SaveTo outStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outStream">拥有保存的 <see cref="T:System.IO.Stream" /> 的 <see cref="T:System.Printing.PrintTicket" />。</param>
        <summary>通过使用符合[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的 XML 格式将 <see cref="T:System.Printing.PrintTicket" /> 设置保存到 <see cref="T:System.IO.Stream" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会在流的读写位置重置回其原始位置。 应调用此方法后置它。  
  
 如果任何属性的<xref:System.Printing.PrintTicket>是`null`，它们只是不会包含在 XML 标记中。  
  
 如果<xref:System.Printing.PrintTicket>对象使用包含未由任何表示标记元素的 PrintTicket 文档构造<xref:System.Printing.PrintTicket>类的公共属性，这些元素将包含在此方法保存的 PrintTicket 文档。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">打印架构</related>
      </Docs>
    </Member>
    <Member MemberName="Stapling">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.Stapling&gt; Stapling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.Stapling&gt; Stapling" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.Stapling" />
      <MemberSignature Language="VB.NET" Value="Public Property Stapling As Nullable(Of Stapling)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::Stapling&gt; Stapling { Nullable&lt;System::Printing::Stapling&gt; get(); void set(Nullable&lt;System::Printing::Stapling&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.Stapling : Nullable&lt;System.Printing.Stapling&gt; with get, set" Usage="System.Printing.PrintTicket.Stapling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.Stapling&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示打印机是否装订多页以及装订多页位置的值。</summary>
        <value>用于指定打印机如何装订输出的 <see cref="T:System.Printing.Stapling" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，打印机可以放置在一张纸的纸张或在左上角中的一个书钉的左边缘进行两次装订。  
  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`JobStapleAllDocuments`关键字，不`DocumentStaple`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.StaplingCapability%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用此属性时测试打印机的功能和配置打印作业来充分利用它们。  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.Stapling" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TrueTypeFontMode">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.Printing.TrueTypeFontMode&gt; TrueTypeFontMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Printing.TrueTypeFontMode&gt; TrueTypeFontMode" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintTicket.TrueTypeFontMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TrueTypeFontMode As Nullable(Of TrueTypeFontMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::Printing::TrueTypeFontMode&gt; TrueTypeFontMode { Nullable&lt;System::Printing::TrueTypeFontMode&gt; get(); void set(Nullable&lt;System::Printing::TrueTypeFontMode&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.TrueTypeFontMode : Nullable&lt;System.Printing.TrueTypeFontMode&gt; with get, set" Usage="System.Printing.PrintTicket.TrueTypeFontMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ReachFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Printing.TrueTypeFontMode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示打印机如何处理使用 TrueType 字体的文本的值。</summary>
        <value>用于指定打印机如何处理 TrueType 字体的 <see cref="T:System.Printing.TrueTypeFontMode" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个`null`值此属性则表示未指定此功能设置。 此外，如果的值是`null`，XML 版本的<xref:System.Printing.PrintTicket>(请参阅<xref:System.Printing.PrintTicket.SaveTo%2A>和<xref:System.Printing.PrintTicket.GetXmlStream%2A>) 将不包含此功能的任何标记。  
  
 此属性对应于[打印架构](https://go.microsoft.com/fwlink/?LinkId=186397)的`PageTrueTypeFontMode`关键字。  
  
 你可以测试使用的打印机支持的选项<xref:System.Printing.PrintCapabilities.TrueTypeFontModeCapability%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">调用代码操作尝试将属性设置为不在 <see cref="T:System.Printing.TrueTypeFontMode" /> 枚举范围内的值。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
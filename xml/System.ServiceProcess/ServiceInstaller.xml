<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e6765d4baec8d048456f421424ebdc9a9b90ced" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70564208" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="204d1-101">安装一个类，该类扩展 <see cref="T:System.ServiceProcess.ServiceBase" /> 来实现服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-101">Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service.</span></span> <span data-ttu-id="204d1-102">在安装服务应用程序时由安装实用工具调用该类。</span><span class="sxs-lookup"><span data-stu-id="204d1-102">This class is called by the install utility when installing a service application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-103"><xref:System.ServiceProcess.ServiceInstaller>确实适用于与其关联的服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-103">The <xref:System.ServiceProcess.ServiceInstaller> does work specific to the service with which it is associated.</span></span> <span data-ttu-id="204d1-104">它由安装实用工具用来将与服务相关联的注册表值写入到 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services 注册表项中的子项。</span><span class="sxs-lookup"><span data-stu-id="204d1-104">It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services registry key.</span></span> <span data-ttu-id="204d1-105">服务由其在此子项中的 ServiceName 标识。</span><span class="sxs-lookup"><span data-stu-id="204d1-105">The service is identified by its ServiceName within this subkey.</span></span> <span data-ttu-id="204d1-106">子项还包括服务所属的可执行文件或 .dll 的名称。</span><span class="sxs-lookup"><span data-stu-id="204d1-106">The subkey also includes the name of the executable or .dll to which the service belongs.</span></span>  
  
 <span data-ttu-id="204d1-107">若要安装服务，请创建一个从<xref:System.Configuration.Install.Installer>类继承的项目安装程序类，并<xref:System.ComponentModel.RunInstallerAttribute>将类的特性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="204d1-107">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="204d1-108">在项目中，为每<xref:System.ServiceProcess.ServiceProcessInstaller>个服务应用程序创建一个实例<xref:System.ServiceProcess.ServiceInstaller> ，并为应用程序中的每个服务创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="204d1-108">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="204d1-109">在项目安装程序类构造函数中，使用<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例设置服务的安装属性，并<xref:System.Configuration.Install.Installer.Installers%2A>将实例添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="204d1-109">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204d1-110">建议使用构造函数来添加安装程序实例;但是，如果需要<xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A>在方法中将添加到集合中，请确保在<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法中对集合执行相同的添加。</span><span class="sxs-lookup"><span data-stu-id="204d1-110">It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.</span></span>  
  
 <span data-ttu-id="204d1-111">对于从<xref:System.Configuration.Install.Installer>类派生的所有类， <xref:System.Configuration.Install.Installer.Installers%2A>集合的状态在<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法中必须相同。</span><span class="sxs-lookup"><span data-stu-id="204d1-111">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="204d1-112">但是，如果将安装程序实例添加到自定义安装<xref:System.ServiceProcess.ServiceInstaller.Install%2A>程序<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>类构造函数中的<xref:System.Configuration.Install.Installer.Installers%2A>集合，则可以避免在和方法中维护集合。在调用安装实用程序时，它会查找<xref:System.ComponentModel.RunInstallerAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="204d1-112">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute.</span></span> <span data-ttu-id="204d1-113">如果该属性为`true`，则实用工具将安装已添加<xref:System.Configuration.Install.Installer.Installers%2A>到集合中并与项目安装程序关联的所有服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-113">If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer.</span></span> <span data-ttu-id="204d1-114">如果<xref:System.ComponentModel.RunInstallerAttribute> 为 `false` 或不存在，则安装实用工具会忽略项目安装程序。</span><span class="sxs-lookup"><span data-stu-id="204d1-114">If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.</span></span>  
  
 <span data-ttu-id="204d1-115">与<xref:System.ServiceProcess.ServiceProcessInstaller>项目安装类关联的将安装对项目中的<xref:System.ServiceProcess.ServiceInstaller>所有实例都通用的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-115">The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all <xref:System.ServiceProcess.ServiceInstaller> instances in the project.</span></span> <span data-ttu-id="204d1-116">如果此服务具有与安装项目中的其他服务分隔的任何内容，则此方法会安装该服务特定的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-116">If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204d1-117">与从<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 派生 <xref:System.ServiceProcess.ServiceBase> 的类的相同，这一点非常重要。</span><span class="sxs-lookup"><span data-stu-id="204d1-117">It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the class you derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="204d1-118">通常，服务的<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>属性的值在服务应用程序的可执行文件的 Main （）函数内设置。</span><span class="sxs-lookup"><span data-stu-id="204d1-118">Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property for the service is set within the Main() function of the service application's executable.</span></span> <span data-ttu-id="204d1-119">服务控制管理器使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>属性在此可执行文件中查找服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-119">The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property to locate the service within this executable.</span></span>  
  
 <span data-ttu-id="204d1-120">你可以在将其添加<xref:System.ServiceProcess.ServiceInstaller> <xref:System.Configuration.Install.Installer.Installers%2A>到项目安装程序的集合之前或之后修改的其他属性。</span><span class="sxs-lookup"><span data-stu-id="204d1-120">You can modify other properties on the <xref:System.ServiceProcess.ServiceInstaller> either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer.</span></span> <span data-ttu-id="204d1-121">例如， <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>可以将服务设置为在重新启动时自动启动服务，或者要求用户手动启动该服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-121">For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.</span></span>  
  
 <span data-ttu-id="204d1-122">通常情况下，你不会在你<xref:System.ServiceProcess.ServiceInstaller>的代码内调用方法; 通常仅由安装实用工具调用这些方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-122">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="204d1-123">安装实用程序会在安装<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType>过程<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType>中自动调用和方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-123">The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> methods during the installation process.</span></span> <span data-ttu-id="204d1-124">如有必要，它将通过对所有以前<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>安装的<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>组件调用（或）来退出故障。</span><span class="sxs-lookup"><span data-stu-id="204d1-124">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) on all previously installed components.</span></span>  
  
 <span data-ttu-id="204d1-125">安装实用工具调用<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>以删除对象。</span><span class="sxs-lookup"><span data-stu-id="204d1-125">The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.</span></span>  
  
 <span data-ttu-id="204d1-126">应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>，自动维护有关已安装组件的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-126">An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="204d1-127">此状态信息会持续更新为<xref:System.ServiceProcess.ServiceProcessInstaller>实例，并且每个<xref:System.ServiceProcess.ServiceInstaller>实例由实用工具安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-127">This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="204d1-128">通常不需要让代码显式修改状态信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-128">It is usually unnecessary for your code to modify state information explicitly.</span></span>  
  
 <span data-ttu-id="204d1-129">执行安装时，它会自动创建<xref:System.Diagnostics.EventLogInstaller>以安装<xref:System.ServiceProcess.ServiceBase>与派生类关联的事件日志源。</span><span class="sxs-lookup"><span data-stu-id="204d1-129">When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class.</span></span> <span data-ttu-id="204d1-130">此<xref:System.Diagnostics.EventLog.Log%2A>源的属性<xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>由构造函数设置到计算机的应用程序日志。</span><span class="sxs-lookup"><span data-stu-id="204d1-130">The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log.</span></span> <span data-ttu-id="204d1-131">当<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>您设置<xref:System.ServiceProcess.ServiceInstaller> （ <xref:System.Diagnostics.EventLog.Source%2A>应与服务的相同）时，会自动将设置为相同的值。 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="204d1-131">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller> (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value.</span></span> <span data-ttu-id="204d1-132">在安装失败时，源的安装将与以前安装的服务一起回滚。</span><span class="sxs-lookup"><span data-stu-id="204d1-132">In an installation failure, the source's installation is rolled-back along with previously installed services.</span></span>  
  
 <span data-ttu-id="204d1-133">如果<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>服务正在运行，则该方法将尝试停止它。</span><span class="sxs-lookup"><span data-stu-id="204d1-133">The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running.</span></span> <span data-ttu-id="204d1-134">无论是否成功， <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>都将撤消所做的更改。 <xref:System.ServiceProcess.ServiceInstaller.Install%2A></span><span class="sxs-lookup"><span data-stu-id="204d1-134">Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>.</span></span> <span data-ttu-id="204d1-135">如果为事件日志记录创建了新源，则会删除该源。</span><span class="sxs-lookup"><span data-stu-id="204d1-135">If a new source was created for event logging, the source is deleted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204d1-136">下面的示例创建一个名`MyProjectInstaller`为的项目安装程序，该程序从<xref:System.Configuration.Install.Installer>继承。</span><span class="sxs-lookup"><span data-stu-id="204d1-136">The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>.</span></span> <span data-ttu-id="204d1-137">假设有一个服务可执行文件，其中包含两个服务： "Hello World Service 1" 和 "Hello World Service 2"。</span><span class="sxs-lookup"><span data-stu-id="204d1-137">It is assumed there is a service executable that contains two services, "Hello-World Service 1" and "Hello-World Service 2".</span></span> <span data-ttu-id="204d1-138">在的构造函数`MyProjectInstaller`中（将由安装实用工具调用）， <xref:System.ServiceProcess.ServiceInstaller>将为每个服务创建对象，并为可执行文件<xref:System.ServiceProcess.ServiceProcessInstaller>创建一个。</span><span class="sxs-lookup"><span data-stu-id="204d1-138">Within the constructor for `MyProjectInstaller` (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable.</span></span> <span data-ttu-id="204d1-139">为了使安装实用工具识别`MyProjectInstaller`为有效的安装程序，该<xref:System.ComponentModel.RunInstallerAttribute>特性设置为。 `true`</span><span class="sxs-lookup"><span data-stu-id="204d1-139">For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.</span></span>  
  
 <span data-ttu-id="204d1-140">在将安装程序添加到<xref:System.Configuration.Install.Installer.Installers%2A>集合之前，在进程安装程序和服务安装程序上设置可选属性。</span><span class="sxs-lookup"><span data-stu-id="204d1-140">Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span> <span data-ttu-id="204d1-141">当安装实用工具访问`MyProjectInstaller`时，通过对的调用添加<xref:System.Configuration.Install.Installer.Installers%2A>到<xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType>集合中的对象将依次安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-141">When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> will be installed in turn.</span></span> <span data-ttu-id="204d1-142">在此过程中，安装程序将保留指示已安装的对象的状态信息，因此，如果发生安装失败，每个对象都可以依次备份。</span><span class="sxs-lookup"><span data-stu-id="204d1-142">During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.</span></span>  
  
 <span data-ttu-id="204d1-143">通常，不会显式创建项目安装程序类的实例。</span><span class="sxs-lookup"><span data-stu-id="204d1-143">Normally, you would not create an instance of your project installer class explicitly.</span></span> <span data-ttu-id="204d1-144">您将创建它并将<xref:System.ComponentModel.RunInstallerAttribute>属性添加到语法中，但它是实际调用的安装实用工具，因而实例化类。</span><span class="sxs-lookup"><span data-stu-id="204d1-144">You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.</span></span>  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="204d1-145">初始化 <see cref="T:System.ServiceProcess.ServiceInstaller" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="204d1-145">Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-146">若要安装服务，请创建一个从<xref:System.Configuration.Install.Installer>类继承的项目安装程序类，并<xref:System.ComponentModel.RunInstallerAttribute>将类的特性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="204d1-146">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="204d1-147">在项目中，为每<xref:System.ServiceProcess.ServiceProcessInstaller>个服务应用程序创建一个实例<xref:System.ServiceProcess.ServiceInstaller> ，并为应用程序中的每个服务创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="204d1-147">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="204d1-148">在项目安装程序类构造函数中，使用<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例设置服务的安装属性，并<xref:System.Configuration.Install.Installer.Installers%2A>将实例添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="204d1-148">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
 <span data-ttu-id="204d1-149">构造函数会自动生成一个事件日志源<xref:System.Diagnostics.EventLog.Log%2A> ，其属性设置为计算机的<xref:System.Diagnostics.EventLogInstaller>应用程序日志和。 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A></span><span class="sxs-lookup"><span data-stu-id="204d1-149">The <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor automatically generates an event log source whose <xref:System.Diagnostics.EventLog.Log%2A> property is set to the computer's Application log, and an <xref:System.Diagnostics.EventLogInstaller>.</span></span> <span data-ttu-id="204d1-150">当<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>您设置<xref:System.ServiceProcess.ServiceInstaller>的（它<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>应该与服务的相同）时，事件日志的<xref:System.Diagnostics.EventLog.Source%2A>属性将自动设置为相同的值。</span><span class="sxs-lookup"><span data-stu-id="204d1-150">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller>, which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the service, the <xref:System.Diagnostics.EventLog.Source%2A> property of the event log is automatically set to the same value.</span></span> <span data-ttu-id="204d1-151">如果安装失败，将自动删除该源。</span><span class="sxs-lookup"><span data-stu-id="204d1-151">The source is deleted automatically in the case of an installation failure.</span></span>  
  
 <span data-ttu-id="204d1-152">构造函数将属性设置为`ServiceStartMode.Manual` ，以指定用户启动该服务。 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A></span><span class="sxs-lookup"><span data-stu-id="204d1-152">The <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor sets the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> property to `ServiceStartMode.Manual` to specify that a user start the service.</span></span> <span data-ttu-id="204d1-153">您可以将属性重置`ServiceStartMode.Automatic`为，以指定服务在计算机重新启动时启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-153">You can reset the property to `ServiceStartMode.Automatic` to specify that the service start when the computer reboots.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="204d1-154">要从中进行复制的 <see cref="T:System.ComponentModel.IComponent" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-154">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</span></span></param>
        <summary><span data-ttu-id="204d1-155">将来自 <see cref="T:System.ServiceProcess.ServiceBase" /> 的一个实例的属性复制到此安装程序。</span><span class="sxs-lookup"><span data-stu-id="204d1-155">Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" /> to this installer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-156">在代码中很少会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-156">This method will rarely be called within your code.</span></span> <span data-ttu-id="204d1-157"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>通常由设计器调用。</span><span class="sxs-lookup"><span data-stu-id="204d1-157"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> is usually called only by designers.</span></span>  
  
 <span data-ttu-id="204d1-158"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>将`component`参数的服务名称保存<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>到<xref:System.ServiceProcess.ServiceInstaller>实例的。</span><span class="sxs-lookup"><span data-stu-id="204d1-158"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> saves the service name of the `component` parameter to the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller> instance.</span></span> <span data-ttu-id="204d1-159">（因为参数必须是派生自<xref:System.ServiceProcess.ServiceBase>的类的实例， `component`所以保证具有<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>属性。）</span><span class="sxs-lookup"><span data-stu-id="204d1-159">(Because the parameter must be an instance of a class that derives from <xref:System.ServiceProcess.ServiceBase>, `component` is guaranteed to have a <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204d1-160">如果你使用的是 Visual Studio 设计器，则当用户单击`Add Installer`将此类指定为其安装程序的组件时，将在设计时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-160">If you are using the Visual Studio designer, this method is called at design time when the user clicks `Add Installer` on a component that specified this class as its installer.</span></span> <span data-ttu-id="204d1-161">安装程序将从实时组件获取所有信息，并将其存储在安装时使用。</span><span class="sxs-lookup"><span data-stu-id="204d1-161">The installer takes all information it can from the live component and stores it for use at install time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="204d1-162">正与该安装程序关联的组件并非从 <see cref="T:System.ServiceProcess.ServiceBase" /> 继承。</span><span class="sxs-lookup"><span data-stu-id="204d1-162">The component you are associating with this installer does not inherit from <see cref="T:System.ServiceProcess.ServiceBase" />.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-163">获取或设置一个值，该值指示是否应延迟启动该服务，直到运行其他自动启动的服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-163">Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</span></span></summary>
        <value><span data-ttu-id="204d1-164">若要延迟该服务的自动启动，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-164"><see langword="true" /> to delay automatic start of the service; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="204d1-165">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-165">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-166">该<xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A>属性可应用于任何服务，但会被忽略，除非服务的启动模式为<xref:System.ServiceProcess.ServiceStartMode.Automatic>。</span><span class="sxs-lookup"><span data-stu-id="204d1-166">The <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> property can be applied to any service, but it is ignored unless the service's start mode is <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="204d1-167">此设置将在系统下一次重新启动时生效。</span><span class="sxs-lookup"><span data-stu-id="204d1-167">The setting takes effect the next time the system is restarted.</span></span> <span data-ttu-id="204d1-168">服务控制管理器不保证服务的特定开始时间。</span><span class="sxs-lookup"><span data-stu-id="204d1-168">The Service Control Manager does not guarantee a specific start time for the service.</span></span>  
  
 <span data-ttu-id="204d1-169">延迟的自动启动服务不能是加载顺序组的成员，但它可以依赖于另一台自动启动服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-169">A delayed automatic start service cannot be a member of a load ordering group, but it can depend on another automatic start service.</span></span> <span data-ttu-id="204d1-170">如果应用程序在加载之前调用延迟的自动启动服务，则调用失败。</span><span class="sxs-lookup"><span data-stu-id="204d1-170">If an application calls a delayed automatic start service before it is loaded, the call fails.</span></span>  
  
 <span data-ttu-id="204d1-171">在不支持延迟自动启动的操作系统上，设置此属性不起作用。</span><span class="sxs-lookup"><span data-stu-id="204d1-171">On operating systems that do not support delayed automatic start, setting this property has no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-172">获取或设置服务的说明。</span><span class="sxs-lookup"><span data-stu-id="204d1-172">Gets or sets the description for the service.</span></span></summary>
        <value><span data-ttu-id="204d1-173">服务的说明。</span><span class="sxs-lookup"><span data-stu-id="204d1-173">The description of the service.</span></span> <span data-ttu-id="204d1-174">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="204d1-174">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-175"><xref:System.ServiceProcess.ServiceInstaller.Description%2A>使用属性来描述已安装服务对用户的用途。</span><span class="sxs-lookup"><span data-stu-id="204d1-175">Use the <xref:System.ServiceProcess.ServiceInstaller.Description%2A> property to describe the purpose of the installed service to the user.</span></span> <span data-ttu-id="204d1-176">用户可以在显示已安装服务的详细信息的应用程序中查看服务说明。</span><span class="sxs-lookup"><span data-stu-id="204d1-176">The user can view the service description in applications that display details for installed services.</span></span>  
  
 <span data-ttu-id="204d1-177">例如，使用 Windows XP 时，可以使用服务控制命令行实用程序（Sc.exe）查看服务说明，也可以在 "**计算机管理**" 控制台的 "**服务**" 节点中查看服务说明。</span><span class="sxs-lookup"><span data-stu-id="204d1-177">For example, using Windows XP, you can view the service description with the Service Control command-line utility (Sc.exe) or you can view the service description within the **Services** node of the **Computer Management** console.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204d1-178">下面的代码示例设置新的 Windows 服务应用程序的安装属性。</span><span class="sxs-lookup"><span data-stu-id="204d1-178">The following code example sets the installation properties for a new Windows service application.</span></span> <span data-ttu-id="204d1-179">该示例将设置服务名称以及显示名称和说明。</span><span class="sxs-lookup"><span data-stu-id="204d1-179">The example sets the service name, along with the display name and description.</span></span> <span data-ttu-id="204d1-180">为服务分配安装属性后，该示例将<xref:System.ServiceProcess.ServiceInstaller>对象添加<xref:System.Configuration.Install.Installer.Installers%2A>到集合中。</span><span class="sxs-lookup"><span data-stu-id="204d1-180">After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-181">指示向用户标识服务的友好名称。</span><span class="sxs-lookup"><span data-stu-id="204d1-181">Indicates the friendly name that identifies the service to the user.</span></span></summary>
        <value><span data-ttu-id="204d1-182">与服务关联的名称，常用于交互工具。</span><span class="sxs-lookup"><span data-stu-id="204d1-182">The name associated with the service, used frequently for interactive tools.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-183"><xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>例如，在服务控制管理器中，用于为服务提供用户可读的描述性名称。</span><span class="sxs-lookup"><span data-stu-id="204d1-183">The <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service.</span></span> <span data-ttu-id="204d1-184"><xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>是注册表值，但从不用作注册表项。</span><span class="sxs-lookup"><span data-stu-id="204d1-184">The <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> is a registry value, but is never used as a registry key.</span></span> <span data-ttu-id="204d1-185">因此，对属性值<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的限制不适用于。</span><span class="sxs-lookup"><span data-stu-id="204d1-185">Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply.</span></span> <span data-ttu-id="204d1-186"><xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>用作 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 注册表项，因此受到限制。</span><span class="sxs-lookup"><span data-stu-id="204d1-186"><xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services registry key, so it is restricted.</span></span>  
  
 <span data-ttu-id="204d1-187">显示名称永远不会由安装实用工具用来标识服务，因此，对该<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>属性的选择没有任何限制。</span><span class="sxs-lookup"><span data-stu-id="204d1-187">The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><span data-ttu-id="204d1-188"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-188">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span></span></param>
        <summary><span data-ttu-id="204d1-189">通过向注册表写入服务应用程序信息来安装服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-189">Installs the service by writing service application information to the registry.</span></span> <span data-ttu-id="204d1-190">该方法旨在由自动处理适当方法的安装工具使用。</span><span class="sxs-lookup"><span data-stu-id="204d1-190">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-191">通常情况下，你不会在你<xref:System.ServiceProcess.ServiceInstaller>的代码内调用方法; 通常仅由安装实用工具调用这些方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-191">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="204d1-192">安装实用程序会在安装<xref:System.ServiceProcess.ServiceInstaller.Install%2A>过程中自动调用此方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-192">The install utility automatically calls the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method during installation.</span></span> <span data-ttu-id="204d1-193">如果需要，它会在生成异常的对象<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>上调用，从而支持故障。</span><span class="sxs-lookup"><span data-stu-id="204d1-193">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> on the object that generated the exception.</span></span>  
  
 <span data-ttu-id="204d1-194">应用程序的安装例程会使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>，自动维护有关已安装的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-194">An application's install routine maintains information automatically about the components that were already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="204d1-195">作为<xref:System.ServiceProcess.ServiceInstaller.Install%2A> `stateSaver`参数传递到的此状态信息<xref:System.ServiceProcess.ServiceProcessInstaller>会不断更新为实例，并且每个<xref:System.ServiceProcess.ServiceInstaller>实例由实用工具安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-195">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="204d1-196">通常不需要让代码显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-196">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 <span data-ttu-id="204d1-197">与<xref:System.ServiceProcess.ServiceProcessInstaller>项目安装类关联的将安装对项目中的<xref:System.ServiceProcess.ServiceInstaller>所有实例都通用的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-197">The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all <xref:System.ServiceProcess.ServiceInstaller> instances in the project.</span></span> <span data-ttu-id="204d1-198">如果此服务具有与安装项目中的其他服务分隔的任何内容，则此方法会安装该服务特定的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-198">If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</span></span>  
  
 <span data-ttu-id="204d1-199">若要安装服务，请创建一个从<xref:System.Configuration.Install.Installer>类继承的项目安装程序类，并<xref:System.ComponentModel.RunInstallerAttribute>将类的特性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="204d1-199">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="204d1-200">在项目中，为每<xref:System.ServiceProcess.ServiceProcessInstaller>个服务应用程序创建一个实例<xref:System.ServiceProcess.ServiceInstaller> ，并为应用程序中的每个服务创建一个实例。</span><span class="sxs-lookup"><span data-stu-id="204d1-200">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="204d1-201">在项目安装程序类构造函数中，使用<xref:System.ServiceProcess.ServiceProcessInstaller>和<xref:System.ServiceProcess.ServiceInstaller>实例设置服务的安装属性，并<xref:System.Configuration.Install.Installer.Installers%2A>将实例添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="204d1-201">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204d1-202">建议使用构造函数来添加安装程序实例;但是，如果需要<xref:System.Configuration.Install.Installer.Installers%2A> <xref:System.ServiceProcess.ServiceInstaller.Install%2A>在方法中将添加到集合中，请确保在<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法中对集合执行相同的添加。</span><span class="sxs-lookup"><span data-stu-id="204d1-202">It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.</span></span>  
  
 <span data-ttu-id="204d1-203">对于从<xref:System.Configuration.Install.Installer>类派生的所有类， <xref:System.Configuration.Install.Installer.Installers%2A>集合的状态在<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法中必须相同。</span><span class="sxs-lookup"><span data-stu-id="204d1-203">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="204d1-204">但是，如果将安装程序实例添加到自定义安装<xref:System.ServiceProcess.ServiceInstaller.Install%2A>程序<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>类构造函数中的<xref:System.Configuration.Install.Installer.Installers%2A>集合，则可以避免在和方法中维护集合。</span><span class="sxs-lookup"><span data-stu-id="204d1-204">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="204d1-205">安装不包含可执行文件的 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-205">The installation does not contain a <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> for the executable.</span></span>  
  
<span data-ttu-id="204d1-206">或</span><span class="sxs-lookup"><span data-stu-id="204d1-206">-or-</span></span> 
<span data-ttu-id="204d1-207">程序集的文件名为 <see langword="null" /> 或空字符串。</span><span class="sxs-lookup"><span data-stu-id="204d1-207">The file name for the assembly is <see langword="null" /> or an empty string.</span></span>  
  
<span data-ttu-id="204d1-208">或</span><span class="sxs-lookup"><span data-stu-id="204d1-208">-or-</span></span> 
<span data-ttu-id="204d1-209">服务名无效。</span><span class="sxs-lookup"><span data-stu-id="204d1-209">The service name is invalid.</span></span>  
  
<span data-ttu-id="204d1-210">或</span><span class="sxs-lookup"><span data-stu-id="204d1-210">-or-</span></span> 
<span data-ttu-id="204d1-211">未能打开服务控制管理器。</span><span class="sxs-lookup"><span data-stu-id="204d1-211">The Service Control Manager could not be opened.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="204d1-212">服务的显示名称的长度超过 255 个字符。</span><span class="sxs-lookup"><span data-stu-id="204d1-212">The display name for the service is more than 255 characters in length.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="204d1-213">系统未能生成服务的句柄。</span><span class="sxs-lookup"><span data-stu-id="204d1-213">The system could not generate a handle to the service.</span></span>  
  
 <span data-ttu-id="204d1-214">或</span><span class="sxs-lookup"><span data-stu-id="204d1-214">-or-</span></span>  
  
 <span data-ttu-id="204d1-215">该名称的服务已安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-215">A service with that name is already installed.</span></span></exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller"><span data-ttu-id="204d1-216">与当前安装程序进行比较的 <see cref="T:System.Configuration.Install.ComponentInstaller" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-216">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</span></span></param>
        <summary><span data-ttu-id="204d1-217">指示两个安装程序是否会安装相同的服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-217">Indicates whether two installers would install the same service.</span></span></summary>
        <returns><span data-ttu-id="204d1-218">如果在这两个安装程序上调用 <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> 将导致安装相同的服务，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="204d1-218"><see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result in installing the same service; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-219"><xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>指示两个安装程序是否在同一用户帐户下安装相同的服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-219"><xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> indicates, for example, whether two installers would install the same service under the same user account.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="204d1-220"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-220">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span></span></param>
        <summary><span data-ttu-id="204d1-221">回滚由安装过程写到注册表的服务应用程序信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-221">Rolls back service application information written to the registry by the installation procedure.</span></span> <span data-ttu-id="204d1-222">该方法旨在由自动处理适当方法的安装工具使用。</span><span class="sxs-lookup"><span data-stu-id="204d1-222">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-223">通常情况下，你不会在你<xref:System.ServiceProcess.ServiceInstaller>的代码内调用方法; 通常仅由安装实用工具调用这些方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-223">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="204d1-224">安装实用程序会在安装<xref:System.ServiceProcess.ServiceInstaller.Install%2A>过程中自动调用此方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-224">The install utility automatically calls the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method during the installation process.</span></span> <span data-ttu-id="204d1-225">如果需要，它会在生成异常的对象<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>上调用，从而支持故障。</span><span class="sxs-lookup"><span data-stu-id="204d1-225">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> on the object that generated the exception.</span></span>  
  
 <span data-ttu-id="204d1-226">应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>，自动维护有关已安装组件的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-226">An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="204d1-227">作为<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> `savedState`参数传递到的此状态信息<xref:System.ServiceProcess.ServiceProcessInstaller>会不断更新为实例，并且每个<xref:System.ServiceProcess.ServiceInstaller>实例由实用工具安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-227">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="204d1-228">通常不需要让代码显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-228">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-229">指示系统用于标识此服务的名称。</span><span class="sxs-lookup"><span data-stu-id="204d1-229">Indicates the name used by the system to identify this service.</span></span> <span data-ttu-id="204d1-230">此属性必须与要安装的服务的 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="204d1-230">This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> of the service you want to install.</span></span></summary>
        <value><span data-ttu-id="204d1-231">要安装的服务的名称。</span><span class="sxs-lookup"><span data-stu-id="204d1-231">The name of the service to be installed.</span></span> <span data-ttu-id="204d1-232">该值必须在安装实用工具尝试安装服务以前进行设置。</span><span class="sxs-lookup"><span data-stu-id="204d1-232">This value must be set before the install utility attempts to install the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-233">与从<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 派生 <xref:System.ServiceProcess.ServiceBase> 的类的相同，这一点非常重要。</span><span class="sxs-lookup"><span data-stu-id="204d1-233">It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the class you derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="204d1-234">通常，服务的<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType>属性的值在服务应用程序的可执行文件的 Main （）函数内设置。</span><span class="sxs-lookup"><span data-stu-id="204d1-234">Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property for the service is set within the Main() function of the service application's executable.</span></span> <span data-ttu-id="204d1-235">服务控制管理器使用<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType>属性在此可执行文件中查找服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-235">The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property to locate the service within this executable.</span></span>  
  
 <span data-ttu-id="204d1-236">设置<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>服务安装程序的时<xref:System.Diagnostics.EventLog.Source%2A> ，关联的事件日志的将设置为相同的值。</span><span class="sxs-lookup"><span data-stu-id="204d1-236">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value.</span></span> <span data-ttu-id="204d1-237">这允许服务自动记录对计算机上的应用程序日志的服务命令（如启动和停止）调用。</span><span class="sxs-lookup"><span data-stu-id="204d1-237">This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204d1-238">如果计算机上已存在具有相同名称的源，但在应用程序日志以外的其他日志中，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="204d1-238">If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown.</span></span> <span data-ttu-id="204d1-239">如果源存在并且与应用程序日志关联，则该源用于向服务报告命令调用，并且不引发异常。</span><span class="sxs-lookup"><span data-stu-id="204d1-239">If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="204d1-240">不能为`null`或长度为零。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A></span><span class="sxs-lookup"><span data-stu-id="204d1-240">The <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> cannot be `null` or have zero length.</span></span> <span data-ttu-id="204d1-241">其最大大小为256个字符。</span><span class="sxs-lookup"><span data-stu-id="204d1-241">Its maximum size is 256 characters.</span></span> <span data-ttu-id="204d1-242">它也不能包含正斜杠或反斜杠、"/"\\或 ""，也不能包含值小于 decimal 值32的 ASCII 字符集中的字符。</span><span class="sxs-lookup"><span data-stu-id="204d1-242">It also cannot contain forward or backward slashes, '/' or '\\', or characters from the ASCII character set with value less than decimal value 32.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="204d1-243"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> 属性无效。</span><span class="sxs-lookup"><span data-stu-id="204d1-243">The <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> property is invalid.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-244">指示为使该服务能够运行而必须正在运行的服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-244">Indicates the services that must be running for this service to run.</span></span></summary>
        <value><span data-ttu-id="204d1-245">在与该安装程序关联的服务运行以前必须运行的一组服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-245">An array of services that must be running before the service associated with this installer can run.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-246">服务可能需要运行其他服务，然后才能启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-246">A service can require other services to be running before it can start.</span></span> <span data-ttu-id="204d1-247">此属性中的信息将写入注册表中的密钥。</span><span class="sxs-lookup"><span data-stu-id="204d1-247">The information from this property is written to a key in the registry.</span></span> <span data-ttu-id="204d1-248">当用户（或系统在自动启动时）尝试运行服务时，服务控制管理器（SCM）将验证阵列中的每个服务是否已启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-248">When the user (or the system, in the case of automatic startup) tries to run the service, the Service Control Manager (SCM) verifies that each of the services in the array has already been started.</span></span>  
  
 <span data-ttu-id="204d1-249">如果阵列中的任何服务未运行，则 SCM 会尝试启动它们。</span><span class="sxs-lookup"><span data-stu-id="204d1-249">If any service in the array is not running then, the SCM tries to start them.</span></span> <span data-ttu-id="204d1-250">这包括的`Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-250">This includes services with `Manual`<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</span></span>  
  
 <span data-ttu-id="204d1-251">如果此服务所依赖的任何服务无法启动，则此服务将无法启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-251">If any service upon which this service depends fails to start, this service will not start.</span></span> <span data-ttu-id="204d1-252">如果系统未启动，则不会引发异常，因为系统级别没有要检测到的异常处理。</span><span class="sxs-lookup"><span data-stu-id="204d1-252">An exception is not thrown if the system is not started because there is no exception handling at the system level to detect this.</span></span> <span data-ttu-id="204d1-253">确定如何处理服务启动失败并在代码中实现此操作。</span><span class="sxs-lookup"><span data-stu-id="204d1-253">Decide how to handle service start failures and implement this in your code.</span></span> <span data-ttu-id="204d1-254">通常，如果服务无法启动，则会在启动时向用户显示一个对话框。</span><span class="sxs-lookup"><span data-stu-id="204d1-254">Typically, a dialog appears to the user at startup if a service fails to start.</span></span>  
  
 <span data-ttu-id="204d1-255">如果服务未启动，则会向应用程序事件日志中写入一个条目。</span><span class="sxs-lookup"><span data-stu-id="204d1-255">If the service does not start, an entry is written to the Application event log.</span></span>  
  
 <span data-ttu-id="204d1-256">此服务所依赖的服务不需要处于相同的可执行文件中。</span><span class="sxs-lookup"><span data-stu-id="204d1-256">The services upon which this service depends do not need to be in the same executable.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204d1-257">指示启动此服务的方式和时间。</span><span class="sxs-lookup"><span data-stu-id="204d1-257">Indicates how and when this service is started.</span></span></summary>
        <value><span data-ttu-id="204d1-258"><see cref="T:System.ServiceProcess.ServiceStartMode" />，表示服务的启动方式。</span><span class="sxs-lookup"><span data-stu-id="204d1-258">A <see cref="T:System.ServiceProcess.ServiceStartMode" /> that represents the way the service is started.</span></span> <span data-ttu-id="204d1-259">默认值为 <see langword="Manual" />，指定在重新启动后服务将不会自动启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-259">The default is <see langword="Manual" />, which specifies that the service will not automatically start after reboot.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-260"><xref:System.ServiceProcess.ServiceInstaller.StartType%2A>设置以指定在重新启动后自动启动服务或用户必须手动启动服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-260">Set the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> to specify either that the service be started automatically after reboot or that a user must manually start the service.</span></span> <span data-ttu-id="204d1-261">还可以禁用服务，指定它在启用之前无法以手动或编程方式启动。</span><span class="sxs-lookup"><span data-stu-id="204d1-261">A service can also be disabled, specifying that it cannot be started, either manually or programmatically, until it is enabled.</span></span>  
  
 <span data-ttu-id="204d1-262">安装后不<xref:System.ServiceProcess.ServiceInstaller>能更改属性值。</span><span class="sxs-lookup"><span data-stu-id="204d1-262">You cannot change <xref:System.ServiceProcess.ServiceInstaller> property values after installation.</span></span> <span data-ttu-id="204d1-263">若要更改<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>，则必须卸载并重新安装服务，或者使用 "服务控制管理器" 手动更改设置。</span><span class="sxs-lookup"><span data-stu-id="204d1-263">To change the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, you either have to uninstall and reinstall your service, or manually change the setting using the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="204d1-264">启动模式不是 <see cref="T:System.ServiceProcess.ServiceStartMode" /> 枚举的有效值。</span><span class="sxs-lookup"><span data-stu-id="204d1-264">The start mode is not a value of the <see cref="T:System.ServiceProcess.ServiceStartMode" /> enumeration.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="204d1-265"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-265">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span></span></param>
        <summary><span data-ttu-id="204d1-266">通过从注册表中移除关于服务的信息来卸载服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-266">Uninstalls the service by removing information about it from the registry.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204d1-267">卸载首先尝试停止服务，然后再卸载它。</span><span class="sxs-lookup"><span data-stu-id="204d1-267">Uninstall first attempts to stop the service before uninstalling it.</span></span> <span data-ttu-id="204d1-268">如果无法停止该服务，则不会捕获到异常，并且该方法将继续删除该服务。</span><span class="sxs-lookup"><span data-stu-id="204d1-268">If the service cannot be stopped, no exception is caught, and the method continues with the removal of the service.</span></span>  
  
 <span data-ttu-id="204d1-269">通常情况下，你不会在你<xref:System.ServiceProcess.ServiceInstaller>的代码内调用方法; 通常仅由安装实用工具调用这些方法。</span><span class="sxs-lookup"><span data-stu-id="204d1-269">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="204d1-270">Installutil.exe 用于卸载服务以及安装服务;卸载会在命令行调用中采用开关。</span><span class="sxs-lookup"><span data-stu-id="204d1-270">InstallUtil is used to uninstall services as well as install them; uninstalling takes a switch in the command line call.</span></span>  
  
 <span data-ttu-id="204d1-271">应用程序的卸载例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>，自动维护有关正在卸载的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-271">An application's uninstall routine maintains information automatically about the components being uninstalled, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="204d1-272">作为<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> `savedState`参数传递到的此状态信息<xref:System.ServiceProcess.ServiceProcessInstaller>会不断更新为实例，并且每个<xref:System.ServiceProcess.ServiceInstaller>实例由实用工具安装。</span><span class="sxs-lookup"><span data-stu-id="204d1-272">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="204d1-273">通常不需要让代码显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="204d1-273">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 <span data-ttu-id="204d1-274">对于从<xref:System.Configuration.Install.Installer>类派生的所有类， <xref:System.Configuration.Install.Installer.Installers%2A>集合的状态在<xref:System.ServiceProcess.ServiceInstaller.Install%2A>和<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>方法中必须相同。</span><span class="sxs-lookup"><span data-stu-id="204d1-274">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="204d1-275">但是，如果将安装程序实例添加到自定义安装<xref:System.ServiceProcess.ServiceInstaller.Install%2A>程序<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>类构造函数中的<xref:System.Configuration.Install.Installer.Installers%2A>集合，则可以避免在和方法中维护集合。</span><span class="sxs-lookup"><span data-stu-id="204d1-275">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.</span></span>  
  
 <span data-ttu-id="204d1-276">没有用于卸载的回滚机制，因此，如果一个服务无法卸载，这不会影响正在卸载的其他服务（通常在同一安装项目内）。</span><span class="sxs-lookup"><span data-stu-id="204d1-276">There is no rollback mechanism for uninstalling, so if one service fails to uninstall, this does not affect the other services (usually within the same installation project) being uninstalled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="204d1-277">未能打开服务控制管理器。</span><span class="sxs-lookup"><span data-stu-id="204d1-277">The Service Control Manager could not be opened.</span></span>  
  
 <span data-ttu-id="204d1-278">- 或 -</span><span class="sxs-lookup"><span data-stu-id="204d1-278">-or-</span></span>  
  
 <span data-ttu-id="204d1-279">系统未能获取服务的句柄。</span><span class="sxs-lookup"><span data-stu-id="204d1-279">The system could not get a handle to the service.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="CompilerType" FullName="System.Web.Compilation.CompilerType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47059f99d61b81be7f98ae7226ad312de69c5d44" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64148240" /></Metadata><TypeSignature Language="C#" Value="public sealed class CompilerType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompilerType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.CompilerType" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompilerType" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerType sealed" />
  <TypeSignature Language="F#" Value="type CompilerType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 ASP.NET 生成环境用来从虚拟路径生成和编译源代码的编译器设置。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性的<xref:System.Web.Compilation.BuildProvider>实现，以检查用于生成和编译该生成提供程序的虚拟路径中的源代码的设置。  
  
 ASP.NET 生成环境使用<xref:System.Web.Compilation.BuildProvider>要生成的源代码在项目中的自定义文件类型的对象。 类派生自<xref:System.Web.Compilation.BuildProvider>提供源文件、 网页、 资源和其他自定义项的生成详细信息。 当生成提供程序需要特定的编程语言时，它会替代<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>属性并调用<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法以返回<xref:System.Web.Compilation.CompilerType>的受支持的编程语言的对象。  
  
 若要设置<xref:System.Web.Compilation.CompilerType>中的生成提供程序实现，使用对象<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A>方法或<xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A>方法。  
  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>属性指定<xref:System.CodeDom.Compiler.CodeDomProvider>实现，用于生成和编译为生成提供程序的源代码。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性定义用于将源代码编译为程序集的设置。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，继承自抽象<xref:System.Web.Compilation.BuildProvider>基类。 生成提供程序重写<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>， <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>，和<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>基类的成员。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
  </Docs>
  <Members>
    <Member MemberName="CodeDomProviderType">
      <MemberSignature Language="C#" Value="public Type CodeDomProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CodeDomProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.CompilerType.CodeDomProviderType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProviderType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CodeDomProviderType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProviderType : Type" Usage="System.Web.Compilation.CompilerType.CodeDomProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已配置的 <see cref="T:System.Type" /> 实现的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</summary>
        <value>一个只读的 <see cref="T:System.Type" />，表示已配置的代码提供程序类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>属性指定<xref:System.CodeDom.Compiler.CodeDomProvider>实现，用于生成和编译为生成提供程序的源代码。  
  
 例如，如果生成提供程序配置为在.NET Framework 中，使用 Visual Basic 代码提供程序<xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>将返回<xref:System.Type>为<xref:Microsoft.VisualBasic.VBCodeProvider>类。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
      </Docs>
    </Member>
    <Member MemberName="CompilerParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CompilerParameters CompilerParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CompilerParameters CompilerParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.CompilerType.CompilerParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompilerParameters As CompilerParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::CompilerParameters ^ CompilerParameters { System::CodeDom::Compiler::CompilerParameters ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompilerParameters : System.CodeDom.Compiler.CompilerParameters" Usage="System.Web.Compilation.CompilerType.CompilerParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于将源代码编译为程序集的设置和选项。</summary>
        <value>一个只读的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，表示代码编译器的设置和选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性可以检查为编译器配置的编译器选项。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性指定是否将警告视为错误，是否在编译器输出包含调试信息和其他编译器设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.CompilerType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compilerType.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">与 <see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例进行比较的对象。</param>
        <summary>确定指定的对象是否表示与 <see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例相同的代码提供程序和编译器设置。</summary>
        <returns>如果 <paramref name="o" /> 为 <see cref="T:System.Web.Compilation.CompilerType" /> 对象并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.Equals%2A>方法重写<xref:System.Object.Equals%2A?displayProperty=nameWithType>方法。  
  
 <xref:System.Web.Compilation.CompilerType.Equals%2A> 比较两个实例根据其<xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>， <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=nameWithType>， <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=nameWithType>，和<xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A?displayProperty=nameWithType>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.CompilerType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compilerType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns><see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例的 32 位有符号整数哈希代码，适合在哈希算法和数据结构（如哈希表）中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.GetHashCode%2A>方法重写<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>方法。  
  
 <xref:System.Web.Compilation.CompilerType.GetHashCode%2A> 生成相同的哈希代码的两个对象的相等根据<xref:System.Web.Compilation.CompilerType.Equals%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Web.Compilation.CompilerType.Equals(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
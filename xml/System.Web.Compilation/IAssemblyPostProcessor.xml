<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad9a75c0e2153f517afbada4d570c0a97f64f859" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64148095" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义方法，类可实现这些方法在生成程序集之后对程序集进行处理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在已编译后，实现此接口的类可以访问程序集。 <xref:System.Web.Compilation.AssemblyBuilder>类将程序集编译，然后检查以查看是否<xref:System.Web.Compilation.IAssemblyPostProcessor>接口已注册的 Web 配置文件中。 如果是这样，<xref:System.Web.Compilation.AssemblyBuilder>实例调用<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>方法<xref:System.Web.Compilation.IAssemblyPostProcessor>接口执行任何操作之后编译和之前加载程序集。 例如，探查器工具可以实现此接口可建立在程序集中的探测。  
  
 当<xref:System.Web.Compilation.IAssemblyPostProcessor>注册接口，ASP.NET 应用程序和其程序集始终将编译在调试模式下。  
  
   
  
## Examples  
 下面的代码示例演示如何创建实现<xref:System.Web.Compilation.IAssemblyPostProcessor>接口，并将其注册的 Web 应用程序的 Web.config 文件中。  
  
 代码示例的第一部分创建一个名为类`Samples.Process.postProcessTest`实现<xref:System.Web.Compilation.IAssemblyPostProcessor>接口。 此类执行的写入文件的简单操作时<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>调用方法。  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 将该类编译为.dll 文件使用命令`csc /target:library postProcessTest.cs`。 将生成的.dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹并在 Web.config 文件中，注册.dll 文件，如下面的代码中所示。  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 当用户访问网站时，动态编译的 Web 应用程序和文件 MyTest.txt 将写入到 C:\compile。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">程序集的路径。</param>
        <summary>在加载程序集之前调用，可允许实现类对程序集进行修改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.AssemblyBuilder>类会调用此方法后编译该程序集。 加载程序集应包括在此方法之前，先执行任何操作。  
  
   
  
## Examples  
 下面的代码示例演示如何创建实现<xref:System.Web.Compilation.IAssemblyPostProcessor>接口，并将其注册的 Web 应用程序的 Web.config 文件中。  
  
 代码示例的第一部分创建一个名为类`Samples.Process.postProcessTest`实现<xref:System.Web.Compilation.IAssemblyPostProcessor>接口。 此类执行的写入文件的简单操作时<xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A>调用方法。  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 将该类编译为.dll 文件使用命令`csc /target:library postProcessTest.cs`。 将生成的.dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹并在 Web.config 文件中，注册.dll 文件，如下面的代码中所示。  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 当用户访问网站时，动态编译的 Web 应用程序和文件 MyTest.txt 将写入到 C:\compile。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
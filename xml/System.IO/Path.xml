<Type Name="Path" FullName="System.IO.Path">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ee477deba03f922a5b4875f5fa99e93f9edcc64" /><Meta Name="ms.sourcegitcommit" Value="24dc380b0d43e8919d4e0d50409e8f0aeae98713" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/27/2019" /><Meta Name="ms.locfileid" Value="67411289" /></Metadata><TypeSignature Language="C#" Value="public static class Path" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Path extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Path" />
  <TypeSignature Language="VB.NET" Value="Public Class Path" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path abstract sealed" />
  <TypeSignature Language="F#" Value="type Path = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b5101-101">对包含文件或目录路径信息的 <see cref="T:System.String" /> 实例执行操作。</span><span class="sxs-lookup"><span data-stu-id="b5101-101">Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information.</span></span> <span data-ttu-id="b5101-102">这些操作是以跨平台的方式执行的。</span><span class="sxs-lookup"><span data-stu-id="b5101-102">These operations are performed in a cross-platform manner.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="b5101-103">路径是提供的文件或目录的位置的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-103">A path is a string that provides the location of a file or directory.</span></span> <span data-ttu-id="b5101-104">路径不一定指向磁盘; 上的位置例如，路径可能会映射到在内存中或在设备上的位置。</span><span class="sxs-lookup"><span data-stu-id="b5101-104">A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.</span></span> <span data-ttu-id="b5101-105">由当前平台确定路径的确切格式。</span><span class="sxs-lookup"><span data-stu-id="b5101-105">The exact format of a path is determined by the current platform.</span></span> <span data-ttu-id="b5101-106">例如，在某些系统中，路径可以开始驱动器或卷字母开头，而此元素中不存在其他系统。</span><span class="sxs-lookup"><span data-stu-id="b5101-106">For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.</span></span> <span data-ttu-id="b5101-107">在某些系统中，文件路径可以包含扩展插件，指示存储在文件中的信息类型。</span><span class="sxs-lookup"><span data-stu-id="b5101-107">On some systems, file paths can contain extensions, which indicate the type of information stored in the file.</span></span> <span data-ttu-id="b5101-108">文件扩展名的格式与平台相关;例如，某些系统限制为三个字符，扩展和其他人不这样做。</span><span class="sxs-lookup"><span data-stu-id="b5101-108">The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not.</span></span> <span data-ttu-id="b5101-109">当前平台还确定的字符用于分隔路径的元素集和指定路径时，不能使用的字符集。</span><span class="sxs-lookup"><span data-stu-id="b5101-109">The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.</span></span> <span data-ttu-id="b5101-110">由于这些差异的字段`Path`类的某些成员的具体行为以及`Path`类是依赖于平台的。</span><span class="sxs-lookup"><span data-stu-id="b5101-110">Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.</span></span>  
  
 <span data-ttu-id="b5101-111">路径可以包含绝对或相对的位置信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-111">A path can contain absolute or relative location information.</span></span> <span data-ttu-id="b5101-112">绝对路径完全指定的位置： 文件或目录可以唯一地标识而不考虑当前的位置。</span><span class="sxs-lookup"><span data-stu-id="b5101-112">Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.</span></span> <span data-ttu-id="b5101-113">相对路径指定部分的位置： 定位使用相对路径指定的文件时，当前的位置使用作为起始点。</span><span class="sxs-lookup"><span data-stu-id="b5101-113">Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.</span></span> <span data-ttu-id="b5101-114">若要确定当前目录，请调用<xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b5101-114">To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="b5101-115">.NET core 1.1 和更高版本和.NET Framework 4.6.2 及更高版本还支持对文件系统对象的是设备名称，如访问"\\？ \C:\"。</span><span class="sxs-lookup"><span data-stu-id="b5101-115">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support access to file system objects that are device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="b5101-116">Windows 上的文件路径格式的详细信息，请参阅[文件在 Windows 系统上的路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-116">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span>

 <span data-ttu-id="b5101-117">大多数成员`Path`类不使用文件系统进行交互，且不验证是否存在指定的路径字符串的文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-117">Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string.</span></span> <span data-ttu-id="b5101-118">`Path` 类成员的修改的路径字符串，如<xref:System.IO.Path.ChangeExtension%2A>，文件系统中对文件的名称无效。</span><span class="sxs-lookup"><span data-stu-id="b5101-118">`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system.</span></span> <span data-ttu-id="b5101-119">`Path` 成员将执行操作，但是，验证指定的路径字符串的内容并引发<xref:System.ArgumentException>异常，如果该字符串包含无效的路径字符串中从返回的字符中定义的字符<xref:System.IO.Path.GetInvalidPathChars%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-119">`Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method.</span></span> <span data-ttu-id="b5101-120">例如，在基于 Windows 的桌面平台上无效路径字符可能包括引号 （"）、 小于 (\<)、 大于号 (>)、 竖线 (&#124;)，退格符 (\b)、 null (\0) 和 Unicode 字符 16 到 18 和 20 到 25。</span><span class="sxs-lookup"><span data-stu-id="b5101-120">For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</span></span>  
  
 <span data-ttu-id="b5101-121">成员`Path`类使您能够快速轻松地执行常见操作，例如确定文件扩展名是否属于某个路径，并将两个字符串组合成一个路径名称。</span><span class="sxs-lookup"><span data-stu-id="b5101-121">The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.</span></span>  
  
 <span data-ttu-id="b5101-122">所有成员`Path`类是静态的因此可以无需具有路径的实例调用。</span><span class="sxs-lookup"><span data-stu-id="b5101-122">All members of the `Path` class are static and can therefore be called without having an instance of a path.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5101-123">在接受路径作为输入字符串的成员，该路径必须是格式正确，或引发的异常。</span><span class="sxs-lookup"><span data-stu-id="b5101-123">In members that accept a path as an input string, that path must be well-formed or an exception is raised.</span></span> <span data-ttu-id="b5101-124">例如，如果路径是完全限定名称，但以空格开头，在类的方法不修整路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-124">For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</span></span> <span data-ttu-id="b5101-125">因此，该路径的格式不正确，并且会引发的异常。</span><span class="sxs-lookup"><span data-stu-id="b5101-125">Therefore, the path is malformed and an exception is raised.</span></span> <span data-ttu-id="b5101-126">同样的路径的组合不能完全限定两次。</span><span class="sxs-lookup"><span data-stu-id="b5101-126">Similarly, a path or a combination of paths cannot be fully qualified twice.</span></span> <span data-ttu-id="b5101-127">例如，"c:\temp c:\windows"还会引发异常在大多数情况下。</span><span class="sxs-lookup"><span data-stu-id="b5101-127">For example, "c:\temp c:\windows" also raises an exception in most cases.</span></span> <span data-ttu-id="b5101-128">请确保使用接受一个路径字符串的方法时您的路径的格式是否正确。</span><span class="sxs-lookup"><span data-stu-id="b5101-128">Ensure that your paths are well-formed when using methods that accept a path string.</span></span>  
  
 <span data-ttu-id="b5101-129">在接受一个路径的成员，路径可以引用的文件或只是一个目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-129">In members that accept a path, the path can refer to a file or just a directory.</span></span> <span data-ttu-id="b5101-130">指定的路径也可以指相对路径或服务器和共享名称的通用命名约定 (UNC) 路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-130">The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</span></span> <span data-ttu-id="b5101-131">例如，以下所有条件都可接受的路径：</span><span class="sxs-lookup"><span data-stu-id="b5101-131">For example, all the following are acceptable paths:</span></span>  
  
-   <span data-ttu-id="b5101-132">"c:\\\MyDir\\\MyFile.txt"在 C# 或 Visual Basic 中的"c:\MyDir\MyFile.txt"。</span><span class="sxs-lookup"><span data-stu-id="b5101-132">"c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="b5101-133">"c:\\\MyDir"在 C# 或 Visual Basic 中的"c:\MyDir"。</span><span class="sxs-lookup"><span data-stu-id="b5101-133">"c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="b5101-134">"MyDir\\\MySubdir"在 C# 或 Visual Basic 中的"MyDir\MySubDir"。</span><span class="sxs-lookup"><span data-stu-id="b5101-134">"MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="b5101-135">"\\\\\\\MyServer\\\MyShare"在 C# 中，或"\\\MyServer\MyShare"在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="b5101-135">"\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.</span></span>  
  
 <span data-ttu-id="b5101-136">因为对字符串执行所有这些操作时，就无法验证结果在所有方案中有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-136">Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.</span></span> <span data-ttu-id="b5101-137">例如，<xref:System.IO.Path.GetExtension%2A>方法分析将传递给它一个字符串，并从该字符串返回的扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-137">For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string.</span></span> <span data-ttu-id="b5101-138">但是，这并不意味着在磁盘上存在具有该扩展名的文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-138">However, this does not mean that a file with that extension exists on the disk.</span></span>  
  
 <span data-ttu-id="b5101-139">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-139">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>   
  
## Examples  
 <span data-ttu-id="b5101-140">下面的示例演示了一些主要成员`Path`类。</span><span class="sxs-lookup"><span data-stu-id="b5101-140">The following example demonstrates some of the main members of the `Path` class.</span></span>  
  
 [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]
 [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]
 [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-141">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-141">File and Stream I/O</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-142">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-142">How to: Read Text from a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-143">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-143">How to: Write Text to a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md"><span data-ttu-id="b5101-144">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="b5101-144">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-145">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-145">File path formats on Windows systems</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.AltDirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AltDirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable AltDirectorySeparatorChar : char" Usage="System.IO.Path.AltDirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5101-146">提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="b5101-146">Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="b5101-147">此字段可以具有相同的值作为<xref:System.IO.Path.DirectorySeparatorChar>。</span><span class="sxs-lookup"><span data-stu-id="b5101-147">This field can have the same value as <xref:System.IO.Path.DirectorySeparatorChar>.</span></span> <span data-ttu-id="b5101-148">`AltDirectorySeparatorChar` 和<xref:System.IO.Path.DirectorySeparatorChar>都是可用于分隔的路径字符串中的目录级别。</span><span class="sxs-lookup"><span data-stu-id="b5101-148">`AltDirectorySeparatorChar` and <xref:System.IO.Path.DirectorySeparatorChar> are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="b5101-149">此字段的值为斜杠 （'/') 在 Windows 和基于 Unix 的操作系统上。</span><span class="sxs-lookup"><span data-stu-id="b5101-149">The value of this field is a slash ('/') on both Windows and Unix-based operating systems.</span></span>  
  
## Examples  

<span data-ttu-id="b5101-150">下面的示例显示<xref:System.IO.Path>字段的值上 Windows 和基于 Unix 的系统上。</span><span class="sxs-lookup"><span data-stu-id="b5101-150">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="b5101-151">请注意，Windows 支持正斜杠 (通过返回的这<xref:System.IO.Path.AltDirectorySeparatorChar>字段) 或反斜杠 (返回由<xref:System.IO.Path.DirectorySeparatorChar>字段) 作为路径分隔符字符，而基于 Unix 的系统支持仅正斜杠。</span><span class="sxs-lookup"><span data-stu-id="b5101-151">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-152">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-152">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-153">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-153">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-154">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-154">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeExtension (path As String, extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ChangeExtension(System::String ^ path, System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member ChangeExtension : string * string -&gt; string" Usage="System.IO.Path.ChangeExtension (path, extension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-155">要修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-155">The path information to modify.</span></span> <span data-ttu-id="b5101-156">该路径不能包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的任何字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-156">The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></param>
        <param name="extension"><span data-ttu-id="b5101-157">新的扩展名（有或没有前导句点）。</span><span class="sxs-lookup"><span data-stu-id="b5101-157">The new extension (with or without a leading period).</span></span> <span data-ttu-id="b5101-158">指定 <see langword="null" /> 以从 <paramref name="path" /> 移除现有扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-158">Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</span></span></param>
        <summary><span data-ttu-id="b5101-159">更改路径字符串的扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-159">Changes the extension of a path string.</span></span></summary>
        <returns><span data-ttu-id="b5101-160">已修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-160">The modified path information.</span></span>  
  
<span data-ttu-id="b5101-161">在基于 Windows 的桌面平台上，如果 <paramref name="path" /> 是 <see langword="null" /> 或空字符串 (“”)，则返回的路径信息是未修改的。</span><span class="sxs-lookup"><span data-stu-id="b5101-161">On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified.</span></span> <span data-ttu-id="b5101-162">如果 <paramref name="extension" /> 为 <see langword="null" />，则返回的字符串包含指定的路径（其扩展名已移除）。</span><span class="sxs-lookup"><span data-stu-id="b5101-162">If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed.</span></span> <span data-ttu-id="b5101-163">如果 <paramref name="path" /> 不具有扩展名且 <paramref name="extension" /> 不为 <see langword="null" />，则返回的路径字符串包含追加到 <paramref name="path" /> 结尾的 <paramref name="extension" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-163">If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-164">如果既没有`path`也不`extension`包含句点 （.）、`ChangeExtension`添加句点。</span><span class="sxs-lookup"><span data-stu-id="b5101-164">If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.</span></span>  
  
 <span data-ttu-id="b5101-165">`extension`参数可以包含多个句点和任何有效的路径字符，并且可以是任意长度。</span><span class="sxs-lookup"><span data-stu-id="b5101-165">The `extension` parameter can contain multiple periods and any valid path characters, and can be any length.</span></span> <span data-ttu-id="b5101-166">如果`extension`是`null`，则返回的字符串包含的内容`path`与最后一个删除期间和之后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-166">If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.</span></span>  
  
 <span data-ttu-id="b5101-167">如果`extension`为空字符串，返回的路径字符串包含的内容`path`后到最后一个周期的所有字符中删除。</span><span class="sxs-lookup"><span data-stu-id="b5101-167">If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.</span></span>  
  
 <span data-ttu-id="b5101-168">如果`path`不具有扩展名和`extension`不是`null`，则返回的字符串包含`path`跟`extension`。</span><span class="sxs-lookup"><span data-stu-id="b5101-168">If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.</span></span>  
  
 <span data-ttu-id="b5101-169">如果`extension`不是`null`，并且不包含前导句点，则添加句点。</span><span class="sxs-lookup"><span data-stu-id="b5101-169">If `extension` is not `null` and does not contain a leading period, the period is added.</span></span>  
  
 <span data-ttu-id="b5101-170">如果`path`包含多个句点分隔的多个扩展插件返回的字符串包含的内容`path`与最后一个句点以及其后的所有字符替换为`extension`。</span><span class="sxs-lookup"><span data-stu-id="b5101-170">If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`.</span></span> <span data-ttu-id="b5101-171">例如，如果`path`是"\Dir1\examples\pathtests.csx.txt"和`extension`为"cs"，修改后的路径为"\Dir1\examples\pathtests.csx.cs"。</span><span class="sxs-lookup"><span data-stu-id="b5101-171">For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".</span></span>  
  
 <span data-ttu-id="b5101-172">不能验证返回的结果在所有方案中有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-172">It is not possible to verify that the returned results are valid in all scenarios.</span></span> <span data-ttu-id="b5101-173">例如，如果`path`为空，`extension`追加。</span><span class="sxs-lookup"><span data-stu-id="b5101-173">For example, if `path` is empty, `extension` is appended.</span></span>  
  
 <span data-ttu-id="b5101-174">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-174">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-175">下面的示例演示使用的`ChangeExtension`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-175">The following example demonstrates a use of the `ChangeExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]
 [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]
 [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-176"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-176"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-177">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-177">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-178">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-178">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-179">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-179">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-180">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-180">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5101-181">将多个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-181">Combines strings into a path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="b5101-182">此方法旨在将各个字符串串联为单个字符串，表示文件路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-182">This method is intended to concatenate individual strings into a single string that represents a file path.</span></span> <span data-ttu-id="b5101-183">但是，如果非第一个参数包含根的路径，将忽略任何以前的路径组件，并返回的字符串开头的根的路径组件。</span><span class="sxs-lookup"><span data-stu-id="b5101-183">However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component.</span></span> <span data-ttu-id="b5101-184">作为一种替代方法`Combine`方法，请考虑使用<xref:System.IO.Path.Join%2A>或<xref:System.IO.Path.TryJoin%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-184">As an alternative to the `Combine` method, consider using the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> methods.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="b5101-185">此方法假定第一个参数是一个绝对路径，以下自变量或自变量是相对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-185">This method assumes that the first argument is an absolute path and that the following argument or arguments are relative paths.</span></span> <span data-ttu-id="b5101-186">如果这不是这种情况，和尤其是当任何后续参数将用户的字符串输入，请调用<xref:System.IO.Path.Join%2A>或<xref:System.IO.Path.TryJoin%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="b5101-186">If this is not the case, and particularly if any subsequent arguments are strings input by the user, call the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Combine : string[] -&gt; string" Usage="System.IO.Path.Combine paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="b5101-187">由路径的各部分构成的数组。</span><span class="sxs-lookup"><span data-stu-id="b5101-187">An array of parts of the path.</span></span></param>
        <summary><span data-ttu-id="b5101-188">将字符串数组组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-188">Combines an array of strings into a path.</span></span></summary>
        <returns><span data-ttu-id="b5101-189">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-189">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="b5101-190">`paths` 应为要组合的路径部分的一组。</span><span class="sxs-lookup"><span data-stu-id="b5101-190">`paths` should be an array of the parts of the path to combine.</span></span> <span data-ttu-id="b5101-191">如果其中一个后续路径的绝对路径，然后合并操作重置开头放弃所有以前的组合的路径的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-191">If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</span></span>  

<span data-ttu-id="b5101-192">如果中的任何元素`paths`但最后一个不是驱动器，并且不使用结尾<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符`Combine`方法将添加<xref:System.IO.Path.DirectorySeparatorChar>该元素之间的下一个字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-192">If any element in `paths` but the last one is not a drive and does not end with either the <xref:System.IO.Path.DirectorySeparatorChar> or the <xref:System.IO.Path.AltDirectorySeparatorChar> character, the `Combine` method adds a <xref:System.IO.Path.DirectorySeparatorChar> character between that element and the next one.</span></span> <span data-ttu-id="b5101-193">请注意，如果该元素中并不适合于目标平台路径分隔符结束`Combine`方法保留的原始路径分隔符字符并追加一个受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-193">Note that, if the element ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="b5101-194">下面的示例比较了 Windows 和基于 Unix 的系统上的结果时将反斜杠用作路径分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-194">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#1)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#1)]  

 <span data-ttu-id="b5101-195">组合路径中省略了长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-195">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="b5101-196">参数不进行分析，如果它们具有空白区域。</span><span class="sxs-lookup"><span data-stu-id="b5101-196">The parameters are not parsed if they have white space.</span></span>  
  
 <span data-ttu-id="b5101-197">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Combine`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-197">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-198">例如，虽然`Path.Combine("c:\\", "*.txt")`也可能是无效如果您打算从它创建一个文件，它是作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-198">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="b5101-199">因此成功解释通过`Combine`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-199">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
## Examples  
 <span data-ttu-id="b5101-200">下面的示例将一个字符串数组合并成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-200">The following example combines an array of strings into a path.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]
 [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-201">数组中的一个字符串包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-201">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-202">数组中的一个字符串为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-202">One of the strings in the array is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-203">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-203">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-204">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-204">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-205">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-205">The second path to combine.</span></span></param>
        <summary><span data-ttu-id="b5101-206">将两个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-206">Combines two strings into a path.</span></span></summary>
        <returns><span data-ttu-id="b5101-207">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-207">The combined paths.</span></span> <span data-ttu-id="b5101-208">如果指定的路径之一是零长度字符串，则该方法返回其他路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-208">If one of the specified paths is a zero-length string, this method returns the other path.</span></span> <span data-ttu-id="b5101-209">如果 <paramref name="path2" /> 包含绝对路径，则该方法返回 <paramref name="path2" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-209">If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-210">如果`path1`不是驱动器引用 （即，"c:"或"d:"） 和定义中不会结束以有效分隔符<xref:System.IO.Path.DirectorySeparatorChar>， <xref:System.IO.Path.AltDirectorySeparatorChar>，或<xref:System.IO.Path.VolumeSeparatorChar>，<xref:System.IO.Path.DirectorySeparatorChar>追加到`path1`在串联前。</span><span class="sxs-lookup"><span data-stu-id="b5101-210">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span> <span data-ttu-id="b5101-211">请注意，如果`path1`中并不适合于目标平台路径分隔符结束`Combine`方法保留的原始路径分隔符字符并追加一个受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-211">Note that if `path1` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="b5101-212">下面的示例比较了 Windows 和基于 Unix 的系统上的结果时将反斜杠用作路径分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-212">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>  
  
[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#2)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#2)]  

 <span data-ttu-id="b5101-213">如果`path2`不包括根 (例如，如果`path2`不以分隔符字符或指定驱动器)，结果将是两个路径，以允许插入分隔符的串联。</span><span class="sxs-lookup"><span data-stu-id="b5101-213">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="b5101-214">如果`path2`包含一个根`path2`返回。</span><span class="sxs-lookup"><span data-stu-id="b5101-214">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="b5101-215">参数不进行分析，如果它们具有空白区域。</span><span class="sxs-lookup"><span data-stu-id="b5101-215">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="b5101-216">因此，如果`path2`包括空格 (例如，"\file.txt")，<xref:System.IO.Path.Combine%2A>方法将追加`path2`到`path1`而不是仅返回`path2`。</span><span class="sxs-lookup"><span data-stu-id="b5101-216">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.</span></span>  
  
 <span data-ttu-id="b5101-217">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Combine`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-217">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-218">例如，虽然`Path.Combine("c:\\", "*.txt")`也可能是无效如果您打算从它创建一个文件，它是作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-218">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="b5101-219">因此成功解释通过`Combine`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-219">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
 <span data-ttu-id="b5101-220">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-220">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-221">下面的示例演示了如何使用`Combine`基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-221">The following example demonstrates using the `Combine` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]
 [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]
 [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-222"><paramref name="path1" /> 或 <paramref name="path2" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-222"><paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-223"><paramref name="path1" /> 或 <paramref name="path2" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-223"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-224">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-224">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-225">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-225">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-226">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-226">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-227">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-227">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-228">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-228">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-229">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-229">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="b5101-230">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-230">The third path to combine.</span></span></param>
        <summary><span data-ttu-id="b5101-231">将三个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-231">Combines three strings into a path.</span></span></summary>
        <returns><span data-ttu-id="b5101-232">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-232">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-233">`path1` 应为绝对路径 (例如，"d:\archives"或"\\\archives\public")。</span><span class="sxs-lookup"><span data-stu-id="b5101-233">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="b5101-234">如果`path2`或`path3`也是绝对路径，合并操作将放弃所有先前合并路径和重置为该绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-234">If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="b5101-235">组合路径中省略了长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-235">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="b5101-236">如果`path1`或`path2`不是驱动器引用 （即，"c:"或"d:"） 和定义中不会结束以有效分隔符<xref:System.IO.Path.DirectorySeparatorChar>， <xref:System.IO.Path.AltDirectorySeparatorChar>，或<xref:System.IO.Path.VolumeSeparatorChar>，<xref:System.IO.Path.DirectorySeparatorChar>追加到`path1`或`path2`串联之前。</span><span class="sxs-lookup"><span data-stu-id="b5101-236">If `path1` or `path2` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` or `path2` before concatenation.</span></span> <span data-ttu-id="b5101-237">请注意，如果`path1`或`path2`中并不适合于目标平台路径分隔符结束`Combine`方法保留的原始路径分隔符字符并追加一个受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-237">Note that if `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="b5101-238">下面的示例比较了 Windows 和基于 Unix 的系统上的结果时将反斜杠用作路径分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-238">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#3)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#3)]  

 <span data-ttu-id="b5101-239">如果`path2`不包括根 (例如，如果`path2`不以分隔符字符或指定驱动器)，结果将是两个路径，以允许插入分隔符的串联。</span><span class="sxs-lookup"><span data-stu-id="b5101-239">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="b5101-240">如果`path2`包含一个根`path2`返回。</span><span class="sxs-lookup"><span data-stu-id="b5101-240">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="b5101-241">参数不进行分析，如果它们具有空白区域。</span><span class="sxs-lookup"><span data-stu-id="b5101-241">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="b5101-242">因此，如果`path2`包括空格 (例如，"\file.txt")，<xref:System.IO.Path.Combine%2A>方法将追加`path2`到`path1`。</span><span class="sxs-lookup"><span data-stu-id="b5101-242">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="b5101-243">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Combine`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-243">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-244">例如，虽然`Path.Combine("c:\\", "*.txt")`也可能是无效如果您打算从它创建一个文件，它是作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-244">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="b5101-245">因此成功解释通过`Combine`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-245">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-246">下面的示例将三个路径合并。</span><span class="sxs-lookup"><span data-stu-id="b5101-246">The following example combines three paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]
 [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-247"><paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-247"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-248"><paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-248"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-249">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-249">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-250">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-250">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-251">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-251">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="b5101-252">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-252">The third path to combine.</span></span></param>
        <param name="path4"><span data-ttu-id="b5101-253">要组合的第四个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-253">The fourth path to combine.</span></span></param>
        <summary><span data-ttu-id="b5101-254">将四个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-254">Combines four strings into a path.</span></span></summary>
        <returns><span data-ttu-id="b5101-255">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-255">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-256">`path1` 应为绝对路径 (例如，"d:\archives"或"\\\archives\public")。如果其中一个后续路径也是绝对路径，合并操作将放弃所有以前合并的路径，并将重置为绝对路径的。</span><span class="sxs-lookup"><span data-stu-id="b5101-256">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="b5101-257">组合路径中省略了长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-257">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="b5101-258">如果`path1`， `path2`，或`path3`不是驱动器引用 （即，"c:"或"d:"） 和定义中不会结束以有效分隔符<xref:System.IO.Path.DirectorySeparatorChar>， <xref:System.IO.Path.AltDirectorySeparatorChar>，或<xref:System.IO.Path.VolumeSeparatorChar>，<xref:System.IO.Path.DirectorySeparatorChar>追加到该日志之前串联。</span><span class="sxs-lookup"><span data-stu-id="b5101-258">If `path1`, `path2`, or `path3` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to it before concatenation.</span></span> <span data-ttu-id="b5101-259">请注意，如果`path1`， `path2`，或`path3`中并不适合于目标平台路径分隔符结束`Combine`方法保留的原始路径分隔符字符并追加一个受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-259">Note that if `path1`, `path2`, or `path3` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="b5101-260">下面的示例比较了 Windows 和基于 Unix 的系统上的结果时将反斜杠用作路径分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-260">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#4)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#4)]   
  
 <span data-ttu-id="b5101-261">如果`path2`不包括根 (例如，如果`path2`不以分隔符字符或指定驱动器)，结果将是两个路径，以允许插入分隔符的串联。</span><span class="sxs-lookup"><span data-stu-id="b5101-261">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="b5101-262">如果`path2`包含一个根`path2`返回。</span><span class="sxs-lookup"><span data-stu-id="b5101-262">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="b5101-263">参数不进行分析，如果它们具有空白区域。</span><span class="sxs-lookup"><span data-stu-id="b5101-263">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="b5101-264">因此，如果`path2`包括空格 (例如，"\file.txt")，<xref:System.IO.Path.Combine%2A>方法将追加`path2`到`path1`。</span><span class="sxs-lookup"><span data-stu-id="b5101-264">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="b5101-265">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Combine`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-265">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-266">例如，虽然`Path.Combine("c:\\", "*.txt")`也可能是无效如果您打算从它创建一个文件，它是作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="b5101-266">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="b5101-267">因此成功解释通过`Combine`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-267">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-268">下面的示例将四个路径合并。</span><span class="sxs-lookup"><span data-stu-id="b5101-268">The following example combines four paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]
 [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-269"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-269"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-270"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-270"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-271">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-271">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.DirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char DirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable DirectorySeparatorChar : char" Usage="System.IO.Path.DirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5101-272">提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="b5101-272">Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="b5101-273"><xref:System.IO.Path.AltDirectorySeparatorChar> 和`DirectorySeparatorChar`都是可用于分隔的路径字符串中的目录级别。</span><span class="sxs-lookup"><span data-stu-id="b5101-273"><xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="b5101-274">当使用.NET Core 开发在多个平台运行的应用程序：</span><span class="sxs-lookup"><span data-stu-id="b5101-274">When you are using .NET Core to develop applications that run on multiple platforms:</span></span>

- <span data-ttu-id="b5101-275">如果您愿意硬编码目录分隔符字符，则应使用正斜杠 (`/`) 字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-275">If you prefer to hard-code the directory separator character, you should use the forward slash (`/`) character.</span></span> <span data-ttu-id="b5101-276">它是 Unix 系统上的唯一可识别的目录分隔符字符中的示例所示，输出的形式，<xref:System.IO.Path.AltDirectorySeparatorChar>在 Windows 上。</span><span class="sxs-lookup"><span data-stu-id="b5101-276">It is the only recognized directory separator character on Unix systems, as the output from the example shows, and is the <xref:System.IO.Path.AltDirectorySeparatorChar> on Windows.</span></span>

- <span data-ttu-id="b5101-277">使用字符串串联来动态检索在运行时的路径分隔符字符并将它合并到文件系统路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-277">Use string concatenation to dynamically retrieve the path separator character at runtime and incorporate it into file system paths.</span></span> <span data-ttu-id="b5101-278">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="b5101-278">For example,</span></span> 

   ```csharp
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ```
   ```vb
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ``` 
   <span data-ttu-id="b5101-279">此外可以检索的值从<xref:System.IO.Path.AltDirectorySeparatorChar>属性，因为它是 Windows 和基于 Unx 的系统上相同。</span><span class="sxs-lookup"><span data-stu-id="b5101-279">You can also retrieve the value from the <xref:System.IO.Path.AltDirectorySeparatorChar> property, since it is the same on both Windows and Unx-based systems.</span></span>

- <span data-ttu-id="b5101-280">检索<xref:System.IO.Path.AltDirectorySeparatorChar>属性</span><span class="sxs-lookup"><span data-stu-id="b5101-280">Retrieve the <xref:System.IO.Path.AltDirectorySeparatorChar> property</span></span>

<span data-ttu-id="b5101-281">如果你的应用程序不是跨平台，可以使用适用于您系统的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b5101-281">If your application is not cross-platform, you can use the separator appropriate for your system.</span></span>

## Examples  

<span data-ttu-id="b5101-282">下面的示例显示<xref:System.IO.Path>字段的值上 Windows 和基于 Unix 的系统上。</span><span class="sxs-lookup"><span data-stu-id="b5101-282">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="b5101-283">请注意，Windows 支持正斜杠 (通过返回的这<xref:System.IO.Path.AltDirectorySeparatorChar>字段) 或反斜杠 (返回由<xref:System.IO.Path.DirectorySeparatorChar>字段) 作为路径分隔符字符，而基于 Unix 的系统支持仅正斜杠。</span><span class="sxs-lookup"><span data-stu-id="b5101-283">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>  

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-284">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-284">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-285">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-285">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-286">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-286">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-287">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-287">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : string -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetDirectoryName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetDirectoryName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetDirectoryName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary><span data-ttu-id="b5101-288">返回由字符范围表示的指定路径的目录信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-288">Returns the directory information for the specified path represented by a character span.</span></span></summary>
        <returns><span data-ttu-id="b5101-289"><paramref name="path" /> 的目录信息，如果 <paramref name="path" /> 为 <see langword="null" />空范围或根（例如 \,C: 或\\server\share），则为空跨度。</span><span class="sxs-lookup"><span data-stu-id="b5101-289">Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-290">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-290">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : string -&gt; string" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-291">文件或目录的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-291">The path of a file or directory.</span></span></param>
        <summary><span data-ttu-id="b5101-292">返回指定路径字符串的目录信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-292">Returns the directory information for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="b5101-293"><paramref name="path" /> 的目录信息；如果 <paramref name="path" /> 表示根目录或为 null，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-293">Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null.</span></span> <span data-ttu-id="b5101-294">如果 <paramref name="path" /> 不包含目录信息，则返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-294">Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-295">在大多数情况下，此方法返回的字符串包含的路径，但不是包括最后一个中的所有字符<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>。</span><span class="sxs-lookup"><span data-stu-id="b5101-295">In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span> <span data-ttu-id="b5101-296">如果路径包括的根目录，例如"c:\\"，则返回 null。</span><span class="sxs-lookup"><span data-stu-id="b5101-296">If the path consists of a root directory, such as "c:\\", null is returned.</span></span> <span data-ttu-id="b5101-297">请注意，此方法不支持使用路径"文件:"。</span><span class="sxs-lookup"><span data-stu-id="b5101-297">Note that this method does not support paths using "file:".</span></span> <span data-ttu-id="b5101-298">因为返回的路径不包括<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>，将返回的路径传递回<xref:System.IO.Path.GetDirectoryName%2A>方法将导致每次在结果字符串的后续调用的一个文件夹级别的截断。</span><span class="sxs-lookup"><span data-stu-id="b5101-298">Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string.</span></span> <span data-ttu-id="b5101-299">例如，将"C:\Directory\SubDirectory\test.txt"的路径传递到<xref:System.IO.Path.GetDirectoryName%2A>方法将返回"C:\Directory\SubDirectory"。</span><span class="sxs-lookup"><span data-stu-id="b5101-299">For example, passing the path "C:\Directory\SubDirectory\test.txt" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return "C:\Directory\SubDirectory".</span></span> <span data-ttu-id="b5101-300">将该字符串，"C:\Directory\SubDirectory"传递到<xref:System.IO.Path.GetDirectoryName%2A>将导致"C:\Directory"。</span><span class="sxs-lookup"><span data-stu-id="b5101-300">Passing that string, "C:\Directory\SubDirectory", into <xref:System.IO.Path.GetDirectoryName%2A> will result in "C:\Directory".</span></span>  
  
 <span data-ttu-id="b5101-301">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-301">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-302">下面的示例演示了如何使用`GetDirectoryName`基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-302">The following example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]
 [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]
 [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-303">该 <paramref name="path" /> 参数包含无效字符，为空，或仅包含空格。</span><span class="sxs-lookup"><span data-stu-id="b5101-303">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="b5101-304">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-304">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="b5101-305"><paramref name="path" /> 参数超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="b5101-305">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-306">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-306">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-307">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-307">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-308">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-308">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-309">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-309">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-310">从中获取扩展名的文件路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-310">The file path from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="b5101-311">返回由只读字符范围表示的文件路径的扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-311">Returns the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="b5101-312">指定路径的扩展名（包括句点“.”）；如果 <paramref name="path" /> 没有扩展信息，则为 <see cref="P:System.ReadOnlySpan`1.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-312">The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b5101-313">此方法获取的扩展`path`通过搜索`path`为句点 ("。")、 从只读的范围中的最后一个字符开始，一直到第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-313">This method obtains the extension of `path` by searching `path` for a period ("."), starting from the last character in the read-only span and continuing toward its first character.</span></span> <span data-ttu-id="b5101-314">如果之前找到一段<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符，返回只读的跨度包含该句点以及字符后它; 否则为<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>返回。</span><span class="sxs-lookup"><span data-stu-id="b5101-314">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned read-only span contains the period and the characters after it; otherwise, <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> is returned.</span></span>  

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-315">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-315">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : string -&gt; string" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-316">从中获取扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-316">The path string from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="b5101-317">返回指定路径字符串的扩展名（包括句点“.”）。</span><span class="sxs-lookup"><span data-stu-id="b5101-317">Returns the extension (including the period ".") of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="b5101-318">指定路径的扩展名（包含句点“.”）、或 <see langword="null" />、或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-318">The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b5101-319">如果 <paramref name="path" /> 为 <see langword="null" />，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-319">If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />.</span></span> <span data-ttu-id="b5101-320">如果 <paramref name="path" /> 不具有扩展名信息，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-320">If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b5101-321">此方法获取的扩展`path`通过搜索`path`句点 （.） 开头中的最后一个字符为`path`并继续直到第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-321">This method obtains the extension of `path` by searching `path` for a period (.), starting with the last character in `path` and continuing toward the first character.</span></span> <span data-ttu-id="b5101-322">如果之前找到一段<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符，返回的字符串包含该句点以及字符后它; 否则为<xref:System.String.Empty?displayProperty=nameWithType>返回。</span><span class="sxs-lookup"><span data-stu-id="b5101-322">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty?displayProperty=nameWithType> is returned.</span></span>  
  
 <span data-ttu-id="b5101-323">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-323">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
 
## Examples  
 <span data-ttu-id="b5101-324">下面的示例演示了如何使用`GetExtension`基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-324">The following example demonstrates using the `GetExtension` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]
 [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]
 [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-325"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-325"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-326">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-326">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-327">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-327">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-328">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-328">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-329">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-329">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-330">一个只读范围，包含从中获取文件名和扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-330">A read-only span that contains the path from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="b5101-331">返回由只读字符范围表示的文件路径的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-331">Returns the file name and extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="b5101-332"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-332">The characters after the last directory separator character in <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b5101-333">返回的只读的范围将包含路径，请按照中的最后一个分隔符的字符`path`。</span><span class="sxs-lookup"><span data-stu-id="b5101-333">The returned read-only span contains the characters of the path that follow the last separator in `path`.</span></span> <span data-ttu-id="b5101-334">如果中的最后一个字符`path`是卷或目录分隔符字符，该方法将返回<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b5101-334">If the last character in `path` is a volume or directory separator character, the method returns <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b5101-335">如果`path`包含没有分隔符，该方法将返回`path`。</span><span class="sxs-lookup"><span data-stu-id="b5101-335">If `path` contains no separator character, the method returns `path`.</span></span>

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-336">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-336">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : string -&gt; string" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-337">从中获取文件名和扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-337">The path string from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="b5101-338">返回指定路径字符串的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-338">Returns the file name and extension of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="b5101-339"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-339">The characters after the last directory separator character in <paramref name="path" />.</span></span> <span data-ttu-id="b5101-340">如果 <paramref name="path" /> 的最后一个字符是目录或卷分隔符，则此方法返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-340">If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b5101-341">如果 <paramref name="path" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-341">If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b5101-342">返回的值是`null`如果文件路径`null`。</span><span class="sxs-lookup"><span data-stu-id="b5101-342">The returned value is `null` if the file path is `null`.</span></span>  
  
<span data-ttu-id="b5101-343">用于确定文件名称的开头的分隔符字符<xref:System.IO.Path.DirectorySeparatorChar>和<xref:System.IO.Path.AltDirectorySeparatorChar>。</span><span class="sxs-lookup"><span data-stu-id="b5101-343">The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span>  

<span data-ttu-id="b5101-344">因为*\\*是基于 Unix 的法律文件名`GetFileName`运行基于 Unix 的平台不能正确地从基于 Windows 的路径，如返回的文件的名称*c:\\mydir\\myfile.ext*，但`GetFileName`下基于 Windows 的平台运行正确的基于 Unix 的路径，如从返回的文件的名称 */tmp/myfile.ext*，因此行为的`GetFileName`方法不是严格的基于 Unix 和基于 Windows 的平台上。</span><span class="sxs-lookup"><span data-stu-id="b5101-344">Because *\\* is a legal file name on Unix, `GetFileName` running under Unix-based platforms cannot correctly return the file name from a Windows-based path like *C:\\mydir\\myfile.ext*, but `GetFileName` running under Windows-based platforms can correctly return the file name from a Unix-based path like */tmp/myfile.ext*, so the behavior of the `GetFileName` method is not strictly the same on Unix-based and Windows-based platforms.</span></span>

<span data-ttu-id="b5101-345">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-345">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-346">下面的示例演示的行为`GetFileName`基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-346">The following example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]
 [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]
 [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-347"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-347"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-348">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-348">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-349">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-349">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-350">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-350">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-351">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-351">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileNameWithoutExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-352">一个只读范围，包含从中获取没有扩展名的文件名的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-352">A read-only span that contains the path from which to obtain the file name without the extension.</span></span></param>
        <summary><span data-ttu-id="b5101-353">返回文件名，该文件名不带由只读字符范围表示的文件路径扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-353">Returns the file name without the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="b5101-354">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的只读范围中的字符，但不包括最后一个句点 (.) 及其后面的所有字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-354">The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-355">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-355">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileNameWithoutExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : string -&gt; string" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-356">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-356">The path of the file.</span></span></param>
        <summary><span data-ttu-id="b5101-357">返回不具有扩展名的指定路径字符串的文件名。</span><span class="sxs-lookup"><span data-stu-id="b5101-357">Returns the file name of the specified path string without the extension.</span></span></summary>
        <returns><span data-ttu-id="b5101-358">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的字符串，但不包括最后的句点 (.) 以及之后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-358">The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-359">此方法不会验证路径或文件名称存在。</span><span class="sxs-lookup"><span data-stu-id="b5101-359">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="b5101-360">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-360">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-361">下面的示例演示使用的`GetFileNameWithoutExtension`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-361">The following example demonstrates a use of the `GetFileNameWithoutExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]
 [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]
 [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-362"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-362"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-363">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-363">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-364">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-364">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-365">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-365">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-366">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-366">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string -&gt; string" Usage="System.IO.Path.GetFullPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-367">要获取其绝对路径信息的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-367">The file or directory for which to obtain absolute path information.</span></span></param>
        <summary><span data-ttu-id="b5101-368">返回指定路径字符串的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-368">Returns the absolute path for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="b5101-369"><paramref name="path" /> 的完全限定的位置，例如“C:\MyFile.txt”。</span><span class="sxs-lookup"><span data-stu-id="b5101-369">The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="b5101-370">绝对路径包括所需的系统上查找文件或目录的所有信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-370">The absolute path includes all information required to locate a file or directory on a system.</span></span>  
  
 <span data-ttu-id="b5101-371">指定目录的文件`path`不需要存在。</span><span class="sxs-lookup"><span data-stu-id="b5101-371">The file or directory specified by `path` is not required to exist.</span></span> <span data-ttu-id="b5101-372">例如，如果*c:\temp\newdir*是当前目录中，调用`GetFullPath`上的文件名称，如*test.txt*返回*c:\temp\newdir\test.txt*。</span><span class="sxs-lookup"><span data-stu-id="b5101-372">For example, if *c:\temp\newdir* is the current directory, calling `GetFullPath` on a file name such as *test.txt* returns *c:\temp\newdir\test.txt*.</span></span> <span data-ttu-id="b5101-373">不需要存在该文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-373">The file need not exist.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="b5101-374">如果`path`是相对路径，此重载方法返回可以基于当前驱动器和当前目录的完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-374">If `path` is a relative path, this overload returns a fully qualified path that can be based on the current drive and current directory.</span></span> <span data-ttu-id="b5101-375">执行应用程序随时可以更改当前驱动器和当前目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-375">The current drive and current directory can change at any time as an application executes.</span></span> <span data-ttu-id="b5101-376">因此，不能提前确定返回的此重载的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-376">As a result, the path returned by this overload cannot be determined in advance.</span></span> <span data-ttu-id="b5101-377">若要返回的确定性的路径，请调用<xref:System.IO.Path.GetFullPath(System.String,System.String)>重载。</span><span class="sxs-lookup"><span data-stu-id="b5101-377">To return a deterministic path, call the <xref:System.IO.Path.GetFullPath(System.String,System.String)> overload.</span></span> <span data-ttu-id="b5101-378">您还可以调用<xref:System.IO.Path.IsPathFullyQualified%2A>方法，以确定是否完全限定路径或相对，因此是否调用`GetFullPath`是有必要。</span><span class="sxs-lookup"><span data-stu-id="b5101-378">You can also call the <xref:System.IO.Path.IsPathFullyQualified%2A> method to determine whether a path is fully qualified or relative and therefore whether a call to `GetFullPath` is necessary.</span></span>

 <span data-ttu-id="b5101-379">但是，如果`path`确实存在，调用方必须有权获取路径信息`path`。</span><span class="sxs-lookup"><span data-stu-id="b5101-379">However, if `path` does exist, the caller must have permission to obtain path information for `path`.</span></span> <span data-ttu-id="b5101-380">请注意，与不同的大多数成员<xref:System.IO.Path>类，此方法访问文件系统。</span><span class="sxs-lookup"><span data-stu-id="b5101-380">Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.</span></span>  
  
 <span data-ttu-id="b5101-381">此方法使用当前目录和卷的当前信息进行完全限定`path`。</span><span class="sxs-lookup"><span data-stu-id="b5101-381">This method uses the current directory and current volume information to fully qualify `path`.</span></span> <span data-ttu-id="b5101-382">如果指定的文件命名为仅在`path`，`GetFullPath`返回当前目录的完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-382">If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.</span></span>  
  
 <span data-ttu-id="b5101-383">如果您通过短文件名中，它将扩展为长文件名。</span><span class="sxs-lookup"><span data-stu-id="b5101-383">If you pass in a short file name, it is expanded to a long file name.</span></span>  
  
 <span data-ttu-id="b5101-384">路径不包含任何重要的字符，如果无效，除非它包含一个或多个"。"字符后跟任意数目的空格;则它将解析为"。".."。</span><span class="sxs-lookup"><span data-stu-id="b5101-384">If a path contains no significant characters, it is invalid unless it contains one or more "." characters followed by any number of spaces; then it will be parsed as either "." or "..".</span></span>  

<span data-ttu-id="b5101-385">.NET core 1.1 和更高版本和.NET Framework 4.6.2 及更高版本还支持包括设备名称，如下所述的路径"\\？ \C:\"。</span><span class="sxs-lookup"><span data-stu-id="b5101-385">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support paths that include device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="b5101-386">Windows 上的文件路径格式的详细信息，请参阅[文件在 Windows 系统上的路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-386">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="b5101-387">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-387">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
  
## Examples  
 <span data-ttu-id="b5101-388">下面的示例演示`GetFullPath`基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-388">The following example demonstrates the `GetFullPath` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]
 [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]
 [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-389"><paramref name="path" /> 是一个零长度字符串，仅包含空格或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-389"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="b5101-390">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b5101-390">-or-</span></span> 
<span data-ttu-id="b5101-391">系统无法检索绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-391">The system could not retrieve the absolute path.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5101-392">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="b5101-392">The caller does not have the required permissions.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-393"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-393"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b5101-394"><paramref name="path" /> 包含一个冒号（“:”），此冒号不是卷标识符（如，“c:\\”）的一部分。</span><span class="sxs-lookup"><span data-stu-id="b5101-394"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="b5101-395">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="b5101-395">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="b5101-396">用于访问该路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-396">for access to the path.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-397">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-397">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-398">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-398">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-399">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-399">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-400">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-400">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String, basePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path, System::String ^ basePath);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string * string -&gt; string" Usage="System.IO.Path.GetFullPath (path, basePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="basePath" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-401">连接到 <paramref name="basePath" /> 的相对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-401">A relative path to concatenate to <paramref name="basePath" />.</span></span></param>
        <param name="basePath"><span data-ttu-id="b5101-402">完全限定路径的开头。</span><span class="sxs-lookup"><span data-stu-id="b5101-402">The beginning of a fully qualified path.</span></span></param>
        <summary><span data-ttu-id="b5101-403">返回完全限定的基本路径和相对路径的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-403">Returns an absolute path from a fully qualified base path and a relative path.</span></span></summary>
        <returns><span data-ttu-id="b5101-404">绝对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-404">The absolute path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b5101-405">如果`path`是空路径，该方法将返回`basePath`。</span><span class="sxs-lookup"><span data-stu-id="b5101-405">If `path` is an empty path, the method returns `basePath`.</span></span> <span data-ttu-id="b5101-406">如果`path`是完全限定的路径，方法传递`path`到<xref:System.IO.Path.GetFullPath(System.String)>方法并返回结果。</span><span class="sxs-lookup"><span data-stu-id="b5101-406">If `path` is a fully qualified path, the method passes `path` to the <xref:System.IO.Path.GetFullPath(System.String)> method and returns the result.</span></span>

<span data-ttu-id="b5101-407">使用此方法返回的确定性路径基于指定的卷和根目录时要使用相对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-407">Use this method to return a deterministic path based on a specified volume and rooted directory when you're using relative paths.</span></span> <span data-ttu-id="b5101-408">使用预定义`basePath`而不是一个基于当前驱动器目录防止不需要的文件路径在当前驱动器和目录中的意外更改所造成的。</span><span class="sxs-lookup"><span data-stu-id="b5101-408">Using a predefined `basePath` rather than one based on the current drive directory guards against unwanted file paths caused by unexpected changes in the current drive and directory.</span></span> 

## <a name="example"></a><span data-ttu-id="b5101-409">示例</span><span class="sxs-lookup"><span data-stu-id="b5101-409">Example</span></span>

<span data-ttu-id="b5101-410">下面的示例定义一个变量， `basePath`，用于表示应用程序的当前目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-410">The following example defines a variable, `basePath`, to represent an application's current directory.</span></span> <span data-ttu-id="b5101-411">它然后将其传递给`GetFullPath`方法以获取应用程序的数据目录的完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-411">It then passes it to the `GetFullPath` method to get a fully qualified path to the application's data directory.</span></span>

[!code-csharp[Path.GetFullPath(String,String)](~/samples/snippets/csharp/api/system.io/path/getfullpath/program.cs)] 
[!code-vb[Path.GetFullPath(String,String)](~/samples/snippets/visualbasic/api/system.io/path/getfullpath/program.vb)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-412"><paramref name="path" /> 或 <paramref name="basePath" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-412"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-413"><paramref name="basePath" /> 不是完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-413"><paramref name="basePath" /> is not a fully qualified path.</span></span>

<span data-ttu-id="b5101-414">或</span><span class="sxs-lookup"><span data-stu-id="b5101-414">-or-</span></span>

<span data-ttu-id="b5101-415"><paramref name="path" /> 或 <paramref name="basePath" /> 包含无效的路径字符，例如 U+0000。</span><span class="sxs-lookup"><span data-stu-id="b5101-415"><paramref name="path" /> or <paramref name="basePath" /> contains invalid path characters, such as U+0000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidFileNameChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidFileNameChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidFileNameChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidFileNameChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidFileNameChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5101-416">获取包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b5101-416">Gets an array containing the characters that are not allowed in file names.</span></span></summary>
        <returns><span data-ttu-id="b5101-417">包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b5101-417">An array containing the characters that are not allowed in file names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-418">不保证此方法返回的数组以包含在文件和目录名称中无效的字符的完整集合。</span><span class="sxs-lookup"><span data-stu-id="b5101-418">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="b5101-419">无效的字符的完整集可能会因文件系统。</span><span class="sxs-lookup"><span data-stu-id="b5101-419">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="b5101-420">例如，在基于 Windows 的桌面平台上无效路径字符可能包括 ASCII/Unicode 字符 1 到 31 之间，以及用引号括起来 （"）、 小于 (\<)、 大于号 (>)、 竖线 (&#124;)，退格符 (\b)、 null (\0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="b5101-420">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-421">下面的示例演示<xref:System.IO.Path.GetInvalidFileNameChars%2A>方法和<xref:System.IO.Path.GetInvalidPathChars%2A>方法来检索无效的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-421">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidPathChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidPathChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidPathChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidPathChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5101-422">获取包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b5101-422">Gets an array containing the characters that are not allowed in path names.</span></span></summary>
        <returns><span data-ttu-id="b5101-423">包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b5101-423">An array containing the characters that are not allowed in path names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-424">不保证此方法返回的数组以包含在文件和目录名称中无效的字符的完整集合。</span><span class="sxs-lookup"><span data-stu-id="b5101-424">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="b5101-425">无效的字符的完整集可能会因文件系统。</span><span class="sxs-lookup"><span data-stu-id="b5101-425">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="b5101-426">例如，在基于 Windows 的桌面平台上无效路径字符可能包括 ASCII/Unicode 字符 1 到 31 之间，以及用引号括起来 （"）、 小于 (\<)、 大于号 (>)、 竖线 (&#124;)，退格符 (\b)、 null (\0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="b5101-426">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-427">下面的示例演示<xref:System.IO.Path.GetInvalidFileNameChars%2A>方法和<xref:System.IO.Path.GetInvalidPathChars%2A>方法来检索无效的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-427">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetPathRoot (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetPathRoot(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetPathRoot(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-428">从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-428">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="b5101-429">从指定字符范围包含的路径中获取根目录信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-429">Gets the root directory information from the path contained in the specified character span.</span></span></summary>
        <returns><span data-ttu-id="b5101-430">包含 `path` 的根目录的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-430">A character span containing the root directory of `path`.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-431">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-431">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPathRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : string -&gt; string" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-432">从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-432">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="b5101-433">获取指定路径的根目录信息。</span><span class="sxs-lookup"><span data-stu-id="b5101-433">Gets the root directory information of the specified path.</span></span></summary>
        <returns><span data-ttu-id="b5101-434">根目录的 <paramref name="path" />；或如果 <paramref name="path" /> 为 <see langword="null" />，则为 <see langword="null" />；或如果 <paramref name="path" /> 不包含根目录信息，则为空字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-434">The root directory of <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> is <see langword="null" />, or an empty string if <paramref name="path" /> does not contain root directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-435">此方法不会验证路径或文件名称存在。</span><span class="sxs-lookup"><span data-stu-id="b5101-435">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="b5101-436">此方法返回的字符串的可能模式如下所示：</span><span class="sxs-lookup"><span data-stu-id="b5101-436">Possible patterns for the string returned by this method are as follows:</span></span>  
  
- <span data-ttu-id="b5101-437">空字符串 (`path`当前驱动器或卷上指定了相对路径)。</span><span class="sxs-lookup"><span data-stu-id="b5101-437">An empty string (`path` specified a relative path on the current drive or volume).</span></span>  
  
- <span data-ttu-id="b5101-438">"\" (`path`当前驱动器上指定的绝对路径)。</span><span class="sxs-lookup"><span data-stu-id="b5101-438">"\" (`path` specified an absolute path on the current drive).</span></span>  
  
- <span data-ttu-id="b5101-439">"X:"(`path`上的驱动器，其中 X 表示驱动器或卷的号指定的相对路径)。</span><span class="sxs-lookup"><span data-stu-id="b5101-439">"X:" (`path` specified a relative path on a drive, where X represents a drive or volume letter).</span></span>  
  
- <span data-ttu-id="b5101-440">"X:\" (`path`给定驱动器上指定的绝对路径)。</span><span class="sxs-lookup"><span data-stu-id="b5101-440">"X:\" (`path` specified an absolute path on a given drive).</span></span>  
  
- <span data-ttu-id="b5101-441">"\\\ComputerName\SharedFolder" (a UNC path).</span><span class="sxs-lookup"><span data-stu-id="b5101-441">"\\\ComputerName\SharedFolder" (a UNC path).</span></span>  
  
- <span data-ttu-id="b5101-442">"\\\\\?\C:"（DOS 设备路径，在.NET Core 1.1 及更高版本和.NET Framework 4.6.2 和更高版本中支持）</span><span class="sxs-lookup"><span data-stu-id="b5101-442">"\\\\\?\C:" (a DOS device path, supported in .NET Core 1.1 and later versions and in .NET Framework 4.6.2 and later versions)</span></span>
   
 <span data-ttu-id="b5101-443">在 Windows 上的文件路径的详细信息，请参阅[文件在 Windows 系统上的路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-443">For more information on file paths on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="b5101-444">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-444">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
## Examples  
 <span data-ttu-id="b5101-445">下面的示例演示使用的`GetPathRoot`方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-445">The following example demonstrates a use of the `GetPathRoot` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]
 [!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]
 [!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-446"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-446"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="b5101-447">或</span><span class="sxs-lookup"><span data-stu-id="b5101-447">-or-</span></span> 
 <span data-ttu-id="b5101-448"><see cref="F:System.String.Empty" /> 被传递到 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-448"><see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-449">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-449">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-450">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-450">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-451">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-451">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-452">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-452">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRandomFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRandomFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRandomFileName();" />
      <MemberSignature Language="F#" Value="static member GetRandomFileName : unit -&gt; string" Usage="System.IO.Path.GetRandomFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5101-453">返回随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="b5101-453">Returns a random folder name or file name.</span></span></summary>
        <returns><span data-ttu-id="b5101-454">随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="b5101-454">A random folder name or file name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-455"><xref:System.IO.Path.GetRandomFileName%2A>方法返回加密型强随机字符串可用作文件夹名称或文件名称。</span><span class="sxs-lookup"><span data-stu-id="b5101-455">The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name.</span></span> <span data-ttu-id="b5101-456">与不同<xref:System.IO.Path.GetTempFileName%2A>，<xref:System.IO.Path.GetRandomFileName%2A>不会创建一个文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-456">Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file.</span></span> <span data-ttu-id="b5101-457">当您的文件系统的安全性是至关重要的时而不是应使用此方法<xref:System.IO.Path.GetTempFileName%2A>。</span><span class="sxs-lookup"><span data-stu-id="b5101-457">When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-458">下面的示例显示的输出<xref:System.IO.Path.GetRandomFileName%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-458">The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.</span></span>  
  
 [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]
 [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativePath">
      <MemberSignature Language="C#" Value="public static string GetRelativePath (string relativeTo, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRelativePath(string relativeTo, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativePath (relativeTo As String, path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRelativePath(System::String ^ relativeTo, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetRelativePath : string * string -&gt; string" Usage="System.IO.Path.GetRelativePath (relativeTo, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="b5101-459">相对于结果的源路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-459">The source path the result should be relative to.</span></span> <span data-ttu-id="b5101-460">此路径始终被视为目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-460">This path is always considered to be a directory.</span></span></param>
        <param name="path"><span data-ttu-id="b5101-461">目标路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-461">The destination path.</span></span></param>
        <summary><span data-ttu-id="b5101-462">返回从一个路径到另一个路径的相对路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-462">Returns a relative path from one path to another.</span></span></summary>
        <returns><span data-ttu-id="b5101-463">相对路径，如果路径不共享同一根，则为 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-463">The relative path, or <paramref name="path" /> if the paths don't share the same root.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b5101-464">通过调用来解析路径<xref:System.IO.Path.GetFullPath%2A>方法，然后再计算不同之处。</span><span class="sxs-lookup"><span data-stu-id="b5101-464">Paths are resolved by calling the <xref:System.IO.Path.GetFullPath%2A> method before calculating the difference.</span></span> <span data-ttu-id="b5101-465">该方法使用当前平台的默认文件路径比较 (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>适用于 Windows 和 MacOs，<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>适用于 Linux。</span><span class="sxs-lookup"><span data-stu-id="b5101-465">The method uses the default file path comparison for the current platform (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for Windows and MacOs, <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> for Linux.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-466"><paramref name="relativeTo" /> 或 <paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-466"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-467">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-467">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="System.IO.Path.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5101-468">在磁盘上创建磁唯一命名的零字节的临时文件并返回该文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-468">Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</span></span></summary>
        <returns><span data-ttu-id="b5101-469">临时文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-469">The full path of the temporary file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-470">此方法创建的临时文件。TMP 文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-470">This method creates a temporary file with a .TMP file extension.</span></span> <span data-ttu-id="b5101-471">在用户的临时文件夹中，是的路径创建临时文件返回<xref:System.IO.Path.GetTempPath%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-471">The temporary file is created within the user's temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
 <span data-ttu-id="b5101-472"><xref:System.IO.Path.GetTempFileName%2A>方法将引发<xref:System.IO.IOException>如果它用于创建多个 65535 个文件而不会删除以前的临时文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-472">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.</span></span>  
  
 <span data-ttu-id="b5101-473"><xref:System.IO.Path.GetTempFileName%2A>方法将引发<xref:System.IO.IOException>没有唯一的临时文件名称是否可用。</span><span class="sxs-lookup"><span data-stu-id="b5101-473">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available.</span></span> <span data-ttu-id="b5101-474">若要解决此错误，删除所有不需要的临时文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-474">To resolve this error, delete all unneeded temporary files.</span></span>  
  
 <span data-ttu-id="b5101-475">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-475">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b5101-476">发生 I/O 错误，例如没有提供唯一的临时文件名。</span><span class="sxs-lookup"><span data-stu-id="b5101-476">An I/O error occurs, such as no unique temporary file name is available.</span></span>  
  
<span data-ttu-id="b5101-477">或</span><span class="sxs-lookup"><span data-stu-id="b5101-477">-or-</span></span>
  
 <span data-ttu-id="b5101-478">此方法无法创建临时文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-478">This method was unable to create a temporary file.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="b5101-479">用于写入到临时目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-479">for writing to the temporary directory.</span></span> <span data-ttu-id="b5101-480">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span><span class="sxs-lookup"><span data-stu-id="b5101-480">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-481">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-481">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-482">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-482">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-483">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-483">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempPath();" />
      <MemberSignature Language="F#" Value="static member GetTempPath : unit -&gt; string" Usage="System.IO.Path.GetTempPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5101-484">返回当前用户的临时文件夹的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-484">Returns the path of the current user's temporary folder.</span></span></summary>
        <returns><span data-ttu-id="b5101-485">临时文件夹的路径，以反斜杠结尾。</span><span class="sxs-lookup"><span data-stu-id="b5101-485">The path to the temporary folder, ending with a backslash.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-486">此方法检查存在以下顺序中的环境变量，并使用找到的第一个路径：</span><span class="sxs-lookup"><span data-stu-id="b5101-486">This method checks for the existence of environment variables in the following order and uses the first path found:</span></span>  
  
1.  <span data-ttu-id="b5101-487">TMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-487">The path specified by the TMP environment variable.</span></span>  
  
2.  <span data-ttu-id="b5101-488">由 TEMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-488">The path specified by the TEMP environment variable.</span></span>  
  
3.  <span data-ttu-id="b5101-489">由用户配置文件环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-489">The path specified by the USERPROFILE environment variable.</span></span>  
  
4.  <span data-ttu-id="b5101-490">Windows 目录中。</span><span class="sxs-lookup"><span data-stu-id="b5101-490">The Windows directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-491">下面的代码演示如何调用 <xref:System.IO.Path.GetTempPath%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-491">The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
```vb  
result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```csharp  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 <span data-ttu-id="b5101-492">此示例生成类似于以下输出。</span><span class="sxs-lookup"><span data-stu-id="b5101-492">This example produces output similar to the following.</span></span>  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5101-493">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="b5101-493">The caller does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="b5101-494">有关不受限制访问环境变量。</span><span class="sxs-lookup"><span data-stu-id="b5101-494">for unrestricted access to environment variables.</span></span> <span data-ttu-id="b5101-495">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="b5101-495">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-496">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-496">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-497">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-497">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-498">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-498">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-499">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-499">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="b5101-500">确定指定字符范围表示的路径是否包含文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-500">Determines whether the path represented by the specified character span includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="b5101-501">如果路径中最后一个目录分隔符或卷分隔符之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-501"><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b5101-502">中的句号`path`不被视为一个扩展。</span><span class="sxs-lookup"><span data-stu-id="b5101-502">A trailing period in `path` is not considered an extension.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-503">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-503">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : string -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-504">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-504">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="b5101-505">确定路径是否包括文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="b5101-505">Determines whether a path includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="b5101-506">如果路径中最后一个目录分隔符（\\\ 或 /）或卷分隔符 (:) 之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-506"><see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-507">从末尾开始`path`，此方法搜索的句点 （.） 后, 跟至少一个字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-507">Starting from the end of `path`, this method searches for a period (.) followed by at least one character.</span></span> <span data-ttu-id="b5101-508">如果之前找到此模式<xref:System.IO.Path.DirectorySeparatorChar>， <xref:System.IO.Path.AltDirectorySeparatorChar>，或<xref:System.IO.Path.VolumeSeparatorChar>遇到字符时，此方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="b5101-508">If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.</span></span>  
  
 <span data-ttu-id="b5101-509">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-509">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-510">下面的示例演示 `HasExtension` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="b5101-510">The following example demonstrates the use of the `HasExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]
 [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]
 [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-511"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-511"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-512">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-512">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-513">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-513">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-514">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-514">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-515">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-515">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.InvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvalidPathChars As Char() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;char&gt; ^ InvalidPathChars;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidPathChars : char[]" Usage="System.IO.Path.InvalidPathChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5101-516">提供平台特定的字符数组，这些字符不能在传递到 <see cref="T:System.IO.Path" /> 类的成员的路径字符串参数中指定。</span><span class="sxs-lookup"><span data-stu-id="b5101-516">Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-517">不保证此方法返回的数组以包含在文件和目录名称中无效的字符的完整集合。</span><span class="sxs-lookup"><span data-stu-id="b5101-517">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="b5101-518">无效的字符的完整集可能会因文件系统。</span><span class="sxs-lookup"><span data-stu-id="b5101-518">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="b5101-519">例如，在基于 Windows 的桌面平台上无效路径字符可能包括 ASCII/Unicode 字符 1 到 31 之间，以及用引号括起来 （"）、 小于 (\<)、 大于号 (>)、 竖线 (&#124;)，退格符 (\b)、 null (\0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="b5101-519">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b5101-520">不要使用<xref:System.IO.Path.InvalidPathChars>如果您认为您的代码可能不受信任的代码相同的应用程序域中执行。</span><span class="sxs-lookup"><span data-stu-id="b5101-520">Do not use <xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code.</span></span> <span data-ttu-id="b5101-521"><xref:System.IO.Path.InvalidPathChars> 是一个数组，以便可以覆盖它的元素。</span><span class="sxs-lookup"><span data-stu-id="b5101-521"><xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten.</span></span> <span data-ttu-id="b5101-522">如果不受信任的代码覆盖的元素<xref:System.IO.Path.InvalidPathChars>，它可能会导致代码无法正常工作的可能被利用的方式。</span><span class="sxs-lookup"><span data-stu-id="b5101-522">If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-523">下面的示例演示如何将`InvalidPathChars`属性。</span><span class="sxs-lookup"><span data-stu-id="b5101-523">The following example demonstrates the use of the `InvalidPathChars` property.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-524">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-524">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-525">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-525">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-526">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-526">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathFullyQualified">
      <Docs>
        <summary><span data-ttu-id="b5101-527">返回一个值，指示文件路径是否完全限定。</span><span class="sxs-lookup"><span data-stu-id="b5101-527">Returns a value that indicates whether a file path is fully qualified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="b5101-528">重载`IsPathFullyQualified`同时使用的方法句柄路径<xref:System.IO.Path.DirectorySeparatorChar>和<xref:System.IO.Path.AltDirectorySeparatorChar>字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-528">The overloads of the `IsPathFullyQualified` method handle paths that use both the <xref:System.IO.Path.DirectorySeparatorChar> and the <xref:System.IO.Path.AltDirectorySeparatorChar> characters.</span></span> <span data-ttu-id="b5101-529">它不会作为参数传递给它的路径上执行任何验证。</span><span class="sxs-lookup"><span data-stu-id="b5101-529">It does not perform any validation on the path that is passed to it as an argument.</span></span> <span data-ttu-id="b5101-530">因此，Uri 将被解释为相对路径，并返回`false`。</span><span class="sxs-lookup"><span data-stu-id="b5101-530">As a result, URIs are interpreted as relative paths and return `false`.</span></span> 

<span data-ttu-id="b5101-531">没有区别的完全限定路径 (如所示`IsPathFullyQualified`方法) 和取得 root 权限的路径 (如所示<xref:System.IO.Path.IsPathRooted%2A>方法)。</span><span class="sxs-lookup"><span data-stu-id="b5101-531">There is a difference between a fully qualified path (as indicated by the `IsPathFullyQualified` method) and a rooted path (as indicated by the <xref:System.IO.Path.IsPathRooted%2A> method).</span></span> <span data-ttu-id="b5101-532">一个*完全限定的路径*或*绝对路径*始终定义为目标文件或目录中，从特定驱动器或设备的确切路径并不依赖于当前驱动器或当前目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-532">A *fully qualified path* or *absolute path* always defines an exact path from a particular drive or device to a target file or directory, and does not depend on the current drive or current directory.</span></span> <span data-ttu-id="b5101-533">例如，在 Windows 系统上*C:/users/user1/documents/reports/2019/january/highlights.pdf*定义目标文件中，从 c： 驱动器的根的绝对路径*highlights.pdf*。</span><span class="sxs-lookup"><span data-stu-id="b5101-533">For example, on Windows systems, *C:/users/user1/documents/reports/2019/january/highlights.pdf* defines an absolute path from the root of the C: drive to the target file, *highlights.pdf*.</span></span> <span data-ttu-id="b5101-534">一个*根的路径*指定起始驱动器或根目录中，但依赖于当前目录 （如果它已取得 root 权限由指定的驱动器） 或当前驱动器 （如果它已取得 root 权限的根目录下）。</span><span class="sxs-lookup"><span data-stu-id="b5101-534">A *rooted path* specifies either a starting drive or root directory, but depends on either the current directory (if it is rooted by a specified drive) or the current drive (if it is rooted by the root directory).</span></span> <span data-ttu-id="b5101-535">下面的示例说明了完全限定的路径和取得 root 权限的路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b5101-535">The following example illustrates the difference between fully qualified paths and rooted paths.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-536">文件路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-536">A file path.</span></span></param>
        <summary><span data-ttu-id="b5101-537">返回一个值，该值指示由指定字符范围表示的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-537">Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="b5101-538">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-538"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  


         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-539">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-539">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : string -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-540">文件路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-540">A file path.</span></span></param>
        <summary><span data-ttu-id="b5101-541">返回一个值，该值指示指定的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-541">Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="b5101-542">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-542"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5101-543"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-543"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-544">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-544">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathRooted">
      <Docs>
        <summary><span data-ttu-id="b5101-545">返回一个值，指示文件路径是否包含根。</span><span class="sxs-lookup"><span data-stu-id="b5101-545">Returns a value that indicates whether a file path contains a root.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="b5101-546">一个**根的路径**是文件路径的固定为特定驱动器或 UNIC 路径; 形成了鲜明对比的路径是相对于当前驱动器或工作目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-546">A **rooted path** is file path that is fixed to a specific drive or UNIC path; it contrasts with a path that is relative to the current drive or working directory.</span></span> <span data-ttu-id="b5101-547">例如，在 Windows 系统中，根的路径开头反斜杠 (例如，"\Documents") 或驱动器号和冒号 (例如，"C:Documents")。</span><span class="sxs-lookup"><span data-stu-id="b5101-547">For example, on Windows systems, a rooted path begins with a backslash (for example, "\Documents") or a drive letter and colon (for example, "C:Documents").</span></span> 

<span data-ttu-id="b5101-548">请注意取得 root 权限的路径可以是绝对 （即，完全限定的） 或相对。</span><span class="sxs-lookup"><span data-stu-id="b5101-548">Note that rooted paths can be either absolute (that is, fully qualified) or relative.</span></span> <span data-ttu-id="b5101-549">取得 root 权限的绝对路径是从驱动器的根目录到特定目录的完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-549">An absolute rooted path is a fully qualified path from the root of a drive to a specific directory.</span></span> <span data-ttu-id="b5101-550">取得 root 权限的相对路径指定的驱动器，但其完全限定的路径解析对当前目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-550">A relative rooted path specifies a drive, but its fully qualified path is resolved against the current directory.</span></span> <span data-ttu-id="b5101-551">以下示例演示了差异。</span><span class="sxs-lookup"><span data-stu-id="b5101-551">The following example illustrates the difference.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-552">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-552">The path to test.</span></span></param>
        <summary><span data-ttu-id="b5101-553">返回一个值，该值指示表示文件路径的指定字符范围是否包含根。</span><span class="sxs-lookup"><span data-stu-id="b5101-553">Returns a value that indicates whether the specified character span that represents a file path contains a root.</span></span></summary>
        <returns><span data-ttu-id="b5101-554">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-554"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-555">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-555">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : string -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="b5101-556">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-556">The path to test.</span></span></param>
        <summary><span data-ttu-id="b5101-557">返回一个值，该值指示指定的路径字符串是否包含根。</span><span class="sxs-lookup"><span data-stu-id="b5101-557">Returns a value indicating whether the specified path string contains a root.</span></span></summary>
        <returns><span data-ttu-id="b5101-558">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-558"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-559"><xref:System.IO.Path.IsPathRooted%2A>方法将返回`true`如果第一个字符是目录分隔符字符如"\\"，或如果路径以驱动器号和冒号 （:） 开头。</span><span class="sxs-lookup"><span data-stu-id="b5101-559">The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:).</span></span> <span data-ttu-id="b5101-560">例如，它将返回`true`有关`path`如字符串"\\\MyDir\\\MyFile.txt"，"c:\\\MyDir"，或"C:MyDir"。</span><span class="sxs-lookup"><span data-stu-id="b5101-560">For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir".</span></span> <span data-ttu-id="b5101-561">它将返回`false`为`path`如"MyDir"的字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-561">It returns `false` for `path` strings such as "MyDir".</span></span>  
  
 <span data-ttu-id="b5101-562">此方法不会验证路径或文件名称存在。</span><span class="sxs-lookup"><span data-stu-id="b5101-562">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="b5101-563">通用 I/O 任务的列表，请参阅[通用 I/O 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="b5101-563">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  

## Examples  
 <span data-ttu-id="b5101-564">下面的示例演示如何将`IsPathRooted`方法可用于测试的三个字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-564">The following example demonstrates how the `IsPathRooted` method can be used to test three strings.</span></span>  
  
 [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]
 [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]
 [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5101-565"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-565"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-566">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-566">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-567">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-567">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-568">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-568">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-569">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-569">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Join : string[] -&gt; string" Usage="System.IO.Path.Join paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-570">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-570">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-571">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-571">A character span that contains the second path to join.</span></span></param>
        <summary><span data-ttu-id="b5101-572">将两个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="b5101-572">Concatenates two path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="b5101-573">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-573">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="b5101-574">此方法只需串联`path`并`path2`，并添加两个路径组件之间的目录分隔符字符，如果尚未存在的末尾`path1`或开始位置`path2`。</span><span class="sxs-lookup"><span data-stu-id="b5101-574">This method simply concatenates `path` and `path2` and adds a directory separator character between the two path components if one is not already present at the end of `path1` or the beginning of `path2`.</span></span> <span data-ttu-id="b5101-575">如果<xref:System.ReadOnlySpan%601.Length>的任一`path1`或`path2`为零，该方法返回的其他路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-575">If the <xref:System.ReadOnlySpan%601.Length> of either `path1` or `path2` is zero, the method returns the other path.</span></span> <span data-ttu-id="b5101-576">如果<xref:System.ReadOnlySpan%601.Length>两者`path1`并`path2`为零，该方法将返回<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b5101-576">If the <xref:System.ReadOnlySpan%601.Length> of both `path1` and `path2` is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="b5101-577">如果`path1`中并不适合于目标平台路径分隔符结束`Join`方法保留的原始路径分隔符字符并追加受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-577">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="b5101-578">中使用 Windows 反斜杠的硬编码路径，会出现此问题 ("\") 未被识别为路径分隔符基于 Unix 的系统的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-578">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="b5101-579">若要解决此问题，您可以：</span><span class="sxs-lookup"><span data-stu-id="b5101-579">To work around this issue, you can:</span></span>

- <span data-ttu-id="b5101-580">检索的值<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性，而不是硬编码目录分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-580">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="b5101-581">使用正斜杠 （"/"） 作为目录分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-581">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="b5101-582">返回此字符<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性，基于 Unix 的系统上并通过<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>Windows 系统上的属性。</span><span class="sxs-lookup"><span data-stu-id="b5101-582">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="b5101-583">与不同<xref:System.IO.Path.Combine%2A>方法，<xref:System.IO.Path.Join%2A>方法不会尝试根返回的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-583">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="b5101-584">(即，如果`path2`是一个绝对路径`Join`方法不会放弃`path1`并返回`path2`作为<xref:System.IO.Path.Combine%2A>方法执行。)下面的示例说明了在两个方法返回的路径中的差异。</span><span class="sxs-lookup"><span data-stu-id="b5101-584">(That is, if `path2` is an absolute path, the `Join` method does not discard `path1` and return `path2` as the <xref:System.IO.Path.Combine%2A> method does.) The following example illustrates the difference in the paths returned by the two methods.</span></span> <span data-ttu-id="b5101-585">如果源的`path2`是用户输入<xref:System.IO.Path.Combine%2A>方法，使用户可以访问文件系统资源 (如*c: /用户/User1/文档/财务/* 在该示例的情况下) 的应用程序执行不想要使可访问。</span><span class="sxs-lookup"><span data-stu-id="b5101-585">If the source of `path2` is user input, the <xref:System.IO.Path.Combine%2A> method makes it possible for a user to access a file system resource (such as *C:/Users/User1/Documents/Financial/* in the case of the example) that the application did not intend to make accessible.</span></span>  

<span data-ttu-id="b5101-586">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Join`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-586">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-587">例如，虽然`Path.Join("c:\\", "*.txt")`，可能无效时，创建一个文件，它是有效搜索字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-587">For example, while `Path.Join("c:\\", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="b5101-588">`Join`方法因此已成功将其解释。</span><span class="sxs-lookup"><span data-stu-id="b5101-588">The `Join` method therefore successfully interprets it.</span></span> 

## <a name="example"></a><span data-ttu-id="b5101-589">示例</span><span class="sxs-lookup"><span data-stu-id="b5101-589">Example</span></span>

<span data-ttu-id="b5101-590">下面的示例说明了返回的路径中的差异<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>和<xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-590">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="b5101-591">当第一个字符串是包含驱动器和根的目录的完全限定的路径，第二个是从第一个路径的相对路径时，两种方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="b5101-591">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="b5101-592">第二个和第三个调用中`ShowPathInformation`方法中，两个方法返回的字符串将发生偏离。</span><span class="sxs-lookup"><span data-stu-id="b5101-592">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="b5101-593">在第二个方法调用的第一个字符串参数是一个驱动器，而第二个是取得 root 权限的目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-593">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="b5101-594">`Join`方法串联两个字符串并保留重复路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="b5101-594">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="b5101-595">`Combine`方法放弃该驱动器，并返回当前驱动器上取得 root 权限的目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-595">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="b5101-596">如果应用程序的当前驱动器 C:\和此字符串用来访问文件或目录中的文件，它将访问而不是 d: c:。</span><span class="sxs-lookup"><span data-stu-id="b5101-596">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="b5101-597">最后，因为这两个参数对的第三个调用中`ShowPathInformation`，并且它们植根`Join`方法只需将它们附加若要创建无意义的文件路径，而`Combine`方法会放弃第一个字符串，并返回第二个。</span><span class="sxs-lookup"><span data-stu-id="b5101-597">Finally, because both arguments in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends them to create a nonsensical file path, while the `Combine` method discards the first string and returns the second.</span></span> <span data-ttu-id="b5101-598">使用此字符串进行文件访问权限可以授予应用程序无意中访问的敏感文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-598">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String)](~/samples/snippets/csharp/api/system.io/path/combine2/program.cs)]
[!code-csharp[Path.Join(String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine2/program.vb)]


       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-599">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-599">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Join : string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-600">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-600">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-601">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-601">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="b5101-602">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-602">A character span that contains the third path to join.</span></span></param>
        <summary><span data-ttu-id="b5101-603">将三个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="b5101-603">Concatenates three path components into a single path.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="b5101-604">此方法只需串联`path`， `path2`，和`path3`，并将添加目录分隔符字符之间的任何路径组件，如果尚未存在。</span><span class="sxs-lookup"><span data-stu-id="b5101-604">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="b5101-605">如果<xref:System.ReadOnlySpan%601.Length>的任一`path1`， `path2`，或`path3`参数为零，则该方法将其余参数串联。</span><span class="sxs-lookup"><span data-stu-id="b5101-605">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, or `path3` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="b5101-606">如果<xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType>的所有组件为零，该方法将返回<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b5101-606">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>    

<span data-ttu-id="b5101-607">如果`path1`或`path2`中并不适合于目标平台路径分隔符结束`Join`方法保留的原始路径分隔符字符并追加受支持。</span><span class="sxs-lookup"><span data-stu-id="b5101-607">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="b5101-608">中使用 Windows 反斜杠的硬编码路径，会出现此问题 ("\") 未被识别为路径分隔符基于 Unix 的系统的字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-608">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="b5101-609">若要解决此问题，您可以：</span><span class="sxs-lookup"><span data-stu-id="b5101-609">To work around this issue, you can:</span></span>

- <span data-ttu-id="b5101-610">检索的值<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性，而不是硬编码目录分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-610">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="b5101-611">使用正斜杠 （"/"） 作为目录分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-611">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="b5101-612">返回此字符<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性，基于 Unix 的系统上并通过<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>Windows 系统上的属性。</span><span class="sxs-lookup"><span data-stu-id="b5101-612">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="b5101-613">与不同<xref:System.IO.Path.Combine%2A>方法，<xref:System.IO.Path.Join%2A>方法不会尝试根返回的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-613">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="b5101-614">(即，如果`path2`或`path2`是一个绝对路径`Join`方法不会放弃上一个路径设置为<xref:System.IO.Path.Combine%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="b5101-614">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>  
  
<span data-ttu-id="b5101-615">对于目录和文件名称不是所有无效的字符被解释为不可接受的`Join`方法，因为您可以将这些字符用于搜索通配符字符。</span><span class="sxs-lookup"><span data-stu-id="b5101-615">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="b5101-616">例如，虽然`Path.Join("c:\\", "temp", "*.txt")`，可能无效时，创建一个文件，它是有效搜索字符串。</span><span class="sxs-lookup"><span data-stu-id="b5101-616">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="b5101-617">`Join`方法因此已成功将其解释。</span><span class="sxs-lookup"><span data-stu-id="b5101-617">The `Join` method therefore successfully interprets it.</span></span> 

## <a name="example"></a><span data-ttu-id="b5101-618">示例</span><span class="sxs-lookup"><span data-stu-id="b5101-618">Example</span></span>

<span data-ttu-id="b5101-619">下面的示例说明了返回的路径中的差异<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>和<xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b5101-619">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="b5101-620">当第一个字符串是包含驱动器和根的目录的完全限定的路径，第二个是从第一个路径的相对路径时，两种方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="b5101-620">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="b5101-621">第二个和第三个调用中`ShowPathInformation`方法中，两个方法返回的字符串将发生偏离。</span><span class="sxs-lookup"><span data-stu-id="b5101-621">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="b5101-622">在第二个方法调用的第一个字符串参数是一个驱动器，而第二个是取得 root 权限的目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-622">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="b5101-623">`Join`方法串联两个字符串并保留重复路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="b5101-623">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="b5101-624">调用<xref:System.IO.Path.GetFullPath%2A>方法将消除重复项。</span><span class="sxs-lookup"><span data-stu-id="b5101-624">A call to the <xref:System.IO.Path.GetFullPath%2A> method would eliminate the duplication.</span></span> <span data-ttu-id="b5101-625">`Combine`方法放弃该驱动器，并返回当前驱动器上取得 root 权限的目录。</span><span class="sxs-lookup"><span data-stu-id="b5101-625">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="b5101-626">如果应用程序的当前驱动器 C:\和此字符串用来访问文件或目录中的文件，它将访问而不是 d: c:。</span><span class="sxs-lookup"><span data-stu-id="b5101-626">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="b5101-627">最后，因为对的第三个调用中的最后一个参数`ShowPathInformation`，并且它们植根`Join`方法只需将其追加到前两个参数，以创建无意义的文件路径，而`Combine`方法会放弃前两个字符串并返回第三个。</span><span class="sxs-lookup"><span data-stu-id="b5101-627">Finally, because the final argument in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends it to the first two arguments to create a nonsensical file path, while the `Combine` method discards the first two strings and returns the third.</span></span> <span data-ttu-id="b5101-628">使用此字符串进行文件访问权限可以授予应用程序无意中访问的敏感文件。</span><span class="sxs-lookup"><span data-stu-id="b5101-628">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/csharp/api/system.io/path/combine3/program.cs)] 
[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine3/program.vb)] 

       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-629">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-629">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.ReadOnlySpan`1&lt;char&gt; path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), path4 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path4" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <param name="path4">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1">To be added.</param>
        <param name="path2">To be added.</param>
        <param name="path3">To be added.</param>
        <param name="path4">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PathSeparator As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char PathSeparator;" />
      <MemberSignature Language="F#" Value=" staticval mutable PathSeparator : char" Usage="System.IO.Path.PathSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5101-630">用于在环境变量中分隔路径字符串的平台特定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b5101-630">A platform-specific separator character used to separate path strings in environment variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-631">在基于 Windows 的桌面平台上，此字段的值是以分号 （;） 默认情况下，但在其他平台上可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="b5101-631">On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-632">下面的示例演示如何将`PathSeparator`字段。</span><span class="sxs-lookup"><span data-stu-id="b5101-632">The following example demonstrates the use of the `PathSeparator` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-633">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-633">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-634">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-634">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-635">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-635">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEndingDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static string TrimEndingDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TrimEndingDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TrimEndingDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : string -&gt; string" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryJoin">
      <Docs>
        <summary><span data-ttu-id="b5101-636">尝试将各个路径组件连接到预分配的字符范围，并返回一个值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="b5101-636">Attempts to concatenate individual path components to a preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="b5101-637">目标字符范围必须足够大以保存连接的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-637">The destination character span must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="b5101-638">然后可以通过调用来检索连接的路径<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法，如下面的示例说明了。</span><span class="sxs-lookup"><span data-stu-id="b5101-638">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the following example illustrates.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/TryJoin/program.cs)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; *  -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-639">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-639">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-640">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-640">A character span that contains the second path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="b5101-641">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-641">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="b5101-642">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="b5101-642">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="b5101-643">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="b5101-643">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="b5101-644">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-644"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b5101-645">`destination` 必须足够大以保存连接的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-645">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="b5101-646">然后可以通过调用来检索连接的路径<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法，该示例作为演示。</span><span class="sxs-lookup"><span data-stu-id="b5101-646">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-647">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-647">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; *  -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, path3, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="b5101-648">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-648">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="b5101-649">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-649">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="b5101-650">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-650">A character span that contains the third path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="b5101-651">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b5101-651">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="b5101-652">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="b5101-652">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="b5101-653">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="b5101-653">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="b5101-654">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5101-654"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b5101-655">`destination` 必须足够大以保存连接的路径。</span><span class="sxs-lookup"><span data-stu-id="b5101-655">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="b5101-656">然后可以通过调用来检索连接的路径<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法，该示例作为演示。</span><span class="sxs-lookup"><span data-stu-id="b5101-656">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="b5101-657">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="b5101-657">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.VolumeSeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VolumeSeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char VolumeSeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable VolumeSeparatorChar : char" Usage="System.IO.Path.VolumeSeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5101-658">提供平台特定的卷分隔符。</span><span class="sxs-lookup"><span data-stu-id="b5101-658">Provides a platform-specific volume separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5101-659">此字段的值是冒号 （:） 在 Windows 和 Macintosh 和 UNIX 操作系统上的以斜杠 （/）。</span><span class="sxs-lookup"><span data-stu-id="b5101-659">The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.</span></span> <span data-ttu-id="b5101-660">这是最适用于分析路径，例如"c:\windows"或"MacVolume:System 文件夹"。</span><span class="sxs-lookup"><span data-stu-id="b5101-660">This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5101-661">下面的示例演示如何将`VolumeSeparatorChar`字段。</span><span class="sxs-lookup"><span data-stu-id="b5101-661">The following example demonstrates the use of the `VolumeSeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="b5101-662">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b5101-662">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="b5101-663">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="b5101-663">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="b5101-664">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="b5101-664">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Path" FullName="System.IO.Path">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3785566e0d4957f8a6fa5ee5900cc8179064b119" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70343413" /></Metadata><TypeSignature Language="C#" Value="public static class Path" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Path extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Path" />
  <TypeSignature Language="VB.NET" Value="Public Class Path" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path abstract sealed" />
  <TypeSignature Language="F#" Value="type Path = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2385d-101">对包含文件或目录路径信息的 <see cref="T:System.String" /> 实例执行操作。</span><span class="sxs-lookup"><span data-stu-id="2385d-101">Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information.</span></span> <span data-ttu-id="2385d-102">这些操作是以跨平台的方式执行的。</span><span class="sxs-lookup"><span data-stu-id="2385d-102">These operations are performed in a cross-platform manner.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="2385d-103">路径是提供文件或目录的位置的字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-103">A path is a string that provides the location of a file or directory.</span></span> <span data-ttu-id="2385d-104">路径不一定指向磁盘上的位置;例如, 路径可能映射到内存中或设备上的某个位置。</span><span class="sxs-lookup"><span data-stu-id="2385d-104">A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.</span></span> <span data-ttu-id="2385d-105">路径的准确格式由当前平台决定。</span><span class="sxs-lookup"><span data-stu-id="2385d-105">The exact format of a path is determined by the current platform.</span></span> <span data-ttu-id="2385d-106">例如, 在某些系统中, 路径可以从驱动器或卷号开始, 而此元素在其他系统中不存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-106">For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.</span></span> <span data-ttu-id="2385d-107">在某些系统上, 文件路径可以包含扩展, 这表示文件中存储的信息的类型。</span><span class="sxs-lookup"><span data-stu-id="2385d-107">On some systems, file paths can contain extensions, which indicate the type of information stored in the file.</span></span> <span data-ttu-id="2385d-108">文件扩展名的格式依赖于平台;例如, 某些系统将扩展限制为三个字符, 而其他系统则不限制。</span><span class="sxs-lookup"><span data-stu-id="2385d-108">The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not.</span></span> <span data-ttu-id="2385d-109">当前平台还决定了用于分隔路径中的元素的字符集, 以及指定路径时不能使用的字符集。</span><span class="sxs-lookup"><span data-stu-id="2385d-109">The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.</span></span> <span data-ttu-id="2385d-110">由于这些差异, `Path`类的字段以及`Path`类的某些成员的确切行为取决于平台。</span><span class="sxs-lookup"><span data-stu-id="2385d-110">Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.</span></span>  
  
 <span data-ttu-id="2385d-111">路径可以包含绝对或相对位置信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-111">A path can contain absolute or relative location information.</span></span> <span data-ttu-id="2385d-112">绝对路径完全指定位置: 可以唯一地标识文件或目录, 而不考虑当前位置。</span><span class="sxs-lookup"><span data-stu-id="2385d-112">Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.</span></span> <span data-ttu-id="2385d-113">相对路径指定部分位置: 在定位使用相对路径指定的文件时, 当前位置用作起始点。</span><span class="sxs-lookup"><span data-stu-id="2385d-113">Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.</span></span> <span data-ttu-id="2385d-114">若要确定当前目录, 请<xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>调用。</span><span class="sxs-lookup"><span data-stu-id="2385d-114">To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="2385d-115">.NET Core 1.1 及更高版本和 .NET Framework 4.6.2 及更高版本还支持访问作为设备名称的文件系统对象, 例如 "\\？ \c:\"。</span><span class="sxs-lookup"><span data-stu-id="2385d-115">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support access to file system objects that are device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="2385d-116">有关 Windows 上的文件路径格式的详细信息, 请参阅[windows 系统上的文件路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-116">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span>

 <span data-ttu-id="2385d-117">`Path`该类的大多数成员不与文件系统进行交互, 并且不验证路径字符串指定的文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-117">Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string.</span></span> <span data-ttu-id="2385d-118">`Path`修改路径字符串的类成员 (如<xref:System.IO.Path.ChangeExtension%2A>) 不会影响文件系统中的文件名称。</span><span class="sxs-lookup"><span data-stu-id="2385d-118">`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system.</span></span> <span data-ttu-id="2385d-119">`Path`但是, 如果字符串包含在路径字符串中无效的字符 (如<xref:System.ArgumentException> <xref:System.IO.Path.GetInvalidPathChars%2A>从方法返回的字符中所定义), 则成员将验证指定路径字符串的内容, 并引发异常。</span><span class="sxs-lookup"><span data-stu-id="2385d-119">`Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method.</span></span> <span data-ttu-id="2385d-120">例如, 在基于 Windows 的桌面平台上, 无效路径字符可能包括引号 (")、小于 (\<)、大于 (>)、管道 (&#124;)、backspace (\b)、null (\ 0) 和 Unicode 字符16到18以及20到25。</span><span class="sxs-lookup"><span data-stu-id="2385d-120">For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</span></span>  
  
 <span data-ttu-id="2385d-121">`Path`类的成员使你能够快速轻松地执行常见操作, 例如确定文件扩展名是否为路径的一部分, 以及将两个字符串组合为一个路径名。</span><span class="sxs-lookup"><span data-stu-id="2385d-121">The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.</span></span>  
  
 <span data-ttu-id="2385d-122">`Path`类的所有成员都是静态的, 因此可以在没有路径实例的情况下调用。</span><span class="sxs-lookup"><span data-stu-id="2385d-122">All members of the `Path` class are static and can therefore be called without having an instance of a path.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2385d-123">在接受路径作为输入字符串的成员中, 该路径必须格式正确, 否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2385d-123">In members that accept a path as an input string, that path must be well-formed or an exception is raised.</span></span> <span data-ttu-id="2385d-124">例如, 如果路径是完全限定的, 但以空格开头, 则不会在类的方法中剪裁路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-124">For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</span></span> <span data-ttu-id="2385d-125">因此, 路径格式不正确, 并引发异常。</span><span class="sxs-lookup"><span data-stu-id="2385d-125">Therefore, the path is malformed and an exception is raised.</span></span> <span data-ttu-id="2385d-126">同样, 路径或路径的组合不能完全限定两次。</span><span class="sxs-lookup"><span data-stu-id="2385d-126">Similarly, a path or a combination of paths cannot be fully qualified twice.</span></span> <span data-ttu-id="2385d-127">例如, 在大多数情况下, "c:\temp c:\windows" 也会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2385d-127">For example, "c:\temp c:\windows" also raises an exception in most cases.</span></span> <span data-ttu-id="2385d-128">使用接受路径字符串的方法时, 请确保路径格式正确。</span><span class="sxs-lookup"><span data-stu-id="2385d-128">Ensure that your paths are well-formed when using methods that accept a path string.</span></span>  
  
 <span data-ttu-id="2385d-129">在接受路径的成员中, 路径可以引用文件或只引用目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-129">In members that accept a path, the path can refer to a file or just a directory.</span></span> <span data-ttu-id="2385d-130">指定的路径还可以引用服务器和共享名称的相对路径或通用命名约定 (UNC) 路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-130">The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</span></span> <span data-ttu-id="2385d-131">例如, 以下所有内容都是可接受的路径:</span><span class="sxs-lookup"><span data-stu-id="2385d-131">For example, all the following are acceptable paths:</span></span>  
  
-   <span data-ttu-id="2385d-132">Visual Basic 中的\\"\\c: \MyDir C#\MyFile.txt" 或 "c:\MyDir\MyFile.txt"。</span><span class="sxs-lookup"><span data-stu-id="2385d-132">"c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="2385d-133">Visual Basic 中的\\"c: C#\MyDir" 或 "c:\MyDir"。</span><span class="sxs-lookup"><span data-stu-id="2385d-133">"c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="2385d-134">Visual Basic 中\\的 "MyDir C#\MySubdir" 或 "MyDir\MySubDir"。</span><span class="sxs-lookup"><span data-stu-id="2385d-134">"MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="2385d-135">Visual Basic\\中的 "\\\\ C#\MyServer\\\MyShare" 或 "\MyServer\MyShare"。\\</span><span class="sxs-lookup"><span data-stu-id="2385d-135">"\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.</span></span>  
  
 <span data-ttu-id="2385d-136">由于所有这些操作都是针对字符串执行的, 因此无法验证结果在所有方案中是否有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-136">Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.</span></span> <span data-ttu-id="2385d-137">例如, <xref:System.IO.Path.GetExtension%2A>方法会分析你传递给它的字符串, 并返回该字符串的扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-137">For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string.</span></span> <span data-ttu-id="2385d-138">但是, 这并不意味着磁盘上存在具有该扩展名的文件。</span><span class="sxs-lookup"><span data-stu-id="2385d-138">However, this does not mean that a file with that extension exists on the disk.</span></span>  
  
 <span data-ttu-id="2385d-139">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-139">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>   
  
## Examples  
 <span data-ttu-id="2385d-140">下面的示例演示了`Path`类的一些主要成员。</span><span class="sxs-lookup"><span data-stu-id="2385d-140">The following example demonstrates some of the main members of the `Path` class.</span></span>  
  
 [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]
 [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]
 [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-141">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-141">File and Stream I/O</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-142">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-142">How to: Read Text from a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-143">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-143">How to: Write Text to a File</span></span></related>
    <related type="Article" href="~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md"><span data-ttu-id="2385d-144">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="2385d-144">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-145">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-145">File path formats on Windows systems</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.AltDirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AltDirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable AltDirectorySeparatorChar : char" Usage="System.IO.Path.AltDirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2385d-146">提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="2385d-146">Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="2385d-147">此字段的值可以与<xref:System.IO.Path.DirectorySeparatorChar>相同。</span><span class="sxs-lookup"><span data-stu-id="2385d-147">This field can have the same value as <xref:System.IO.Path.DirectorySeparatorChar>.</span></span> <span data-ttu-id="2385d-148">`AltDirectorySeparatorChar`和<xref:System.IO.Path.DirectorySeparatorChar>都适用于在路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="2385d-148">`AltDirectorySeparatorChar` and <xref:System.IO.Path.DirectorySeparatorChar> are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="2385d-149">此字段的值在基于 Windows 和 Unix 的操作系统上都是一个斜杠 ("/")。</span><span class="sxs-lookup"><span data-stu-id="2385d-149">The value of this field is a slash ('/') on both Windows and Unix-based operating systems.</span></span>  
  
## Examples  

<span data-ttu-id="2385d-150">下面的示例显示<xref:System.IO.Path> Windows 和基于 Unix 的系统上的字段值。</span><span class="sxs-lookup"><span data-stu-id="2385d-150">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="2385d-151">请注意, Windows 支持使用正斜杠 (由<xref:System.IO.Path.AltDirectorySeparatorChar>字段返回) 或反斜杠 ( <xref:System.IO.Path.DirectorySeparatorChar>由字段返回) 作为路径分隔符, 而基于 Unix 的系统只支持正斜杠。</span><span class="sxs-lookup"><span data-stu-id="2385d-151">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-152">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-152">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-153">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-153">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-154">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-154">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeExtension (path As String, extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ChangeExtension(System::String ^ path, System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member ChangeExtension : string * string -&gt; string" Usage="System.IO.Path.ChangeExtension (path, extension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-155">要修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-155">The path information to modify.</span></span> <span data-ttu-id="2385d-156">该路径不能包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的任何字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-156">The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></param>
        <param name="extension"><span data-ttu-id="2385d-157">新的扩展名（有或没有前导句点）。</span><span class="sxs-lookup"><span data-stu-id="2385d-157">The new extension (with or without a leading period).</span></span> <span data-ttu-id="2385d-158">指定 <see langword="null" /> 以从 <paramref name="path" /> 移除现有扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-158">Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</span></span></param>
        <summary><span data-ttu-id="2385d-159">更改路径字符串的扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-159">Changes the extension of a path string.</span></span></summary>
        <returns><span data-ttu-id="2385d-160">已修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-160">The modified path information.</span></span>  
  
<span data-ttu-id="2385d-161">在基于 Windows 的桌面平台上，如果 <paramref name="path" /> 是 <see langword="null" /> 或空字符串 (“”)，则返回的路径信息是未修改的。</span><span class="sxs-lookup"><span data-stu-id="2385d-161">On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified.</span></span> <span data-ttu-id="2385d-162">如果 <paramref name="extension" /> 为 <see langword="null" />，则返回的字符串包含指定的路径（其扩展名已移除）。</span><span class="sxs-lookup"><span data-stu-id="2385d-162">If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed.</span></span> <span data-ttu-id="2385d-163">如果 <paramref name="path" /> 不具有扩展名且 <paramref name="extension" /> 不为 <see langword="null" />，则返回的路径字符串包含追加到 <paramref name="path" /> 结尾的 <paramref name="extension" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-163">If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-164">如果和`path` `extension`都不包含句点 (.), `ChangeExtension`则添加句点。</span><span class="sxs-lookup"><span data-stu-id="2385d-164">If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.</span></span>  
  
 <span data-ttu-id="2385d-165">`extension`参数可包含多个句点和任意有效的路径字符, 可以为任意长度。</span><span class="sxs-lookup"><span data-stu-id="2385d-165">The `extension` parameter can contain multiple periods and any valid path characters, and can be any length.</span></span> <span data-ttu-id="2385d-166">如果`extension` `path`为`null`, 则返回的字符串将包含的内容, 其中包含上一个句点以及删除后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-166">If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.</span></span>  
  
 <span data-ttu-id="2385d-167">如果`extension`是一个空字符串, 则返回的路径字符串包含的`path`内容, 其中包含上一个句点之后的任何字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-167">If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.</span></span>  
  
 <span data-ttu-id="2385d-168">如果`path`不具有扩展名且`extension`不为`null`, 则返回的字符串`path`后跟`extension`。</span><span class="sxs-lookup"><span data-stu-id="2385d-168">If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.</span></span>  
  
 <span data-ttu-id="2385d-169">如果`extension` 不`null`是并且不包含前导句点, 则添加句点。</span><span class="sxs-lookup"><span data-stu-id="2385d-169">If `extension` is not `null` and does not contain a leading period, the period is added.</span></span>  
  
 <span data-ttu-id="2385d-170">如果`path`包含由多个句点分隔的多个扩展, 则返回的字符串将`path`包含的内容, 其最后一个句点和后的`extension`所有字符都将替换为。</span><span class="sxs-lookup"><span data-stu-id="2385d-170">If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`.</span></span> <span data-ttu-id="2385d-171">例如, 如果`path`为 "\Dir1\examples\pathtests.csx.txt" 并且`extension`为 "cs", 则修改后的路径为 "\Dir1\examples\pathtests.csx.cs"。</span><span class="sxs-lookup"><span data-stu-id="2385d-171">For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".</span></span>  
  
 <span data-ttu-id="2385d-172">不能验证返回的结果在所有方案中都有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-172">It is not possible to verify that the returned results are valid in all scenarios.</span></span> <span data-ttu-id="2385d-173">例如, 如果`path`为空, `extension`则追加。</span><span class="sxs-lookup"><span data-stu-id="2385d-173">For example, if `path` is empty, `extension` is appended.</span></span>  
  
 <span data-ttu-id="2385d-174">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-174">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-175">下面的示例演示`ChangeExtension`方法的用法。</span><span class="sxs-lookup"><span data-stu-id="2385d-175">The following example demonstrates a use of the `ChangeExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]
 [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]
 [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-176"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-176"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-177">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-177">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-178">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-178">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-179">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-179">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-180">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-180">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2385d-181">将多个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-181">Combines strings into a path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="2385d-182">此方法旨在将各个字符串连接到表示文件路径的单个字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-182">This method is intended to concatenate individual strings into a single string that represents a file path.</span></span> <span data-ttu-id="2385d-183">但是, 如果第一个参数不包含一个根路径, 则将忽略以前的任何路径组件, 并且返回的字符串将以该根路径组件开头。</span><span class="sxs-lookup"><span data-stu-id="2385d-183">However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component.</span></span> <span data-ttu-id="2385d-184">作为`Combine`方法的替代方法, 请考虑<xref:System.IO.Path.Join%2A>使用或<xref:System.IO.Path.TryJoin%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-184">As an alternative to the `Combine` method, consider using the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> methods.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="2385d-185">此方法假定第一个参数是一个绝对路径, 并且以下参数或参数是相对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-185">This method assumes that the first argument is an absolute path and that the following argument or arguments are relative paths.</span></span> <span data-ttu-id="2385d-186">如果不是这种情况, 尤其是在任何后续参数都是用户输入的字符串时, 请<xref:System.IO.Path.Join%2A>改<xref:System.IO.Path.TryJoin%2A>为调用或方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-186">If this is not the case, and particularly if any subsequent arguments are strings input by the user, call the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Combine : string[] -&gt; string" Usage="System.IO.Path.Combine paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="2385d-187">由路径的各部分构成的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-187">An array of parts of the path.</span></span></param>
        <summary><span data-ttu-id="2385d-188">将字符串数组组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-188">Combines an array of strings into a path.</span></span></summary>
        <returns><span data-ttu-id="2385d-189">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-189">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="2385d-190">`paths`应为要组合的路径部分的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-190">`paths` should be an array of the parts of the path to combine.</span></span> <span data-ttu-id="2385d-191">如果其中一个后续路径是绝对路径, 则合并操作将从该绝对路径开始重置, 同时丢弃以前的所有组合路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-191">If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</span></span>  

<span data-ttu-id="2385d-192">如果`paths`中的任何元素不是驱动器, 并且不是以<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符结尾, 则`Combine`方法将在该元素和下一个元素<xref:System.IO.Path.DirectorySeparatorChar>之间添加一个字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-192">If any element in `paths` but the last one is not a drive and does not end with either the <xref:System.IO.Path.DirectorySeparatorChar> or the <xref:System.IO.Path.AltDirectorySeparatorChar> character, the `Combine` method adds a <xref:System.IO.Path.DirectorySeparatorChar> character between that element and the next one.</span></span> <span data-ttu-id="2385d-193">请注意, 如果元素以与目标平台不适用的路径分隔符结尾, 则该`Combine`方法将保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-193">Note that, if the element ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="2385d-194">下面的示例将反斜杠用作路径分隔符时, 比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-194">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#1)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#1)]  

 <span data-ttu-id="2385d-195">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-195">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="2385d-196">如果参数有空白, 则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="2385d-196">The parameters are not parsed if they have white space.</span></span>  
  
 <span data-ttu-id="2385d-197">不是对目录和文件名无效的所有字符都解释为可接受`Combine`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-197">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-198">例如, `Path.Combine("c:\\", "*.txt")`如果您要通过创建文件, 则它可能会无效, 它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-198">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="2385d-199">因此, 该`Combine`方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-199">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
## Examples  
 <span data-ttu-id="2385d-200">下面的示例将字符串数组合并到路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-200">The following example combines an array of strings into a path.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]
 [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-201">数组中的一个字符串包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-201">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-202">数组中的一个字符串为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-202">One of the strings in the array is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-203">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-203">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-204">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-204">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-205">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-205">The second path to combine.</span></span></param>
        <summary><span data-ttu-id="2385d-206">将两个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-206">Combines two strings into a path.</span></span></summary>
        <returns><span data-ttu-id="2385d-207">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-207">The combined paths.</span></span> <span data-ttu-id="2385d-208">如果指定的路径之一是零长度字符串，则该方法返回其他路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-208">If one of the specified paths is a zero-length string, this method returns the other path.</span></span> <span data-ttu-id="2385d-209">如果 <paramref name="path2" /> 包含绝对路径，则该方法返回 <paramref name="path2" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-209">If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-210">如果`path1`不是驱动器引用 (即 "C:" 或 "D:"), 并且不是以<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>或<xref:System.IO.Path.VolumeSeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar>中定义的有效分隔符结尾, 则在串联前追加到`path1` 。</span><span class="sxs-lookup"><span data-stu-id="2385d-210">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span> <span data-ttu-id="2385d-211">请注意, `path1`如果以不适合目标平台的路径分隔符结尾, 则该方法将`Combine`保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-211">Note that if `path1` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="2385d-212">下面的示例将反斜杠用作路径分隔符时, 比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-212">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>  
  
[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#2)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#2)]  

 <span data-ttu-id="2385d-213">如果`path2`不包含根 (例如, 如果`path2`不以分隔符或驱动器规范开头), 则会将这两个路径与中间分隔符字符串联。</span><span class="sxs-lookup"><span data-stu-id="2385d-213">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="2385d-214">如果`path2`包含一个根, `path2`则返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-214">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="2385d-215">如果参数有空白, 则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="2385d-215">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="2385d-216">因此, 如果`path2`包含空格 (例如 "\file.txt"), 则该<xref:System.IO.Path.Combine%2A>方法将追加`path2`到`path1` , 而不是仅`path2`返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-216">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.</span></span>  
  
 <span data-ttu-id="2385d-217">不是对目录和文件名无效的所有字符都解释为可接受`Combine`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-217">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-218">例如, `Path.Combine("c:\\", "*.txt")`如果您要通过创建文件, 则它可能会无效, 它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-218">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="2385d-219">因此, 该`Combine`方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-219">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
 <span data-ttu-id="2385d-220">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-220">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-221">下面的示例演示如何在`Combine`基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-221">The following example demonstrates using the `Combine` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]
 [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]
 [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-222"><paramref name="path1" /> 或 <paramref name="path2" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-222"><paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-223"><paramref name="path1" /> 或 <paramref name="path2" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-223"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-224">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-224">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-225">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-225">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-226">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-226">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-227">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-227">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-228">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-228">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-229">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-229">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-230">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-230">The third path to combine.</span></span></param>
        <summary><span data-ttu-id="2385d-231">将三个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-231">Combines three strings into a path.</span></span></summary>
        <returns><span data-ttu-id="2385d-232">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-232">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-233">`path1`应为绝对路径 (例如, "d:\archives" 或 "\\\archives\public")。</span><span class="sxs-lookup"><span data-stu-id="2385d-233">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="2385d-234">如果`path2` 或`path3`也是绝对路径, 则合并操作将放弃所有以前合并的路径, 并重置为该绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-234">If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="2385d-235">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-235">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="2385d-236">如果`path1`或<xref:System.IO.Path.AltDirectorySeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> `path1` <xref:System.IO.Path.VolumeSeparatorChar>不是驱动器引用 (即 "C:" 或 "D:"), 并且不是以、或中定义的有效分隔符结尾, 则将追加到或`path2` `path2`连接前。</span><span class="sxs-lookup"><span data-stu-id="2385d-236">If `path1` or `path2` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` or `path2` before concatenation.</span></span> <span data-ttu-id="2385d-237">请注意, `path1`如果`path2`或以不适合目标平台的路径分隔符字符结束, 则该方法将`Combine`保留原始路径分隔符并追加一个受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-237">Note that if `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="2385d-238">下面的示例将反斜杠用作路径分隔符时, 比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-238">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#3)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#3)]  

 <span data-ttu-id="2385d-239">如果`path2`不包含根 (例如, 如果`path2`不以分隔符或驱动器规范开头), 则会将这两个路径与中间分隔符字符串联。</span><span class="sxs-lookup"><span data-stu-id="2385d-239">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="2385d-240">如果`path2`包含一个根, `path2`则返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-240">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="2385d-241">如果参数有空白, 则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="2385d-241">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="2385d-242">因此, 如果`path2`包含空格 (例如 "\file.txt"), 则该方法将<xref:System.IO.Path.Combine%2A>追加`path2`到`path1`。</span><span class="sxs-lookup"><span data-stu-id="2385d-242">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="2385d-243">不是对目录和文件名无效的所有字符都解释为可接受`Combine`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-243">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-244">例如, `Path.Combine("c:\\", "*.txt")`如果您要通过创建文件, 则它可能会无效, 它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-244">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="2385d-245">因此, 该`Combine`方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-245">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-246">下面的示例将三个路径组合在一起。</span><span class="sxs-lookup"><span data-stu-id="2385d-246">The following example combines three paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]
 [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-247"><paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-247"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-248"><paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-248"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-249">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-249">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-250">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-250">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-251">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-251">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-252">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-252">The third path to combine.</span></span></param>
        <param name="path4"><span data-ttu-id="2385d-253">要组合的第四个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-253">The fourth path to combine.</span></span></param>
        <summary><span data-ttu-id="2385d-254">将四个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-254">Combines four strings into a path.</span></span></summary>
        <returns><span data-ttu-id="2385d-255">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-255">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-256">`path1`应为绝对路径 (例如, "d:\archives" 或 "\\\archives\public")。如果其中一个后续路径也是绝对路径, 则合并操作会丢弃所有以前合并的路径, 并重置为该绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-256">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="2385d-257">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-257">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="2385d-258">如果`path1`、 <xref:System.IO.Path.AltDirectorySeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.VolumeSeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar>或不是驱动器引用 (即 "C:" 或 "D:"), 并且不是以、或中定义的有效分隔符结尾, 则将其追加到它上面`path3` `path2`连接前。</span><span class="sxs-lookup"><span data-stu-id="2385d-258">If `path1`, `path2`, or `path3` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to it before concatenation.</span></span> <span data-ttu-id="2385d-259">请注意, `path1`如果`path2`、或`path3`以不适合目标平台的路径分隔符结尾, 则该方法将`Combine`保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-259">Note that if `path1`, `path2`, or `path3` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="2385d-260">下面的示例将反斜杠用作路径分隔符时, 比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-260">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#4)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#4)]   
  
 <span data-ttu-id="2385d-261">如果`path2`不包含根 (例如, 如果`path2`不以分隔符或驱动器规范开头), 则会将这两个路径与中间分隔符字符串联。</span><span class="sxs-lookup"><span data-stu-id="2385d-261">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="2385d-262">如果`path2`包含一个根, `path2`则返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-262">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="2385d-263">如果参数有空白, 则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="2385d-263">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="2385d-264">因此, 如果`path2`包含空格 (例如 "\file.txt"), 则该方法将<xref:System.IO.Path.Combine%2A>追加`path2`到`path1`。</span><span class="sxs-lookup"><span data-stu-id="2385d-264">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="2385d-265">不是对目录和文件名无效的所有字符都解释为可接受`Combine`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-265">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-266">例如, `Path.Combine("c:\\", "*.txt")`如果您要通过创建文件, 则它可能会无效, 它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-266">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="2385d-267">因此, 该`Combine`方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-267">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-268">下面的示例将四个路径组合在一起。</span><span class="sxs-lookup"><span data-stu-id="2385d-268">The following example combines four paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]
 [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-269"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-269"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-270"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-270"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-271">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-271">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.DirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char DirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable DirectorySeparatorChar : char" Usage="System.IO.Path.DirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2385d-272">提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="2385d-272">Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="2385d-273"><xref:System.IO.Path.AltDirectorySeparatorChar>和`DirectorySeparatorChar`都适用于在路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="2385d-273"><xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="2385d-274">使用 .NET Core 开发在多个平台上运行的应用程序时:</span><span class="sxs-lookup"><span data-stu-id="2385d-274">When you are using .NET Core to develop applications that run on multiple platforms:</span></span>

- <span data-ttu-id="2385d-275">如果要对目录分隔符进行硬编码, 则应使用正斜杠 (`/`) 字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-275">If you prefer to hard-code the directory separator character, you should use the forward slash (`/`) character.</span></span> <span data-ttu-id="2385d-276">它是 Unix 系统上唯一可识别的目录分隔符, 如示例的输出所示, 在 Windows <xref:System.IO.Path.AltDirectorySeparatorChar>上是。</span><span class="sxs-lookup"><span data-stu-id="2385d-276">It is the only recognized directory separator character on Unix systems, as the output from the example shows, and is the <xref:System.IO.Path.AltDirectorySeparatorChar> on Windows.</span></span>

- <span data-ttu-id="2385d-277">使用字符串串联在运行时动态检索路径分隔符, 并将其合并到文件系统路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-277">Use string concatenation to dynamically retrieve the path separator character at runtime and incorporate it into file system paths.</span></span> <span data-ttu-id="2385d-278">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="2385d-278">For example,</span></span> 

   ```csharp
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ```

   ```vb
   separator = Path.DirectorySeparatorChar
   path = $"{separator}users{separator}user1{separator}"
   ``` 

   <span data-ttu-id="2385d-279">你还可以从<xref:System.IO.Path.AltDirectorySeparatorChar>属性中检索值, 因为它在基于 Windows 和 Unx 的系统上是相同的。</span><span class="sxs-lookup"><span data-stu-id="2385d-279">You can also retrieve the value from the <xref:System.IO.Path.AltDirectorySeparatorChar> property, since it is the same on both Windows and Unx-based systems.</span></span>

- <span data-ttu-id="2385d-280"><xref:System.IO.Path.AltDirectorySeparatorChar>检索属性</span><span class="sxs-lookup"><span data-stu-id="2385d-280">Retrieve the <xref:System.IO.Path.AltDirectorySeparatorChar> property</span></span>

<span data-ttu-id="2385d-281">如果你的应用程序不是跨平台的, 你可以使用适用于你的系统的分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-281">If your application is not cross-platform, you can use the separator appropriate for your system.</span></span>

## Examples  

<span data-ttu-id="2385d-282">下面的示例显示<xref:System.IO.Path> Windows 和基于 Unix 的系统上的字段值。</span><span class="sxs-lookup"><span data-stu-id="2385d-282">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="2385d-283">请注意, Windows 支持使用正斜杠 (由<xref:System.IO.Path.AltDirectorySeparatorChar>字段返回) 或反斜杠 ( <xref:System.IO.Path.DirectorySeparatorChar>由字段返回) 作为路径分隔符, 而基于 Unix 的系统只支持正斜杠。</span><span class="sxs-lookup"><span data-stu-id="2385d-283">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>  

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-284">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-284">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-285">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-285">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-286">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-286">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-287">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-287">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-288">要分析的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-288">The path to analyze.</span></span></param>
        <summary><span data-ttu-id="2385d-289">返回一个值，该值指示指定为只读范围的路径是否以目录分隔符结尾。</span><span class="sxs-lookup"><span data-stu-id="2385d-289">Returns a value that indicates whether the path, specified as a read-only span, ends in a directory separator.</span></span></summary>
        <returns><span data-ttu-id="2385d-290">如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-290"><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : string -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-291">要分析的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-291">The path to analyze.</span></span></param>
        <summary><span data-ttu-id="2385d-292">返回一个值，该值指示指定的路径是否以目录分隔符结尾。</span><span class="sxs-lookup"><span data-stu-id="2385d-292">Returns a value that indicates whether the specified path ends in a directory separator.</span></span></summary>
        <returns><span data-ttu-id="2385d-293">如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-293"><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetDirectoryName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetDirectoryName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetDirectoryName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-294">要从中检索目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-294">The path to retrieve the directory information from.</span></span></param>
        <summary><span data-ttu-id="2385d-295">返回由字符范围表示的指定路径的目录信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-295">Returns the directory information for the specified path represented by a character span.</span></span></summary>
        <returns><span data-ttu-id="2385d-296"><paramref name="path" /> 的目录信息，如果 <paramref name="path" /> 为 <see langword="null" />空范围或根（例如 \,C: 或\\server\share），则为空跨度。</span><span class="sxs-lookup"><span data-stu-id="2385d-296">Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-297">与字符串重载不同，此方法不会将目录分隔符标准化。</span><span class="sxs-lookup"><span data-stu-id="2385d-297">Unlike the string overload, this method doesn't normalize directory separators.</span></span>

          ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-298">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-298">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : string -&gt; string" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-299">文件或目录的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-299">The path of a file or directory.</span></span></param>
        <summary><span data-ttu-id="2385d-300">返回指定路径字符串的目录信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-300">Returns the directory information for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="2385d-301"><paramref name="path" /> 的目录信息；如果 <paramref name="path" /> 表示根目录或为 null，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-301">Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null.</span></span> <span data-ttu-id="2385d-302">如果 <paramref name="path" /> 不包含目录信息，则返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-302">Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-303">在大多数情况下, 此方法返回的字符串包含路径中的所有字符, 但不包括最后一个<xref:System.IO.Path.DirectorySeparatorChar>或。 <xref:System.IO.Path.AltDirectorySeparatorChar></span><span class="sxs-lookup"><span data-stu-id="2385d-303">In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span> <span data-ttu-id="2385d-304">如果路径包含根目录 (如 "c:\\"), 则返回 null。</span><span class="sxs-lookup"><span data-stu-id="2385d-304">If the path consists of a root directory, such as "c:\\", null is returned.</span></span> <span data-ttu-id="2385d-305">请注意, 此方法不支持使用 "file:" 的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-305">Note that this method does not support paths using "file:".</span></span> <span data-ttu-id="2385d-306">由于返回的路径不包含<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>, 因此将<xref:System.IO.Path.GetDirectoryName%2A>返回的路径传递回方法会导致对结果字符串的每个后续调用截断一个文件夹级别。</span><span class="sxs-lookup"><span data-stu-id="2385d-306">Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string.</span></span> <span data-ttu-id="2385d-307">例如, 将路径 "C:\Directory\SubDirectory\test.txt" 传递到<xref:System.IO.Path.GetDirectoryName%2A>方法将返回 "C:\Directory\SubDirectory"。</span><span class="sxs-lookup"><span data-stu-id="2385d-307">For example, passing the path "C:\Directory\SubDirectory\test.txt" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return "C:\Directory\SubDirectory".</span></span> <span data-ttu-id="2385d-308">将该字符串 "C:\Directory\SubDirectory" 传递到<xref:System.IO.Path.GetDirectoryName%2A>将导致 "C:\Directory"。</span><span class="sxs-lookup"><span data-stu-id="2385d-308">Passing that string, "C:\Directory\SubDirectory", into <xref:System.IO.Path.GetDirectoryName%2A> will result in "C:\Directory".</span></span>  
  
 <span data-ttu-id="2385d-309">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-309">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-310">下面的示例演示如何在`GetDirectoryName`基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-310">The following example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]
 [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]
 [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-311">该 <paramref name="path" /> 参数包含无效字符，为空，或仅包含空格。</span><span class="sxs-lookup"><span data-stu-id="2385d-311">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="2385d-312">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-312">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="2385d-313"><paramref name="path" /> 参数超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="2385d-313">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-314">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-314">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-315">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-315">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-316">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-316">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-317">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-317">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-318">从中获取扩展名的文件路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-318">The file path from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="2385d-319">返回由只读字符范围表示的文件路径的扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-319">Returns the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="2385d-320">指定路径的扩展名（包括句点“.”）；如果 <paramref name="path" /> 没有扩展信息，则为 <see cref="P:System.ReadOnlySpan`1.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-320">The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="2385d-321">此方法`path`通过搜索`path`句点 (".") (从只读范围中的最后一个字符开始到其第一个字符) 来获取的扩展。</span><span class="sxs-lookup"><span data-stu-id="2385d-321">This method obtains the extension of `path` by searching `path` for a period ("."), starting from the last character in the read-only span and continuing toward its first character.</span></span> <span data-ttu-id="2385d-322">如果在<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符之前找到句点, 则返回的只读范围将包含句点和<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>后面的字符; 否则返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-322">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned read-only span contains the period and the characters after it; otherwise, <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> is returned.</span></span>  

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-323">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-323">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : string -&gt; string" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-324">从中获取扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-324">The path string from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="2385d-325">返回指定路径字符串的扩展名（包括句点“.”）。</span><span class="sxs-lookup"><span data-stu-id="2385d-325">Returns the extension (including the period ".") of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="2385d-326">指定路径的扩展名（包含句点“.”）、或 <see langword="null" />、或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-326">The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="2385d-327">如果 <paramref name="path" /> 为 <see langword="null" />，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-327">If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />.</span></span> <span data-ttu-id="2385d-328">如果 <paramref name="path" /> 不具有扩展名信息，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-328">If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="2385d-329">此方法`path`通过搜索`path`句点 (.) (从中`path`的最后一个字符开始, 一直到第一个字符) 来获取的扩展。</span><span class="sxs-lookup"><span data-stu-id="2385d-329">This method obtains the extension of `path` by searching `path` for a period (.), starting with the last character in `path` and continuing toward the first character.</span></span> <span data-ttu-id="2385d-330">如果在<xref:System.IO.Path.DirectorySeparatorChar>或<xref:System.IO.Path.AltDirectorySeparatorChar>字符之前找到句点, 则返回的字符串将包含句点和<xref:System.String.Empty?displayProperty=nameWithType>后面的字符; 否则返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-330">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty?displayProperty=nameWithType> is returned.</span></span>  
  
 <span data-ttu-id="2385d-331">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-331">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
 
## Examples  
 <span data-ttu-id="2385d-332">下面的示例演示如何在`GetExtension`基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-332">The following example demonstrates using the `GetExtension` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]
 [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]
 [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-333"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-333"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-334">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-334">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-335">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-335">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-336">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-336">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-337">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-337">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-338">一个只读范围，包含从中获取文件名和扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-338">A read-only span that contains the path from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="2385d-339">返回由只读字符范围表示的文件路径的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-339">Returns the file name and extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="2385d-340"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-340">The characters after the last directory separator character in <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="2385d-341">返回的只读范围包含路径中位于`path`最后一个分隔符后面的字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-341">The returned read-only span contains the characters of the path that follow the last separator in `path`.</span></span> <span data-ttu-id="2385d-342">如果中`path`的最后一个字符是一个卷或目录分隔符字符, 则该<xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>方法将返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-342">If the last character in `path` is a volume or directory separator character, the method returns <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2385d-343">如果`path`不包含分隔符, 该方法将返回`path`。</span><span class="sxs-lookup"><span data-stu-id="2385d-343">If `path` contains no separator character, the method returns `path`.</span></span>

         ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-344">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-344">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : string -&gt; string" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-345">从中获取文件名和扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-345">The path string from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="2385d-346">返回指定路径字符串的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-346">Returns the file name and extension of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="2385d-347"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-347">The characters after the last directory separator character in <paramref name="path" />.</span></span> <span data-ttu-id="2385d-348">如果 <paramref name="path" /> 的最后一个字符是目录或卷分隔符，则此方法返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-348">If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="2385d-349">如果 <paramref name="path" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-349">If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="2385d-350">如果文件路径为`null` `null`, 则返回值为。</span><span class="sxs-lookup"><span data-stu-id="2385d-350">The returned value is `null` if the file path is `null`.</span></span>  
  
<span data-ttu-id="2385d-351">用于确定文件名开头的分隔符是<xref:System.IO.Path.DirectorySeparatorChar>和。 <xref:System.IO.Path.AltDirectorySeparatorChar></span><span class="sxs-lookup"><span data-stu-id="2385d-351">The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span>  

<span data-ttu-id="2385d-352">由于*\\*是 unix 上的合法文件名, 因此`GetFileName`在基于 unix 的平台下运行时, 无法从基于 Windows 的路径 (如*C\\: mydir\\myfile.txt*) 正确返回文件名, 但`GetFileName`在基于 Windows 的平台下运行时, 可以从基于 unix 的路径 (如 */tmp/myfile.ext*) 正确返回文件名, 因此, 在`GetFileName`基于 unix 和基于 Windows 的平台上, 方法的行为并不完全相同。</span><span class="sxs-lookup"><span data-stu-id="2385d-352">Because *\\* is a legal file name on Unix, `GetFileName` running under Unix-based platforms cannot correctly return the file name from a Windows-based path like *C:\\mydir\\myfile.ext*, but `GetFileName` running under Windows-based platforms can correctly return the file name from a Unix-based path like */tmp/myfile.ext*, so the behavior of the `GetFileName` method is not strictly the same on Unix-based and Windows-based platforms.</span></span>

<span data-ttu-id="2385d-353">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-353">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-354">下面的示例演示了在基于 Windows `GetFileName`的桌面平台上的方法的行为。</span><span class="sxs-lookup"><span data-stu-id="2385d-354">The following example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]
 [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]
 [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-355"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-355"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-356">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-356">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-357">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-357">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-358">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-358">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-359">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-359">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileNameWithoutExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-360">一个只读范围，包含从中获取没有扩展名的文件名的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-360">A read-only span that contains the path from which to obtain the file name without the extension.</span></span></param>
        <summary><span data-ttu-id="2385d-361">返回文件名，该文件名不带由只读字符范围表示的文件路径扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-361">Returns the file name without the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="2385d-362">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的只读范围中的字符，但不包括最后一个句点 (.) 及其后面的所有字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-362">The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-363">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-363">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileNameWithoutExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : string -&gt; string" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-364">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-364">The path of the file.</span></span></param>
        <summary><span data-ttu-id="2385d-365">返回不具有扩展名的指定路径字符串的文件名。</span><span class="sxs-lookup"><span data-stu-id="2385d-365">Returns the file name of the specified path string without the extension.</span></span></summary>
        <returns><span data-ttu-id="2385d-366">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的字符串，但不包括最后的句点 (.) 以及之后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-366">The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-367">此方法不会验证路径或文件名是否存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-367">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="2385d-368">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-368">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-369">下面的示例演示`GetFileNameWithoutExtension`方法的用法。</span><span class="sxs-lookup"><span data-stu-id="2385d-369">The following example demonstrates a use of the `GetFileNameWithoutExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]
 [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]
 [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-370"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-370"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-371">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-371">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-372">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-372">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-373">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-373">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-374">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-374">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string -&gt; string" Usage="System.IO.Path.GetFullPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-375">要获取其绝对路径信息的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-375">The file or directory for which to obtain absolute path information.</span></span></param>
        <summary><span data-ttu-id="2385d-376">返回指定路径字符串的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-376">Returns the absolute path for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="2385d-377"><paramref name="path" /> 的完全限定的位置，例如“C:\MyFile.txt”。</span><span class="sxs-lookup"><span data-stu-id="2385d-377">The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="2385d-378">绝对路径包含定位系统中的文件或目录所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-378">The absolute path includes all information required to locate a file or directory on a system.</span></span>  
  
 <span data-ttu-id="2385d-379">指定的`path`文件或目录不存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-379">The file or directory specified by `path` is not required to exist.</span></span> <span data-ttu-id="2385d-380">例如, 如果*c:\temp\newdir*为当前目录, 则对文件名`GetFullPath` (如*test.txt* ) 调用会返回*c:\temp\newdir\test.txt*。</span><span class="sxs-lookup"><span data-stu-id="2385d-380">For example, if *c:\temp\newdir* is the current directory, calling `GetFullPath` on a file name such as *test.txt* returns *c:\temp\newdir\test.txt*.</span></span> <span data-ttu-id="2385d-381">文件不需要存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-381">The file need not exist.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="2385d-382">如果`path`是相对路径, 则此重载返回可基于当前驱动器和当前目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-382">If `path` is a relative path, this overload returns a fully qualified path that can be based on the current drive and current directory.</span></span> <span data-ttu-id="2385d-383">当应用程序执行时, 当前驱动器和当前目录可以随时更改。</span><span class="sxs-lookup"><span data-stu-id="2385d-383">The current drive and current directory can change at any time as an application executes.</span></span> <span data-ttu-id="2385d-384">因此, 不能提前确定此重载返回的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-384">As a result, the path returned by this overload cannot be determined in advance.</span></span> <span data-ttu-id="2385d-385">若要返回确定性路径, 请调用<xref:System.IO.Path.GetFullPath(System.String,System.String)>重载。</span><span class="sxs-lookup"><span data-stu-id="2385d-385">To return a deterministic path, call the <xref:System.IO.Path.GetFullPath(System.String,System.String)> overload.</span></span> <span data-ttu-id="2385d-386">还可以调用<xref:System.IO.Path.IsPathFullyQualified%2A>方法来确定路径是完全限定路径还是相对路径, 从而确定是否需要`GetFullPath`调用。</span><span class="sxs-lookup"><span data-stu-id="2385d-386">You can also call the <xref:System.IO.Path.IsPathFullyQualified%2A> method to determine whether a path is fully qualified or relative and therefore whether a call to `GetFullPath` is necessary.</span></span>

 <span data-ttu-id="2385d-387">但是, 如果`path`存在, 则调用方必须具有获取的路径信息的`path`权限。</span><span class="sxs-lookup"><span data-stu-id="2385d-387">However, if `path` does exist, the caller must have permission to obtain path information for `path`.</span></span> <span data-ttu-id="2385d-388">请注意, 与<xref:System.IO.Path>类的大多数成员不同, 此方法访问文件系统。</span><span class="sxs-lookup"><span data-stu-id="2385d-388">Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.</span></span>  
  
 <span data-ttu-id="2385d-389">此方法使用当前目录和当前卷信息来完全限定`path`。</span><span class="sxs-lookup"><span data-stu-id="2385d-389">This method uses the current directory and current volume information to fully qualify `path`.</span></span> <span data-ttu-id="2385d-390">如果仅在中`path`指定文件名, `GetFullPath`则将返回当前目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-390">If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.</span></span>  
  
 <span data-ttu-id="2385d-391">如果传入短文件名, 则会将其扩展到长文件名。</span><span class="sxs-lookup"><span data-stu-id="2385d-391">If you pass in a short file name, it is expanded to a long file name.</span></span>  
  
 <span data-ttu-id="2385d-392">如果路径不包含有效字符, 则无效, 除非它包含一个或多个 "." 字符, 后跟任意数量的空格;然后, 它将被分析为 "." 或 "..."。</span><span class="sxs-lookup"><span data-stu-id="2385d-392">If a path contains no significant characters, it is invalid unless it contains one or more "." characters followed by any number of spaces; then it will be parsed as either "." or "..".</span></span>  

<span data-ttu-id="2385d-393">.NET Core 1.1 及更高版本和 .NET Framework 4.6.2 及更高版本还支持包含设备名称的路径, 例如\\"？ \c\":。</span><span class="sxs-lookup"><span data-stu-id="2385d-393">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support paths that include device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="2385d-394">有关 Windows 上的文件路径格式的详细信息, 请参阅[windows 系统上的文件路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-394">For more information on file path formats on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="2385d-395">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-395">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>
  
## Examples  
 <span data-ttu-id="2385d-396">下面的示例演示基于`GetFullPath` Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-396">The following example demonstrates the `GetFullPath` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]
 [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]
 [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-397"><paramref name="path" /> 是一个零长度字符串，仅包含空格或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-397"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="2385d-398">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2385d-398">-or-</span></span> 
<span data-ttu-id="2385d-399">系统无法检索绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-399">The system could not retrieve the absolute path.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2385d-400">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="2385d-400">The caller does not have the required permissions.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-401"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-401"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2385d-402"><paramref name="path" /> 包含一个冒号（“:”），此冒号不是卷标识符（如，“c:\\”）的一部分。</span><span class="sxs-lookup"><span data-stu-id="2385d-402"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="2385d-403">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="2385d-403">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="2385d-404">用于访问路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-404">for access to the path.</span></span></permission>
        <related type="Article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-405">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-405">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-406">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-406">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-407">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-407">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-408">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-408">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String, basePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path, System::String ^ basePath);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string * string -&gt; string" Usage="System.IO.Path.GetFullPath (path, basePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="basePath" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-409">连接到 <paramref name="basePath" /> 的相对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-409">A relative path to concatenate to <paramref name="basePath" />.</span></span></param>
        <param name="basePath"><span data-ttu-id="2385d-410">完全限定路径的开头。</span><span class="sxs-lookup"><span data-stu-id="2385d-410">The beginning of a fully qualified path.</span></span></param>
        <summary><span data-ttu-id="2385d-411">返回完全限定的基本路径和相对路径的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-411">Returns an absolute path from a fully qualified base path and a relative path.</span></span></summary>
        <returns><span data-ttu-id="2385d-412">绝对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-412">The absolute path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="2385d-413">如果`path`是一个空路径, 则该方法`basePath`返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-413">If `path` is an empty path, the method returns `basePath`.</span></span> <span data-ttu-id="2385d-414">如果`path`是完全限定的路径, 则该方法`path`将传递<xref:System.IO.Path.GetFullPath(System.String)>给方法并返回结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-414">If `path` is a fully qualified path, the method passes `path` to the <xref:System.IO.Path.GetFullPath(System.String)> method and returns the result.</span></span>

<span data-ttu-id="2385d-415">使用相对路径时, 使用此方法可基于指定的卷和根目录返回确定性路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-415">Use this method to return a deterministic path based on a specified volume and rooted directory when you're using relative paths.</span></span> <span data-ttu-id="2385d-416">根据当前驱动器`basePath`目录使用预定义的 (而不是一个), 防止当前驱动器和目录中的意外更改引起的不需要的文件路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-416">Using a predefined `basePath` rather than one based on the current drive directory guards against unwanted file paths caused by unexpected changes in the current drive and directory.</span></span> 

## <a name="example"></a><span data-ttu-id="2385d-417">示例</span><span class="sxs-lookup"><span data-stu-id="2385d-417">Example</span></span>

<span data-ttu-id="2385d-418">下面的示例定义了一个变量`basePath`, 用于表示应用程序的当前目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-418">The following example defines a variable, `basePath`, to represent an application's current directory.</span></span> <span data-ttu-id="2385d-419">然后, 将其传递给`GetFullPath`方法以获取应用程序的数据目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-419">It then passes it to the `GetFullPath` method to get a fully qualified path to the application's data directory.</span></span>

[!code-csharp[Path.GetFullPath(String,String)](~/samples/snippets/csharp/api/system.io/path/getfullpath/program.cs)] 
[!code-vb[Path.GetFullPath(String,String)](~/samples/snippets/visualbasic/api/system.io/path/getfullpath/program.vb)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-420"><paramref name="path" /> 或 <paramref name="basePath" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-420"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-421"><paramref name="basePath" /> 不是完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-421"><paramref name="basePath" /> is not a fully qualified path.</span></span>

<span data-ttu-id="2385d-422">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2385d-422">-or-</span></span>

<span data-ttu-id="2385d-423"><paramref name="path" /> 或 <paramref name="basePath" /> 包含无效的路径字符，例如 U+0000。</span><span class="sxs-lookup"><span data-stu-id="2385d-423"><paramref name="path" /> or <paramref name="basePath" /> contains invalid path characters, such as U+0000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidFileNameChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidFileNameChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidFileNameChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidFileNameChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidFileNameChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2385d-424">获取包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-424">Gets an array containing the characters that are not allowed in file names.</span></span></summary>
        <returns><span data-ttu-id="2385d-425">包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-425">An array containing the characters that are not allowed in file names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-426">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="2385d-426">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="2385d-427">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="2385d-427">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="2385d-428">例如, 在基于 Windows 的桌面平台上, 无效路径字符可能包括 ASCII/Unicode 字符1到31、引号 (")、小于 (\<)、大于 (>)、管道 (&#124;)、backspace (\b)、null (\ 0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="2385d-428">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-429">下面的示例演示了<xref:System.IO.Path.GetInvalidFileNameChars%2A>用于检索无效<xref:System.IO.Path.GetInvalidPathChars%2A>字符的方法和方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-429">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidPathChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidPathChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidPathChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidPathChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2385d-430">获取包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-430">Gets an array containing the characters that are not allowed in path names.</span></span></summary>
        <returns><span data-ttu-id="2385d-431">包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-431">An array containing the characters that are not allowed in path names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-432">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="2385d-432">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="2385d-433">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="2385d-433">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="2385d-434">例如, 在基于 Windows 的桌面平台上, 无效路径字符可能包括 ASCII/Unicode 字符1到31、引号 (")、小于 (\<)、大于 (>)、管道 (&#124;)、backspace (\b)、null (\ 0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="2385d-434">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-435">下面的示例演示了<xref:System.IO.Path.GetInvalidFileNameChars%2A>用于检索无效<xref:System.IO.Path.GetInvalidPathChars%2A>字符的方法和方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-435">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetPathRoot (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetPathRoot(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetPathRoot(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-436">从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-436">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="2385d-437">从指定字符范围包含的路径中获取根目录信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-437">Gets the root directory information from the path contained in the specified character span.</span></span></summary>
        <returns><span data-ttu-id="2385d-438">包含 `path` 的根目录的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-438">A character span containing the root directory of `path`.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-439">与字符串重载不同，此方法不会将目录分隔符标准化。</span><span class="sxs-lookup"><span data-stu-id="2385d-439">Unlike the string overload, this method doesn't normalize directory separators.</span></span>

          ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-440">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-440">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPathRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : string -&gt; string" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-441">从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-441">The path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="2385d-442">获取指定路径的根目录信息。</span><span class="sxs-lookup"><span data-stu-id="2385d-442">Gets the root directory information of the specified path.</span></span></summary>
        <returns><span data-ttu-id="2385d-443">根目录的 <paramref name="path" />；或如果 <paramref name="path" /> 为 <see langword="null" />，则为 <see langword="null" />；或如果 <paramref name="path" /> 不包含根目录信息，则为空字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-443">The root directory of <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> is <see langword="null" />, or an empty string if <paramref name="path" /> does not contain root directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-444">此方法不会验证路径或文件名是否存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-444">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="2385d-445">此方法返回的字符串的可能模式如下所示:</span><span class="sxs-lookup"><span data-stu-id="2385d-445">Possible patterns for the string returned by this method are as follows:</span></span>  
  
- <span data-ttu-id="2385d-446">空字符串 (`path`在当前驱动器或卷上指定了相对路径)。</span><span class="sxs-lookup"><span data-stu-id="2385d-446">An empty string (`path` specified a relative path on the current drive or volume).</span></span>  
  
- <span data-ttu-id="2385d-447">"\" (`path`指定了当前驱动器上的绝对路径)。</span><span class="sxs-lookup"><span data-stu-id="2385d-447">"\" (`path` specified an absolute path on the current drive).</span></span>  
  
- <span data-ttu-id="2385d-448">"X:" (`path`指定驱动器上的相对路径, 其中 X 表示驱动器或卷号)。</span><span class="sxs-lookup"><span data-stu-id="2385d-448">"X:" (`path` specified a relative path on a drive, where X represents a drive or volume letter).</span></span>  
  
- <span data-ttu-id="2385d-449">"X:\" (`path`在给定驱动器上指定了绝对路径)。</span><span class="sxs-lookup"><span data-stu-id="2385d-449">"X:\" (`path` specified an absolute path on a given drive).</span></span>  
  
- <span data-ttu-id="2385d-450">"\\\ComputerName\SharedFolder" (UNC 路径)。</span><span class="sxs-lookup"><span data-stu-id="2385d-450">"\\\ComputerName\SharedFolder" (a UNC path).</span></span>  
  
- <span data-ttu-id="2385d-451">"\\\C:"\?(DOS 设备路径, 在 .net Core 1.1 及更高版本中受支持, 在 .NET Framework 4.6.2 及更高版本中)\\</span><span class="sxs-lookup"><span data-stu-id="2385d-451">"\\\\\?\C:" (a DOS device path, supported in .NET Core 1.1 and later versions and in .NET Framework 4.6.2 and later versions)</span></span>
   
 <span data-ttu-id="2385d-452">有关 Windows 上的文件路径的详细信息, 请参阅[windows 系统上的文件路径格式](~/docs/standard/io/file-path-formats.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-452">For more information on file paths on Windows, see [File path formats on Windows systems](~/docs/standard/io/file-path-formats.md).</span></span> <span data-ttu-id="2385d-453">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-453">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
## Examples  
 <span data-ttu-id="2385d-454">下面的示例演示`GetPathRoot`方法的用法。</span><span class="sxs-lookup"><span data-stu-id="2385d-454">The following example demonstrates a use of the `GetPathRoot` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]
 [!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]
 [!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-455"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-455"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>  
  
<span data-ttu-id="2385d-456">或</span><span class="sxs-lookup"><span data-stu-id="2385d-456">-or-</span></span> 
 <span data-ttu-id="2385d-457"><see cref="F:System.String.Empty" /> 被传递到 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-457"><see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-458">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-458">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-459">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-459">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-460">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-460">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-461">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-461">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRandomFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRandomFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRandomFileName();" />
      <MemberSignature Language="F#" Value="static member GetRandomFileName : unit -&gt; string" Usage="System.IO.Path.GetRandomFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2385d-462">返回随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="2385d-462">Returns a random folder name or file name.</span></span></summary>
        <returns><span data-ttu-id="2385d-463">随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="2385d-463">A random folder name or file name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-464"><xref:System.IO.Path.GetRandomFileName%2A>方法返回可用作文件夹名称或文件名的加密型强随机字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-464">The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name.</span></span> <span data-ttu-id="2385d-465">与<xref:System.IO.Path.GetTempFileName%2A>不同<xref:System.IO.Path.GetRandomFileName%2A> , 不创建文件。</span><span class="sxs-lookup"><span data-stu-id="2385d-465">Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file.</span></span> <span data-ttu-id="2385d-466">如果文件系统的安全性非常重要, 则应使用此方法而不<xref:System.IO.Path.GetTempFileName%2A>是。</span><span class="sxs-lookup"><span data-stu-id="2385d-466">When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-467">下面的示例显示了方法的<xref:System.IO.Path.GetRandomFileName%2A>输出。</span><span class="sxs-lookup"><span data-stu-id="2385d-467">The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.</span></span>  
  
 [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]
 [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativePath">
      <MemberSignature Language="C#" Value="public static string GetRelativePath (string relativeTo, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRelativePath(string relativeTo, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativePath (relativeTo As String, path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRelativePath(System::String ^ relativeTo, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetRelativePath : string * string -&gt; string" Usage="System.IO.Path.GetRelativePath (relativeTo, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="2385d-468">相对于结果的源路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-468">The source path the result should be relative to.</span></span> <span data-ttu-id="2385d-469">此路径始终被视为目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-469">This path is always considered to be a directory.</span></span></param>
        <param name="path"><span data-ttu-id="2385d-470">目标路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-470">The destination path.</span></span></param>
        <summary><span data-ttu-id="2385d-471">返回从一个路径到另一个路径的相对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-471">Returns a relative path from one path to another.</span></span></summary>
        <returns><span data-ttu-id="2385d-472">相对路径，如果路径不共享同一根，则为 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-472">The relative path, or <paramref name="path" /> if the paths don't share the same root.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="2385d-473">在计算差之前, 可以<xref:System.IO.Path.GetFullPath%2A>通过调用方法解析路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-473">Paths are resolved by calling the <xref:System.IO.Path.GetFullPath%2A> method before calculating the difference.</span></span> <span data-ttu-id="2385d-474">方法使用适用于 Linux 的当前平台 (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>适用于 Windows 和 MacOs) <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>的默认文件路径比较。</span><span class="sxs-lookup"><span data-stu-id="2385d-474">The method uses the default file path comparison for the current platform (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for Windows and MacOs, <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> for Linux.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-475"><paramref name="relativeTo" /> 或 <paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-475"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-476">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-476">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="System.IO.Path.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2385d-477">在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-477">Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</span></span></summary>
        <returns><span data-ttu-id="2385d-478">临时文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-478">The full path of the temporary file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-479">此方法创建一个文件扩展名为 .TMP 的临时文件。</span><span class="sxs-lookup"><span data-stu-id="2385d-479">This method creates a temporary file with a .TMP file extension.</span></span> <span data-ttu-id="2385d-480">该临时文件创建于用户的临时文件夹中，该文件夹是 <xref:System.IO.Path.GetTempPath%2A> 方法返回的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-480">The temporary file is created within the user's temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
 <span data-ttu-id="2385d-481">如果用于创建超过65535个文件而不删除以前的临时文件, 该<xref:System.IO.Path.GetTempFileName%2A>方法将引发。 <xref:System.IO.IOException></span><span class="sxs-lookup"><span data-stu-id="2385d-481">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.</span></span>  
  
 <span data-ttu-id="2385d-482">如果没有可用的唯一临时文件名, 则<xref:System.IO.Path.GetTempFileName%2A>方法将引发。 <xref:System.IO.IOException></span><span class="sxs-lookup"><span data-stu-id="2385d-482">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available.</span></span> <span data-ttu-id="2385d-483">若要解决此错误, 请删除所有不需要的临时文件。</span><span class="sxs-lookup"><span data-stu-id="2385d-483">To resolve this error, delete all unneeded temporary files.</span></span>  
  
 <span data-ttu-id="2385d-484">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-484">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="2385d-485">发生 I/O 错误，例如没有提供唯一的临时文件名。</span><span class="sxs-lookup"><span data-stu-id="2385d-485">An I/O error occurs, such as no unique temporary file name is available.</span></span>  
  
<span data-ttu-id="2385d-486">或</span><span class="sxs-lookup"><span data-stu-id="2385d-486">-or-</span></span>
  
 <span data-ttu-id="2385d-487">此方法无法创建临时文件。</span><span class="sxs-lookup"><span data-stu-id="2385d-487">This method was unable to create a temporary file.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="2385d-488">用于写入临时目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-488">for writing to the temporary directory.</span></span> <span data-ttu-id="2385d-489">关联的枚举:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span><span class="sxs-lookup"><span data-stu-id="2385d-489">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-490">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-490">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-491">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-491">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-492">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-492">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempPath();" />
      <MemberSignature Language="F#" Value="static member GetTempPath : unit -&gt; string" Usage="System.IO.Path.GetTempPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2385d-493">返回当前用户的临时文件夹的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-493">Returns the path of the current user's temporary folder.</span></span></summary>
        <returns><span data-ttu-id="2385d-494">临时文件夹的路径，以反斜杠结尾。</span><span class="sxs-lookup"><span data-stu-id="2385d-494">The path to the temporary folder, ending with a backslash.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-495">此方法按以下顺序检查环境变量是否存在, 并使用找到的第一个路径:</span><span class="sxs-lookup"><span data-stu-id="2385d-495">This method checks for the existence of environment variables in the following order and uses the first path found:</span></span>  
  
1.  <span data-ttu-id="2385d-496">TMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-496">The path specified by the TMP environment variable.</span></span>  
  
2.  <span data-ttu-id="2385d-497">由 TEMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-497">The path specified by the TEMP environment variable.</span></span>  
  
3.  <span data-ttu-id="2385d-498">USERPROFILE 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-498">The path specified by the USERPROFILE environment variable.</span></span>  
  
4.  <span data-ttu-id="2385d-499">Windows 目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-499">The Windows directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-500">下面的代码演示如何调用 <xref:System.IO.Path.GetTempPath%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-500">The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
```vb  
Dim result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```csharp  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 <span data-ttu-id="2385d-501">此示例生成与下面类似的输出。</span><span class="sxs-lookup"><span data-stu-id="2385d-501">This example produces output similar to the following.</span></span>  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2385d-502">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="2385d-502">The caller does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="2385d-503">用于对环境变量进行不受限制的访问。</span><span class="sxs-lookup"><span data-stu-id="2385d-503">for unrestricted access to environment variables.</span></span> <span data-ttu-id="2385d-504">关联的枚举:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="2385d-504">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-505">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-505">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-506">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-506">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-507">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-507">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-508">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-508">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="2385d-509">确定指定字符范围表示的路径是否包含文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-509">Determines whether the path represented by the specified character span includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="2385d-510">如果路径中最后一个目录分隔符或卷分隔符之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-510"><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="2385d-511">中`path`的尾随句点不被视为扩展。</span><span class="sxs-lookup"><span data-stu-id="2385d-511">A trailing period in `path` is not considered an extension.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-512">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-512">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : string -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-513">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-513">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="2385d-514">确定路径是否包括文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="2385d-514">Determines whether a path includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="2385d-515">如果路径中最后一个目录分隔符（\\\ 或 /）或卷分隔符 (:) 之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-515"><see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-516">从此开始`path`, 此方法会搜索一个句点 (.), 后跟至少一个字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-516">Starting from the end of `path`, this method searches for a period (.) followed by at least one character.</span></span> <span data-ttu-id="2385d-517">如果在遇到<xref:System.IO.Path.DirectorySeparatorChar>、 <xref:System.IO.Path.AltDirectorySeparatorChar>或<xref:System.IO.Path.VolumeSeparatorChar>字符之前找到此模式, 则此方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="2385d-517">If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.</span></span>  
  
 <span data-ttu-id="2385d-518">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-518">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-519">下面的示例演示 `HasExtension` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="2385d-519">The following example demonstrates the use of the `HasExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]
 [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]
 [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-520"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-520"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-521">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-521">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-522">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-522">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-523">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-523">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-524">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-524">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.InvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvalidPathChars As Char() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;char&gt; ^ InvalidPathChars;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidPathChars : char[]" Usage="System.IO.Path.InvalidPathChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2385d-525">提供平台特定的字符数组，这些字符不能在传递到 <see cref="T:System.IO.Path" /> 类的成员的路径字符串参数中指定。</span><span class="sxs-lookup"><span data-stu-id="2385d-525">Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-526">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="2385d-526">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="2385d-527">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="2385d-527">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="2385d-528">例如, 在基于 Windows 的桌面平台上, 无效路径字符可能包括 ASCII/Unicode 字符1到31、引号 (")、小于 (\<)、大于 (>)、管道 (&#124;)、backspace (\b)、null (\ 0) 和制表符 (\t)。</span><span class="sxs-lookup"><span data-stu-id="2385d-528">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2385d-529">如果你认为<xref:System.IO.Path.InvalidPathChars>你的代码可能在不受信任的代码所在的应用程序域中执行, 请不要使用。</span><span class="sxs-lookup"><span data-stu-id="2385d-529">Do not use <xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code.</span></span> <span data-ttu-id="2385d-530"><xref:System.IO.Path.InvalidPathChars>是一个数组, 因此可以覆盖其元素。</span><span class="sxs-lookup"><span data-stu-id="2385d-530"><xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten.</span></span> <span data-ttu-id="2385d-531">如果不受信任的代码<xref:System.IO.Path.InvalidPathChars>覆盖的元素, 则可能会导致你的代码以可利用的方式出现故障。</span><span class="sxs-lookup"><span data-stu-id="2385d-531">If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-532">下面的示例演示`InvalidPathChars`属性的用法。</span><span class="sxs-lookup"><span data-stu-id="2385d-532">The following example demonstrates the use of the `InvalidPathChars` property.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-533">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-533">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-534">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-534">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-535">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-535">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathFullyQualified">
      <Docs>
        <summary><span data-ttu-id="2385d-536">返回一个值，指示文件路径是否完全限定。</span><span class="sxs-lookup"><span data-stu-id="2385d-536">Returns a value that indicates whether a file path is fully qualified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="2385d-537">`IsPathFullyQualified`方法的重载可处理<xref:System.IO.Path.DirectorySeparatorChar>同时使用和<xref:System.IO.Path.AltDirectorySeparatorChar>字符的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-537">The overloads of the `IsPathFullyQualified` method handle paths that use both the <xref:System.IO.Path.DirectorySeparatorChar> and the <xref:System.IO.Path.AltDirectorySeparatorChar> characters.</span></span> <span data-ttu-id="2385d-538">它不会对作为参数传递给它的路径执行任何验证。</span><span class="sxs-lookup"><span data-stu-id="2385d-538">It does not perform any validation on the path that is passed to it as an argument.</span></span> <span data-ttu-id="2385d-539">因此, Uri 被解释为相对路径, 并返回`false`。</span><span class="sxs-lookup"><span data-stu-id="2385d-539">As a result, URIs are interpreted as relative paths and return `false`.</span></span> 

<span data-ttu-id="2385d-540">完全限定的路径 (如`IsPathFullyQualified`方法所指示) 和根路径 (如<xref:System.IO.Path.IsPathRooted%2A>方法所指示的路径) 之间存在差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-540">There is a difference between a fully qualified path (as indicated by the `IsPathFullyQualified` method) and a rooted path (as indicated by the <xref:System.IO.Path.IsPathRooted%2A> method).</span></span> <span data-ttu-id="2385d-541">*完全限定的路径*或*绝对路径*始终定义从特定驱动器或设备到目标文件或目录的准确路径, 而不依赖于当前驱动器或当前目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-541">A *fully qualified path* or *absolute path* always defines an exact path from a particular drive or device to a target file or directory, and does not depend on the current drive or current directory.</span></span> <span data-ttu-id="2385d-542">例如, 在 Windows 系统上, *C:/users/user1/documents/reports/2019/一月/reports。 pdf*定义从 C: 盘的根目录到目标文件的绝对路径, 即 "*格式*"。</span><span class="sxs-lookup"><span data-stu-id="2385d-542">For example, on Windows systems, *C:/users/user1/documents/reports/2019/january/highlights.pdf* defines an absolute path from the root of the C: drive to the target file, *highlights.pdf*.</span></span> <span data-ttu-id="2385d-543">*根路径*指定起始驱动器或根目录, 但取决于当前目录 (如果该目录是指定驱动器的根) 或当前驱动器 (如果它在根目录下)。</span><span class="sxs-lookup"><span data-stu-id="2385d-543">A *rooted path* specifies either a starting drive or root directory, but depends on either the current directory (if it is rooted by a specified drive) or the current drive (if it is rooted by the root directory).</span></span> <span data-ttu-id="2385d-544">下面的示例演示完全限定的路径和根路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-544">The following example illustrates the difference between fully qualified paths and rooted paths.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-545">文件路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-545">A file path.</span></span></param>
        <summary><span data-ttu-id="2385d-546">返回一个值，该值指示由指定字符范围表示的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-546">Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="2385d-547">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-547"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  


         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-548">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-548">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : string -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-549">文件路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-549">A file path.</span></span></param>
        <summary><span data-ttu-id="2385d-550">返回一个值，该值指示指定的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-550">Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="2385d-551">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-551"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-552">此方法处理使用备用目录分隔符的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-552">This method handles paths that use the alternate directory separator.</span></span> <span data-ttu-id="2385d-553">通常，假设根路径（<xref:System.IO.Path.IsPathRooted(System.String)>）不是相对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-553">It's a frequent mistake to assume that rooted paths (<xref:System.IO.Path.IsPathRooted(System.String)>) aren't relative.</span></span> <span data-ttu-id="2385d-554">例如，"C:a" 是驱动器相关的，也就是说，它是针对 C：（root，但相对）的当前目录进行解析。</span><span class="sxs-lookup"><span data-stu-id="2385d-554">For example, "C:a" is drive relative, that is, it's resolved against the current directory for C: (rooted, but relative).</span></span> <span data-ttu-id="2385d-555">"C:\a" 是根路径而不是相对路径，也就是说，当前目录不用于修改路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-555">"C:\a" is rooted and not relative, that is, the current directory isn't used to modify the path.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2385d-556"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-556"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-557">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-557">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathRooted">
      <Docs>
        <summary><span data-ttu-id="2385d-558">返回一个值，指示文件路径是否包含根。</span><span class="sxs-lookup"><span data-stu-id="2385d-558">Returns a value that indicates whether a file path contains a root.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="2385d-559">**根路径**是固定到特定驱动器或 UNIC 路径的文件路径;它与相对于当前驱动器或工作目录的路径相比较。</span><span class="sxs-lookup"><span data-stu-id="2385d-559">A **rooted path** is file path that is fixed to a specific drive or UNIC path; it contrasts with a path that is relative to the current drive or working directory.</span></span> <span data-ttu-id="2385d-560">例如, 在 Windows 系统上, 以反斜杠 (例如 "\Documents") 或驱动器号和冒号 (如 "C:Documents") 开头的根路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-560">For example, on Windows systems, a rooted path begins with a backslash (for example, "\Documents") or a drive letter and colon (for example, "C:Documents").</span></span> 

<span data-ttu-id="2385d-561">请注意, 根路径可以是绝对路径 (即, 完全限定的路径), 也可以是相对路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-561">Note that rooted paths can be either absolute (that is, fully qualified) or relative.</span></span> <span data-ttu-id="2385d-562">绝对根路径是从驱动器根目录到特定目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-562">An absolute rooted path is a fully qualified path from the root of a drive to a specific directory.</span></span> <span data-ttu-id="2385d-563">相对 root 路径指定驱动器, 但将根据当前目录解析其完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-563">A relative rooted path specifies a drive, but its fully qualified path is resolved against the current directory.</span></span> <span data-ttu-id="2385d-564">以下示例演示了差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-564">The following example illustrates the difference.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-565">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-565">The path to test.</span></span></param>
        <summary><span data-ttu-id="2385d-566">返回一个值，该值指示表示文件路径的指定字符范围是否包含根。</span><span class="sxs-lookup"><span data-stu-id="2385d-566">Returns a value that indicates whether the specified character span that represents a file path contains a root.</span></span></summary>
        <returns><span data-ttu-id="2385d-567">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-567"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-568">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-568">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : string -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-569">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-569">The path to test.</span></span></param>
        <summary><span data-ttu-id="2385d-570">返回一个值，该值指示指定的路径字符串是否包含根。</span><span class="sxs-lookup"><span data-stu-id="2385d-570">Returns a value indicating whether the specified path string contains a root.</span></span></summary>
        <returns><span data-ttu-id="2385d-571">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-571"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-572">如果<xref:System.IO.Path.IsPathRooted%2A>第一个`true`字符是目录分隔符 (如 "\\"), 或者路径以驱动器号和冒号开头 (:), 则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-572">The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:).</span></span> <span data-ttu-id="2385d-573">例如, 对于`true` "\\ `path` \\\MyDir\\\MyFile.txt"、"C: \MyDir" 或 "C:MyDir" 之类的字符串, 它将返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-573">For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir".</span></span> <span data-ttu-id="2385d-574">它将`false`返回`path` "MyDir" 等字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-574">It returns `false` for `path` strings such as "MyDir".</span></span>  
  
 <span data-ttu-id="2385d-575">此方法不会验证路径或文件名是否存在。</span><span class="sxs-lookup"><span data-stu-id="2385d-575">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="2385d-576">有关常见 i/o 任务的列表, 请参阅[常见 I/o 任务](~/docs/standard/io/common-i-o-tasks.md)。</span><span class="sxs-lookup"><span data-stu-id="2385d-576">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  

## Examples  
 <span data-ttu-id="2385d-577">下面的示例演示如何`IsPathRooted`使用方法来测试三个字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-577">The following example demonstrates how the `IsPathRooted` method can be used to test three strings.</span></span>  
  
 [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]
 [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]
 [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2385d-578"><paramref name="path" /> 包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义的一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="2385d-578"><paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-579">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-579">File path formats on Windows systems</span></span></related>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-580">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-580">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-581">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-581">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-582">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-582">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Join : string[] -&gt; string" Usage="System.IO.Path.Join paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="2385d-583">路径的数组。</span><span class="sxs-lookup"><span data-stu-id="2385d-583">An array of paths.</span></span></param>
        <summary><span data-ttu-id="2385d-584">将路径数组连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-584">Concatenates an array of paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-585">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-585">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-586">此方法只是将中的所有`paths`字符串连接在中, 并在任何路径组件之间添加目录分隔符 (如果尚未存在)。</span><span class="sxs-lookup"><span data-stu-id="2385d-586">This method simply concatenates all the strings in `paths` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-587"><xref:System.String.Length>如果中`paths`任何路径的均为零, 则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="2385d-587">If the <xref:System.String.Length> of any of the paths in `paths` is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="2385d-588">如果生成的串联字符串的长度为零, 则该方法<xref:System.String.Empty?displayProperty=nameWithType>将返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-588">If the resulting concatenated string's length is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-589">如果中`paths`的任何路径 (除最后一个路径外) 都以路径分隔符字符结尾, 而该路径分隔符不适合目标平台, 则`Join`该方法将保留原始路径分隔符并追加支持的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-589">If any of the paths in `paths`, except for the last one, ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-590">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-590">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-591">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-591">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-592">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-592">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-593">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-593">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-594">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-594">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-595">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-595">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-596">(也就是说, 如果中`paths`的任何路径 (最后一个路径除外) 都是绝对路径, 则该`Join`方法不会丢弃先前的路径, 因为<xref:System.IO.Path.Combine%2A>方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-596">(That is, if any of the paths in `paths`, except for the last one, is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="2385d-597">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-597">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-598">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-598">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-599">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-599">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-600">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-600">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-601">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-601">A character span that contains the second path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-602">将两个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-602">Concatenates two path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-603">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-603">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="2385d-604">此方法只是`path`连接`path2`和在两个路径组件之间添加目录分隔符`path2`( `path1`如果在或开头处不存在一个)。</span><span class="sxs-lookup"><span data-stu-id="2385d-604">This method simply concatenates `path` and `path2` and adds a directory separator character between the two path components if one is not already present at the end of `path1` or the beginning of `path2`.</span></span> <span data-ttu-id="2385d-605"><xref:System.ReadOnlySpan%601.Length>如果`path1`或的为零,则该方法返回其他路径。`path2`</span><span class="sxs-lookup"><span data-stu-id="2385d-605">If the <xref:System.ReadOnlySpan%601.Length> of either `path1` or `path2` is zero, the method returns the other path.</span></span> <span data-ttu-id="2385d-606"><xref:System.ReadOnlySpan%601.Length>如果和`path1` <xref:System.String.Empty?displayProperty=nameWithType>的均为零,则`path2`该方法返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-606">If the <xref:System.ReadOnlySpan%601.Length> of both `path1` and `path2` is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="2385d-607">如果`path1`在不适合目标平台的路径分隔符中结束, 则该`Join`方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-607">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-608">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-608">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-609">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-609">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-610">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-610">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-611">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-611">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-612">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-612">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="2385d-613">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-613">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-614">`path2` (也就是说, 如果是绝对路径, 则`Join`方法不会<xref:System.IO.Path.Combine%2A>丢弃`path1`并返回`path2` , 因为方法会。)下面的示例说明了这两种方法返回的路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-614">(That is, if `path2` is an absolute path, the `Join` method does not discard `path1` and return `path2` as the <xref:System.IO.Path.Combine%2A> method does.) The following example illustrates the difference in the paths returned by the two methods.</span></span> <span data-ttu-id="2385d-615">如果的源`path2`是用户输入, 则此<xref:System.IO.Path.Combine%2A>方法使用户可以访问应用程序不打算进行的文件系统资源 (例如, *C:/Users/User1/Documents/金融/* )方便.</span><span class="sxs-lookup"><span data-stu-id="2385d-615">If the source of `path2` is user input, the <xref:System.IO.Path.Combine%2A> method makes it possible for a user to access a file system resource (such as *C:/Users/User1/Documents/Financial/* in the case of the example) that the application did not intend to make accessible.</span></span>  

<span data-ttu-id="2385d-616">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-616">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-617">例如, 在`Path.Join("c:\\", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-617">For example, while `Path.Join("c:\\", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-618">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-618">The `Join` method therefore successfully interprets it.</span></span> 

## <a name="example"></a><span data-ttu-id="2385d-619">示例</span><span class="sxs-lookup"><span data-stu-id="2385d-619">Example</span></span>

<span data-ttu-id="2385d-620">下面的示例演示了<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>和<xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType>方法返回的路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-620">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="2385d-621">如果第一个字符串是包含驱动器和根目录的完全限定路径, 第二个字符串是第一个路径的相对路径, 则这两个方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-621">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="2385d-622">在第二次和第三次`ShowPathInformation`调用方法时, 两个方法返回的字符串分叉。</span><span class="sxs-lookup"><span data-stu-id="2385d-622">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="2385d-623">在第二个方法调用中, 第一个字符串参数是驱动器, 而第二个参数是根目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-623">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="2385d-624">方法`Join`将两个字符串连接在一起, 并保留重复的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-624">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="2385d-625">`Combine`方法会放弃驱动器并返回当前驱动器上的根目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-625">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="2385d-626">如果应用程序的当前驱动器为 C:\该字符串用于访问目录中的一个或一些文件, 它将访问 C: 而不是 d:</span><span class="sxs-lookup"><span data-stu-id="2385d-626">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="2385d-627">最后, 由于第三次调用`ShowPathInformation`中的两个参数均为根参数, 该`Join`方法只会附加它们以创建过程`Combine`文件路径, 而方法会丢弃第一个字符串并返回第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="2385d-627">Finally, because both arguments in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends them to create a nonsensical file path, while the `Combine` method discards the first string and returns the second.</span></span> <span data-ttu-id="2385d-628">使用此字符串进行文件访问可能会给应用程序带来对敏感文件的意外访问权限。</span><span class="sxs-lookup"><span data-stu-id="2385d-628">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String)](~/samples/snippets/csharp/api/system.io/path/combine2/program.cs)]
[!code-vb[Path.Join(String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine2/program.vb)]


       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-629">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-629">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Join : string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-630">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-630">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-631">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-631">The second path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-632">将两个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-632">Concatenates two paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-633">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-633">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-634">此方法只连接`path`并`path2`在任何路径组件之间添加目录分隔符 (如果尚未存在)。</span><span class="sxs-lookup"><span data-stu-id="2385d-634">This method simply concatenates `path` and `path2` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-635">如果`path1` 或`path2`的长度为零, 则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="2385d-635">If the length of either `path1` or `path2` is zero, the method concatenates the remaining argument.</span></span> <span data-ttu-id="2385d-636">如果生成的串联字符串的长度为零, 则该方法将<xref:System.String.Empty?displayProperty=nameWithType>返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-636">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-637">如果`path1`在不适合目标平台的路径分隔符中结束, 则该`Join`方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-637">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-638">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-638">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-639">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-639">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-640">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-640">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-641">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-641">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-642">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-642">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-643">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-643">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-644">(也就是说, 如果`path2`是绝对路径, 则该`Join`方法将不会丢弃先前的路径, 因为<xref:System.IO.Path.Combine%2A>方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-644">(That is, if `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="2385d-645">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-645">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-646">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-646">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-647">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-647">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-648">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-648">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-649">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-649">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-650">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-650">A character span that contains the third path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-651">将三个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-651">Concatenates three path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-652">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-652">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="2385d-653">此方法只连接`path`、 `path2`和`path3` , 然后在任何路径组件之间添加目录分隔符 (如果尚未提供)。</span><span class="sxs-lookup"><span data-stu-id="2385d-653">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-654"><xref:System.ReadOnlySpan%601.Length>如果`path1`、或`path2`参数的任何均为零, 则该方法将连接剩余的参数。 `path3`</span><span class="sxs-lookup"><span data-stu-id="2385d-654">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, or `path3` arguments is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="2385d-655">如果所有组件的均为零, 则该方法<xref:System.String.Empty?displayProperty=nameWithType>返回。 <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2385d-655">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-656">如果`path1` `Join`或`path2`以不适合目标平台的路径分隔符结尾, 则该方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-656">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-657">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-657">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-658">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-658">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-659">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-659">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-660">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-660">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-661">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-661">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-662">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-662">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-663">(也就是说, `path2`如果或`path2`是绝对路径, 则`Join`方法不<xref:System.IO.Path.Combine%2A>会丢弃以前的路径, 因为方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-663">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>
  
<span data-ttu-id="2385d-664">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-664">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-665">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-665">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-666">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-666">The `Join` method therefore successfully interprets it.</span></span>

## <a name="example"></a><span data-ttu-id="2385d-667">示例</span><span class="sxs-lookup"><span data-stu-id="2385d-667">Example</span></span>

<span data-ttu-id="2385d-668">下面的示例演示了<xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType>和<xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType>方法返回的路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="2385d-668">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="2385d-669">如果第一个字符串是包含驱动器和根目录的完全限定路径, 第二个字符串是第一个路径的相对路径, 则这两个方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="2385d-669">When the first string is a fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="2385d-670">在第二次和第三次`ShowPathInformation`调用方法时, 两个方法返回的字符串分叉。</span><span class="sxs-lookup"><span data-stu-id="2385d-670">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="2385d-671">在第二个方法调用中, 第一个字符串参数是驱动器, 而第二个参数是根目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-671">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="2385d-672">方法`Join`将两个字符串连接在一起, 并保留重复的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-672">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="2385d-673">对<xref:System.IO.Path.GetFullPath%2A>方法的调用将消除重复。</span><span class="sxs-lookup"><span data-stu-id="2385d-673">A call to the <xref:System.IO.Path.GetFullPath%2A> method would eliminate the duplication.</span></span> <span data-ttu-id="2385d-674">`Combine`方法会放弃驱动器并返回当前驱动器上的根目录。</span><span class="sxs-lookup"><span data-stu-id="2385d-674">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="2385d-675">如果应用程序的当前驱动器为 C:\该字符串用于访问目录中的一个或一些文件, 它将访问 C: 而不是 d:</span><span class="sxs-lookup"><span data-stu-id="2385d-675">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="2385d-676">最后, 由于第三次调用`ShowPathInformation`中的最后一个参数是根参数, 该`Join`方法只是将其追加到前两个自变量以创建过程`Combine`文件路径, 而方法会丢弃前两个字符串并返回第三个。</span><span class="sxs-lookup"><span data-stu-id="2385d-676">Finally, because the final argument in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends it to the first two arguments to create a nonsensical file path, while the `Combine` method discards the first two strings and returns the third.</span></span> <span data-ttu-id="2385d-677">使用此字符串进行文件访问可能会给应用程序带来对敏感文件的意外访问权限。</span><span class="sxs-lookup"><span data-stu-id="2385d-677">Using this string for file access could give the application unintended access to sensitive files.</span></span>

[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/csharp/api/system.io/path/combine3/program.cs)]
[!code-vb[Path.Join(String,String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine3/program.vb)]

       ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-678">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-678">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-679">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-679">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-680">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-680">The second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-681">要联接的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-681">The third path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-682">将三个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-682">Concatenates three paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-683">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-683">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-684">此方法只连接`path`、 `path2`和`path3` , 然后在任何路径组件之间添加目录分隔符 (如果尚未提供)。</span><span class="sxs-lookup"><span data-stu-id="2385d-684">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-685">如果`path1`、 `path2`或参数的长度为零,则该方法将连接剩余的参数。`path3`</span><span class="sxs-lookup"><span data-stu-id="2385d-685">If the length of any of `path1`, `path2` or `path3` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="2385d-686">如果生成的串联字符串的长度为零, 则该方法将<xref:System.String.Empty?displayProperty=nameWithType>返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-686">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-687">如果`path1` `Join`或`path2`以不适合目标平台的路径分隔符结尾, 则该方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-687">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-688">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-688">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-689">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-689">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-690">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-690">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-691">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-691">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-692">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-692">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-693">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-693">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-694">(也就是说, `path2`如果或`path2`是绝对路径, 则`Join`方法不<xref:System.IO.Path.Combine%2A>会丢弃以前的路径, 因为方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-694">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="2385d-695">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-695">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-696">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-696">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-697">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-697">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.ReadOnlySpan`1&lt;char&gt; path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), path4 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path4" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-698">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-698">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-699">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-699">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-700">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-700">A character span that contains the third path to join.</span></span></param>
        <param name="path4"><span data-ttu-id="2385d-701">包含要联接的第四个路径的字符跨度。</span><span class="sxs-lookup"><span data-stu-id="2385d-701">A character span that contains the fourth path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-702">将四个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-702">Concatenates four path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-703">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-703">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-704">此方法只连接`path` `path2` `path3` 、和`path4` , 然后在任何路径组件之间添加目录分隔符 (如果尚未提供)。</span><span class="sxs-lookup"><span data-stu-id="2385d-704">This method simply concatenates `path`, `path2`, `path3` and `path4` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-705"><xref:System.ReadOnlySpan%601.Length>如果`path1`、或参数的任何均为零,则该方法将连接剩余的参数。`path2` `path3` `path4`</span><span class="sxs-lookup"><span data-stu-id="2385d-705">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, `path3` or `path4` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="2385d-706">如果所有组件的均为零, 则该方法<xref:System.String.Empty?displayProperty=nameWithType>返回。 <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="2385d-706">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-707">如果`path1` 或`path2`以不适合目标平台的路径分隔符`Join` 结尾,则该方法将保留原始路径分隔符并追加受支持的字符分隔符。`path3`</span><span class="sxs-lookup"><span data-stu-id="2385d-707">If `path1` or `path2` or `path3` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-708">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-708">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-709">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-709">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-710">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-710">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-711">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-711">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-712">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-712">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-713">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-713">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-714">(也就是说, 如果`path2`或`path2`或`path3`是绝对路径, 则该`Join`方法将不会丢弃先前的路径, 因为<xref:System.IO.Path.Combine%2A>方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-714">(That is, if `path2` or `path2` or `path3` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="2385d-715">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-715">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-716">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-716">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-717">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-717">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-718">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-718">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-719">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-719">The second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-720">要联接的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-720">The third path to join.</span></span></param>
        <param name="path4"><span data-ttu-id="2385d-721">要联接的第四个路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-721">The fourth path to join.</span></span></param>
        <summary><span data-ttu-id="2385d-722">将四个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="2385d-722">Concatenates four paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="2385d-723">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-723">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2385d-724">此方法只连接`path` `path2` `path3` 、和`path4` , 然后在任何路径组件之间添加目录分隔符 (如果尚未提供)。</span><span class="sxs-lookup"><span data-stu-id="2385d-724">This method simply concatenates `path`, `path2`, `path3` and `path4` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="2385d-725">如果`path1`、 `path2`、 `path3`或参数的长度为零,则该方法将连接剩余的参数。`path4`</span><span class="sxs-lookup"><span data-stu-id="2385d-725">If the length of any of `path1`, `path2`, `path3` or `path4` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="2385d-726">如果生成的串联字符串的长度为零, 则该方法将<xref:System.String.Empty?displayProperty=nameWithType>返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-726">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="2385d-727">如果`path1` 或`path2`以不适合目标平台的路径分隔符`Join` 结尾,则该方法将保留原始路径分隔符并追加受支持的字符分隔符。`path3`</span><span class="sxs-lookup"><span data-stu-id="2385d-727">If `path1` or `path2` or `path3` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="2385d-728">使用 Windows 反斜杠 ("\") 字符的硬编码路径中会出现此问题, 该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-728">This issue arises in hard-coded paths that use the Windows backslash ("\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="2385d-729">若要解决此问题, 可以:</span><span class="sxs-lookup"><span data-stu-id="2385d-729">To work around this issue, you can:</span></span>

- <span data-ttu-id="2385d-730">检索<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>属性的值, 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="2385d-730">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="2385d-731">使用正斜杠 ("/") 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-731">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="2385d-732">此字符由基于 Unix 的<xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType>系统上的属性和 Windows 系统上的<xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType>属性返回。</span><span class="sxs-lookup"><span data-stu-id="2385d-732">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="2385d-733">与方法不同<xref:System.IO.Path.Join%2A> , 方法不会尝试将返回的路径作为根。 <xref:System.IO.Path.Combine%2A></span><span class="sxs-lookup"><span data-stu-id="2385d-733">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="2385d-734">(也就是说, 如果`path2`或`path2`或`path3`是绝对路径, 则该`Join`方法将不会丢弃先前的路径, 因为<xref:System.IO.Path.Combine%2A>方法会。</span><span class="sxs-lookup"><span data-stu-id="2385d-734">(That is, if `path2` or `path2` or `path3` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="2385d-735">不是对目录和文件名无效的所有字符都解释为可接受`Join`的方法, 因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="2385d-735">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="2385d-736">例如, 在`Path.Join("c:\\", "temp", "*.txt")`创建文件时, 可能会无效, 但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="2385d-736">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="2385d-737">因此`Join` , 该方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="2385d-737">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PathSeparator As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char PathSeparator;" />
      <MemberSignature Language="F#" Value=" staticval mutable PathSeparator : char" Usage="System.IO.Path.PathSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2385d-738">用于在环境变量中分隔路径字符串的平台特定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-738">A platform-specific separator character used to separate path strings in environment variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-739">在基于 Windows 的桌面平台上, 此字段的值为分号 (;)默认情况下, 在其他平台上可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="2385d-739">On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-740">下面的示例演示如何使用`PathSeparator`字段。</span><span class="sxs-lookup"><span data-stu-id="2385d-740">The following example demonstrates the use of the `PathSeparator` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-741">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-741">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-742">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-742">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-743">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-743">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEndingDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-744">要剪裁的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-744">The path to trim.</span></span></param>
        <summary><span data-ttu-id="2385d-745">剪裁一个超出指定路径根目录的尾随目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-745">Trims one trailing directory separator beyond the root of the specified path.</span></span></summary>
        <returns><span data-ttu-id="2385d-746">不带任何尾随目录分隔符的 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-746">The <paramref name="path" /> without any trailing directory separators.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static string TrimEndingDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TrimEndingDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TrimEndingDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : string -&gt; string" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="2385d-747">要剪裁的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-747">The path to trim.</span></span></param>
        <summary><span data-ttu-id="2385d-748">剪裁一个超出指定路径根目录的尾随目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-748">Trims one trailing directory separator beyond the root of the specified path.</span></span></summary>
        <returns><span data-ttu-id="2385d-749">不带任何尾随目录分隔符的 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-749">The <paramref name="path" /> without any trailing directory separators.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryJoin">
      <Docs>
        <summary><span data-ttu-id="2385d-750">尝试将各个路径组件连接到预分配的字符范围，并返回一个值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="2385d-750">Attempts to concatenate individual path components to a preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="2385d-751">目标字符跨度必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-751">The destination character span must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="2385d-752">然后, 可以通过调用<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法来检索串联路径, 如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="2385d-752">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the following example illustrates.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/TryJoin/program.cs)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-753">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-753">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-754">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-754">A character span that contains the second path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="2385d-755">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-755">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="2385d-756">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="2385d-756">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="2385d-757">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="2385d-757">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="2385d-758">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-758"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="2385d-759">`destination`必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-759">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="2385d-760">然后, 可以通过调用<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法来检索串联路径, 如示例所示。</span><span class="sxs-lookup"><span data-stu-id="2385d-760">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-761">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-761">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, path3, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="2385d-762">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-762">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="2385d-763">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-763">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="2385d-764">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-764">A character span that contains the third path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="2385d-765">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="2385d-765">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="2385d-766">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="2385d-766">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="2385d-767">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="2385d-767">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="2385d-768">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2385d-768"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="2385d-769">`destination`必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="2385d-769">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="2385d-770">然后, 可以通过调用<xref:System.Span%601.Slice%2A?displayProperty=nameWithType>方法来检索串联路径, 如示例所示。</span><span class="sxs-lookup"><span data-stu-id="2385d-770">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="~/docs/standard/io/file-path-formats.md"><span data-ttu-id="2385d-771">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="2385d-771">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.VolumeSeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VolumeSeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char VolumeSeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable VolumeSeparatorChar : char" Usage="System.IO.Path.VolumeSeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2385d-772">提供平台特定的卷分隔符。</span><span class="sxs-lookup"><span data-stu-id="2385d-772">Provides a platform-specific volume separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2385d-773">此字段的值是一个冒号 (:)在 Windows 和 Macintosh 上, 在 UNIX 操作系统上使用斜杠 (/)。</span><span class="sxs-lookup"><span data-stu-id="2385d-773">The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.</span></span> <span data-ttu-id="2385d-774">这对于分析路径 (如 "c:\windows" 或 "MacVolume: System Folder") 最为有用。</span><span class="sxs-lookup"><span data-stu-id="2385d-774">This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2385d-775">下面的示例演示如何使用`VolumeSeparatorChar`字段。</span><span class="sxs-lookup"><span data-stu-id="2385d-775">The following example demonstrates the use of the `VolumeSeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/io/index.md"><span data-ttu-id="2385d-776">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="2385d-776">File and Stream I/O</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-read-text-from-a-file.md"><span data-ttu-id="2385d-777">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="2385d-777">How to: Read Text from a File</span></span></related>
        <related type="Article" href="~/docs/standard/io/how-to-write-text-to-a-file.md"><span data-ttu-id="2385d-778">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="2385d-778">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

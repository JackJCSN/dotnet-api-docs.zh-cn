<Type Name="IBuildEngine2" FullName="Microsoft.Build.Framework.IBuildEngine2">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0dd498f163fdd461a44e8410438ace8a18be833d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69290336" /></Metadata><TypeSignature Language="C#" Value="public interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine2 implements class Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBuildEngine2&#xA;Implements IBuildEngine" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBuildEngine2 : Microsoft::Build::Framework::IBuildEngine" />
  <TypeSignature Language="F#" Value="type IBuildEngine2 = interface&#xA;    interface IBuildEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供了一种使任务作者可以使用 MSBuild 引擎的功能子集的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Build.Framework.IBuildEngine2>扩展<xref:Microsoft.Build.Framework.IBuildEngine>, 使你能够在包含多个处理器的系统上并行生成多个项目文件, 或在具有多个内核的处理器上并行生成多个  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFile">
      <MemberSignature Language="C#" Value="public bool BuildProjectFile (string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs, string toolsVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFile(string projectFileName, string[] targetNames, class System.Collections.IDictionary globalProperties, class System.Collections.IDictionary targetOutputs, string toolsVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFile (projectFileName As String, targetNames As String(), globalProperties As IDictionary, targetOutputs As IDictionary, toolsVersion As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFile(System::String ^ projectFileName, cli::array &lt;System::String ^&gt; ^ targetNames, System::Collections::IDictionary ^ globalProperties, System::Collections::IDictionary ^ targetOutputs, System::String ^ toolsVersion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFile : string * string[] * System.Collections.IDictionary * System.Collections.IDictionary * string -&gt; bool" Usage="iBuildEngine2.BuildProjectFile (projectFileName, targetNames, globalProperties, targetOutputs, toolsVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileName" Type="System.String" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary" />
        <Parameter Name="targetOutputs" Type="System.Collections.IDictionary" />
        <Parameter Name="toolsVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projectFileName">要生成的项目文件的名称。</param>
        <param name="targetNames">该目标在要生成的项目中的名称。 多个目标之间用分号 (;) 分隔。 可接受 <see langword="Null" /> 值。</param>
        <param name="globalProperties">应用于此项目的其他全局属性的 <see cref="T:System.Collections.IDictionary" />。 键和值必须为 <see langword="String" /> 数据类型。</param>
        <param name="targetOutputs">每个指定目标的输出。 可接受 <see langword="Null" /> 值。</param>
        <param name="toolsVersion">默认值为“3.5”。 指定生成要使用的工具集版本。 可接受 <see langword="Null" /> 值。</param>
        <summary>启动项目文件的生成。 如果生成成功，则返回指定目标的输出（如果存在任何输出）。</summary>
        <returns>如果生成成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定任何目标, [!INCLUDE[vstecmsbuild](~/includes/vstecmsbuild-md.md)]则生成项目的默认目标。  
  
 目标输出作为<xref:Microsoft.Build.Framework.ITaskItem>按目标名称索引的数组返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public bool BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFilesInParallel (projectFileNames As String(), targetNames As String(), globalProperties As IDictionary(), targetOutputsPerProject As IDictionary(), toolsVersion As String(), useResultsCache As Boolean, unloadProjectsOnCompletion As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFilesInParallel(cli::array &lt;System::String ^&gt; ^ projectFileNames, cli::array &lt;System::String ^&gt; ^ targetNames, cli::array &lt;System::Collections::IDictionary ^&gt; ^ globalProperties, cli::array &lt;System::Collections::IDictionary ^&gt; ^ targetOutputsPerProject, cli::array &lt;System::String ^&gt; ^ toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFilesInParallel : string[] * string[] * System.Collections.IDictionary[] * System.Collections.IDictionary[] * string[] * bool * bool -&gt; bool" Usage="iBuildEngine2.BuildProjectFilesInParallel (projectFileNames, targetNames, globalProperties, targetOutputsPerProject, toolsVersion, useResultsCache, unloadProjectsOnCompletion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="targetOutputsPerProject" Type="System.Collections.IDictionary[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="useResultsCache" Type="System.Boolean" />
        <Parameter Name="unloadProjectsOnCompletion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">要生成的项目文件的名称。</param>
        <param name="targetNames">要生成的项目中目标的名称。 多个目标之间用分号 (;) 分隔。 可接受 <see langword="Null" /> 值。</param>
        <param name="globalProperties">应用于此项目的其他全局属性的 <see cref="T:System.Collections.IDictionary" />。 键和值必须为 <see langword="String" /> 数据类型。 数组项可为 <see langword="null" />。</param>
        <param name="targetOutputsPerProject">每个指定目标的输出。 可接受 <see langword="Null" /> 值。</param>
        <param name="toolsVersion">默认值为“3.5”。 指定生成要使用的工具集版本。 可接受 <see langword="Null" /> 值。</param>
        <param name="useResultsCache">如果为 <see langword="true" />，仅当缓存尚未包含结果时操作才运行。 操作完成后，将结果存储在缓存中。</param>
        <param name="unloadProjectsOnCompletion">如果为 <see langword="true" />，则一旦操作完成，将卸载项目。</param>
        <summary>允许任务在包含多个处理器或具有多个内核的处理器的系统上启动并行生成指定项目文件。 如果生成成功，则返回指定目标的输出（如果存在任何输出）。</summary>
        <returns>如果生成已成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 和`targetNames` 均`targetOutputs` 接受`null`值。 如果未指定任何目标, 则生成默认目标。 目标输出作为<xref:Microsoft.Build.Framework.ITaskItem>按目标名称索引的数组返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunningMultipleNodes">
      <MemberSignature Language="C#" Value="public bool IsRunningMultipleNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunningMultipleNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunningMultipleNodes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunningMultipleNodes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunningMultipleNodes : bool" Usage="Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回系统是在单处理器模式下运行还是在多处理器模式下运行。</summary>
        <value>如果系统在多处理器模式下运行，则返回 <see langword="true" />，否则返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当生成引擎使用等于1的 cpu 数进行`IsRunningMultipleNodes`初始化并且生成引擎不是子引擎时, 生成引擎处于单处理器模式 ( = `false`)。 如果生成引擎使用大于1的 cpu 数进行`IsRunningMultipleNodes`初始化, 或者生成引擎为子引擎, 则生成引擎处于多处理器模式 ( = `true`)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

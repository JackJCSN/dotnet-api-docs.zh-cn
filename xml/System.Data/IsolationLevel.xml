<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="edb852c3574b8eeca02c658eab11acfb89f89346" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239934" /></Metadata><TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <TypeSignature Language="F#" Value="type IsolationLevel = " />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5f9f4-101">指定连接的事务锁定行为。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-101">Specifies the transaction locking behavior for the connection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="5f9f4-102">`IsolationLevel`值由.NET 数据提供程序执行事务时。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-102">The `IsolationLevel` values are used by a .NET data provider when performing a transaction.</span></span>

<span data-ttu-id="5f9f4-103">`IsolationLevel`保持生效，直到显式更改，但可以随时更改。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-103">The `IsolationLevel` remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="5f9f4-104">使用新值是在执行时，不分析时。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="5f9f4-105">如果在事务期间发生更改，服务器的预期的行为是将新的锁定级别应用到所有剩余的语句。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
<span data-ttu-id="5f9f4-106">使用时<xref:System.Data.Odbc.OdbcTransaction>，如果未设置<xref:System.Data.Odbc.OdbcTransaction.IsolationLevel?displayProperty=nameWithType>或将其设置为`Unspecified`，根据由中使用的驱动程序的隔离级别执行该事务。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-106">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.Odbc.OdbcTransaction.IsolationLevel?displayProperty=nameWithType> or you set it to `Unspecified`, the transaction executes according to the isolation level determined by the driver in use.</span></span>  

## Examples  
 <span data-ttu-id="5f9f4-107">此应用程序演示了如何使用<xref:System.Data.IsolationLevel>在<xref:System.Data.Common.DbTransaction>。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-107">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="5f9f4-108">该示例将演示其中的以下行为允许在不同的隔离级别中：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-108">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="5f9f4-109">脏读。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-109">Dirty reads.</span></span>  
  
-   <span data-ttu-id="5f9f4-110">非重复的读取。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-110">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="5f9f4-111">幻影。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-111">Phantoms.</span></span>  
  
 <span data-ttu-id="5f9f4-112">此应用程序将执行以下隔离级别中：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-112">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="5f9f4-113">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="5f9f4-113">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="5f9f4-114">ReadCommitted</span><span class="sxs-lookup"><span data-stu-id="5f9f4-114">ReadCommitted</span></span>  
  
-   <span data-ttu-id="5f9f4-115">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="5f9f4-115">RepeatableRead</span></span>  
  
-   <span data-ttu-id="5f9f4-116">可序列化</span><span class="sxs-lookup"><span data-stu-id="5f9f4-116">Serializable</span></span>  
  
-   <span data-ttu-id="5f9f4-117">快照</span><span class="sxs-lookup"><span data-stu-id="5f9f4-117">Snapshot</span></span>  
  
 <span data-ttu-id="5f9f4-118">PhantomReadThreads 类演示了是否特定事务允许接触的虚拟读取行为。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-118">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="5f9f4-119">如果事务允许行为，线程将按以下顺序操作：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-119">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="5f9f4-120">在第一个线程中，选择 products(All)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-120">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="5f9f4-121">在第二个线程中，插入一个新的产品。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-121">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="5f9f4-122">提交事务在第二个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-122">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="5f9f4-123">再次选择的产品。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-123">Select the products again.</span></span>  
  
-   <span data-ttu-id="5f9f4-124">提交事务在第一个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-124">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="5f9f4-125">如果事务允许行为，两个选择操作将获取不同的结果。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-125">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="5f9f4-126">NonrepeatableReadThreads 类演示了特定的事务是否允许不可重复读行为。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-126">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="5f9f4-127">如果事务允许行为，线程将按以下顺序操作：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-127">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="5f9f4-128">在第一个线程中，选择 product(ProductId=1)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-128">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="5f9f4-129">在第二个线程中更新数量 value(ProductId=1)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-129">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="5f9f4-130">提交事务在第二个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-130">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="5f9f4-131">再次选择该产品。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-131">Select the product again.</span></span>  
  
-   <span data-ttu-id="5f9f4-132">提交事务在第一个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-132">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="5f9f4-133">如果事务允许行为，两个选择操作将获取不同的结果。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-133">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="5f9f4-134">ExchangeValuesThreads 类演示 Serializable 和 Snapshot 事务之间的差异。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-134">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="5f9f4-135">对于可序列化事务中，线程将按以下顺序操作：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-135">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="5f9f4-136">在第一个线程中，在变量中获取 product(ProductId=2) 和存储的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-136">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="5f9f4-137">在第一个线程中更新的 product(ProductId=2) 价格 product(ProductId=1) 的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-137">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="5f9f4-138">提交事务在第一个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-138">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="5f9f4-139">在第二个线程中，在变量中获取 product(ProductId=1) 和存储的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-139">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="5f9f4-140">在第二个线程中更新的 product(ProductId=1) 价格 product(ProductId=2) 的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-140">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="5f9f4-141">提交事务在第二个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-141">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="5f9f4-142">现在的价格值 (ProductId = 1 且 ProductId = 2) 是为与原始 Product(ProductId=2) 价格相同。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-142">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="5f9f4-143">对于快照事务中，线程将按以下顺序操作：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-143">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="5f9f4-144">在第一个线程中变量，例如： 获得 product(ProductId=2) 和存储的价格</span><span class="sxs-lookup"><span data-stu-id="5f9f4-144">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="5f9f4-145">在第一个线程中更新的 product(ProductId=2) 价格 product(ProductId=1) 的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-145">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="5f9f4-146">在第二个线程中 product(ProductId=1) 的价格获得快照并存储在变量中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-146">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="5f9f4-147">在第二个线程中更新的 product(ProductId=1) 价格 product(ProductId=2) 的价格。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-147">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="5f9f4-148">提交事务在第二个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-148">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="5f9f4-149">提交事务在第一个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-149">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="5f9f4-150">现在交换产品的价格 (ProductId = 1 且 ProductId = 2)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-150">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="5f9f4-151">DirtyReadThreads 类演示了是否特定事务允许脏读行为。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-151">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="5f9f4-152">如果事务允许行为，线程将按以下顺序操作：</span><span class="sxs-lookup"><span data-stu-id="5f9f4-152">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="5f9f4-153">在第一个线程开始一个事务并添加数量 value(ProductId=1)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-153">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="5f9f4-154">中的第二个线程读取数量值并再次添加值。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-154">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="5f9f4-155">提交事务在第二个线程中。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-155">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="5f9f4-156">回滚该事务中的第一个线程。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-156">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="5f9f4-157">如果事务允许行为，将两次添加数量值。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-157">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="5f9f4-158">可以上找到具有此代码示例的 C# 和 Visual Basic 项目[开发人员代码示例](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4)。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-158">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberSignature Language="F#" Value="Chaos = 16" Usage="System.Data.IsolationLevel.Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-159">无法覆盖隔离级别更高的事务中的挂起的更改。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-159">The pending changes from more highly isolated transactions cannot be overwritten.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberSignature Language="F#" Value="ReadCommitted = 4096" Usage="System.Data.IsolationLevel.ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-160">在正在读取数据时保持共享锁，以避免脏读，但是在事务结束之前可以更改数据，从而导致不可重复的读取或幻像数据。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-160">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberSignature Language="F#" Value="ReadUncommitted = 256" Usage="System.Data.IsolationLevel.ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-161">可以进行脏读，意思是说，不发布共享锁，也不接受独占锁。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-161">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberSignature Language="F#" Value="RepeatableRead = 65536" Usage="System.Data.IsolationLevel.RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-162">在查询中使用的所有数据上放置锁，以防止其他用户更新这些数据。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-162">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span></span> <span data-ttu-id="5f9f4-163">防止不可重复的读取，但是仍可以有幻像行。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-163">Prevents non-repeatable reads but phantom rows are still possible.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberSignature Language="F#" Value="Serializable = 1048576" Usage="System.Data.IsolationLevel.Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-164">在 <see cref="T:System.Data.DataSet" /> 上放置范围锁，以防止在事务完成之前由其他用户更新行或向数据集中插入行。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-164">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberSignature Language="F#" Value="Snapshot = 16777216" Usage="System.Data.IsolationLevel.Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-165">通过在一个应用程序正在修改数据时存储另一个应用程序可以读取的相同数据版本来减少阻止。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-165">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span></span> <span data-ttu-id="5f9f4-166">表示您无法从一个事务中看到在其他事务中进行的更改，即便重新查询也是如此。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-166">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberSignature Language="F#" Value="Unspecified = -1" Usage="System.Data.IsolationLevel.Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="5f9f4-167">正在使用与指定隔离级别不同的隔离级别，但是无法确定该级别。</span><span class="sxs-lookup"><span data-stu-id="5f9f4-167">A different isolation level than the one specified is being used, but the level cannot be determined.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
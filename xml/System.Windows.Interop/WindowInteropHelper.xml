<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994522" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="47e8b-101">协助在 Windows Presentation Foundation (WPF) 和 Win32 代码之间进行互操作。</span><span class="sxs-lookup"><span data-stu-id="47e8b-101">Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47e8b-102">此类的成员允许调用方对的[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND 和父 hwnd [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>进行内部访问。</span><span class="sxs-lookup"><span data-stu-id="47e8b-102">Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</span></span>  <span data-ttu-id="47e8b-103">适当的安全检查由这些成员执行。</span><span class="sxs-lookup"><span data-stu-id="47e8b-103">The proper security checks are performed by those members.</span></span>  
  
 <span data-ttu-id="47e8b-104">每当需要基于其 HWND 的更具体对象时, 请使用此类。</span><span class="sxs-lookup"><span data-stu-id="47e8b-104">Use this class whenever you need a more specific object based on its HWND.</span></span>  
  
 <span data-ttu-id="47e8b-105">例如, 如果需要[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]在应用程序中承载一个对话框, 则会出现示例方案。</span><span class="sxs-lookup"><span data-stu-id="47e8b-105">An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span> <span data-ttu-id="47e8b-106">使用对话框的窗口对象初始化。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Interop.WindowInteropHelper></span><span class="sxs-lookup"><span data-stu-id="47e8b-106">Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box.</span></span> <span data-ttu-id="47e8b-107">然后, 可以<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>从属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]获取窗口句柄 (HWND), 并通过<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>属性[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]指定窗口的所有者。</span><span class="sxs-lookup"><span data-stu-id="47e8b-107">You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property.</span></span> <span data-ttu-id="47e8b-108">下面的代码示例演示如何在<xref:System.Windows.Interop.WindowInteropHelper> [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]应用程序中[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]承载对话框时使用。</span><span class="sxs-lookup"><span data-stu-id="47e8b-108">The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 <span data-ttu-id="47e8b-109">此类支持的另一种方案是<xref:System.Windows.Interop.HwndSource> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>从对象获取对象。</span><span class="sxs-lookup"><span data-stu-id="47e8b-109">Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object.</span></span> <span data-ttu-id="47e8b-110"><xref:System.Windows.Interop.HwndSource>允许[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]通过方法<xref:System.Windows.Interop.HwndSource.AddHook%2A>直接处理消息。</span><span class="sxs-lookup"><span data-stu-id="47e8b-110">The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method.</span></span> <span data-ttu-id="47e8b-111">通过使用<xref:System.Windows.Interop.HwndSource>和<xref:System.Windows.Interop.HwndSource.AddHook%2A>取代<xref:System.Windows.Window> , 你仍可在中[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]处理无等效或处理的消息。</span><span class="sxs-lookup"><span data-stu-id="47e8b-111">By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="47e8b-112"><xref:System.Windows.Interop.WindowInteropHelper> <xref:System.Windows.Interop.HwndSource>使用源创建,然后<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>在上调用以从HWND转到。<xref:System.Windows.Interop.WindowInteropHelper> <xref:System.Windows.Window></span><span class="sxs-lookup"><span data-stu-id="47e8b-112">Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window"><span data-ttu-id="47e8b-113">一个 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 窗口对象。</span><span class="sxs-lookup"><span data-stu-id="47e8b-113">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</span></span></param>
        <summary><span data-ttu-id="47e8b-114">为指定的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 类的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="47e8b-114">Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47e8b-115">窗口可以是对话框, 也可以是不适合在[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]应用程序边界内承载的窗口。</span><span class="sxs-lookup"><span data-stu-id="47e8b-115">The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47e8b-116">如果尚未创建窗口的 HWND，则创建 HWND。</span><span class="sxs-lookup"><span data-stu-id="47e8b-116">Creates the HWND of the window if the HWND has not been created yet.</span></span></summary>
        <returns><span data-ttu-id="47e8b-117">表示 HWND 的 <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="47e8b-117">An <see cref="T:System.IntPtr" /> that represents the HWND.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47e8b-118">如果要从托管<xref:System.Windows.Window>的实际显示中分离窗口句柄 (HWND), 请使用方法。<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A></span><span class="sxs-lookup"><span data-stu-id="47e8b-118">Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>.</span></span> <span data-ttu-id="47e8b-119">如果你的自动化客户端无需显示窗口即可完成其任务, 则这非常有用。</span><span class="sxs-lookup"><span data-stu-id="47e8b-119">This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</span></span>  
  
 <span data-ttu-id="47e8b-120">如果尚未创建本机窗口, 此方法将创建本机窗口, 设置<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>属性, 然后返回 HWND。</span><span class="sxs-lookup"><span data-stu-id="47e8b-120">If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND.</span></span> <span data-ttu-id="47e8b-121">如果已创建本机窗口, 则返回现有本机窗口的句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-121">If the native window has been created already, the handle of the existing native window is returned.</span></span>  
  
 <span data-ttu-id="47e8b-122">如果由于调用此方法而创建了本机窗口, <xref:System.Windows.Window.SourceInitialized>则会引发事件。</span><span class="sxs-lookup"><span data-stu-id="47e8b-122">If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.</span></span>  
  
 <span data-ttu-id="47e8b-123">在调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法后查询属性返回现有的窗口句柄。<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A></span><span class="sxs-lookup"><span data-stu-id="47e8b-123">Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle.</span></span> <span data-ttu-id="47e8b-124">在调用<xref:System.Windows.Window.Show%2A>方法之前, 不会将可视化树附加到窗口中。</span><span class="sxs-lookup"><span data-stu-id="47e8b-124">The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.</span></span>  
  
 <span data-ttu-id="47e8b-125">多次调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法不会创建新的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-125">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles.</span></span> <span data-ttu-id="47e8b-126">如果已通过调用<xref:System.Windows.Window.Show%2A>方法创建了句柄, 则调用方法不会创建新的窗口句柄。<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A></span><span class="sxs-lookup"><span data-stu-id="47e8b-126">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle.</span></span> <span data-ttu-id="47e8b-127">仅当调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法时没有句柄存在时, 才会创建本机窗口。</span><span class="sxs-lookup"><span data-stu-id="47e8b-127">A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.</span></span>  
  
 <span data-ttu-id="47e8b-128">通过使用本机窗口 Api 通过 p/invoke 设置的窗口属性可能不会出现在托管窗口 Api 中。</span><span class="sxs-lookup"><span data-stu-id="47e8b-128">Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</span></span> <span data-ttu-id="47e8b-129">例如, 如果在调用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法后使用本机 MS_EX_TOPMOST 标志将窗口设置为最顶端<xref:System.Windows.Window.Topmost%2A> , 则不能保证属性反映本机设置。</span><span class="sxs-lookup"><span data-stu-id="47e8b-129">For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="47e8b-130">创建和访问窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-130">to create and access a window handle.</span></span> <span data-ttu-id="47e8b-131">关联的枚举:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="47e8b-131">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47e8b-132">获取用于创建此 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-132">Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</span></span></summary>
        <value><span data-ttu-id="47e8b-133">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 窗口句柄 (HWND)。</span><span class="sxs-lookup"><span data-stu-id="47e8b-133">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="47e8b-134">获取窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-134">to obtain a window handle.</span></span> <span data-ttu-id="47e8b-135">关联的枚举:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="47e8b-135">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47e8b-136">获取或设置 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 所有者窗口的句柄。</span><span class="sxs-lookup"><span data-stu-id="47e8b-136">Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</span></span></summary>
        <value><span data-ttu-id="47e8b-137">所有者窗口句柄 (HWND)。</span><span class="sxs-lookup"><span data-stu-id="47e8b-137">The owner window handle (HWND).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47e8b-138">您可以通过设置此属性来重设窗口的父级。</span><span class="sxs-lookup"><span data-stu-id="47e8b-138">You can reparent windows by setting this property.</span></span> <span data-ttu-id="47e8b-139">对于常规[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]编程, 请不要对已在使用中的窗口进行重设父级。</span><span class="sxs-lookup"><span data-stu-id="47e8b-139">As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="47e8b-140">获取或设置此属性值。</span><span class="sxs-lookup"><span data-stu-id="47e8b-140">to get or set this property value.</span></span> <span data-ttu-id="47e8b-141">关联的枚举:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="47e8b-141">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="48fedb086caeaf341300f29853c3c3cb0649a9e8" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70716602" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义一组属性和方法，用来计算设计时与控件属性关联的表达式，并向可视化设计宿主提供表达式编辑器表，以便在表达式编辑器对话框中使用。 此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器宿主（如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]） <xref:System.Web.UI.Design.ExpressionEditor>使用类向用户显示自定义表达式编辑器表，然后计算所选表达式的设计时呈现。  
  
 在 "设计时<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>属性" 网格中浏览控件的属性时，可视化设计器将显示一个对话框，用于为控件属性设置表达式。 您可以选择基于表达式前缀列表的表达式类型。 从列表中选择表达式前缀时，可视化设计器会使用关联<xref:System.Web.UI.Design.ExpressionEditor>的和<xref:System.Web.UI.Design.ExpressionEditorSheet>对象来设置、计算和转换基于该类型表达式的语法的表达式字符串。 可视化设计器设置关联控件属性的表达式，然后使用计算的表达式结果来分配设计图面上呈现的控件属性值。  
  
 静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法获取与特定表达式前缀或表达式生成器关联的表达式编辑器。 <xref:System.Web.UI.Design.ExpressionEditor>对象<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>的属性返回配置的表达式前缀。 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法计算输入表达式的字符串。 方法返回用于在 "表达式" 对话框中提示输入自定义表达式属性的实现。 <xref:System.Web.UI.Design.ExpressionEditorSheet>  <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>  
  
 通常，若要在设计时支持新的表达式类型，请定义唯一的表达式前缀，并<xref:System.Web.Compilation.ExpressionBuilder>提供<xref:System.Web.UI.Design.ExpressionEditor>自定义和实现。 还可以提供自定义<xref:System.Web.UI.Design.ExpressionEditorSheet>实现，该实现定义用于在 "表达式" 对话框中构成表达式的属性。  
  
 表达式前缀标识自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当在页中分析自定义表达式时，表达式前缀用于创建关联<xref:System.Web.Compilation.ExpressionBuilder>的和<xref:System.Web.UI.Design.ExpressionEditor>类的实例。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，请<xref:System.Web.Compilation.ExpressionEditorAttribute>将<xref:System.Web.Compilation.ExpressionPrefixAttribute>和属性应用于<xref:System.Web.Compilation.ExpressionBuilder>自定义类，并在`expressionBuilders`Web 配置文件中的元素。 前缀不是必需的，但强烈建议使用。  
  
   
  
## Examples  
 下面的代码示例演示如何从<xref:System.Web.UI.Design.ExpressionEditor>类派生以定义自定义表达式编辑器。  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>派生自定义<see cref="T:System.Web.UI.Design.ExpressionEditor" />类时需要执行以下步骤： 
-重写<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法以在设计时计算自定义表达式类型。  
  
-（可选）重<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />写方法以返回一个自定义类，该类定义组合以形成自定义表达式的属性。  
  
-在<see cref="T:System.Web.Compilation.ExpressionBuilder" />类<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />声明上应用属性，将自定义表达式生成器与派生的表达式编辑器类相关联。  
  
例如， <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />类派生<see cref="T:System.Web.UI.Design.ExpressionEditor" />自类，并提供用于在设计时计算资源字符串引用并将资源字符串引用与控件属性关联的实现。 类与表达式前缀<see langword="Resources" />和<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />实现相关联。 <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> 方法 <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" /> 返回，它定义构成资源引用表达式的各个属性。</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于类是抽象类，因此不能使用<xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A>构造函数直接<xref:System.Web.UI.Design.ExpressionEditor>创建类的实例。 <xref:System.Web.UI.Design.ExpressionEditor>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>从<see cref="T:System.Web.UI.Design.ExpressionEditor" />类派生时， <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" />重写构造函数以实现表达式编辑器实现的自定义初始化操作。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">要计算的表达式字符串。 该表达式不包含表达式前缀。</param>
        <param name="parseTimeData">一个包含附加分析信息（用以计算 <paramref name="expression" />）的对象。 这通常是由表达式生成器提供的。</param>
        <param name="propertyType"><paramref name="expression" /> 绑定到的控件属性的类型。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>计算表达式字符串并提供控件属性的设计时值。</summary>
        <returns>如果表达式计算成功，则为由计算的表达式字符串引用的对象；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可视化设计器宿主使用<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法来计算表达式，并为关联的控件属性提供设计时值。  
  
 可视化设计器使用<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType>方法在设计时分析表达式字符串，然后使用分析的表达式数据<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>调用方法。 可视化设计器使用计算的表达式结果来分配设计图面上呈现的控件属性值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>从<see cref="T:System.Web.UI.Design.ExpressionEditor" />类派生的类必须<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />重写方法，以便在设计时计算自定义表达式类型。  
  
<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现至少必须使用以下步骤： 
1.  计算表达式字符串并确定表达式引用的对象。  
  
2.  如果<see langword="null" />表达式字符串无法计算，则返回。  
  
3.  使用上<see cref="M:System.Type.IsAssignableFrom(System.Type)" /> <paramref name="propertyType" />的方法来确定是否可以将引用的对象直接分配给控件属性类型，然后，根据结果，完成下列操作之一： 
-如果可将引用的对象直接分配给控件属性，则返回表达式的引用对象。  
  
-如果引用的对象是简单类型（如字符串），则返回被引用对象。  
  
-否则，确定引用的对象是否可以分配给或转换为属性类型。  
  
4.  <see cref="T:System.ComponentModel.TypeConverter" /> <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" />对对象使用方法，以确定引用的对象是否可以转换为控件属性类型，然后，根据结果，完成 <paramref name="propertyType" /> 以下操作之一： 
-如果对象可转换为控件属性类型，则使用<see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" />方法返回转换后的对象。  
  
-如果无法向引用的对象赋值或将其<paramref name="propertyType" />转换为，则返回被引用的对象。  
  
或者， <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />实现可以<paramref name="parseTimeData" />使用由<see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />实现提供的对象来优化或帮助计算输入表达式字符串。</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表达式前缀，该前缀标识受表达式编辑器实现支持的表达式字符串。</summary>
        <value>表示从 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 派生的类所支持的表达式前缀的字符串；否则，如果表达式编辑器没有关联的表达式前缀，则为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 表达式前缀标识自定义表达式类型，并将表达式与表达式生成器和表达式编辑器相关联。 当在页中分析自定义表达式时，表达式前缀用于创建关联<xref:System.Web.Compilation.ExpressionBuilder>的和<xref:System.Web.UI.Design.ExpressionEditor>类的实例。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，请<xref:System.Web.Compilation.ExpressionEditorAttribute>将<xref:System.Web.Compilation.ExpressionPrefixAttribute>和属性应用于<xref:System.Web.Compilation.ExpressionBuilder>自定义类，并在`expressionBuilders`Web 配置文件中的元素。  
  
 通常，派生类不重写<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>属性。 基类<xref:System.Web.UI.Design.ExpressionEditor>根据关联<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> <xref:System.Web.Compilation.ExpressionPrefixAttribute>对象的特性设置值。 <xref:System.Web.Compilation.ExpressionBuilder>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回与表达式前缀或表达式生成器关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">用来查找相关联的表达式编辑器的表达式前缀。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回一个与指定的表达式前缀相关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <returns>与 <paramref name="expressionPrefix" /> 关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现；否则，如果未定义 <paramref name="expressionPrefix" /> 或者未将它与 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 关联，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法重载可<xref:System.Web.UI.Design.ExpressionEditor>查找与特定表达式前缀或表达式生成器类型关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识关联的表达式生成器和表达式编辑器。 当在页中分析自定义表达式时，表达式前缀用于创建关联<xref:System.Web.Compilation.ExpressionBuilder>的和<xref:System.Web.UI.Design.ExpressionEditor>类的实例。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，请<xref:System.Web.Compilation.ExpressionEditorAttribute>将<xref:System.Web.Compilation.ExpressionPrefixAttribute>和属性应用于<xref:System.Web.Compilation.ExpressionBuilder>自定义类，并在`expressionBuilders`Web 配置文件中的元素。  
  
 若要查找表达式前缀的关联表达式编辑器，该<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法可枚举匹配前缀的可用<xref:System.Web.Compilation.ExpressionBuilder>实现。 可在 Web 配置文件的`expressionBuilders`节中配置实现。 <xref:System.Web.Compilation.ExpressionBuilder> 如果可用<xref:System.Web.Compilation.ExpressionBuilder>实现定义表达式前缀，则<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法返回<xref:System.Web.Compilation.ExpressionBuilder>在元数据的<xref:System.Web.Compilation.ExpressionEditorAttribute>特性中指定的类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">派生的表达式生成器类的类型，用于定位相关联的表达式编辑器。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回一个与指定表达式生成器类型相关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现。</summary>
        <returns>与 <paramref name="expressionBuilderType" /> 关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 实现；否则，如果无法定位 <paramref name="expressionBuilderType" /> 或者它没有关联的 <see cref="T:System.Web.UI.Design.ExpressionEditor" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用静态<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>重载<xref:System.Web.UI.Design.ExpressionEditor>查找与特定表达式前缀或表达式生成器类型关联的对象。  
  
 对于每个自定义表达式类型，表达式前缀标识关联的表达式生成器和表达式编辑器。 当在页中分析自定义表达式时，表达式前缀用于创建关联<xref:System.Web.Compilation.ExpressionBuilder>的和<xref:System.Web.UI.Design.ExpressionEditor>类的实例。  
  
 若要将表达式前缀与表达式生成器和表达式编辑器相关联，请<xref:System.Web.Compilation.ExpressionEditorAttribute>将<xref:System.Web.Compilation.ExpressionPrefixAttribute>和属性应用于<xref:System.Web.Compilation.ExpressionBuilder>自定义类，并在`expressionBuilders`Web 配置文件中的元素。  
  
 方法枚举可查找<xref:System.Web.Compilation.ExpressionBuilder> `expressionBuilderType`的可用实现。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> 可在 Web 配置文件的`expressionBuilders`节中配置实现。 <xref:System.Web.Compilation.ExpressionBuilder> 如果`expressionBuilderType`在可用<xref:System.Web.Compilation.ExpressionBuilder>的实现集中找到，则<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法<xref:System.Web.Compilation.ExpressionEditorAttribute>返回在<xref:System.Web.Compilation.ExpressionBuilder>元数据的特性中指定的类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expressionBuilderType" /> 为 <see langword="null" />。  
  
或 
 <paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">为控件属性设置的表达式字符串，用于初始化表达式编辑器表。</param>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>返回与当前表达式编辑器相关联的表达式编辑器表。</summary>
        <returns>一个 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />，定义自定义的表达式的属性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法返回一个<xref:System.Web.UI.Design.ExpressionEditorSheet>实现，该实现定义组合起来以形成自定义表达式的字符串。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> 可视化设计器使用表达式编辑器表来提示要合并到自定义表达式中的一个或多个字符串。 基类方法返回一个默认表达式编辑器表，该编辑器使用单个输入字符串形成表达式。 表达式编辑器表定义表达式的属性网格。 因此，表达式编辑器公开的属性将成为可为对话框中的表达式定义的属性。  
  
 从类派生的<xref:System.Web.UI.Design.ExpressionEditor>类可以选择<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>重写方法以提供自定义表达式编辑器表。 自定义表达式编辑器表可以允许多个属性的设计时输入，这些属性组合在一起形成表达式字符串。  
  
 例如， <xref:System.Web.UI.Design.ResourceExpressionEditor>类派生<xref:System.Web.UI.Design.ExpressionEditor>自类，并提供用于在设计时计算资源字符串引用并将资源字符串引用与控件属性关联的实现。 类与表达式前缀`Resources`和<xref:System.Web.UI.Design.ResourceExpressionEditor>实现相关联。 <xref:System.Web.Compilation.ResourceExpressionBuilder> <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> 方法 <xref:System.Web.UI.Design.ResourceExpressionEditorSheet> 返回，它定义构成资源引用表达式的各个属性。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>通常，若要在设计时提供新的表达式类型，请定义唯一的表达式前缀，并<see cref="T:System.Web.Compilation.ExpressionBuilder" />提供<see cref="T:System.Web.UI.Design.ExpressionEditor" />自定义和实现。 还可以提供自定义<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />实现，该实现定义用于构成表达式的属性。 即使配置文件定义了前缀，也应应用<see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />对象<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />和对象。  
  
重写<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法以返回定义自定义表达式中多个属性的设计时输入的表达式编辑器表。 选择控件属性和表达式编辑器类型时，可视化设计器会调用<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，然后提供为控件属性设置的当前表达式字符串。 使用<paramref name="expression" />设置表达式属性的初始值。 使用<paramref name="serviceProvider" />初始化自定义表达式表构造函数并访问设计器宿主提供的服务。 例如， <see cref="M:System.IServiceProvider.GetService(System.Type)" /> <see cref="T:System.Web.UI.Design.IWebApplication" />使用类型调用方法来访问通过可视化设计器提供的项目项、文档或配置文件详细信息。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="MemoryExtensions" FullName="System.MemoryExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c3dccbfa7d929e37bad09ee33b00ec0fa1485544" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70372809" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MemoryExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MemoryExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eebed-101">为内存相关类型和跨度相关类型提供扩展方法（例如，<see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" />）。</span><span class="sxs-lookup"><span data-stu-id="eebed-101">Provides extension methods for for the memory- and span-related types, such as <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, and <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-102">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-102">The target string.</span></span></param>
        <summary><span data-ttu-id="eebed-103">在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-103">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over the portion of the target string.</span></span></summary>
        <returns><span data-ttu-id="eebed-104">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-104">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, startIndex As Index) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * Index -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-105">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-105">The target string.</span></span></param>
        <param name="startIndex"><span data-ttu-id="eebed-106">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-106">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="eebed-107">从指定索引处开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-107">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string starting at a specified index.</span></span></summary>
        <returns><span data-ttu-id="eebed-108">字符串的只读字符内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-108">The read-only character memory representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, start As Integer) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * int -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-109">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-109">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-110">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-110">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="eebed-111">从指定字符串位置开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-111">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string starting at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="eebed-112">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-112">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-113"><paramref name="start" /> 不在 <paramref name="text" /> 的范围内（<paramref name="start" /> 为 &lt; 0 或 &gt; <c>text.Length</c>）。</span><span class="sxs-lookup"><span data-stu-id="eebed-113"><paramref name="start" /> is not in the range of <paramref name="text" /> (<paramref name="start" /> is &lt; 0 or &gt; <c>text.Length</c>).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, Range range);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * Range -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-114">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-114">The target string.</span></span></param>
        <param name="range"><span data-ttu-id="eebed-115">表示切片后的字符串的起始和长度的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-115">The range that indicates the start and length of the sliced string.</span></span></param>
        <summary><span data-ttu-id="eebed-116">在目标字符串的指定范围内创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-116">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a specified range of the target string.</span></span></summary>
        <returns><span data-ttu-id="eebed-117">字符串的只读字符内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-117">The read-only character memory representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; AsMemory (this string text, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; AsMemory(string text, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory (text As String, start As Integer, length As Integer) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; AsMemory(System::String ^ text, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : string * int * int -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.AsMemory (text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-118">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-118">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-119">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-119">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-120">切片所需的长度。</span><span class="sxs-lookup"><span data-stu-id="eebed-120">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="eebed-121">从带有长度的指定位置开始，在目标字符串的一部分上创建新的 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-121">Creates a new <see langword="ReadOnlyMemory&lt;Char&gt;" /> over a portion of the target string beginning at a specified position with a length.</span></span></summary>
        <returns><span data-ttu-id="eebed-122">如果 <paramref name="text" /> 为 <see langword="null" />则为字符串的只读字符内存表示形式或 <see langword="default" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-122">The read-only character memory representation of the string, or <see langword="default" /> if <paramref name="text" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-123"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-123"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-124">段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-124">The type of the segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-125">要转换的段。</span><span class="sxs-lookup"><span data-stu-id="eebed-125">The segment to convert.</span></span></param>
        <summary><span data-ttu-id="eebed-126">在目标数组段的一部分上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-126">Creates a new memory region over the portion of the target array segment.</span></span></summary>
        <returns><span data-ttu-id="eebed-127">段的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-127">The memory representation of the segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-128">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-128">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-129">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-129">The array to convert.</span></span></param>
        <summary><span data-ttu-id="eebed-130">在目标数组上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-130">Creates a new memory region over the target array.</span></span></summary>
        <returns><span data-ttu-id="eebed-131">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-131">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T), start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (segment, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-132">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-132">The type of the array.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-133">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-133">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-134">开始内存的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-134">The index at which to begin the memory.</span></span></param>
        <summary><span data-ttu-id="eebed-135">从指定位置开始到段的结尾，在目标数组段的一部分上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-135">Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="eebed-136">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-136">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-137">当为`segment` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-137">Returns `default` when `segment` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-138"><paramref name="segment" /> 是协变，<paramref name="segment" /> 的类型并不是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-138"><paramref name="segment" /> is covariant, and the type of <paramref name="segment" /> is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-139"><paramref name="start" /> 小于 0 或大于 <see langword="segment.Count" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-139"><paramref name="start" /> is less than 0 or greater than <see langword="segment.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), startIndex As Index) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * Index -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-140">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-140">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-141">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-141">The array to convert.</span></span></param>
        <param name="startIndex"><span data-ttu-id="eebed-142">数组的第一个位置。</span><span class="sxs-lookup"><span data-stu-id="eebed-142">The first position of the array.</span></span></param>
        <summary><span data-ttu-id="eebed-143">从指定索引开始到数组的结尾，在目标数组的一部分上创建一个新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-143">Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="eebed-144">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-144">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-145">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-145">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-146">目标数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-146">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-147">开始内存的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-147">The index at which to begin the memory.</span></span></param>
        <summary><span data-ttu-id="eebed-148">从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-148">Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="eebed-149">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-149">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-150">当为`array` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-150">Returns `default` when `array` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-151"><paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-151"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-152"><paramref name="start" /> 索引小于 0 或大于 <see langword="array.Length" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-152"><paramref name="start" /> index less than 0 or greater than <see langword="array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, Range range);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * Range -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-153">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-153">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-154">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-154">The array to convert.</span></span></param>
        <param name="range"><span data-ttu-id="eebed-155">要从数组转换的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-155">The range to convert from the array.</span></span></param>
        <summary><span data-ttu-id="eebed-156">从范围的包含起始索引开始，到范围的不包含结束索引结束，在目标数组的一部分上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-156">Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.</span></span></summary>
        <returns><span data-ttu-id="eebed-157">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-157">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (segment As ArraySegment(Of T), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ArraySegment&lt;'T&gt; * int * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (segment, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-158">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-158">The type of the array.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-159">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-159">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-160">开始内存的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-160">The index at which to begin the memory.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-161">内存中的项数。</span><span class="sxs-lookup"><span data-stu-id="eebed-161">The number of items in the memory.</span></span></param>
        <summary><span data-ttu-id="eebed-162">从具有指定长度的指定位置开始，在目标数组段的一部分上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-162">Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.</span></span></summary>
        <returns><span data-ttu-id="eebed-163">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-163">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-164">当为`segment` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-164">Returns `default` when `segment` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-165"><paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-165"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-166"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-166"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="segment" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (this T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsMemory(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; AsMemory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsMemory : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.MemoryExtensions.AsMemory (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-167">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-167">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-168">目标数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-168">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-169">开始内存区域的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-169">The index at which to begin the memory region.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-170">内存区域中的项数。</span><span class="sxs-lookup"><span data-stu-id="eebed-170">The number of items in the memory region.</span></span></param>
        <summary><span data-ttu-id="eebed-171">从具有指定长度的指定位置开始，在目标数组的一部分上创建新的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-171">Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.</span></span></summary>
        <returns><span data-ttu-id="eebed-172">整个或部分数组的内存表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-172">The memory representation of the whole or part of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-173">当为`array` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-173">Returns `default` when `array` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-174"><paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-174"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-175"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="array" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-175"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-176">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-176">The target string.</span></span></param>
        <summary><span data-ttu-id="eebed-177">从指定字符数量的指定位置在目标字符串的一部分上创建新的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-177">Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="eebed-178">字符串的只读跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-178">The read-only span representation of the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-179">当为`text` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-179">Returns `default` when `text` is `null`.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String, start As Integer) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string * int -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan (text, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-180">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-180">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-181">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-181">The index at which to begin this slice.</span></span></param>
        <summary><span data-ttu-id="eebed-182">从指定位置到字符串结尾，在目标字符串的一部分上创建新的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-182">Creates a new read-only span over a portion of the target string from a specified position to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="eebed-183">字符串的只读跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-183">The read-only span representation of the string.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-184"><paramref name="text" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-184"><paramref name="text" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-185"><paramref name="start" /> 小于 0 或大于 <see langword="text.Length" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-185"><paramref name="start" /> is less than 0 or greater than <see langword="text.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; AsSpan (this string text, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan (text As String, start As Integer, length As Integer) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; AsSpan(System::String ^ text, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : string * int * int -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.AsSpan (text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="eebed-186">目标字符串。</span><span class="sxs-lookup"><span data-stu-id="eebed-186">The target string.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-187">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-187">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-188">切片所需的长度。</span><span class="sxs-lookup"><span data-stu-id="eebed-188">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="eebed-189">在字符串上创建新的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-189">Creates a new read-only span over a string.</span></span></summary>
        <returns><span data-ttu-id="eebed-190">字符串的只读跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-190">The read-only span representation of the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-191">当为`text` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-191">Returns `default` when `text` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-192"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-192"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-193">数组段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-193">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-194">要写入的数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-194">The array segment to convert.</span></span></param>
        <summary><span data-ttu-id="eebed-195">在目标数组段上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-195">Creates a new span over a target array segment.</span></span></summary>
        <returns><span data-ttu-id="eebed-196">数组段的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-196">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T()) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-197">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-197">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-198">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-198">The array to convert.</span></span></param>
        <summary><span data-ttu-id="eebed-199">在目标数组上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-199">Creates a new span over a target array.</span></span></summary>
        <returns><span data-ttu-id="eebed-200">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-200">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), startIndex As Index) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * Index -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-201">数组段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-201">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-202">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-202">The target array segment.</span></span></param>
        <param name="startIndex"><span data-ttu-id="eebed-203">开始跨度处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-203">The index at which to begin the Span.</span></span></param>
        <summary><span data-ttu-id="eebed-204">在目标数组段的一部分上创建新的跨度，从指定的索引开始，以段的末尾结束。</span><span class="sxs-lookup"><span data-stu-id="eebed-204">Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="eebed-205">数组段的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-205">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-206">数组段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-206">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-207">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-207">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-208">开始跨度处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-208">The index at which to begin the san.</span></span></param>
        <summary><span data-ttu-id="eebed-209">从指定位置到段的结尾，在目标数组段的一部分上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-209">Creates a new span over a portion of a target array segment from a specified position to the end of the segment.</span></span></summary>
        <returns><span data-ttu-id="eebed-210">数组段的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-210">The span representation of the array segment.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-211">当为`segment` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-211">Returns `default` when `segment` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-212"><paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-212"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-213"><paramref name="start" /> 小于 0 或大于 <see langword="segment.Count" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-213"><paramref name="start" /> is less than 0 or greater than <see langword="segment.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, Range range);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * Range -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-214">数组段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-214">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-215">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-215">The target array segment.</span></span></param>
        <param name="range"><span data-ttu-id="eebed-216">带有开始和结束索引的范围，用于对数组进行切片。</span><span class="sxs-lookup"><span data-stu-id="eebed-216">The range which has start and end indexes to use for slicing the array.</span></span></param>
        <summary><span data-ttu-id="eebed-217">使用范围起始和结束索引在目标数组段的一部分上创建新的跨度</span><span class="sxs-lookup"><span data-stu-id="eebed-217">Creates a new span over a portion of a target array segment using the range start and end indexes</span></span></summary>
        <returns><span data-ttu-id="eebed-218">数组段的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-218">The span representation of the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), startIndex As Index) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, Index startIndex);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * Index -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Index" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-219">数组类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-219">The array type.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-220">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-220">The array to convert.</span></span></param>
        <param name="startIndex"><span data-ttu-id="eebed-221">起始索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-221">The starting index.</span></span></param>
        <summary><span data-ttu-id="eebed-222">在由 <see cref="T:System.Index" /> 值定义的目标数组部分上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-222">Creates a new span over the portion of the target array defined by an <see cref="T:System.Index" /> value.</span></span></summary>
        <returns><span data-ttu-id="eebed-223">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-223">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-224">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-224">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-225">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-225">The array to convert.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-226">转换数组的初始索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-226">The initial index from which the array will be converted.</span></span></param>
        <summary><span data-ttu-id="eebed-227">从指定位置开始到数组的结尾，在目标数组的一部分上创建一个新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-227">Creates a new span over a portion of the target array starting at a specified position to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="eebed-228">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-228">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, Range range);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * Range -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="range" Type="System.Range" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-229">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-229">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-230">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-230">The array to convert.</span></span></param>
        <param name="range"><span data-ttu-id="eebed-231">要转换的数组范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-231">The range of the array to convert.</span></span></param>
        <summary><span data-ttu-id="eebed-232">在由 <see cref="T:System.Range" /> 值定义的目标数组部分上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-232">Creates a new span over a portion of a target array defined by a <see cref="T:System.Range" /> value.</span></span></summary>
        <returns><span data-ttu-id="eebed-233">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-233">The span representation of the array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; segment, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (segment As ArraySegment(Of T), start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(ArraySegment&lt;T&gt; segment, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : ArraySegment&lt;'T&gt; * int * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (segment, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-234">数组段的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-234">The type of the array segment.</span></span></typeparam>
        <param name="segment"><span data-ttu-id="eebed-235">目标数组段。</span><span class="sxs-lookup"><span data-stu-id="eebed-235">The target array segment.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-236">开始跨度处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-236">The index at which to begin the span.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-237">跨度中的项数。</span><span class="sxs-lookup"><span data-stu-id="eebed-237">The number of items in the span.</span></span></param>
        <summary><span data-ttu-id="eebed-238">从指定长度的指定位置在目标数组段的一部分上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-238">Creates a new span over a portion of a target array segment from a specified position for a specified length.</span></span></summary>
        <returns><span data-ttu-id="eebed-239">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-239">The span representation of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-240">当为`segment` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-240">Returns `default` when `segment` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-241"><paramref name="segment" /> 是协变的，数组的类型不完全是 <see langword="T[]" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-241"><paramref name="segment" /> is covariant, and the array's type is not exactly <see langword="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-242"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-242"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="segment" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsSpan(Of T) (array As T(), start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; AsSpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member AsSpan : 'T[] * int * int -&gt; Span&lt;'T&gt;" Usage="System.MemoryExtensions.AsSpan (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" RefType="this" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-243">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-243">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="eebed-244">目标数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-244">The target array.</span></span></param>
        <param name="start"><span data-ttu-id="eebed-245">开始跨度处的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-245">The index at which to begin the span.</span></span></param>
        <param name="length"><span data-ttu-id="eebed-246">跨度中的项数。</span><span class="sxs-lookup"><span data-stu-id="eebed-246">The number of items in the span.</span></span></param>
        <summary><span data-ttu-id="eebed-247">从指定长度的指定位置在目标数组的一部分上创建新的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-247">Creates a new span over the portion of the target array beginning at a specified position for a specified length.</span></span></summary>
        <returns><span data-ttu-id="eebed-248">数组的跨度表示形式。</span><span class="sxs-lookup"><span data-stu-id="eebed-248">The span representation of the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-249">当为`array` `default` 时`null`返回。</span><span class="sxs-lookup"><span data-stu-id="eebed-249">Returns `default` when `array` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="eebed-250"><paramref name="array" /> 是协变的，数组的类型不完全是 <see langword="T[]" />"。</span><span class="sxs-lookup"><span data-stu-id="eebed-250"><paramref name="array" /> is covariant, and the array's type is not exactly <see langword="T[]" />".</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eebed-251"><paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的范围内。</span><span class="sxs-lookup"><span data-stu-id="eebed-251"><paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> is not in the range of <paramref name="text" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, IComparable&lt;T&gt; comparable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, class System.IComparable`1&lt;!!T&gt; comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T) (span As ReadOnlySpan(Of T), comparable As IComparable(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, IComparable&lt;T&gt; ^ comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * IComparable&lt;'T&gt; -&gt; int" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="System.IComparable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-252">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-252">The element type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-253">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-253">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="eebed-254">比较时要使用的 <see cref="T:System.IComparable`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-254">The <see cref="T:System.IComparable`1" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-255">使用指定的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索值。</span><span class="sxs-lookup"><span data-stu-id="eebed-255">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a value using the specified <see cref="T:System.IComparable`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="eebed-256">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-256">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-257"><paramref name="comparable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-257"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (this Span&lt;T&gt; span, IComparable&lt;T&gt; comparable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, class System.IComparable`1&lt;!!T&gt; comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T) (span As Span(Of T), comparable As IComparable(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, IComparable&lt;T&gt; ^ comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * IComparable&lt;'T&gt; -&gt; int" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="System.IComparable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-258">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-258">The element type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-259">要搜索的已排序 <see cref="T:System.Span`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-259">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="eebed-260">比较时要使用的 <see cref="T:System.IComparable`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-260">The <see cref="T:System.IComparable`1" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-261">使用指定的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索值。</span><span class="sxs-lookup"><span data-stu-id="eebed-261">Searches an entire sorted <see cref="T:System.Span`1" /> for a value using the specified <see cref="T:System.IComparable`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="eebed-262">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-262">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-263"><paramref name="comparable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-263"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparable&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparable&gt; (this ReadOnlySpan&lt;T&gt; span, TComparable comparable) where TComparable : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.IComparable`1&lt;!!T&gt;) TComparable&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!TComparable comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparable) (span As ReadOnlySpan(Of T), comparable As TComparable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparable&gt;&#xA; where TComparable : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, TComparable comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * 'Comparable -&gt; int (requires 'Comparable :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparable">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="TComparable" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-264">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-264">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparable"><span data-ttu-id="eebed-265">的特定类型<see cref="T:System.IComparable`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-265">The specific type of <see cref="T:System.IComparable`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-266">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-266">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="eebed-267">比较时要使用的 <typeparamref name="TComparable" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-267">The <typeparamref name="TComparable" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-268">使用指定的 <typeparamref name="TComparable" /> 泛型类型，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索值。</span><span class="sxs-lookup"><span data-stu-id="eebed-268">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a value using the specified <typeparamref name="TComparable" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="eebed-269">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-269">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-270"><paramref name="comparable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-270"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparable&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparable&gt; (this Span&lt;T&gt; span, TComparable comparable) where TComparable : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.IComparable`1&lt;!!T&gt;) TComparable&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!TComparable comparable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparable) (span As Span(Of T), comparable As TComparable) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparable&gt;&#xA; where TComparable : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, TComparable comparable);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * 'Comparable -&gt; int (requires 'Comparable :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, comparable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparable">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="comparable" Type="TComparable" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-271">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-271">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparable"><span data-ttu-id="eebed-272">的特定类型<see cref="T:System.IComparable`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-272">The specific type of <see cref="T:System.IComparable`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-273">要搜索的已排序 <see cref="T:System.Span`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-273">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="comparable"><span data-ttu-id="eebed-274">比较时要使用的 <typeparamref name="TComparable" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-274">The <typeparamref name="TComparable" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-275">使用指定的 <typeparamref name="TComparable" /> 泛型类型，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索值。</span><span class="sxs-lookup"><span data-stu-id="eebed-275">Searches an entire sorted <see cref="T:System.Span`1" /> for a value using the specified <typeparamref name="TComparable" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="eebed-276">如果找到 <paramref name="comparable" />，则为已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="comparable" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-276">The zero-based index of <paramref name="comparable" /> in the sorted <paramref name="span" />, if <paramref name="comparable" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="comparable" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-277"><paramref name="comparable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-277"><paramref name="comparable" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparer&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparer&gt; (this ReadOnlySpan&lt;T&gt; span, T value, TComparer comparer) where TComparer : System.Collections.Generic.IComparer&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.Collections.Generic.IComparer`1&lt;!!T&gt;) TComparer&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value, !!TComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparer) (span As ReadOnlySpan(Of T), value As T, comparer As TComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparer&gt;&#xA; where TComparer : System::Collections::Generic::IComparer&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(ReadOnlySpan&lt;T&gt; span, T value, TComparer comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : ReadOnlySpan&lt;'T&gt; * 'T * 'Comparer -&gt; int (requires 'Comparer :&gt; System.Collections.Generic.IComparer&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="TComparer" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-278">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-278">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparer"><span data-ttu-id="eebed-279">的特定类型<see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-279">The specific type of <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-280">要搜索的已排序 <see cref="T:System.ReadOnlySpan`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-280">The sorted <see cref="T:System.ReadOnlySpan`1" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-281">要定位的对象。</span><span class="sxs-lookup"><span data-stu-id="eebed-281">The object to locate.</span></span> <span data-ttu-id="eebed-282">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-282">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="eebed-283">比较时要使用的 <typeparamref name="TComparer" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-283">The <typeparamref name="TComparer" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-284">使用指定的 <typeparamref name="TComparer" /> 泛型类型，在整个已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜索指定值。</span><span class="sxs-lookup"><span data-stu-id="eebed-284">Searches an entire sorted <see cref="T:System.ReadOnlySpan`1" /> for a specified value using the specified <typeparamref name="TComparer" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="eebed-285">如果找到 <paramref name="value" />，则为已排序的 <paramref name="span" /> 中 <paramref name="value" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.ReadOnlySpan`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-285">The zero-based index of <paramref name="value" /> in the sorted <paramref name="span" />, if <paramref name="value" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-286"><paramref name="comparer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-286"><paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T,TComparer&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T,TComparer&gt; (this Span&lt;T&gt; span, T value, TComparer comparer) where TComparer : System.Collections.Generic.IComparer&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T, (class System.Collections.Generic.IComparer`1&lt;!!T&gt;) TComparer&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value, !!TComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BinarySearch(Of T, TComparer) (span As Span(Of T), value As T, comparer As TComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TComparer&gt;&#xA; where TComparer : System::Collections::Generic::IComparer&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int BinarySearch(Span&lt;T&gt; span, T value, TComparer comparer);" />
      <MemberSignature Language="F#" Value="static member BinarySearch : Span&lt;'T&gt; * 'T * 'Comparer -&gt; int (requires 'Comparer :&gt; System.Collections.Generic.IComparer&lt;'T&gt;)" Usage="System.MemoryExtensions.BinarySearch (span, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="TComparer" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-287">跨度的元素类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-287">The element type of the span.</span></span></typeparam>
        <typeparam name="TComparer"><span data-ttu-id="eebed-288">的特定类型<see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-288">The specific type of <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-289">要搜索的已排序 <see cref="T:System.Span`1" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-289">The sorted <see cref="T:System.Span`1" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-290">要定位的对象。</span><span class="sxs-lookup"><span data-stu-id="eebed-290">The object to locate.</span></span> <span data-ttu-id="eebed-291">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-291">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="comparer"><span data-ttu-id="eebed-292">比较时要使用的 <typeparamref name="TComparer" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-292">The <typeparamref name="TComparer" /> to use when comparing.</span></span></param>
        <summary><span data-ttu-id="eebed-293">使用指定的 <typeparamref name="TComparer" /> 泛型类型，在整个已排序的 <see cref="T:System.Span`1" /> 中搜索指定值。</span><span class="sxs-lookup"><span data-stu-id="eebed-293">Searches an entire sorted <see cref="T:System.Span`1" /> for a specified value using the specified <typeparamref name="TComparer" /> generic type.</span></span></summary>
        <returns><span data-ttu-id="eebed-294">如果找到 <paramref name="value" />，则为已排序的 <paramref name="span" /> 中 <paramref name="value" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Span`1.Length" /> 的按位求补。</span><span class="sxs-lookup"><span data-stu-id="eebed-294">The zero-based index of <paramref name="value" /> in the sorted <paramref name="span" />, if <paramref name="value" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Span`1.Length" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eebed-295"><paramref name="comparer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-295"><paramref name="comparer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public static int CompareTo (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareTo(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; other, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CompareTo (span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int CompareTo(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member CompareTo : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.CompareTo (span, other, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-296">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-296">The source span.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-297">要与源跨度进行比较的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-297">The value to compare with the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-298">用于确定如何比较 <paramref name="span" /> 和 <paramref name="other" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-298">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-299">使用指定的字符串比较将一个字符跨度与另一个字符跨度进行比较，并返回表示其在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="eebed-299">Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="eebed-300">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：</span><span class="sxs-lookup"><span data-stu-id="eebed-300">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br />   <span data-ttu-id="eebed-301">- 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="eebed-301">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-302">- 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-302">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-303">- 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="eebed-303">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public static bool Contains (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Contains : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.Contains (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-304">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-304">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-305">要在源跨度中查找的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-305">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-306">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 中的字符的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-306">An enumeration value that determines how the characters in <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-307">指示指定值是否出现在只读字符跨度内。</span><span class="sxs-lookup"><span data-stu-id="eebed-307">Indicates whether a specified value occurs within a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-308">如果在跨度内出现 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-308"><see langword="true" /> if <paramref name="value" /> occurs within the span, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member Contains : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Contains (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-309">范围的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-309">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-310">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-310">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-311">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-311">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-312">指示是否在只读跨度内找到指定的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-312">Indicates whether a specified value is found in a read-only span.</span></span> <span data-ttu-id="eebed-313">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-313">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-314">如果找到，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-314"><see langword="true" /> if found, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member Contains : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Contains (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-315">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-315">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-316">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-316">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-317">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-317">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-318">指示是否在跨度内找到指定的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-318">Indicates whether a specified value is found in a span.</span></span> <span data-ttu-id="eebed-319">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-319">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-320">如果找到，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-320"><see langword="true" /> if found, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyTo&lt;T&gt; (this T[] source, Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo&lt;T&gt;(!!T[] source, valuetype System.Memory`1&lt;!!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyTo(Of T) (source As T(), destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CopyTo(cli::array &lt;T&gt; ^ source, Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="static member CopyTo : 'T[] * Memory&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.CopyTo (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" RefType="this" />
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-321">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-321">The type of the array.</span></span></typeparam>
        <param name="source"><span data-ttu-id="eebed-322">要从中复制项的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-322">The array to copy items from.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-323">要将项复制到其中的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-323">The memory to copy items into.</span></span></param>
        <summary><span data-ttu-id="eebed-324">将数组的内容复制到内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-324">Copies the contents of the array into a memory region.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="eebed-325">如果`source` 和`destination`重叠, 此方法的行为就像原始值位于临时位置, 然后覆盖目标。</span><span class="sxs-lookup"><span data-stu-id="eebed-325">If `source` and `destination` overlap, this method behaves as if the original values are in a temporary location before the destination is overwritten.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eebed-326">目标比源数组短。</span><span class="sxs-lookup"><span data-stu-id="eebed-326">The destination is shorter than the source array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyTo&lt;T&gt; (this T[] source, Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo&lt;T&gt;(!!T[] source, valuetype System.Span`1&lt;!!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyTo(Of T) (source As T(), destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void CopyTo(cli::array &lt;T&gt; ^ source, Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="static member CopyTo : 'T[] * Span&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.CopyTo (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-327">数组的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-327">The type of the array.</span></span></typeparam>
        <param name="source"><span data-ttu-id="eebed-328">要从中复制项的数组。</span><span class="sxs-lookup"><span data-stu-id="eebed-328">The array to copy items from.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-329">要将项复制到的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-329">The span to copy items into.</span></span></param>
        <summary><span data-ttu-id="eebed-330">将数组的内容复制到跨度中。</span><span class="sxs-lookup"><span data-stu-id="eebed-330">Copies the contents of the array into the span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="eebed-331">如果`source` 和`destination`重叠, 此方法的行为就像原始值位于临时位置, 然后覆盖目标。</span><span class="sxs-lookup"><span data-stu-id="eebed-331">If `source` and `destination` overlap, this method behaves as if the original values are in a temporary location before the destination is overwritten.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="eebed-332">目标跨度比源数组短。</span><span class="sxs-lookup"><span data-stu-id="eebed-332">The destination Span is shorter than the source array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public static bool EndsWith (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member EndsWith : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.EndsWith (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-333">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-333">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-334">要与源跨度的结尾进行比较的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-334">The sequence to compare to the end of the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-335">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-335">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-336">使用指定的 <paramref name="comparisonType" /> 选项进行比较时，确定 <paramref name="span" /> 的结尾是否与指定的 <paramref name="value" /> 匹配。</span><span class="sxs-lookup"><span data-stu-id="eebed-336">Determines whether the end of the <paramref name="span" /> matches the specified <paramref name="value" /> when compared using the specified <paramref name="comparisonType" /> option.</span></span></summary>
        <returns><span data-ttu-id="eebed-337">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-337"><see langword="true" /> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EndsWith&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member EndsWith : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.EndsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-338">范围的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-338">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-339">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-339">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-340">要与源跨度的结尾进行比较的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-340">The sequence to compare to the end of the source span.</span></span></param>
        <summary><span data-ttu-id="eebed-341">确定指定的序列是否出现在只读跨度的结尾。</span><span class="sxs-lookup"><span data-stu-id="eebed-341">Determines whether the specified sequence appears at the end of a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-342">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-342"><see langword="true" /> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EndsWith&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EndsWith(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool EndsWith(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member EndsWith : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.EndsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-343">范围的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-343">The type of the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-344">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-344">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-345">要与源跨度的结尾进行比较的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-345">The sequence to compare to the end of the source span.</span></span></param>
        <summary><span data-ttu-id="eebed-346">确定指定的序列是否出现在跨度的结尾。</span><span class="sxs-lookup"><span data-stu-id="eebed-346">Determines whether the specified sequence appears at the end of a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-347">如果 <paramref name="value" /> 与 <paramref name="span" /> 的结尾匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-347"><see langword="true" /> if <paramref name="value" /> matches the end of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public static System.Text.SpanRuneEnumerator EnumerateRunes (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.SpanRuneEnumerator EnumerateRunes(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnumerateRunes (span As ReadOnlySpan(Of Char)) As SpanRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Text::SpanRuneEnumerator EnumerateRunes(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member EnumerateRunes : ReadOnlySpan&lt;char&gt; -&gt; System.Text.SpanRuneEnumerator" Usage="System.MemoryExtensions.EnumerateRunes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-348">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-348">The source span.</span></span></param>
        <summary><span data-ttu-id="eebed-349">从提供的只读跨度返回 <see cref="T:System.Text.Rune" /> 的枚举。</span><span class="sxs-lookup"><span data-stu-id="eebed-349">Returns an enumeration of <see cref="T:System.Text.Rune" /> from the provided read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-350">Rune 枚举器。</span><span class="sxs-lookup"><span data-stu-id="eebed-350">A rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-351">无效序列将在枚举<xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>中表示。</span><span class="sxs-lookup"><span data-stu-id="eebed-351">Invalid sequences will be represented in the enumeration by <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public static System.Text.SpanRuneEnumerator EnumerateRunes (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.SpanRuneEnumerator EnumerateRunes(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnumerateRunes (span As Span(Of Char)) As SpanRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Text::SpanRuneEnumerator EnumerateRunes(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member EnumerateRunes : Span&lt;char&gt; -&gt; System.Text.SpanRuneEnumerator" Usage="System.MemoryExtensions.EnumerateRunes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-352">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-352">The source span.</span></span></param>
        <summary><span data-ttu-id="eebed-353">从提供的跨度返回 <see cref="T:System.Text.Rune" /> 的枚举。</span><span class="sxs-lookup"><span data-stu-id="eebed-353">Returns an enumeration of <see cref="T:System.Text.Rune" /> from the provided span.</span></span></summary>
        <returns><span data-ttu-id="eebed-354">Rune 枚举器。</span><span class="sxs-lookup"><span data-stu-id="eebed-354">A rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-355">无效序列将在枚举<xref:System.Text.Rune.ReplacementChar>中表示。</span><span class="sxs-lookup"><span data-stu-id="eebed-355">Invalid sequences will be represented in the enumeration by <xref:System.Text.Rune.ReplacementChar>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; other, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Equals (span As ReadOnlySpan(Of Char), other As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Equals(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; other, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.Equals (span, other, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-356">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-356">The source span.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-357">要与源跨度进行比较的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-357">The value to compare with the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-358">用于确定如何比较 <paramref name="span" /> 和 <paramref name="other" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-358">An enumeration value that determines how <paramref name="span" /> and <paramref name="other" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-359">使用指定的 <paramref name="comparisonType" /> 选项进行比较时，确定此 <paramref name="span" /> 和指定的 <paramref name="other" /> 跨度是否具有相同的字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-359">Determines whether this <paramref name="span" /> and the specified <paramref name="other" /> span have the same characters when compared using the specified <paramref name="comparisonType" /> option.</span></span></summary>
        <returns><span data-ttu-id="eebed-360">如果相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-360"><see langword="true" /> if equal, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.IndexOf (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-361">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-361">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-362">要在源跨度中查找的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-362">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-363">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-363">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-364">报告当前 <paramref name="span" /> 中第一次出现的指定 <paramref name="value" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-364">Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> in the current <paramref name="span" />.</span></span></summary>
        <returns><span data-ttu-id="eebed-365">跨度中的值出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-365">The index of the occurrence of the value in the span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-366">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-366">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-367">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-367">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-368">要搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-368">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-369">搜索指定的序列并返回其第一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-369">Searches for the specified sequence and returns the index of its first occurrence.</span></span> <span data-ttu-id="eebed-370">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-370">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-371">跨度中的值出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-371">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-372">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-372">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-373">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-373">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-374">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-374">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-375">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-375">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-376">搜索指定值并返回其第一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-376">Searches for the specified value and returns the index of its first occurrence.</span></span> <span data-ttu-id="eebed-377">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-377">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-378">跨度中的值出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-378">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-379">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-379">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-380">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-380">The type of the span and value..</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-381">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-381">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-382">要搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-382">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-383">搜索指定的序列并返回其第一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-383">Searches for the specified sequence and returns the index of its first occurrence.</span></span> <span data-ttu-id="eebed-384">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-384">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-385">跨度中的值出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-385">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-386">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-386">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member IndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-387">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-387">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-388">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-388">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-389">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-389">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-390">搜索指定值并返回其第一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-390">Searches for the specified value and returns the index of its first occurrence.</span></span> <span data-ttu-id="eebed-391">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-391">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-392">跨度中的值出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-392">The index of the occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-393">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-393">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-394">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-394">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-395">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-395">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="eebed-396">要搜索的值集。</span><span class="sxs-lookup"><span data-stu-id="eebed-396">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-397">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-397">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-398">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-398">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-399">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-399">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-400">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-400">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-401">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-401">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="eebed-402">要搜索的值集。</span><span class="sxs-lookup"><span data-stu-id="eebed-402">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-403">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-403">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-404">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-404">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-405">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-405">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-406">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-406">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-407">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-407">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-408">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-408">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-409">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-409">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-410">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-410">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-411">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-411">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-412">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-412">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-413">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-413">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-414">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-414">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-415">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-415">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-416">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-416">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-417">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-417">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-418">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-418">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-419">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-419">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-420">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-420">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-421">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-421">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-422">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-422">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-423">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-423">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="eebed-424">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-424">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-425">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-425">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-426">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-426">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-427">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-427">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOfAny(Span&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member IndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.IndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-428">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-428">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-429">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-429">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-430">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-430">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-431">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-431">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="eebed-432">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-432">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-433">搜索任何指定值的第一个索引，其方式类似于使用逻辑 OR 运算符多次调用 IndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-433">Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-434">跨度中任何值出现的第一个索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-434">The first index of the occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-435">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-435">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsWhiteSpace (span As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsWhiteSpace(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.MemoryExtensions.IsWhiteSpace span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-436">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-436">The source span.</span></span></param>
        <summary><span data-ttu-id="eebed-437">指示指定的跨度是否仅包含空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-437">Indicates whether the specified span contains only whitespace characters.</span></span></summary>
        <returns><span data-ttu-id="eebed-438">如果跨度仅包含空格字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-438"><see langword="true" /> if the span contains only whitespace characters, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.MemoryExtensions.LastIndexOf (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-439">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-439">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-440">要在源跨度中查找的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-440">The value to seek within the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-441">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-441">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-442">报告当前 <paramref name="span" /> 中最后一次出现的指定 <paramref name="value" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-442">Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> in the current <paramref name="span" />.</span></span></summary>
        <returns><span data-ttu-id="eebed-443">跨度中最后一次出现的值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-443">The index of the last occurrence of the value in the span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-444">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-444">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-445">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-445">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-446">要搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-446">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-447">搜索指定的序列并返回其最后一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-447">Searches for the specified sequence and returns the index of its last occurrence.</span></span> <span data-ttu-id="eebed-448">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-448">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-449">跨度中最后一次出现的值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-449">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-450">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-450">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(ReadOnlySpan&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-451">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-451">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-452">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-452">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-453">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-453">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-454">搜索指定值并返回其最后一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-454">Searches for the specified value and returns the index of its last occurrence.</span></span> <span data-ttu-id="eebed-455">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-455">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-456">跨度中最后一次出现的值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-456">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-457">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-457">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-458">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-458">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-459">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-459">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-460">要搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-460">The sequence to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-461">搜索指定的序列并返回其最后一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-461">Searches for the specified sequence and returns the index of its last occurrence.</span></span> <span data-ttu-id="eebed-462">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-462">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-463">跨度中最后一次出现的值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-463">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-464">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-464">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (this Span&lt;T&gt; span, T value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOf(Of T As IEquatable(Of T)) (span As Span(Of T), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOf(Span&lt;T&gt; span, T value);" />
      <MemberSignature Language="F#" Value="static member LastIndexOf : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOf (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-465">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-465">The type of the span and value.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-466">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-466">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-467">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="eebed-467">The value to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-468">搜索指定值并返回其最后一次出现的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-468">Searches for the specified value and returns the index of its last occurrence.</span></span> <span data-ttu-id="eebed-469">使用 IEquatable{T}.Equals(T) 比较各值。</span><span class="sxs-lookup"><span data-stu-id="eebed-469">Values are compared using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-470">跨度中最后一次出现的值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-470">The index of the last occurrence of the value in the span.</span></span> <span data-ttu-id="eebed-471">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-471">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-472">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-472">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-473">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-473">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="eebed-474">要搜索的值集。</span><span class="sxs-lookup"><span data-stu-id="eebed-474">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-475">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-475">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-476">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-476">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-477">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-477">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), values As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-478">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-478">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-479">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-479">The span to search.</span></span></param>
        <param name="values"><span data-ttu-id="eebed-480">要搜索的值集。</span><span class="sxs-lookup"><span data-stu-id="eebed-480">The set of values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-481">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-481">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-482">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-482">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-483">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-483">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-484">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-484">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-485">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-485">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-486">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-486">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-487">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-487">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-488">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-488">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-489">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-489">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-490">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-490">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, T value0, T value1);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-491">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-491">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-492">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-492">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-493">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-493">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-494">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-494">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-495">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-495">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-496">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-496">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-497">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-497">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(ReadOnlySpan&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-498">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-498">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-499">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-499">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-500">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-500">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-501">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-501">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="eebed-502">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-502">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-503">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-503">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-504">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-504">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-505">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-505">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOfAny&lt;T&gt; (this Span&lt;T&gt; span, T value0, T value1, T value2) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOfAny&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T value0, !!T value1, !!T value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastIndexOfAny(Of T As IEquatable(Of T)) (span As Span(Of T), value0 As T, value1 As T, value2 As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int LastIndexOfAny(Span&lt;T&gt; span, T value0, T value1, T value2);" />
      <MemberSignature Language="F#" Value="static member LastIndexOfAny : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T * 'T * 'T -&gt; int (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.LastIndexOfAny (span, value0, value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value0" Type="T" />
        <Parameter Name="value1" Type="T" />
        <Parameter Name="value2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-506">范围和值的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-506">The type of the span and values.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-507">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-507">The span to search.</span></span></param>
        <param name="value0"><span data-ttu-id="eebed-508">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-508">One of the values to search for.</span></span></param>
        <param name="value1"><span data-ttu-id="eebed-509">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-509">One of the values to search for.</span></span></param>
        <param name="value2"><span data-ttu-id="eebed-510">要搜索的其中某个值。</span><span class="sxs-lookup"><span data-stu-id="eebed-510">One of the values to search for.</span></span></param>
        <summary><span data-ttu-id="eebed-511">搜索任何指定值的最后一个索引，其方式类似于使用逻辑 OR 运算符多次调用 LastIndexOf。</span><span class="sxs-lookup"><span data-stu-id="eebed-511">Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.</span></span></summary>
        <returns><span data-ttu-id="eebed-512">跨度中最后一次出现的任何值的索引。</span><span class="sxs-lookup"><span data-stu-id="eebed-512">The index of the last occurrence of any of the values in the span.</span></span> <span data-ttu-id="eebed-513">如果未找到，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-513">If not found, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member Overlaps : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-514">只读序列中要的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-514">The type of elmeents in the read-only sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-515">第一个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-515">The first sequence.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-516">第二个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-516">The second sequence.</span></span></param>
        <summary><span data-ttu-id="eebed-517">确定两个只读序列是否在内存中重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-517">Determines whether two read-only sequences overlap in memory.</span></span></summary>
        <returns><span data-ttu-id="eebed-518">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-518"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member Overlaps : Span&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-519">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-519">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-520">要比较的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-520">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-521">要比较的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-521">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="eebed-522">确定跨度和只读跨度是否在内存中重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-522">Determines whether a span and a read-only span overlap in memory.</span></span></summary>
        <returns><span data-ttu-id="eebed-523">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-523"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, out int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other, [out] int32&amp; elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T), ByRef elementOffset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, [Runtime::InteropServices::Out] int % elementOffset);" />
      <MemberSignature Language="F#" Value="static member Overlaps : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; * int -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="elementOffset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-524">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-524">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-525">第一个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-525">The first sequence.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-526">第二个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-526">The second sequence.</span></span></param>
        <param name="elementOffset">To be added.</param>
        <summary><span data-ttu-id="eebed-527">确定两个只读序列是否在内存中重叠且输出元素偏移。</span><span class="sxs-lookup"><span data-stu-id="eebed-527">Determines whether two read-only sequences overlap in memory and outputs the element offset.</span></span></summary>
        <returns><span data-ttu-id="eebed-528">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-528"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Overlaps&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, out int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Overlaps&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other, [out] int32&amp; elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Overlaps(Of T) (span As Span(Of T), other As ReadOnlySpan(Of T), ByRef elementOffset As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Overlaps(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other, [Runtime::InteropServices::Out] int % elementOffset);" />
      <MemberSignature Language="F#" Value="static member Overlaps : Span&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; * int -&gt; bool" Usage="System.MemoryExtensions.Overlaps (span, other, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="elementOffset" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-529">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-529">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-530">要比较的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-530">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-531">要比较的第二个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-531">The second sequence to compare.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="eebed-532">方法返回时，包含 <paramref name="span" /> 和 <paramref name="other" /> 之间的偏移。</span><span class="sxs-lookup"><span data-stu-id="eebed-532">When the method returns, contains the offset between <paramref name="span" /> and <paramref name="other" />.</span></span></param>
        <summary><span data-ttu-id="eebed-533">确定跨度和只读跨度是否在内存中重叠且输出元素偏移。</span><span class="sxs-lookup"><span data-stu-id="eebed-533">Determines whether a span and a read-only span overlap in memory and outputs the element offset.</span></span></summary>
        <returns><span data-ttu-id="eebed-534">如果两个序列重叠，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-534"><see langword="true" /> if the two sequences overlap; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (this Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Reverse``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Reverse(Of T) (span As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Reverse(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member Reverse : Span&lt;'T&gt; -&gt; unit" Usage="System.MemoryExtensions.Reverse span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-535">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-535">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-536">要反转的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-536">The span to reverse.</span></span></param>
        <summary><span data-ttu-id="eebed-537">反转整个跨度中元素的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-537">Reverses the sequence of the elements in the entire span.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceCompareTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SequenceCompareTo&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SequenceCompareTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceCompareTo(Of T As IComparable(Of T)) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int SequenceCompareTo(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceCompareTo : ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceCompareTo (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-538">序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-538">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-539">要比较的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-539">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-540">要比较的第二个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-540">The second sequence to compare.</span></span></param>
        <summary><span data-ttu-id="eebed-541">通过使用 IComparable{T}.CompareTo(T) 比较它们的元素，确定两个只读序列的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="eebed-541">Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-542">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：</span><span class="sxs-lookup"><span data-stu-id="eebed-542">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br />   <span data-ttu-id="eebed-543">- 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="eebed-543">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-544">- 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-544">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-545">- 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="eebed-545">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceCompareTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SequenceCompareTo&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SequenceCompareTo&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceCompareTo(Of T As IComparable(Of T)) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IComparable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static int SequenceCompareTo(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceCompareTo : Span&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; -&gt; int (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceCompareTo (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-546">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-546">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-547">要比较的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-547">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-548">要比较的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-548">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="eebed-549">通过使用 IComparable{T}.CompareTo(T) 比较它们的元素，确定跨度和只读跨度的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="eebed-549">Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-550">一个带符号整数，表示 <paramref name="span" /> 和<paramref name="other" /> 的相对顺序：</span><span class="sxs-lookup"><span data-stu-id="eebed-550">A signed integer that indicates the relative order of <paramref name="span" /> and <paramref name="other" />:</span></span><br />   <span data-ttu-id="eebed-551">- 如果小于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="eebed-551">- If less than 0, <paramref name="span" /> precedes than <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-552">- 如果为 0，则 <paramref name="span" /> 等于 <paramref name="other" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-552">- If 0, <paramref name="span" /> equals <paramref name="other" />.</span></span><br />   <span data-ttu-id="eebed-553">- 如果大于 0，则 <paramref name="span" /> 在 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="eebed-553">- If greater than 0, <paramref name="span" /> follows <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceEqual (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-554">序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-554">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-555">要比较的第一个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-555">The first sequence to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-556">要比较的第二个序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-556">The second sequence to compare.</span></span></param>
        <summary><span data-ttu-id="eebed-557">通过使用 IEquatable{T}.Equals(T) 比较元素，确定两个只读序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="eebed-557">Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-558">如果两个序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-558"><see langword="true" /> if the two sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of T As IEquatable(Of T)) (span As Span(Of T), other As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.SequenceEqual (span, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="other" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-559">序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-559">The type of elements in the sequence.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-560">要比较的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-560">The span to compare.</span></span></param>
        <param name="other"><span data-ttu-id="eebed-561">要比较的只读跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-561">The read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="eebed-562">通过使用 IEquatable{T}.Equals(T) 比较元素，确定跨度和只读跨度是否相等。</span><span class="sxs-lookup"><span data-stu-id="eebed-562">Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).</span></span></summary>
        <returns><span data-ttu-id="eebed-563">如果两个序列相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-563"><see langword="true" /> if the two sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public static bool StartsWith (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith (span As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member StartsWith : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * StringComparison -&gt; bool" Usage="System.MemoryExtensions.StartsWith (span, value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-564">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-564">The source span.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-565">要与源跨度的开头进行比较的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-565">The sequence to compare to the beginning of the source span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="eebed-566">用于确定如何比较 <paramref name="span" /> 和 <paramref name="value" /> 的枚举值。</span><span class="sxs-lookup"><span data-stu-id="eebed-566">An enumeration value that determines how <paramref name="span" /> and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="eebed-567">使用指定的 <see cref="T:System.StringComparison" /> 值进行比较时，确定只读字符跨度是否以指定值开头。</span><span class="sxs-lookup"><span data-stu-id="eebed-567">Determines whether a read-only character span begins with a specified value when compared using a specified <see cref="T:System.StringComparison" /> value.</span></span></summary>
        <returns><span data-ttu-id="eebed-568">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-568"><see langword="true" /> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member StartsWith : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.StartsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-569">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-569">The type of elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-570">要搜索的只读字符跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-570">The read-only character span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-571">要在 <paramref name="span" /> 的开头搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-571">A sequence to search for at the start of <paramref name="span" />.</span></span></param>
        <summary><span data-ttu-id="eebed-572">确定指定的序列是否出现在只读跨度的开头。</span><span class="sxs-lookup"><span data-stu-id="eebed-572">Determines whether a specified sequence appears at the start of a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-573">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-573"><see langword="true" /> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartsWith(Of T As IEquatable(Of T)) (span As Span(Of T), value As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static bool StartsWith(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member StartsWith : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; bool (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.StartsWith (span, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-574">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-574">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-575">要搜索的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-575">The span to search.</span></span></param>
        <param name="value"><span data-ttu-id="eebed-576">要在 <paramref name="span" /> 的开头搜索的序列。</span><span class="sxs-lookup"><span data-stu-id="eebed-576">A sequence to search for at the start of <paramref name="span" />.</span></span></param>
        <summary><span data-ttu-id="eebed-577">确定指定的序列是否出现在跨度的开头。</span><span class="sxs-lookup"><span data-stu-id="eebed-577">Determines whether a specified sequence appears at the start of a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-578">如果 <paramref name="value" /> 与 <paramref name="span" /> 的开头匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="eebed-578"><see langword="true" /> if <paramref name="value" /> matches the beginning of <paramref name="span" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static int ToLower (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToLower(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLower (source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToLower(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * System.Globalization.CultureInfo -&gt; int" Usage="System.MemoryExtensions.ToLower (source, destination, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="eebed-579">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-579">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-580">包含转换后的字符的目标跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-580">The destination span which contains the transformed characters.</span></span></param>
        <param name="culture"><span data-ttu-id="eebed-581">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="eebed-581">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="eebed-582">请将源跨度中的字符复制到目标中，并使用指定区域性的大小写规则将每个字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="eebed-582">Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="eebed-583">写入目标跨度的字符数。</span><span class="sxs-lookup"><span data-stu-id="eebed-583">The number of characters written into the destination span.</span></span> <span data-ttu-id="eebed-584">如果目标太小，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-584">If the destination is too small, returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-585">如果`culture`为`null` ,<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType>则将使用。</span><span class="sxs-lookup"><span data-stu-id="eebed-585">If `culture` is `null`, <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> will be used.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eebed-586">源和目标缓冲区重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-586">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static int ToLowerInvariant (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToLowerInvariant(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLowerInvariant (source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToLowerInvariant(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; -&gt; int" Usage="System.MemoryExtensions.ToLowerInvariant (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="eebed-587">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-587">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-588">包含转换后的字符的目标跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-588">The destination span which contains the transformed characters.</span></span></param>
        <summary><span data-ttu-id="eebed-589">请将源跨度中的字符复制到目标中，并使用固定区域性的大小写规则将每个字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="eebed-589">Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="eebed-590">写入目标跨度的字符数。</span><span class="sxs-lookup"><span data-stu-id="eebed-590">The number of characters written into the destination span.</span></span> <span data-ttu-id="eebed-591">如果目标太小，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-591">If the destination is too small, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eebed-592">源和目标缓冲区重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-592">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static int ToUpper (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToUpper(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToUpper (source As ReadOnlySpan(Of Char), destination As Span(Of Char), culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToUpper(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * System.Globalization.CultureInfo -&gt; int" Usage="System.MemoryExtensions.ToUpper (source, destination, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="eebed-593">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-593">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-594">包含转换后的字符的目标跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-594">The destination span which contains the transformed characters.</span></span></param>
        <param name="culture"><span data-ttu-id="eebed-595">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="eebed-595">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="eebed-596">请将源跨度中的字符复制到目标中，并使用指定区域性的大小写规则将每个字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="eebed-596">Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="eebed-597">写入目标跨度的字符数。</span><span class="sxs-lookup"><span data-stu-id="eebed-597">The number of characters written into the destination span.</span></span> <span data-ttu-id="eebed-598">如果目标太小，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-598">If the destination is too small, returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-599">如果`culture`为`null` ,<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType>则将使用。</span><span class="sxs-lookup"><span data-stu-id="eebed-599">If `culture` is `null`, <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> will be used.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eebed-600">源和目标缓冲区重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-600">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static int ToUpperInvariant (this ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToUpperInvariant(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToUpperInvariant (source As ReadOnlySpan(Of Char), destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToUpperInvariant(ReadOnlySpan&lt;char&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; -&gt; int" Usage="System.MemoryExtensions.ToUpperInvariant (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="eebed-601">源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-601">The source span.</span></span></param>
        <param name="destination"><span data-ttu-id="eebed-602">包含转换后的字符的目标跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-602">The destination span which contains the transformed characters.</span></span></param>
        <summary><span data-ttu-id="eebed-603">请将源跨度中的字符复制到目标中，并使用固定区域性的大小写规则将每个字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="eebed-603">Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="eebed-604">写入目标跨度的字符数。</span><span class="sxs-lookup"><span data-stu-id="eebed-604">The number of characters written into the destination span.</span></span> <span data-ttu-id="eebed-605">如果目标太小，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="eebed-605">If the destination is too small, returns -1.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eebed-606">源和目标缓冲区重叠。</span><span class="sxs-lookup"><span data-stu-id="eebed-606">The source and destination buffers overlap.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; Trim (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; Trim(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; Trim(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.Trim memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-607">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-607">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-608">删除字符内存区域中的所有前导和尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-608">Removes all leading and trailing whitespace characters from a character memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-609">剪裁后的字符内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-609">The trimmed character memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; Trim (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; Trim(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; Trim(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.Trim memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-610">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-610">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-611">删除只读字符内存区域中的所有前导和尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-611">Removes all leading and trailing whitespace characters from a read-only character memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-612">剪裁后的字符内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-612">The trimmed character memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-613">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-613">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-614">删除只读字符跨度中的所有前导和尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-614">Removes all leading and trailing whitespace characters from a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-615">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-615">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; Trim (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; Trim(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; Trim(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.Trim span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-616">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-616">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-617">删除字符跨度中的所有前导和尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-617">Removes all leading and trailing whitespace characters from a character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-618">剪裁后的字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-618">The trimmed character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-619">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-619">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="eebed-620">要查找和删除的指定字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-620">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-621">删除只读字符跨度中的指定字符的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-621">Removes all leading and trailing occurrences of a specified character from a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-622">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-622">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; Trim (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; Trim(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; Trim(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.Trim (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-623">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-623">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="eebed-624">包含要删除的字符集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-624">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-625">从只读字符跨度中删除在只读跨度中指定的一组字符的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-625">Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-626">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-626">The trimmed read-only character span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-627">如果`trimChars`为空, 则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-627">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Trim&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; Trim(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-628">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-628">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-629">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-629">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-630">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-630">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-631">从内存区域中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-631">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-632">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-632">The trimmed memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-633">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-633">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Trim&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; Trim(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-634">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-634">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-635">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-635">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-636">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-636">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-637">删除内存区域中的指定元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-637">Removes all leading and trailing occurrences of a specified element from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-638">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-638">The trimmed memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; Trim&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; Trim(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-639">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-639">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-640">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-640">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-641">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-641">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-642">从只读内存区域中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-642">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-643">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-643">The trimmed read-only memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-644">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-644">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; Trim&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; Trim(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-645">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-645">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-646">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-646">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-647">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-647">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-648">删除只读内存区域中的指定元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-648">Removes all leading and trailing occurrences of a specified element from a read-only memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-649">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-649">The trimmed read-only memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Trim&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; Trim(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-650">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-650">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-651">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-651">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-652">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-652">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-653">从只读跨度中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-653">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-654">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-654">The trimmed read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-655">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-655">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Trim&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; Trim(ReadOnlySpan&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-656">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-656">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-657">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-657">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-658">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-658">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-659">删除只读跨度中的指定元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-659">Removes all leading and trailing occurrences of a specified element from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-660">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-660">The trimmed read-only span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Trim&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (span As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; Trim(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-661">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-661">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-662">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-662">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-663">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-663">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-664">从跨度中删除在只读跨度中指定的一组元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-664">Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-665">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-665">The trimmed span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-666">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-666">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Trim&lt;T&gt; (this Span&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; Trim&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Trim(Of T As IEquatable(Of T)) (span As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; Trim(Span&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member Trim : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.Trim (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-667">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-667">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-668">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-668">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-669">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-669">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-670">删除跨度中的指定元素的所有前导和尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-670">Removes all leading and trailing occurrences of a specified element from a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-671">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-671">The trimmed span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; TrimEnd (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; TrimEnd(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; TrimEnd(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-672">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-672">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-673">删除字符内存区域中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-673">Removes all trailing whitespace characters from a character memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-674">剪裁后的字符内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-674">The trimmed character memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimEnd (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; TrimEnd(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-675">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-675">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-676">删除只读字符内存区域中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-676">Removes all trailing whitespace characters from a read-only character memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-677">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-677">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-678">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-678">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-679">删除只读字符跨度中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-679">Removes all trailing whitespace characters from a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-680">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-680">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; TrimEnd (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; TrimEnd(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; TrimEnd(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-681">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-681">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-682">删除字符跨度中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-682">Removes all trailing whitespace characters from a character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-683">剪裁后的字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-683">The trimmed character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-684">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-684">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="eebed-685">要查找和删除的指定字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-685">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-686">删除只读跨度中的指定字符的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-686">Removes all trailing occurrences of a specified character from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-687">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-687">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEnd (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEnd(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimEnd(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimEnd (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-688">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-688">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="eebed-689">包含要删除的字符集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-689">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-690">从只读字符跨度中删除在只读跨度中指定的一组字符的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-690">Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="eebed-691">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-691">The trimmed read-only character span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-692">如果`trimChars`为空, 则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-692">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimEnd&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimEnd(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-693">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-693">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-694">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-694">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-695">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-695">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-696">从内存区域中删除在只读跨度中指定的一组元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-696">Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-697">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-697">The trimmed memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-698">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-698">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimEnd&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimEnd(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-699">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-699">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-700">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-700">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-701">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-701">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-702">删除字符内存区域中的指定元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-702">Removes all trailing occurrences of a specified element from a character memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-703">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-703">The trimmed memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimEnd(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-704">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-704">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-705">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-705">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-706">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-706">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-707">从只读内存区域中删除在只读跨度中指定的一组元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-707">Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-708">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-708">The trimmed read-only memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-709">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-709">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimEnd(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-710">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-710">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-711">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-711">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-712">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-712">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-713">删除只读内存区域中的指定元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-713">Removes all trailing occurrences of a specified element from a read-only memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-714">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-714">The trimmed read-only memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimEnd(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-715">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-715">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-716">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-716">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-717">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-717">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-718">从只读跨度中删除在只读跨度中指定的一组元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-718">Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-719">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-719">The trimmed read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-720">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-720">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimEnd&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimEnd(ReadOnlySpan&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-721">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-721">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-722">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-722">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-723">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-723">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-724">删除只读跨度中的指定元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-724">Removes all trailing occurrences of a specified element from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-725">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-725">The trimmed read-only span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimEnd&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (span As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimEnd(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-726">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-726">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-727">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-727">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-728">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-728">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-729">从跨度中删除在只读跨度中指定的一组元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-729">Removes all trailing occurrences of a set of elements specified in a read-only span from a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-730">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-730">The trimmed span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-731">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-731">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimEnd&lt;T&gt; (this Span&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimEnd&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimEnd(Of T As IEquatable(Of T)) (span As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimEnd(Span&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimEnd : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimEnd (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-732">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-732">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-733">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-733">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-734">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-734">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-735">删除跨度中的指定元素的所有尾随出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-735">Removes all trailing occurrences of a specified element from a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-736">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-736">The trimmed span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static Memory&lt;char&gt; TrimStart (this Memory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;char&gt; TrimStart(valuetype System.Memory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (memory As Memory(Of Char)) As Memory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;char&gt; TrimStart(Memory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;char&gt; -&gt; Memory&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-737">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-737">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-738">删除内存区域中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-738">Removes all leading whitespace characters from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-739">剪裁后的字符内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-739">The trimmed character memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;char&gt; TrimStart (this ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;char&gt; TrimStart(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (memory As ReadOnlyMemory(Of Char)) As ReadOnlyMemory(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;char&gt; TrimStart(ReadOnlyMemory&lt;char&gt; memory);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;char&gt; -&gt; ReadOnlyMemory&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="eebed-740">从中删除字符的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-740">The source memory from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-741">删除只读内存区域中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-741">Removes all leading whitespace characters from a read-only memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-742">剪裁后的只读字符内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-742">The trimmed read-only character memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-743">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-743">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-744">删除只读跨度中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-744">Removes all leading whitespace characters from a read-only span.</span></span></summary>
        <returns><span data-ttu-id="eebed-745">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-745">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static Span&lt;char&gt; TrimStart (this Span&lt;char&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;char&gt; TrimStart(valuetype System.Span`1&lt;char&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As Span(Of Char)) As Span(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;char&gt; TrimStart(Span&lt;char&gt; span);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;char&gt; -&gt; Span&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Char&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-746">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-746">The source span from which the characters are removed.</span></span></param>
        <summary><span data-ttu-id="eebed-747">删除跨度中的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-747">Removes all leading whitespace characters from a span.</span></span></summary>
        <returns><span data-ttu-id="eebed-748">剪裁后的字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-748">The trimmed character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span, char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char), trimChar As Char) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span, char trimChar);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; * char -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart (span, trimChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-749">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-749">The source span from which the character is removed.</span></span></param>
        <param name="trimChar"><span data-ttu-id="eebed-750">要查找和删除的指定字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-750">The specified character to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-751">删除跨度中的指定字符的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-751">Removes all leading occurrences of a specified character from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-752">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-752">The trimmed read-only character span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimStart (this ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimStart(valuetype System.ReadOnlySpan`1&lt;char&gt; span, valuetype System.ReadOnlySpan`1&lt;char&gt; trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart (span As ReadOnlySpan(Of Char), trimChars As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;char&gt; TrimStart(ReadOnlySpan&lt;char&gt; span, ReadOnlySpan&lt;char&gt; trimChars);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.MemoryExtensions.TrimStart (span, trimChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Char&gt;" RefType="this" />
        <Parameter Name="trimChars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="span"><span data-ttu-id="eebed-753">从中删除字符的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-753">The source span from which the characters are removed.</span></span></param>
        <param name="trimChars"><span data-ttu-id="eebed-754">包含要删除的字符集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-754">The span which contains the set of characters to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-755">从跨度中删除在只读跨度中指定的一组字符的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-755">Removes all leading occurrences of a set of characters specified in a read-only span from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-756">剪裁后的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-756">The trimmed read-only character span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-757">如果`trimChars`为空, 则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="eebed-757">If `trimChars` is empty, whitespace characters are removed instead.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimStart&lt;T&gt; (this Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElements As ReadOnlySpan(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimStart(Memory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-758">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-758">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-759">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-759">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-760">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-760">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-761">从内存区域中删除在只读跨度中指定的一组元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-761">Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-762">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-762">The trimmed memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-763">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-763">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; TrimStart&lt;T&gt; (this Memory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Memory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As Memory(Of T), trimElement As T) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Memory&lt;T&gt; TrimStart(Memory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Memory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-764">内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-764">The type of the elements in the memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-765">从中删除元素的源内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-765">The source memory region from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-766">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-766">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-767">删除内存区域中的指定元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-767">Removes all leading occurrences of a specified element from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-768">剪裁后的内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-768">The trimmed memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimStart(ReadOnlyMemory&lt;T&gt; memory, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-769">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-769">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-770">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-770">The source memory from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-771">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-771">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-772">从内存区域中删除在只读跨度中指定的一组元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-772">Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-773">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-773">The trimmed read-only memory region.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-774">如果`trimElements`为空, 则返回未修改的内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-774">If `trimElements` is empty, the memory is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlyMemory&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlyMemory&lt;T&gt; memory, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlyMemory`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (memory As ReadOnlyMemory(Of T), trimElement As T) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlyMemory&lt;T&gt; TrimStart(ReadOnlyMemory&lt;T&gt; memory, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlyMemory&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (memory, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-775">只读内存区域中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-775">The type of the elements in the read-only memory region.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="eebed-776">从中删除元素的源内存。</span><span class="sxs-lookup"><span data-stu-id="eebed-776">The source memory from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-777">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-777">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-778">删除内存区域中的指定元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-778">Removes all leading occurrences of a specified element from a memory region.</span></span></summary>
        <returns><span data-ttu-id="eebed-779">剪裁后的只读内存区域。</span><span class="sxs-lookup"><span data-stu-id="eebed-779">The trimmed read-only memory region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElements As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimStart(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-780">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-780">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-781">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-781">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-782">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-782">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-783">从跨度中删除在只读跨度中指定的一组元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-783">Removes all leading occurrences of a set of elements specified in a read-only span from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-784">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-784">The trimmed read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-785">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-785">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; TrimStart&lt;T&gt; (this ReadOnlySpan&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (span As ReadOnlySpan(Of T), trimElement As T) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static ReadOnlySpan&lt;T&gt; TrimStart(ReadOnlySpan&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-786">只读范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-786">The type of the elements in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-787">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-787">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-788">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-788">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-789">删除跨度中的指定元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-789">Removes all leading occurrences of a specified element from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-790">剪裁后的只读范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-790">The trimmed read-only span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimStart&lt;T&gt; (this Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, valuetype System.ReadOnlySpan`1&lt;!!T&gt; trimElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (span As Span(Of T), trimElements As ReadOnlySpan(Of T)) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimStart(Span&lt;T&gt; span, ReadOnlySpan&lt;T&gt; trimElements);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (span, trimElements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElements" Type="System.ReadOnlySpan&lt;T&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-791">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-791">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-792">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-792">The source span from which the elements are removed.</span></span></param>
        <param name="trimElements"><span data-ttu-id="eebed-793">包含要删除的元素集的跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-793">The span which contains the set of elements to remove.</span></span></param>
        <summary><span data-ttu-id="eebed-794">从跨度中删除在只读跨度中指定的一组元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-794">Removes all leading occurrences of a set of elements specified in a read-only span from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-795">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-795">The trimmed span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eebed-796">如果`trimElements`为空, 则返回未修改的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-796">If `trimElements` is empty, the span is returned unaltered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; TrimStart&lt;T&gt; (this Span&lt;T&gt; span, T trimElement) where T : IEquatable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; TrimStart&lt;(class System.IEquatable`1&lt;!!T&gt;) T&gt;(valuetype System.Span`1&lt;!!T&gt; span, !!T trimElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TrimStart(Of T As IEquatable(Of T)) (span As Span(Of T), trimElement As T) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Span&lt;T&gt; TrimStart(Span&lt;T&gt; span, T trimElement);" />
      <MemberSignature Language="F#" Value="static member TrimStart : Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; * 'T -&gt; Span&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; (requires 'T :&gt; IEquatable&lt;'T&gt;)" Usage="System.MemoryExtensions.TrimStart (span, trimElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="trimElement" Type="T" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="eebed-797">范围中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="eebed-797">The type of the elements in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="eebed-798">从中删除元素的源跨度。</span><span class="sxs-lookup"><span data-stu-id="eebed-798">The source span from which the element is removed.</span></span></param>
        <param name="trimElement"><span data-ttu-id="eebed-799">要查找和删除的指定元素。</span><span class="sxs-lookup"><span data-stu-id="eebed-799">The specified element to look for and remove.</span></span></param>
        <summary><span data-ttu-id="eebed-800">删除跨度中的指定元素的所有前导出现次数。</span><span class="sxs-lookup"><span data-stu-id="eebed-800">Removes all leading occurrences of a specified element from the span.</span></span></summary>
        <returns><span data-ttu-id="eebed-801">剪裁后的范围。</span><span class="sxs-lookup"><span data-stu-id="eebed-801">The trimmed span.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

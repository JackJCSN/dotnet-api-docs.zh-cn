<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405989" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种用于释放非托管资源的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口的主要用途是释放非托管资源。 当不再使用对象时, 垃圾回收器会自动释放分配给托管对象的内存。 但是, 无法预测何时会进行垃圾回收。 而且, 垃圾回收器不知道非托管资源, 如窗口句柄, 或者打开文件和流。  
  
 使用此<xref:System.IDisposable.Dispose%2A>接口的方法可与垃圾回收器一起显式释放非托管资源。 当不再需要对象时, 对象的使用者可以调用此方法。  
  
> [!WARNING]
>  这是将<xref:System.IDisposable>接口添加到现有类的一项重大更改。 由于您的类型的预先存在的使用者<xref:System.IDisposable.Dispose%2A>无法调用, 因此您不能确定您的类型持有的非托管资源是否会被释放。  
  
 由于实现在不再需要某个实例所拥有的资源时由该类型的使用者调用, 因此应将托管对象包装<xref:System.Runtime.InteropServices.SafeHandle>在中 (建议的替代方法), 或应重写<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Object.Finalize%2A?displayProperty=nameWithType>当使用者忘记调用<xref:System.IDisposable.Dispose%2A>时, 释放非托管资源。  
  
> [!IMPORTANT]
>  在 .NET Framework 中, C++编译器支持对资源进行确定性处置, 并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 有关如何使用此接口和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法的详细讨论, 请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)主题。  
  
## <a name="using-an-object-that-implements-idisposable"></a>使用实现 IDisposable 的对象  
 如果你的应用程序只使用一个实现<xref:System.IDisposable>接口的对象, 则在使用完对象后, 应调用该对象的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现。 根据你的编程语言, 你可以通过以下两种方式之一执行此操作:  
  
-   通过使用语言构造 (如和中`using` C#的语句) Visual Basic。  
  
-   通过<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> `try` 在块中包装对/实现的调用。`finally`  
  
> [!NOTE]
>  用于实现<xref:System.IDisposable>的类型的文档说明事实, 并包括调用其<xref:System.IDisposable.Dispose%2A>实现的提醒。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C#和 Visual Basic Using 语句  
 如果你的语言支持构造 (例如中[](~/docs/csharp/language-reference/keywords/using.md) C#的 using 语句) 和[using](~/docs/visual-basic/language-reference/statements/using-statement.md)语句 Visual Basic 中, 则可以使用它, 而不是<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>显式调用自己。 下面的示例使用此方法来定义`WordCount`保留文件的信息的类和其中的单词数。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using`语句实际上是语法上的便利。 在编译时, 语言编译器将为`try` / `finally`块实现中间语言 (IL)。  
  
 有关`using`语句的详细信息, 请参阅[using 语句](~/docs/visual-basic/language-reference/statements/using-statement.md)或[using 语句](~/docs/csharp/language-reference/keywords/using-statement.md)主题。  
  
### <a name="the-tryfinally-block"></a>Try/Finally 块  
 如果编程语言不支持像或`using` Visual Basic 中C#的语句这样的构造, 或者不想使用它, <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>则可以从`finally` `try` /语句。 `finally` 下面的示例将上`using`一示例`try` / `finally`中的块替换为块。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 有关`finally`模式的详细信息`try` / , 请参阅[Try .。。Catch .。。Finally 语句](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try finally](~/docs/csharp/language-reference/keywords/try-finally.md)或[try-catch finally 语句](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。  
  
## <a name="implementing-idisposable"></a>正在实现 IDisposable  
 仅当类型<xref:System.IDisposable>直接使用非托管资源时, 才应实现。 当不再需要该实例时, 类型<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>使用者可以调用你的实现来释放资源。 若要处理其无法调用<xref:System.IDisposable.Dispose%2A>的情况, 您应该使用从<xref:System.Runtime.InteropServices.SafeHandle>派生的类来包装非托管资源, <xref:System.Object.Finalize%2A?displayProperty=nameWithType>或者您应该为引用类型重写方法。 在任一情况下, <xref:System.IDisposable.Dispose%2A>使用方法可以在使用非托管资源 (例如释放、释放或重置非托管资源) 后执行任何需要的清理。  
  
> [!IMPORTANT]
>  如果要定义一个使用非托管资源的基类, 并且该基类具有、或可能已释放的子类, 则应实现<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法并提供的第二个`Dispose`重载, 如以下区.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 和继承层次结构  
 具有应可释放的子类的基类必须按如下<xref:System.IDisposable>方式实现。 当你对任何不是<xref:System.IDisposable> `sealed` (`NotInheritable`在 Visual Basic 中) 的类型实现时, 都应使用此模式。  
  
-   它应提供一个公共、非虚拟<xref:System.IDisposable.Dispose>方法和受保护的虚拟`Dispose(Boolean disposing)`方法。  
  
-   方法必须调用`Dispose(true)` , 并且应禁止终止以提高性能。 <xref:System.IDisposable.Dispose>  
  
-   基类型不应包括任何终结器。  
  
 下面的代码段反映了基类的释放模式。 它假定您的类型不重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 如果重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法, 则类应实现以下模式。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 子类应实现以下可释放模式：  
  
-   它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。  
  
-   如果需要他们可以提供终结器。 终结器必须调用 `Dispose(false)`。  
  
 请注意, 派生类本身并不实现<xref:System.IDisposable>接口, 并且不包含无参数<xref:System.IDisposable.Dispose%2A>方法。 它们仅重写基类`Dispose(Boolean)`方法。  
  
 下面的代码段反映派生类的释放模式。 它假定您的类型不重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 下面的示例演示如何创建实现<xref:System.IDisposable>接口的资源类。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">实现 Dispose 方法</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法可关闭或释放由实现该接口的类的实例所持有的非托管资源, 如文件、流和句柄。 按照约定, 此方法用于与释放对象占用的资源或准备要重用的对象相关联的所有任务。  
  
> [!WARNING]
>  如果使用的是实现<xref:System.IDisposable>接口的类, 则应在使用完类后调用其<xref:System.IDisposable.Dispose%2A>实现。 有关详细信息, 请参阅<xref:System.IDisposable>主题中的 "使用实现 IDisposable 的对象" 一节。  
  
 实现此方法时, 请确保通过包含层次结构传播调用来释放所有保存的资源。 例如, 如果对象 A 分配一个对象 b, 并且对象 b 分配一个对象 C, 则的<xref:System.IDisposable.Dispose%2A>实现必须在 B 上调用<xref:System.IDisposable.Dispose%2A> , <xref:System.IDisposable.Dispose%2A>后者必须在 C 上调用。  
  
> [!IMPORTANT]
>  C++编译器支持对资源进行确定性处置, 并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 如果基类实现<xref:System.IDisposable.Dispose%2A> <xref:System.IDisposable>, 则对象还必须调用其基类的方法。 有关在基类及其子类<xref:System.IDisposable>上实现的详细信息, 请参阅<xref:System.IDisposable>主题中的 "IDisposable and 继承性层次结构" 部分。  
  
 如果多次调用对象<xref:System.IDisposable.Dispose%2A>的方法, 则对象必须忽略第一个调用之后的所有调用。 如果对象的<xref:System.IDisposable.Dispose%2A>方法被多次调用, 则该对象不得引发异常。 除<xref:System.IDisposable.Dispose%2A>外的<xref:System.ObjectDisposedException>实例方法可以在已释放资源时引发。  
  
 用户可能希望资源类型使用特定约定来表示已分配状态与已释放状态。 这种情况的一个示例是流类, 通常将其视为 "打开" 或 "已关闭"。 具有此类约定的类的实施者可能选择使用自定义名称 (例如`Close`) 来实现公共方法, 以<xref:System.IDisposable.Dispose%2A>调用方法。  
  
 由于方法必须被显式调用, 因此, 始终不会释放非托管资源, 因为对象的使用者无法调用其<xref:System.IDisposable.Dispose%2A>方法。 <xref:System.IDisposable.Dispose%2A> 可以通过两种方法来避免这种情况:  
  
-   在派生自<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>的对象中包装托管资源。 然后<xref:System.IDisposable.Dispose%2A> <xref:System.IDisposable.Dispose%2A> ,你<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>的实现将调用实例的方法。 有关详细信息, 请参阅<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主题中的 "SafeHandle 替代项" 部分。  
  
-   在未调用时<xref:System.IDisposable.Dispose%2A> , 实现终结器以释放资源。 默认情况下, 垃圾回收器在回收其内存之前会自动调用对象的终结器。 但是, 如果<xref:System.IDisposable.Dispose%2A>已调用方法, 则垃圾回收器通常不需要调用已释放对象的终结器。 为了防止自动终止, <xref:System.IDisposable.Dispose%2A>实现可以<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>调用方法。  
  
 使用访问非托管资源的对象 (例如<xref:System.IO.StreamWriter>) 时, 一个好的做法是`using`使用语句创建实例。 语句会自动关闭流, 并在使用对象的代码已完成时调用<xref:System.IDisposable.Dispose%2A>。 `using` 有关示例, 请参阅<xref:System.IO.StreamWriter>类。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">实现 Dispose 方法</related>
      </Docs>
    </Member>
  </Members>
</Type>

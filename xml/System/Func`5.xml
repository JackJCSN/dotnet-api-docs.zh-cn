<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3412e0f08f8a89543f1dd906195dcf268ed186c9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420652" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg4" Type="T4" Index="3" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="f7e23-101">此委托封装的方法的第一个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="f7e23-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="f7e23-102">此委托封装的方法的第二个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="f7e23-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="f7e23-103">此委托封装的方法的第三个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="f7e23-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="f7e23-104">此委托封装的方法的第四个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="f7e23-104">The type of the fourth parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="f7e23-105">此委托封装的方法的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="f7e23-105">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="f7e23-106">此委托封装的方法的第一个参数。</span><span class="sxs-lookup"><span data-stu-id="f7e23-106">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="f7e23-107">此委托封装的方法的第二个参数。</span><span class="sxs-lookup"><span data-stu-id="f7e23-107">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="f7e23-108">此委托封装的方法的第三个参数。</span><span class="sxs-lookup"><span data-stu-id="f7e23-108">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg4"><span data-ttu-id="f7e23-109">此委托封装的方法的第四个参数。</span><span class="sxs-lookup"><span data-stu-id="f7e23-109">The fourth parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="f7e23-110">封装一个具有四个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</span><span class="sxs-lookup"><span data-stu-id="f7e23-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="f7e23-111">此委托封装的方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="f7e23-111">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7e23-112">您可以使用此委托来表示一个方法, 该方法可作为参数传递, 而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="f7e23-113">封装的方法必须对应于由此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="f7e23-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="f7e23-114">这意味着封装的方法必须具有四个参数, 每个参数都按值传递给它, 并且必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="f7e23-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7e23-115">若要引用具有四`void`个参数并返回 (或在 Visual Basic 中声明`Sub`为而不是作为`Function`) 的方法, 请改用泛型<xref:System.Action%604>委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="f7e23-116">使用<xref:System.Func%605>委托时, 无需显式定义使用四个参数封装方法的委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="f7e23-117">例如, 下面的代码显式声明一个名为`Searcher`的泛型委托, 并向其委托实例分配对该<xref:System.String.IndexOf%2A>方法的引用。</span><span class="sxs-lookup"><span data-stu-id="f7e23-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="f7e23-118">下面的示例通过实例化<xref:System.Func%605>委托来简化此代码, 而不是显式定义一个新委托并为其分配一个命名方法。</span><span class="sxs-lookup"><span data-stu-id="f7e23-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="f7e23-119">可在中C#将<xref:System.Func%605>委托与匿名方法一起使用, 如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="f7e23-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="f7e23-120">(有关匿名方法的介绍, 请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="f7e23-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="f7e23-121">你还可以将 lambda 表达式分配给<xref:System.Func%605>委托, 如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="f7e23-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="f7e23-122">(有关 lambda 表达式的介绍, 请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="f7e23-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="f7e23-123">Lambda 表达式的基础类型是一个泛型`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="f7e23-124">这样, 便可以将 lambda 表达式作为参数传递, 而无需将其显式分配给委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="f7e23-125">具体而言, 因为<xref:System.Linq>命名空间中的许多类型的方法都有`Func`参数, 所以可以将这些方法传递给 lambda `Func`表达式, 而无需显式实例化委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7e23-126">下面的示例演示如何声明和使用<xref:System.Func%603>委托。</span><span class="sxs-lookup"><span data-stu-id="f7e23-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="f7e23-127">此示例声明一个<xref:System.Func%603>变量, 并为其分配一个 lambda 表达式, <xref:System.String>该表达式采用<xref:System.Int32>值并将值作为参数。</span><span class="sxs-lookup"><span data-stu-id="f7e23-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="f7e23-128">如果<xref:System.String>参数的长度`true`等于<xref:System.Int32>参数的值, 则 lambda 表达式将返回。</span><span class="sxs-lookup"><span data-stu-id="f7e23-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="f7e23-129">随后在查询中使用封装此方法的委托来筛选字符串数组中的字符串。</span><span class="sxs-lookup"><span data-stu-id="f7e23-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="f7e23-130">Lambda 表达式（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="f7e23-130">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="f7e23-131">Lambda 表达式</span><span class="sxs-lookup"><span data-stu-id="f7e23-131">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="f7e23-132">委托（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="f7e23-132">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="f7e23-133">Visual Basic 中的委托</span><span class="sxs-lookup"><span data-stu-id="f7e23-133">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>

<Type Name="String" FullName="System.String">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa874c4bbfa09d88cc21a07aa1c7ad4600db6168" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67245098" /></Metadata><TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" />
  <TypeSignature Language="DocId" Value="T:System.String" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEquatable&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b0200-101">将文本表示为 UTF-16 代码单元的序列。</span><span class="sxs-lookup"><span data-stu-id="b0200-101">Represents text as a sequence of UTF-16 code units.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="b0200-102">字符串是用于表示文本字符的序列集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-102">A string is a sequential collection of characters that is used to represent text.</span></span> <span data-ttu-id="b0200-103">一个<xref:System.String>对象是的有序集合<xref:System.Char?displayProperty=nameWithType>这些对象表示一个字符串;<xref:System.Char?displayProperty=nameWithType>对象对应于 utf-16 代码单元。</span><span class="sxs-lookup"><span data-stu-id="b0200-103">A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=nameWithType> objects that represent a string; a <xref:System.Char?displayProperty=nameWithType> object corresponds to a UTF-16 code unit.</span></span> <span data-ttu-id="b0200-104">值<xref:System.String>对象为的有序集合的内容<xref:System.Char?displayProperty=nameWithType>对象和值是不可变 （即，它是只读的）。</span><span class="sxs-lookup"><span data-stu-id="b0200-104">The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=nameWithType> objects, and that value is immutable (that is, it is read-only).</span></span> <span data-ttu-id="b0200-105">字符串的不可变性的详细信息，请参阅[不变性和 StringBuilder 类](#Immutability)本主题后面的部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-105">For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic.</span></span> <span data-ttu-id="b0200-106">最大大小<xref:System.String>对象在内存中的为 2 GB 或大约 1 亿个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-106">The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.</span></span>  
  
[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

 <span data-ttu-id="b0200-107">本节内容：</span><span class="sxs-lookup"><span data-stu-id="b0200-107">In this section:</span></span>  
  
 <span data-ttu-id="b0200-108">[实例化字符串对象](#Instantiation) </span><span class="sxs-lookup"><span data-stu-id="b0200-108">[Instantiating a String object](#Instantiation) </span></span>  
 <span data-ttu-id="b0200-109">[Char 对象和 Unicode 字符](#Characters) </span><span class="sxs-lookup"><span data-stu-id="b0200-109">[Char objects and Unicode characters](#Characters) </span></span>  
 <span data-ttu-id="b0200-110">[字符串和 Unicode 标准](#Unicode) </span><span class="sxs-lookup"><span data-stu-id="b0200-110">[Strings and The Unicode Standard](#Unicode) </span></span>  
 <span data-ttu-id="b0200-111">[字符串和嵌入的 null 字符](#EmbeddedNulls) </span><span class="sxs-lookup"><span data-stu-id="b0200-111">[Strings and embedded null characters](#EmbeddedNulls) </span></span>  
 <span data-ttu-id="b0200-112">[字符串和已分区索引](#Indexes) </span><span class="sxs-lookup"><span data-stu-id="b0200-112">[Strings and indexes](#Indexes) </span></span>  
 <span data-ttu-id="b0200-113">[Null 字符串和空字符串](#Nulls) </span><span class="sxs-lookup"><span data-stu-id="b0200-113">[Null strings and empty strings](#Nulls) </span></span>  
 <span data-ttu-id="b0200-114">[不变性和 StringBuilder 类](#Immutability) </span><span class="sxs-lookup"><span data-stu-id="b0200-114">[Immutability and the StringBuilder class](#Immutability) </span></span>  
 <span data-ttu-id="b0200-115">[区分区域性的操作与序号](#CultureSensitive) </span><span class="sxs-lookup"><span data-stu-id="b0200-115">[Ordinal vs. culture-sensitive operations](#CultureSensitive) </span></span>  
 <span data-ttu-id="b0200-116">[规范化](#Normalization) </span><span class="sxs-lookup"><span data-stu-id="b0200-116">[Normalization](#Normalization) </span></span>  
 [<span data-ttu-id="b0200-117">按类别的字符串操作</span><span class="sxs-lookup"><span data-stu-id="b0200-117">String operations by category</span></span>](#ByCategory)  
  
<a name="Instantiation"></a>   
## <a name="instantiating-a-string-object"></a><span data-ttu-id="b0200-118">实例化字符串对象</span><span class="sxs-lookup"><span data-stu-id="b0200-118">Instantiating a String object</span></span>  
 <span data-ttu-id="b0200-119">可以实例化<xref:System.String>对象中的以下方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-119">You can instantiate a <xref:System.String> object in the following ways:</span></span>  
  
-   <span data-ttu-id="b0200-120">通过将分配一个字符串赋给<xref:System.String>变量。</span><span class="sxs-lookup"><span data-stu-id="b0200-120">By assigning a string literal to a <xref:System.String> variable.</span></span> <span data-ttu-id="b0200-121">这是用于创建一个字符串，最常使用的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-121">This is the most commonly used method for creating a string.</span></span> <span data-ttu-id="b0200-122">下面的示例使用分配来创建多个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-122">The following example uses assignment to create several strings.</span></span> <span data-ttu-id="b0200-123">请注意，在 C# 中，因为反斜杠 (\\) 是转义的字符，在字符串中的文本反斜杠必须进行转义或者整个字符串必须是@-quoted。</span><span class="sxs-lookup"><span data-stu-id="b0200-123">Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]
     [!code-csharp-interactive[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]
     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]  
  
-   <span data-ttu-id="b0200-124">通过调用<xref:System.String>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-124">By calling a <xref:System.String> class constructor.</span></span> <span data-ttu-id="b0200-125">下面的示例通过调用多个类构造函数实例化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-125">The following example instantiates strings by calling several class constructors.</span></span> <span data-ttu-id="b0200-126">请注意，一些构造函数包含指向字符数组或作为参数的有符号的字节数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-126">Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</span></span> <span data-ttu-id="b0200-127">Visual Basic 不支持对这些构造函数的调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-127">Visual Basic does not support calls to these constructors.</span></span> <span data-ttu-id="b0200-128">有关详细信息<xref:System.String>构造函数，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-128">For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]
     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]
     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]  
  
-   <span data-ttu-id="b0200-129">通过使用字符串串联运算符 (+ C# 中和 （& a) 或 + 在 Visual Basic 中) 中的任意组合创建单个字符串<xref:System.String>实例和字符串文本。</span><span class="sxs-lookup"><span data-stu-id="b0200-129">By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals.</span></span> <span data-ttu-id="b0200-130">下面的示例演示如何使用字符串串联运算符。</span><span class="sxs-lookup"><span data-stu-id="b0200-130">The following example illustrates the use of the string concatenation operator.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]
     [!code-csharp-interactive[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]
     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]  
  
-   <span data-ttu-id="b0200-131">通过检索属性或调用返回的字符串的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-131">By retrieving a property or calling a method that returns a string.</span></span> <span data-ttu-id="b0200-132">下面的示例使用的方法<xref:System.String>类，以从更大的字符串中提取子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-132">The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]
     [!code-csharp-interactive[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]
     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]  
  
-   <span data-ttu-id="b0200-133">通过调用将的值或对象转换为其字符串表示形式的格式设置方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-133">By calling a formatting method to convert a value or object to its string representation.</span></span> <span data-ttu-id="b0200-134">下面的示例使用[复合格式设置](~/docs/standard/base-types/composite-formatting.md)功能嵌入的两个对象的字符串表示形式转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-134">The following example uses the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]
     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]
     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]  
  
<a name="Characters"></a>   
## <a name="char-objects-and-unicode-characters"></a><span data-ttu-id="b0200-135">Char 对象和 Unicode 字符</span><span class="sxs-lookup"><span data-stu-id="b0200-135">Char objects and Unicode characters</span></span>  
 <span data-ttu-id="b0200-136">在字符串中的每个字符由 Unicode 标量值，也称为 Unicode 码位或序号 （数字） 值的 Unicode 字符的定义。</span><span class="sxs-lookup"><span data-stu-id="b0200-136">Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</span></span> <span data-ttu-id="b0200-137">每个码位编码使用 utf-16 编码，并且由表示编码的每个元素的数值<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-137">Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-138">注意，因为<xref:System.String>实例都包含 utf-16 代码单元的有序集合，可以将创建<xref:System.String>不是格式正确的 Unicode 字符串的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-138">Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string.</span></span> <span data-ttu-id="b0200-139">例如，就可以创建具有低代理项而无需相应的高代理项的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-139">For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</span></span> <span data-ttu-id="b0200-140">尽管某些方法，如编码和解码中的对象的方法<xref:System.Text>命名空间，可能会执行检查，以确保字符串格式不正确，<xref:System.String>类成员不能确保字符串是格式正确。</span><span class="sxs-lookup"><span data-stu-id="b0200-140">Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members don't ensure that a string is well-formed.</span></span>  
  
 <span data-ttu-id="b0200-141">将单个<xref:System.Char>对象通常表示单个码位; 也就是说的数值<xref:System.Char>等于码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-141">A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point.</span></span> <span data-ttu-id="b0200-142">例如，码位的字符"a"为 U + 0061。</span><span class="sxs-lookup"><span data-stu-id="b0200-142">For example, the code point for the character "a" is U+0061.</span></span> <span data-ttu-id="b0200-143">但是，代码点可能需要多个编码的元素 (多个<xref:System.Char>对象)。</span><span class="sxs-lookup"><span data-stu-id="b0200-143">However, a code point might require more than one encoded element (more than one <xref:System.Char> object).</span></span> <span data-ttu-id="b0200-144">Unicode 标准定义了两种类型的相对应的字符到多个<xref:System.Char>对象： graphemes，并对应于在 Unicode 辅助平面字符的 Unicode 补充码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-144">The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</span></span>  
  
-   <span data-ttu-id="b0200-145">表示基字符后跟一个或多个组合字符字形。</span><span class="sxs-lookup"><span data-stu-id="b0200-145">A grapheme is represented by a base character followed by one or more combining characters.</span></span> <span data-ttu-id="b0200-146">例如，由一个表示字符 ä<xref:System.Char>对象，其代码点为 U + 0061 跟一个<xref:System.Char>对象，其代码点为 U + 0308年。</span><span class="sxs-lookup"><span data-stu-id="b0200-146">For example, the character ä is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308.</span></span> <span data-ttu-id="b0200-147">此字符也可以定义由单个<xref:System.Char>具有码位 U + 00E4 的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-147">This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4.</span></span> <span data-ttu-id="b0200-148">如下面的示例所示，需要区分区域性的比较相等性指示这两种表示相等，尽管普通的序号比较则不然。</span><span class="sxs-lookup"><span data-stu-id="b0200-148">As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</span></span> <span data-ttu-id="b0200-149">但是，如果两个字符串进行规范化，序号比较还指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-149">However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</span></span> <span data-ttu-id="b0200-150">(有关规范化字符串的详细信息，请参阅[规范化](#Normalization)部分。)</span><span class="sxs-lookup"><span data-stu-id="b0200-150">(For more information on normalizing strings, see the [Normalization](#Normalization) section.)</span></span>  
  
     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]
     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]
     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]  
  
-   <span data-ttu-id="b0200-151">补充码位 （代理项对） 表示的 Unicode<xref:System.Char>对象，其码位是一个高代理项跟<xref:System.Char>对象，其码位是一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="b0200-151">A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate.</span></span> <span data-ttu-id="b0200-152">高代理项范围从 u+d800 到 U + DBFF 代码单元。</span><span class="sxs-lookup"><span data-stu-id="b0200-152">The code units of high surrogates range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="b0200-153">低代理项范围是从 U+DC00 到 U + DFFF 代码单元。</span><span class="sxs-lookup"><span data-stu-id="b0200-153">The code units of low surrogates range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="b0200-154">代理项对用于表示中 16 Unicode 辅助平面字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-154">Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</span></span> <span data-ttu-id="b0200-155">以下示例创建一个代理项字符并将其传递给<xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType>方法以确定它是否是代理项对。</span><span class="sxs-lookup"><span data-stu-id="b0200-155">The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> method to determine whether it is a surrogate pair.</span></span>  
  
     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]
     [!code-csharp-interactive[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]
     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]  
  
<a name="Unicode"></a>   
## <a name="strings-and-the-unicode-standard"></a><span data-ttu-id="b0200-156">字符串和 Unicode 标准</span><span class="sxs-lookup"><span data-stu-id="b0200-156">Strings and the Unicode Standard</span></span>  
 <span data-ttu-id="b0200-157">字符串中的字符都是 utf-16 编码代码单元，它们分别对应于<xref:System.Char>值。</span><span class="sxs-lookup"><span data-stu-id="b0200-157">Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.</span></span>  
  
 <span data-ttu-id="b0200-158">在字符串中的每个字符包含在.NET 中的关联的 Unicode 字符类别<xref:System.Globalization.UnicodeCategory>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-158">Each character in a string has an associated Unicode character category, which is represented in .NET by the <xref:System.Globalization.UnicodeCategory> enumeration.</span></span> <span data-ttu-id="b0200-159">可通过调用确定的字符或代理项对类别<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-159">The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> method.</span></span>  

[!INCLUDE[character-categories](~/includes/unicode-categories.md)]
  
 <span data-ttu-id="b0200-160">此外，.NET 支持的字符串比较和排序基于 Unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="b0200-160">In addition, .NET supports string comparison and sorting based on the Unicode standard.</span></span> <span data-ttu-id="b0200-161">通过.NET Framework 的版本中[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，.NET Framework 维护自己的字符串数据的表。</span><span class="sxs-lookup"><span data-stu-id="b0200-161">In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data.</span></span> <span data-ttu-id="b0200-162">这也是如此的开头的.NET framework 版本[!INCLUDE[net_v45](~/includes/net-v45-md.md)]Windows 7 上运行。</span><span class="sxs-lookup"><span data-stu-id="b0200-162">This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7.</span></span> <span data-ttu-id="b0200-163">从开始[!INCLUDE[net_v45](~/includes/net-v45-md.md)]Window 8 和更高版本的 Windows 操作系统上运行，运行时委托字符串比较和排序操作对操作系统。</span><span class="sxs-lookup"><span data-stu-id="b0200-163">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</span></span> <span data-ttu-id="b0200-164">在.NET Core 上的字符串比较和排序信息将由[International Components for Unicode](http://site.icu-project.org/)库。下表列出了版本的.NET 和 Unicode 标准的字符的比较和排序所基于的版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-164">On .NET Core, string comparison and sorting information is provided by  [International Components for Unicode](http://site.icu-project.org/) libraries.The following table lists the versions of .NET and the versions of the Unicode Standard on which character comparison and sorting are based.</span></span>  
  
|<span data-ttu-id="b0200-165">.NET 版本</span><span class="sxs-lookup"><span data-stu-id="b0200-165">.NET version</span></span>|<span data-ttu-id="b0200-166">Unicode 标准版本</span><span class="sxs-lookup"><span data-stu-id="b0200-166">Version of the Unicode Standard</span></span>|  
|----------------------------|-------------------------------------|  
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="b0200-167">Unicode 标准，版本 4.0.0</span><span class="sxs-lookup"><span data-stu-id="b0200-167">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|  
|<span data-ttu-id="b0200-168">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="b0200-168">The .NET Framework 2.0</span></span>|[<span data-ttu-id="b0200-169">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="b0200-169">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="b0200-170">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="b0200-170">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="b0200-171">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="b0200-171">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] <span data-ttu-id="b0200-172">和更高版本在 Windows 7</span><span class="sxs-lookup"><span data-stu-id="b0200-172">and later on Windows 7</span></span>|[<span data-ttu-id="b0200-173">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="b0200-173">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] <span data-ttu-id="b0200-174">和更高版本在 Windows 8 和更高版本的 Windows 操作系统</span><span class="sxs-lookup"><span data-stu-id="b0200-174">and later on Windows 8 and later Windows operating systems</span></span>|[<span data-ttu-id="b0200-175">Unicode 标准，版本 6.3.0</span><span class="sxs-lookup"><span data-stu-id="b0200-175">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|<span data-ttu-id="b0200-176">.NET Core（所有版本）</span><span class="sxs-lookup"><span data-stu-id="b0200-176">.NET Core (all versions)</span></span>|<span data-ttu-id="b0200-177">取决于基础操作系统支持的 Unicode 标准版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-177">Depends on the version of the Unicode Standard supported by the underlying operating system.</span></span>|

<a name="EmbeddedNulls"></a>   
## <a name="strings-and-embedded-null-characters"></a><span data-ttu-id="b0200-178">字符串和嵌入的 null 字符</span><span class="sxs-lookup"><span data-stu-id="b0200-178">Strings and embedded null characters</span></span>  
 <span data-ttu-id="b0200-179">在.NET 中，<xref:System.String>对象可以包含嵌入的 null 字符，作为字符串的长度的一部分进行计数。</span><span class="sxs-lookup"><span data-stu-id="b0200-179">In .NET, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length.</span></span> <span data-ttu-id="b0200-180">但是，在某些语言如 C 和C++，null 字符指示字符串; 的末尾它不被视为字符串的一部分，并不计为字符串的长度的一部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-180">However, in some languages such as C and C++, a null character indicates the end of a string; it is not considered a part of the string and is not counted as part of the string's length.</span></span> <span data-ttu-id="b0200-181">这意味着，以下常见假设该 C 和C++程序员或以 C 编写的库或C++有关可能会使字符串不一定是有效时应用于<xref:System.String>对象：</span><span class="sxs-lookup"><span data-stu-id="b0200-181">This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:</span></span>  
  
-   <span data-ttu-id="b0200-182">返回的值`strlen`或`wcslen`函数不一定等于<xref:System.String.Length%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-182">The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b0200-183">由创建的字符串`strcpy_s`或`wcscpy_s`函数不是由创建的字符串一定要完全相同<xref:System.String.Copy%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-183">The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b0200-184">应确保该本机 C 和C++实例化的代码<xref:System.String>对象和传递的代码<xref:System.String>对象通过平台调用，请不要认为嵌入的 null 字符标记字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-184">You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</span></span>  
  
 <span data-ttu-id="b0200-185">排序 （或比较） 一个字符串，以及搜索字符串时，还会区别处理字符串中嵌入的 null 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-185">Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</span></span> <span data-ttu-id="b0200-186">执行区分区域性的比较两个字符串，包括使用固定区域性的比较时，将忽略 null 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-186">Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</span></span> <span data-ttu-id="b0200-187">它们被视为仅为序号或不区分大小写的序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-187">They are considered only for ordinal or case-insensitive ordinal comparisons.</span></span> <span data-ttu-id="b0200-188">另一方面，嵌入的 null 字符始终被认为是使用方法，如搜索字符串时<xref:System.String.Contains%2A>， <xref:System.String.StartsWith%2A>，和<xref:System.String.IndexOf%2A>。</span><span class="sxs-lookup"><span data-stu-id="b0200-188">On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.</span></span>  
  
<a name="Indexes"></a>   
## <a name="strings-and-indexes"></a><span data-ttu-id="b0200-189">字符串和已分区索引</span><span class="sxs-lookup"><span data-stu-id="b0200-189">Strings and indexes</span></span>  
 <span data-ttu-id="b0200-190">索引是的位置<xref:System.Char>中的对象 （而不是 Unicode 字符） <xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="b0200-190">An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>.</span></span> <span data-ttu-id="b0200-191">索引是从零的字符串中的第一个位置开始的从零开始的、 非负数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-191">An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</span></span> <span data-ttu-id="b0200-192">很多的搜索方法，如<xref:System.String.IndexOf%2A>和<xref:System.String.LastIndexOf%2A>，返回其索引的一个字符或子字符串的字符串实例中。</span><span class="sxs-lookup"><span data-stu-id="b0200-192">A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.</span></span>  
  
 <span data-ttu-id="b0200-193"><xref:System.String.Chars%2A>属性，可以访问单个<xref:System.Char>按其索引位置的字符串中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-193">The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string.</span></span> <span data-ttu-id="b0200-194">因为<xref:System.String.Chars%2A>属性为默认属性 （在 Visual Basic 中) 或索引器 （在 C# 中)，可以访问单个<xref:System.Char>使用如下所示的代码的字符串中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-194">Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following.</span></span> <span data-ttu-id="b0200-195">此代码将查找空格或标点字符在字符串以确定该字符串包含的单词数。</span><span class="sxs-lookup"><span data-stu-id="b0200-195">This code looks for white space or punctuation characters in a string to determine how many words the string contains.</span></span>  
  
 [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]
 [!code-csharp-interactive[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]
 [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]  
  
 <span data-ttu-id="b0200-196">因为<xref:System.String>类实现<xref:System.Collections.IEnumerable>接口，您还可以循环<xref:System.Char>中使用的字符串对象`foreach`构造，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-196">Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.</span></span>  
  
 [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]
 [!code-csharp-interactive[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]
 [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]  
  
 <span data-ttu-id="b0200-197">连续的索引值可能不对应于连续的 Unicode 字符，因为的 Unicode 字符可能是编码为多个<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-197">Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object.</span></span> <span data-ttu-id="b0200-198">具体而言，一个字符串可能包含多字符的文本单位形成基字符后跟一个或多个组合字符或代理项对的。</span><span class="sxs-lookup"><span data-stu-id="b0200-198">In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</span></span> <span data-ttu-id="b0200-199">若要使用而不是 Unicode 字符<xref:System.Char>对象，请使用<xref:System.Globalization.StringInfo?displayProperty=nameWithType>和<xref:System.Globalization.TextElementEnumerator>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-199">To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> and <xref:System.Globalization.TextElementEnumerator> classes.</span></span> <span data-ttu-id="b0200-200">下面的示例说明了处理的代码之间的差异<xref:System.Char>对象和使用 Unicode 字符的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-200">The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters.</span></span> <span data-ttu-id="b0200-201">它将进行比较的字符数或每个单词的句子中的文本元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-201">It compares the number of characters or text elements in each word of a sentence.</span></span> <span data-ttu-id="b0200-202">该字符串包含两个基字符组合字符后跟的序列。</span><span class="sxs-lookup"><span data-stu-id="b0200-202">The string includes two sequences of a base character followed by a combining character.</span></span>  
  
 [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]
 [!code-csharp-interactive[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]
 [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]  
  
 <span data-ttu-id="b0200-203">此示例适用于文本元素通过使用<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType>方法和<xref:System.Globalization.TextElementEnumerator>类来枚举字符串中的所有文本元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-203">This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string.</span></span> <span data-ttu-id="b0200-204">您还可以检索通过调用包含每个文本元素的起始索引的数组<xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-204">You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b0200-205">详细了解使用的文本而不是单个单元<xref:System.Char>值，请参阅<xref:System.Globalization.StringInfo>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-205">For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.</span></span>  
  
<a name="Nulls"></a>   
## <a name="null-strings-and-empty-strings"></a><span data-ttu-id="b0200-206">Null 字符串和空字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-206">Null strings and empty strings</span></span>  
 <span data-ttu-id="b0200-207">已声明但尚未分配值的字符串是`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-207">A string that has been declared but has not been assigned a value is `null`.</span></span> <span data-ttu-id="b0200-208">尝试在该字符串上调用方法将引发<xref:System.NullReferenceException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-208">Attempting to call methods on that string throws a <xref:System.NullReferenceException>.</span></span> <span data-ttu-id="b0200-209">空字符串是空字符串，这是一个字符串，其值从不同""或<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-209">A null string is different from an empty string, which is a string whose value is "" or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-210">在某些情况下，将 null 字符串或空字符串作为方法调用中的自变量传递引发异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-210">In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</span></span> <span data-ttu-id="b0200-211">例如，传递一个 null 字符串到<xref:System.Int32.Parse%2A?displayProperty=nameWithType>方法会抛出<xref:System.ArgumentNullException>，并传递空字符串，则会引发<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-211">For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="b0200-212">在其他情况下，方法自变量可以是空字符串或空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-212">In other cases, a method argument can be either a null string or an empty string.</span></span> <span data-ttu-id="b0200-213">例如，如果你要提供<xref:System.IFormattable>类实现中的，你想要将 null 字符串和空字符串视为相等与常规 ("G") 格式说明符。</span><span class="sxs-lookup"><span data-stu-id="b0200-213">For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</span></span>  
  
 <span data-ttu-id="b0200-214"><xref:System.String>类包括以下两个方便的方法，使您能够测试字符串是否为`null`或为空：</span><span class="sxs-lookup"><span data-stu-id="b0200-214">The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:</span></span>  
  
-   <span data-ttu-id="b0200-215"><xref:System.String.IsNullOrEmpty%2A>指示字符串是否是任一`null`或等于<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-215"><xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-216">此方法无需使用类似以下的代码：</span><span class="sxs-lookup"><span data-stu-id="b0200-216">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]
     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]
     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]  
  
-   <span data-ttu-id="b0200-217"><xref:System.String.IsNullOrWhiteSpace%2A>指示字符串是否是`null`，等于<xref:System.String.Empty?displayProperty=nameWithType>，或仅由空白字符组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-217"><xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=nameWithType>, or consists exclusively of white-space characters.</span></span> <span data-ttu-id="b0200-218">此方法无需使用类似以下的代码：</span><span class="sxs-lookup"><span data-stu-id="b0200-218">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]
     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]
     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]  
  
 <span data-ttu-id="b0200-219">下面的示例使用<xref:System.String.IsNullOrEmpty%2A>中的方法<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>的自定义实现`Temperature`类。</span><span class="sxs-lookup"><span data-stu-id="b0200-219">The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of a custom `Temperature` class.</span></span> <span data-ttu-id="b0200-220">方法支持"G"、"C"、"F"和"K"格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-220">The method supports the "G", "C", "F", and "K" format strings.</span></span> <span data-ttu-id="b0200-221">如果为空的格式字符串或格式字符串的值是`null`传递给方法，其值更改为"G"格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-221">If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the "G" format string.</span></span>  
  
 [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]
 [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]
 [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]  
  
<a name="Immutability"></a>   
## <a name="immutability-and-the-stringbuilder-class"></a><span data-ttu-id="b0200-222">不变性和 StringBuilder 类</span><span class="sxs-lookup"><span data-stu-id="b0200-222">Immutability and the StringBuilder class</span></span>  
 <span data-ttu-id="b0200-223">一个<xref:System.String>对象称为不可变 （只读），因为它在创建后不能修改其值。</span><span class="sxs-lookup"><span data-stu-id="b0200-223">A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created.</span></span> <span data-ttu-id="b0200-224">看起来要修改的方法<xref:System.String>对象实际上返回一个新<xref:System.String>包含修改的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-224">Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.</span></span>  
  
 <span data-ttu-id="b0200-225">由于字符串是不可变的执行的字符串操作例程重复添加或删除操作到显示为单个字符串可以精确对显著的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="b0200-225">Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</span></span> <span data-ttu-id="b0200-226">例如，下面的代码使用的随机数生成器来创建具有范围从 0x0001 到 0x052F 中 1000 个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-226">For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</span></span> <span data-ttu-id="b0200-227">尽管代码似乎使用字符串串联来将新字符附加到名为的现有字符串，但是`str`，它实际创建一个新<xref:System.String>串联的每个操作的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-227">Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.</span></span>  
  
 [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]
 [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]
 [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]  
  
 <span data-ttu-id="b0200-228">可以使用<xref:System.Text.StringBuilder>类而不是<xref:System.String>类用于对字符串的值进行多个更改的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-228">You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string.</span></span> <span data-ttu-id="b0200-229">与不同的实例<xref:System.String>类，<xref:System.Text.StringBuilder>对象是可变的; 当串联、 追加或删除从字符串的子字符串，在单个字符串执行的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-229">Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</span></span> <span data-ttu-id="b0200-230">当您已完成修改的值<xref:System.Text.StringBuilder>对象，可以调用其<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>方法将其转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-230">When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method to convert it to a string.</span></span> <span data-ttu-id="b0200-231">下面的示例将替换<xref:System.String>上一示例中用于连接为 0x0001 与 0x052F 到范围中的 1000 个随机字符<xref:System.Text.StringBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-231">The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.</span></span>  
  
 [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]
 [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]
 [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]  
  
<a name="CultureSensitive"></a>   
## <a name="ordinal-vs-culture-sensitive-operations"></a><span data-ttu-id="b0200-232">区分区域性的操作与序号</span><span class="sxs-lookup"><span data-stu-id="b0200-232">Ordinal vs. culture-sensitive operations</span></span>  
 <span data-ttu-id="b0200-233">成员<xref:System.String>类执行序号或区分区域性 （语言） 操作<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-233">Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object.</span></span> <span data-ttu-id="b0200-234">序号操作将对每个数值<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-234">An ordinal operation acts on the numeric value of each <xref:System.Char> object.</span></span> <span data-ttu-id="b0200-235">区分区域性的操作作用于的值<xref:System.String>对象，并采用特定于区域性的大小写、 排序、 格式和考虑分析规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-235">A culture-sensitive operation acts on the value of the <xref:System.String> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</span></span> <span data-ttu-id="b0200-236">显式声明的区域性或隐式的当前区域性的上下文中执行区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-236">Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</span></span> <span data-ttu-id="b0200-237">它们执行相同的字符串时，两种类型的操作可以生成完全不同的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-237">The two kinds of operations can produce very different results when they are performed on the same string.</span></span>  
  
<span data-ttu-id="b0200-238">.NET 还支持通过使用固定区域性的不区分区域性的语义字符串操作 (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>)，这严格基于独立于区域的英语语言的区域性设置。</span><span class="sxs-lookup"><span data-stu-id="b0200-238">.NET also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), which is loosely based on the culture settings of the English language independent of region.</span></span> <span data-ttu-id="b0200-239">与其他不同<xref:System.Globalization.CultureInfo?displayProperty=nameWithType>保证设置，固定区域性的设置保持一致的单个计算机上，从系统到系统，以及跨版本的.NET。</span><span class="sxs-lookup"><span data-stu-id="b0200-239">Unlike other <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of .NET.</span></span> <span data-ttu-id="b0200-240">固定区域性可以跨所有区域性是视为一种类型的黑色框，以确保稳定性的字符串比较和排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-240">The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0200-241">如果你的应用程序如文件名的符号标识符做出安全决定或命名管道，或有关持久化数据，如 XML 文件中的基于文本的数据，该操作应使用序号比较，而不是区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-241">If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-242">这是因为区分区域性的比较会有效时，生成不同结果根据区域性而序号比较仅取决于比较的字符的二进制值。</span><span class="sxs-lookup"><span data-stu-id="b0200-242">This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0200-243">执行字符串操作的大多数方法包括具有类型参数的重载<xref:System.StringComparison>，这样您就可以指定是否该方法所执行的序号或区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-243">Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</span></span> <span data-ttu-id="b0200-244">一般情况下，应调用此重载，以调用清除您的方法的意图。</span><span class="sxs-lookup"><span data-stu-id="b0200-244">In general, you should call this overload to make the intent of your method call clear.</span></span> <span data-ttu-id="b0200-245">有关最佳实践和使用序号和区分区域性的字符串操作的指导，请参阅[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-245">For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-246">操作[大小写](#casing)，[分析和格式设置](#parsing)，[比较和排序](#comparison)，并[为确定相等性测试](#equality)可以是任一序号或区分区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-246">Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive.</span></span> <span data-ttu-id="b0200-247">以下各节讨论每个类别的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-247">The following sections discuss each category of operation.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="b0200-248">应始终调用的方法重载，使调用清除您的方法的意图。</span><span class="sxs-lookup"><span data-stu-id="b0200-248">You should always call a method overload that makes the intent of your method call clear.</span></span> <span data-ttu-id="b0200-249">例如，而不是调用<xref:System.String.Compare%28System.String%2CSystem.String%29>要通过使用当前区域性的约定来执行区分区域性的比较两个字符串的方法应调用<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>具有值的方法<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>为`comparisonType`自变量。</span><span class="sxs-lookup"><span data-stu-id="b0200-249">For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> for the `comparisonType` argument.</span></span> <span data-ttu-id="b0200-250">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-250">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  

<span data-ttu-id="b0200-251">可以下载[排序权重表](https://www.microsoft.com/download/details.aspx?id=10921)，这是一组文本文件，其中包含有关 Windows 操作系统排序和比较操作中所使用的字符权重的信息，也可以下载[默认 Unicode 排序元素表](https://www.unicode.org/Public/UCA/latest/allkeys.txt)，这是适用于 Linux 和 macOS 的排序权重表。</span><span class="sxs-lookup"><span data-stu-id="b0200-251">You can download the [Sorting Weight Tables](https://www.microsoft.com/download/details.aspx?id=10921), a set of text files that contain information on the character weights used in sorting and comparison operations for Windows operating systems, and the [Default Unicode Collation Element Table](https://www.unicode.org/Public/UCA/latest/allkeys.txt), the sort weight table for Linux and macOS.</span></span>

<a name="casing"></a>   
### <a name="casing"></a><span data-ttu-id="b0200-252">大小写</span><span class="sxs-lookup"><span data-stu-id="b0200-252">Casing</span></span>  
 <span data-ttu-id="b0200-253">大小写规则确定如何更改大小写的 Unicode 字符;例如，从小写到大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-253">Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</span></span> <span data-ttu-id="b0200-254">通常情况下，字符串比较之前执行的大小写操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-254">Often, a casing operation is performed before a string comparison.</span></span> <span data-ttu-id="b0200-255">例如，一个字符串，可能会转换为大写，以便它可以与另一个大写的字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-255">For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</span></span> <span data-ttu-id="b0200-256">可以将转换为小写通过调用一个字符串中的字符<xref:System.String.ToLower%2A>或<xref:System.String.ToLowerInvariant%2A>方法，并且你可以将它们转换为大写通过调用<xref:System.String.ToUpper%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-256">You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="b0200-257">此外，还可以使用<xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType>方法将字符串转换为词首字母大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-257">In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> method to convert a string to title case.</span></span>  

[!INCLUDE[platform-note](~/includes/c-and-posix-cultures.md)]  
  
 <span data-ttu-id="b0200-258">大小写的操作可以根据当前区域性、 指定的区域性或固定区域性的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-258">Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</span></span> <span data-ttu-id="b0200-259">因为大小写映射可能会变化，具体取决于所用的区域性，大小写操作的结果可以因区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-259">Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</span></span> <span data-ttu-id="b0200-260">在大小写的实际差异有三种：</span><span class="sxs-lookup"><span data-stu-id="b0200-260">The actual differences in casing are of three kinds:</span></span>  
  
-   <span data-ttu-id="b0200-261">中的拉丁语 I 的大写首字母大小写映射的差异 (U + 0049)，拉丁文小写字母 I (U + 0069)，LATIN CAPITAL LETTER I (U + 0130)，上面的点和拉丁文小写字母无点 I (U + 0131)。</span><span class="sxs-lookup"><span data-stu-id="b0200-261">Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</span></span> <span data-ttu-id="b0200-262">TR-TR （土耳其语 （土耳其）） 和 （阿塞拜疆，拉丁语） az-Latn-AZ 文化中，在和中的 tr、 az 和 az Latn 非特定区域性，LATIN CAPITAL LETTER I 的小写等效项是拉丁文小写字母无点 I、 和的拉丁文小写字母 I 的大写等效项是上面带点的拉丁文大写字母 I。</span><span class="sxs-lookup"><span data-stu-id="b0200-262">In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span> <span data-ttu-id="b0200-263">在所有其他文化中，其中包括固定区域性，拉丁文小写字母 I 和 LATIN CAPITAL LETTER 我是小写和大写等效项。</span><span class="sxs-lookup"><span data-stu-id="b0200-263">In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</span></span>  
  
     <span data-ttu-id="b0200-264">下面的示例演示如何设计的字符串比较，以防止文件系统访问权限可能会失败是否它依赖于区分区域性的大小写比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-264">The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</span></span> <span data-ttu-id="b0200-265">（固定区域性的大小写约定应该已使用。）</span><span class="sxs-lookup"><span data-stu-id="b0200-265">(The casing conventions of the invariant culture should have been used.)</span></span>  
  
     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]
     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]  
  
-   <span data-ttu-id="b0200-266">大小写映射中固定区域性和所有其他区域性之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b0200-266">Differences in case mappings between the invariant culture and all other cultures.</span></span> <span data-ttu-id="b0200-267">在这些情况下，使用固定区域性的大小写规则更改为大写或小写字符返回的相同字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-267">In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</span></span> <span data-ttu-id="b0200-268">对于所有其他区域性，它将返回不同的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-268">For all other cultures, it returns a different character.</span></span> <span data-ttu-id="b0200-269">下表列出了一些受影响的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-269">Some of the affected characters are listed in the following table.</span></span>  
  
    |<span data-ttu-id="b0200-270">字符</span><span class="sxs-lookup"><span data-stu-id="b0200-270">Character</span></span>|<span data-ttu-id="b0200-271">如果更改为</span><span class="sxs-lookup"><span data-stu-id="b0200-271">If changed to</span></span>|<span data-ttu-id="b0200-272">返回</span><span class="sxs-lookup"><span data-stu-id="b0200-272">Returns</span></span>|  
    |---------------|-------------------|-------------|  
    |<span data-ttu-id="b0200-273">微米登录 (U + 00B5)</span><span class="sxs-lookup"><span data-stu-id="b0200-273">MICRON SIGN (U+00B5)</span></span>|<span data-ttu-id="b0200-274">大写</span><span class="sxs-lookup"><span data-stu-id="b0200-274">Uppercase</span></span>|<span data-ttu-id="b0200-275">希腊文大写字母 MU (U +-39 C)</span><span class="sxs-lookup"><span data-stu-id="b0200-275">GREEK CAPITAL LETTER MU (U+-39C)</span></span>|  
    |<span data-ttu-id="b0200-276">拉丁文大写字母 I 带点上方 (U + 0130)</span><span class="sxs-lookup"><span data-stu-id="b0200-276">LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</span></span>|<span data-ttu-id="b0200-277">小写</span><span class="sxs-lookup"><span data-stu-id="b0200-277">Lowercase</span></span>|<span data-ttu-id="b0200-278">拉丁文小写字母 I (U + 0069)</span><span class="sxs-lookup"><span data-stu-id="b0200-278">LATIN SMALL LETTER I (U+0069)</span></span>|  
    |<span data-ttu-id="b0200-279">拉丁文小写字母无点我 (U + 0131)</span><span class="sxs-lookup"><span data-stu-id="b0200-279">LATIN SMALL LETTER DOTLESS I (U+0131)</span></span>|<span data-ttu-id="b0200-280">大写</span><span class="sxs-lookup"><span data-stu-id="b0200-280">Uppercase</span></span>|<span data-ttu-id="b0200-281">拉丁文大写字母 I (U + 0049)</span><span class="sxs-lookup"><span data-stu-id="b0200-281">LATIN CAPITAL LETTER I (U+0049)</span></span>|  
    |<span data-ttu-id="b0200-282">拉丁文小写字母长 S (U + 017F)</span><span class="sxs-lookup"><span data-stu-id="b0200-282">LATIN SMALL LETTER LONG S (U+017F)</span></span>|<span data-ttu-id="b0200-283">大写</span><span class="sxs-lookup"><span data-stu-id="b0200-283">Uppercase</span></span>|<span data-ttu-id="b0200-284">拉丁文大写字母 S (U + 0053)</span><span class="sxs-lookup"><span data-stu-id="b0200-284">LATIN CAPITAL LETTER S (U+0053)</span></span>|  
    |<span data-ttu-id="b0200-285">小写字母 Z 带抑扬符拉丁文大写字母 D (U + 01C 5)</span><span class="sxs-lookup"><span data-stu-id="b0200-285">LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</span></span>|<span data-ttu-id="b0200-286">小写</span><span class="sxs-lookup"><span data-stu-id="b0200-286">Lowercase</span></span>|<span data-ttu-id="b0200-287">拉丁文小写字母 DZ 带抑扬符 (U + 01C 6)</span><span class="sxs-lookup"><span data-stu-id="b0200-287">LATIN SMALL LETTER DZ WITH CARON (U+01C6)</span></span>|  
    |<span data-ttu-id="b0200-288">组合希腊语 YPOGEGRAMMENI (U + 0345)</span><span class="sxs-lookup"><span data-stu-id="b0200-288">COMBINING GREEK YPOGEGRAMMENI (U+0345)</span></span>|<span data-ttu-id="b0200-289">大写</span><span class="sxs-lookup"><span data-stu-id="b0200-289">Uppercase</span></span>|<span data-ttu-id="b0200-290">希腊文大写字母 IOTA (U + 0399)</span><span class="sxs-lookup"><span data-stu-id="b0200-290">GREEK CAPITAL LETTER IOTA (U+0399)</span></span>|  
  
-   <span data-ttu-id="b0200-291">ASCII 字符范围中的两个字母大小写混合的对的大小写映射之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b0200-291">Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</span></span> <span data-ttu-id="b0200-292">在大多数文化中，两个字母大小写混合的对等于等效的双字母大写或小写字母对。</span><span class="sxs-lookup"><span data-stu-id="b0200-292">In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</span></span> <span data-ttu-id="b0200-293">这是不为以下区域中的以下两个字母对，则返回 true，因为每种情况下它们不同于二合字母：</span><span class="sxs-lookup"><span data-stu-id="b0200-293">This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</span></span>  
  
    -   <span data-ttu-id="b0200-294">"lJ"和"nJ"HR-HR （克罗地亚语 （克罗地亚）） 区域性中。</span><span class="sxs-lookup"><span data-stu-id="b0200-294">"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</span></span>  
  
    -   <span data-ttu-id="b0200-295">"cH"cs CZ （捷克语 （捷克共和国）） 和 sk-SK （斯洛伐克语 （斯洛伐克）） 文化中。</span><span class="sxs-lookup"><span data-stu-id="b0200-295">"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</span></span>  
  
    -   <span data-ttu-id="b0200-296">"aA"DA-DK （丹麦语 （丹麦）） 区域性中。</span><span class="sxs-lookup"><span data-stu-id="b0200-296">"aA" in the da-DK (Danish (Denmark)) culture.</span></span>  
  
    -   <span data-ttu-id="b0200-297">"cS"、"dZ"、"dZS"、"nY"、"sZ"、"tY"和"zS"HU-HU （匈牙利语 （匈牙利）） 区域性中。</span><span class="sxs-lookup"><span data-stu-id="b0200-297">"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</span></span>  
  
    -   <span data-ttu-id="b0200-298">"cH"和"lL"es ES_tradnl （西班牙语 （西班牙，传统风格）） 区域性中。</span><span class="sxs-lookup"><span data-stu-id="b0200-298">"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</span></span>  
  
    -   <span data-ttu-id="b0200-299">"cH"、"gI"、"kH"、"nG""nH"、"pH"，"qU，"tH"和"tR"vi VN （越南语 （越南）） 区域性中的。</span><span class="sxs-lookup"><span data-stu-id="b0200-299">"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</span></span>  
  
     <span data-ttu-id="b0200-300">但是，很少会遇到的情况下，这些对区分区域性的比较在其中创建问题，因为这些对很少出现在固定的字符串或标识符。</span><span class="sxs-lookup"><span data-stu-id="b0200-300">However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</span></span>  
  
 <span data-ttu-id="b0200-301">下面的示例说明了一些在大小写规则区域性将字符串转换为大写时之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b0200-301">The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</span></span>  
  
 [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]
 [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]
 [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]  
  
<a name="parsing"></a>   
### <a name="parsing-and-formatting"></a><span data-ttu-id="b0200-302">分析和格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-302">Parsing and formatting</span></span>  
 <span data-ttu-id="b0200-303">格式设置和分析为反向操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-303">Formatting and parsing are inverse operations.</span></span> <span data-ttu-id="b0200-304">格式设置规则确定如何将一个值，如日期和时间或数字转换为其字符串表示形式，而分析规则确定如何将字符串表示形式转换为一个值，例如日期和时间。</span><span class="sxs-lookup"><span data-stu-id="b0200-304">Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</span></span> <span data-ttu-id="b0200-305">格式化和分析规则都依赖于区域性的约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-305">Both formatting and parsing rules are dependent on cultural conventions.</span></span> <span data-ttu-id="b0200-306">下面的示例演示解释特定于区域性的日期字符串时，可能会出现多义性。</span><span class="sxs-lookup"><span data-stu-id="b0200-306">The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</span></span> <span data-ttu-id="b0200-307">如果不知道用于生成的日期字符串的区域性的约定，不可能知道 2011-03-01、 2011 年 3 月 1 日和 2011-03/01-表示 2011 年 1 月 3 日或 2011 年 3 月 1 日。</span><span class="sxs-lookup"><span data-stu-id="b0200-307">Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</span></span>  
  
 [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]
 [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]
 [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]  
  
 <span data-ttu-id="b0200-308">同样，如下面的示例所示，单个字符串可以生成不同的日期，具体取决于在分析操作中使用的约定的区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-308">Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</span></span>  
  
 [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]
 [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]
 [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]  
  
<a name="comparison"></a>   
### <a name="string-comparison-and-sorting"></a><span data-ttu-id="b0200-309">字符串比较和排序</span><span class="sxs-lookup"><span data-stu-id="b0200-309">String comparison and sorting</span></span>  
 <span data-ttu-id="b0200-310">用于比较和排序字符串的约定因因区域性而异。</span><span class="sxs-lookup"><span data-stu-id="b0200-310">Conventions for comparing and sorting strings vary from culture to culture.</span></span> <span data-ttu-id="b0200-311">例如，排序顺序可能基于拼音或基于字符的可视表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-311">For example, the sort order may be based on phonetics or on the visual representation of characters.</span></span> <span data-ttu-id="b0200-312">在东亚语言中，按文字的笔画和部首对字符进行排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-312">In East Asian languages, characters are sorted by the stroke and radical of ideographs.</span></span> <span data-ttu-id="b0200-313">排序也取决于字母表使用的排序语言和区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-313">Sorting also depends on the order languages and cultures use for the alphabet.</span></span> <span data-ttu-id="b0200-314">例如，丹麦语中有"存储"字符，它在字母表中"Z"之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-314">For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</span></span> <span data-ttu-id="b0200-315">此外，比较可以区分大小写或不区分大小写，并且在某些情况下的大小写规则也因区域性而异。</span><span class="sxs-lookup"><span data-stu-id="b0200-315">In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.</span></span> <span data-ttu-id="b0200-316">序号比较，但是，使用时比较和排序字符串的字符串中的单个字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-316">Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</span></span>  
  
 <span data-ttu-id="b0200-317">排序规则用于确定与每个其他 Unicode 字符的字母顺序和如何两个字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-317">Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</span></span> <span data-ttu-id="b0200-318">例如，<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType>方法比较两个字符串基于<xref:System.StringComparison>参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-318">For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method compares two strings based on the <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="b0200-319">如果参数值<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>，该方法执行使用当前区域性的约定的语义比较，如果参数值<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>，该方法执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-319">If the parameter value is <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, the method performs an ordinal comparison.</span></span> <span data-ttu-id="b0200-320">因此，如以下示例所示，如果当前区域性为美国英语，在首次调用<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType>方法 （使用区分区域性的比较） 将视为"a"小于"A"，但第二个调用同一方法 （使用序号比较） 将视为"a"大于"A"。</span><span class="sxs-lookup"><span data-stu-id="b0200-320">Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</span></span>  
  
 [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]
 [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]
 [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]  
  
 <span data-ttu-id="b0200-321">.NET 支持 word、 字符串和序号排序规则：</span><span class="sxs-lookup"><span data-stu-id="b0200-321">.NET supports word, string, and ordinal sort rules:</span></span>  
  
-   <span data-ttu-id="b0200-322">单词排序在其中某些非字母数字 Unicode 字符可能会有特殊的权重分配给他们执行区分区域性的比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-322">A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</span></span> <span data-ttu-id="b0200-323">例如，连字符 （-） 可能很小的权重分配给它，以便"coop"和"co-op"显示彼此排序列表中。</span><span class="sxs-lookup"><span data-stu-id="b0200-323">For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</span></span> <span data-ttu-id="b0200-324">有关一系列<xref:System.String>方法比较两个字符串使用单词排序规则，请参阅[按类别的字符串操作](#ByCategory)部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-324">For a list of the <xref:System.String> methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
-   <span data-ttu-id="b0200-325">字符串排序还执行区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-325">A string sort also performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-326">它相当于单词排序，只不过有任何特殊的情况下，并且所有的非字母数字符号放在所有字母数字 Unicode 字符之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-326">It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</span></span> <span data-ttu-id="b0200-327">可以通过调用通过使用字符串排序规则比较两个字符串<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>具有的方法重载`options`为参数提供的值为<xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-327">Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-328">请注意，这是.NET 提供的用于比较两个字符串使用字符串排序规则的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-328">Note that this is the only method that .NET provides to compare two strings using string sort rules.</span></span>  
  
-   <span data-ttu-id="b0200-329">序号排序对基于每个数值的字符串进行比较<xref:System.Char>字符串中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-329">An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string.</span></span> <span data-ttu-id="b0200-330">序号比较是自动区分大小写，因为一个字符的大写和小写版本具有不同的码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-330">An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</span></span> <span data-ttu-id="b0200-331">但是，如果用例并不重要，可以指定不区分大小写的序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-331">However, if case is not important, you can specify an ordinal comparison that ignores case.</span></span> <span data-ttu-id="b0200-332">这相当于将字符串转换为大写的通过使用固定区域性，然后对结果执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-332">This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</span></span> <span data-ttu-id="b0200-333">有关一系列<xref:System.String>方法比较两个字符串使用序号排序规则，请参阅[按类别的字符串操作](#ByCategory)部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-333">For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
 <span data-ttu-id="b0200-334">区分区域性的比较是显式或隐式使用任何比较<xref:System.Globalization.CultureInfo>对象，包括由指定的固定区域性<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-334">A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="b0200-335">隐式区域性是由指定的当前区域性<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>和<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-335">The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="b0200-336">没有相当大的字母字符在排序顺序中的变体 (即，其字符<xref:System.Char.IsLetter%2A?displayProperty=nameWithType>属性返回`true`) 跨区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-336">There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> property returns `true`) across cultures.</span></span> <span data-ttu-id="b0200-337">可以指定通过提供使用特定区域性的约定的区分区域性的比较<xref:System.Globalization.CultureInfo>对象传递给字符串比较方法，如<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>。</span><span class="sxs-lookup"><span data-stu-id="b0200-337">You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>.</span></span> <span data-ttu-id="b0200-338">可以指定使用当前区域性的约定，通过提供区分区域性的比较<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>， <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>，或任何成员<xref:System.Globalization.CompareOptions>以外的其他枚举<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>或<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>到相应重载的<xref:System.String.Compare%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-338">You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> to an appropriate overload of the <xref:System.String.Compare%2A> method.</span></span> <span data-ttu-id="b0200-339">一般适合用于排序而不是序号比较是区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-339">A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</span></span> <span data-ttu-id="b0200-340">序号比较是一般适合用于确定两个字符串是否相等 (即，用于确定标识) 而不是区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-340">An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</span></span>  
  
 <span data-ttu-id="b0200-341">下面的示例说明了区域性敏感型和序号比较之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b0200-341">The following example illustrates the difference between culture-sensitive and ordinal comparison.</span></span> <span data-ttu-id="b0200-342">该示例计算结果的三个字符串、"Apple"、"Æble"和"AEble"，以使用序号比较和 DA-DK 并 EN-US 区域性的约定 (其中每个为时的默认区域性<xref:System.String.Compare%2A>调用方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-342">The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called).</span></span> <span data-ttu-id="b0200-343">因为丹麦语语言字符"存储"视为单个字母，并对其进行排序后"Z"字母表中，字符串"Æble"大于"Apple"。</span><span class="sxs-lookup"><span data-stu-id="b0200-343">Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</span></span> <span data-ttu-id="b0200-344">但是，"Æble"是不被视为等效于"AEble"，因此"Æble"也是晚于"AEble"。</span><span class="sxs-lookup"><span data-stu-id="b0200-344">However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</span></span> <span data-ttu-id="b0200-345">EN-US 区域性不包括字母"存储"，但将其视为等效于"AE"，解释了为什么"Æble"小于"Apple"但等于"AEble"。</span><span class="sxs-lookup"><span data-stu-id="b0200-345">The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</span></span> <span data-ttu-id="b0200-346">序号比较，但是，将视为"Apple"小于"Æble"和"Æble"必须晚于"AEble"。</span><span class="sxs-lookup"><span data-stu-id="b0200-346">Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</span></span>  
  
 [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]
 [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]  
  
 <span data-ttu-id="b0200-347">使用以下常规准则来选择适当的排序或字符串比较方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-347">Use the following general guidelines to choose an appropriate sorting or string comparison method:</span></span>  
  
-   <span data-ttu-id="b0200-348">如果您希望根据用户的区域性的字符串进行排序，您应该对它们基于当前区域性的约定进行排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-348">If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</span></span> <span data-ttu-id="b0200-349">如果用户的区域性发生更改，也将相应地更改排序字符串的顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-349">If the user's culture changes, the order of sorted strings will also change accordingly.</span></span> <span data-ttu-id="b0200-350">例如，同义词库应用程序应始终进行排序基于用户的区域性的单词。</span><span class="sxs-lookup"><span data-stu-id="b0200-350">For example, a thesaurus application should always sort words based on the user's culture.</span></span>  
  
-   <span data-ttu-id="b0200-351">如果你想要进行排序的字符串根据特定区域性的约定，则应通过提供订购它们<xref:System.Globalization.CultureInfo>对象，表示该区域性的比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-351">If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method.</span></span> <span data-ttu-id="b0200-352">例如，教授学生特定语言设计的应用程序，在你希望字符串进行排序根据使用该语言的区域性之一的约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-352">For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</span></span>  
  
-   <span data-ttu-id="b0200-353">如果您希望字符串的顺序，以跨区域性将保持不变，应基于固定区域性的约定也可以使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-353">If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</span></span> <span data-ttu-id="b0200-354">例如，您将使用序号排序来组织的文件、 进程、 互斥体的名称或命名管道。</span><span class="sxs-lookup"><span data-stu-id="b0200-354">For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</span></span>  
  
-   <span data-ttu-id="b0200-355">有关涉及安全决策 （例如用户名是否有效） 的比较，您始终应执行序号为确定相等性测试通过调用的重载<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-355">For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-356">区分区域性的排序和大小写的字符串比较中使用的规则取决于版本的.NET。</span><span class="sxs-lookup"><span data-stu-id="b0200-356">The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET.</span></span> <span data-ttu-id="b0200-357">在.NET Framework 4.5 和更高版本上运行[!INCLUDE[win8](~/includes/win8-md.md)]操作系统系统、 排序、 大小写、 规范化和 Unicode 字符信息是否符合 Unicode 6.0 标准。</span><span class="sxs-lookup"><span data-stu-id="b0200-357">In the .NET Framework 4.5 and later versions running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.</span></span> <span data-ttu-id="b0200-358">在其他 Windows 操作系统的系统，它符合 Unicode 5.0 标准。</span><span class="sxs-lookup"><span data-stu-id="b0200-358">On other Windows operating systems, it conforms to the Unicode 5.0 standard.</span></span> <span data-ttu-id="b0200-359">在.NET Core，这取决于基础操作系统支持的 Unicode 标准版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-359">On .NET Core, it depends on the version of the Unicode Standard supported by the underlying operating system.</span></span> 
  
 <span data-ttu-id="b0200-360">有关 word、 字符串和序号排序规则的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>主题。</span><span class="sxs-lookup"><span data-stu-id="b0200-360">For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> topic.</span></span> <span data-ttu-id="b0200-361">有关何时使用每个规则的其他建议，请参阅[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-361">For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-362">通常，不要调用比较方法，如字符串<xref:System.String.Compare%2A>直接以确定字符串的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-362">Ordinarily, you don't call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings.</span></span> <span data-ttu-id="b0200-363">相反，如排序方法通过调用比较方法<xref:System.Array.Sort%2A?displayProperty=nameWithType>或<xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-363">Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=nameWithType> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-364">下面的示例执行四个不同的排序操作 （使用当前区域性，使用固定区域性的单词排序、 序号排序和使用固定区域性的字符串排序单词排序），无需显式调用的字符串比较方法，尽管它们指定要使用的比较类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-364">The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</span></span> <span data-ttu-id="b0200-365">请注意，每种类型的排序将生成其数组中的字符串的唯一排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-365">Note that each type of sort produces a unique ordering of strings in its array.</span></span>  
  
 [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]
 [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]
 [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]  
  
> [!TIP]
>  <span data-ttu-id="b0200-366">在内部，.NET 使用排序关键字支持区分区域性的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-366">Internally, .NET uses sort keys to support culturally sensitive string comparison.</span></span> <span data-ttu-id="b0200-367">对于字符串中的每个字符，都赋予若干类排序权重，包括字母、大小写和变音符。</span><span class="sxs-lookup"><span data-stu-id="b0200-367">Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</span></span> <span data-ttu-id="b0200-368">排序键，由表示<xref:System.Globalization.SortKey>类中，为特定字符串提供这些权重的库。</span><span class="sxs-lookup"><span data-stu-id="b0200-368">A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string.</span></span> <span data-ttu-id="b0200-369">如果您的应用程序执行大量的搜索或排序对一组相同的字符串的操作，可以通过生成并存储它使用的所有字符串的排序键来提高其性能。</span><span class="sxs-lookup"><span data-stu-id="b0200-369">If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</span></span> <span data-ttu-id="b0200-370">当需要进行排序或比较操作时，您将使用排序键，而不是字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-370">When a sort or comparison operation is required, you use the sort keys instead of the strings.</span></span> <span data-ttu-id="b0200-371">有关更多信息，请参见 <xref:System.Globalization.SortKey> 类。</span><span class="sxs-lookup"><span data-stu-id="b0200-371">For more information, see the <xref:System.Globalization.SortKey> class.</span></span>  
  
 <span data-ttu-id="b0200-372">如果未指定的字符串比较约定，如排序方法<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType>对字符串执行区分区域性的、 区分大小写的排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-372">If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> perform a culture-sensitive, case-sensitive sort on strings.</span></span> <span data-ttu-id="b0200-373">下面的示例演示如何更改当前区域性会影响排序字符串数组中的顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-373">The following example illustrates how changing the current culture affects the order of sorted strings in an array.</span></span> <span data-ttu-id="b0200-374">它创建三个字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-374">It creates an array of three strings.</span></span> <span data-ttu-id="b0200-375">首先，它将 `System.Threading.Thread.CurrentThread.CurrentCulture` 属性设置为 en-US，并调用 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-375">First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-376">结果的排序顺序基于排序为英语 （美国） 区域性的约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-376">The resulting sort order is based on sorting conventions for the English (United States) culture.</span></span> <span data-ttu-id="b0200-377">接着，此示例将 `System.Threading.Thread.CurrentThread.CurrentCulture` 属性设置为 da-DK 并再次调用 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-377">Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method again.</span></span> <span data-ttu-id="b0200-378">请注意，最终排序顺序与使用 en-US 时的结果不一样，因为这次使用的是针对丹麦语（丹麦）的排序约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-378">Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</span></span>  
  
 [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]
 [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]  
  
> [!WARNING]
>  <span data-ttu-id="b0200-379">如果你在比较字符串的主要用途是确定它们是否相等，则应调用<xref:System.String.Equals%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-379">If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-380">通常情况下，应使用<xref:System.String.Equals%2A>要执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-380">Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison.</span></span> <span data-ttu-id="b0200-381"><xref:System.String.Compare%2A?displayProperty=nameWithType>方法主要用于对字符串进行排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-381">The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is intended primarily to sort strings.</span></span>  
  
 <span data-ttu-id="b0200-382">字符串搜索方法，如<xref:System.String.StartsWith%2A?displayProperty=nameWithType>和<xref:System.String.IndexOf%2A?displayProperty=nameWithType>，还可以执行区分区域性的或序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-382">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons.</span></span> <span data-ttu-id="b0200-383">下面的示例演示使用序号和区分区域性的比较之间的差异<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-383">The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="b0200-384">在其中的当前区域性为英语 （美国） 的区分区域性的搜索将视为"oe"以匹配连字"œ"的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-384">A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</span></span> <span data-ttu-id="b0200-385">因为软连字符 (U + 00AD) 是零宽字符，则搜索将软连字符视为等效于<xref:System.String.Empty>和字符串的开头处找到的匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-385">Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string.</span></span> <span data-ttu-id="b0200-386">序号搜索，但是，找不到匹配项在任一情况下。</span><span class="sxs-lookup"><span data-stu-id="b0200-386">An ordinal search, on the other hand, does not find a match in either case.</span></span>  
  
 [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]
 [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]
 [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]  
  
### <a name="searching-strings"></a><span data-ttu-id="b0200-387">搜索字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-387">Searching Strings</span></span>  
 <span data-ttu-id="b0200-388">字符串搜索方法，如<xref:System.String.StartsWith%2A?displayProperty=nameWithType>和<xref:System.String.IndexOf%2A?displayProperty=nameWithType>，还可以执行区分区域性的或在指定的字符串中找到的序号字符串比较，以确定是否有字符或子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-388">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</span></span>  
  
 <span data-ttu-id="b0200-389">中的搜索方法<xref:System.String>类的单个字符，如搜索<xref:System.String.IndexOf%2A>方法或一组字符，如<xref:System.String.IndexOfAny%2A>方法中，所有执行序号搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-389">The search methods in the <xref:System.String> class that search for an individual character, such as the <xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search.</span></span> <span data-ttu-id="b0200-390">若要执行区分区域性的搜索的字符，必须调用<xref:System.Globalization.CompareInfo>等方法<xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>或<xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-390">To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-391">请注意，可以非常不同的搜索的字符使用序号和区分区域性的比较结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-391">Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</span></span> <span data-ttu-id="b0200-392">例如，如连字"存储"的预构成 Unicode 字符 (U + 00 C 6) 的搜索可能匹配正确的顺序，如 AE 及其组件的任何匹配项 （U + 041U + 0045），根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-392">For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</span></span> <span data-ttu-id="b0200-393">下面的示例说明了之间的差异<xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType>和<xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>方法搜索的单个字符时。</span><span class="sxs-lookup"><span data-stu-id="b0200-393">The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> methods when searching for an individual character.</span></span> <span data-ttu-id="b0200-394">连字"存储"(U + 00E6) 是在字符串中找到"空中"时使用 EN-US 区域性的约定，但不是使用 DA-DK 区域性的约定时或执行序号比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-394">The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]
 [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]  
  
 <span data-ttu-id="b0200-395">但是，<xref:System.String>类搜索字符串，而不是一个字符执行区分区域性的搜索，如果搜索选项未显式指定的类型参数的方法<xref:System.StringComparison>。</span><span class="sxs-lookup"><span data-stu-id="b0200-395">On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>.</span></span> <span data-ttu-id="b0200-396">唯一的例外是<xref:System.String.Contains%2A>，该文件将执行序号搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-396">The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.</span></span>  
  
<a name="equality"></a>   
### <a name="testing-for-equality"></a><span data-ttu-id="b0200-397">为确定相等性测试</span><span class="sxs-lookup"><span data-stu-id="b0200-397">Testing for equality</span></span>  
 <span data-ttu-id="b0200-398">使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法来确定两个字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-398">Use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relationship of two strings in the sort order.</span></span> <span data-ttu-id="b0200-399">通常情况下，这是区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-399">Typically, this is a culture-sensitive operation.</span></span> <span data-ttu-id="b0200-400">与此相反，调用<xref:System.String.Equals%2A?displayProperty=nameWithType>方法来测试相等性。</span><span class="sxs-lookup"><span data-stu-id="b0200-400">In contrast, call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method to test for equality.</span></span> <span data-ttu-id="b0200-401">为确定相等性测试通常比较用户输入与某个已知的字符串，例如有效的用户名、 密码或文件系统路径，因为它通常是一个序号操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-401">Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-402">可以通过调用测试相等性<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，并确定返回值是否为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-402">It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=nameWithType> method and determining whether the return value is zero.</span></span> <span data-ttu-id="b0200-403">但是，不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="b0200-403">However, this practice is not recommended.</span></span> <span data-ttu-id="b0200-404">若要确定两个字符串，应调用的重载之一<xref:System.String.Equals%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-404">To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-405">若要调用的首选的重载为实例<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>方法或静态<xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法，因为这两种方法包括<xref:System.StringComparison?displayProperty=nameWithType>显式指定的比较类型的参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-405">The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=nameWithType> parameter that explicitly specifies the type of comparison.</span></span>  
  
 <span data-ttu-id="b0200-406">下面的示例说明了执行区分区域性的比较相等时应改为使用一个序号。</span><span class="sxs-lookup"><span data-stu-id="b0200-406">The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</span></span> <span data-ttu-id="b0200-407">在这种情况下，代码的目的是通过执行不区分大小写比较的字符串"FILE://"与 URL 开头"FILE://"或"file://"开头的 Url 从禁止文件系统访问权限。</span><span class="sxs-lookup"><span data-stu-id="b0200-407">In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</span></span> <span data-ttu-id="b0200-408">但是，如果以"file://"开头的 URL 上使用土耳其语 （土耳其） 区域性执行区分区域性的比较，则为确定相等性比较失败，因为小写"i"的土耳其语的大写等效项为"i"而不是"I"。</span><span class="sxs-lookup"><span data-stu-id="b0200-408">However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</span></span> <span data-ttu-id="b0200-409">因此，无意中允许的文件系统访问。</span><span class="sxs-lookup"><span data-stu-id="b0200-409">As a result, file system access is inadvertently permitted.</span></span> <span data-ttu-id="b0200-410">但是，如果执行序号比较，则为确定相等性比较成功，并拒绝文件系统访问。</span><span class="sxs-lookup"><span data-stu-id="b0200-410">On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</span></span>  
  
 [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]
 [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]
 [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]  
  
<a name="Normalization"></a>   
## <a name="normalization"></a><span data-ttu-id="b0200-411">标准化</span><span class="sxs-lookup"><span data-stu-id="b0200-411">Normalization</span></span>  
 <span data-ttu-id="b0200-412">某些 Unicode 字符具有多种表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-412">Some Unicode characters have multiple representations.</span></span> <span data-ttu-id="b0200-413">例如，下面的代码点的任何可表示字母"ắ":</span><span class="sxs-lookup"><span data-stu-id="b0200-413">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="b0200-414">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="b0200-414">U+1EAF</span></span>  
  
-   <span data-ttu-id="b0200-415">U+0103 U+0301</span><span class="sxs-lookup"><span data-stu-id="b0200-415">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="b0200-416">U+0061 U+0306 U+0301</span><span class="sxs-lookup"><span data-stu-id="b0200-416">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="b0200-417">单个字符的多种表示形式使搜索、 排序、 匹配和其他字符串操作变得复杂。</span><span class="sxs-lookup"><span data-stu-id="b0200-417">Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</span></span>  
  
 <span data-ttu-id="b0200-418">Unicode 标准定义了名为返回一个 Unicode 字符的任何其等效的二进制表示形式的二进制表示形式的规范化的过程。</span><span class="sxs-lookup"><span data-stu-id="b0200-418">The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</span></span> <span data-ttu-id="b0200-419">规范化可以使用多种算法，调用下列不同的规则的规范化形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-419">Normalization can use several algorithms, called normalization forms, that follow different rules.</span></span> <span data-ttu-id="b0200-420">.NET 支持 Unicode 范式 C、 D、 KC 和 KD。</span><span class="sxs-lookup"><span data-stu-id="b0200-420">.NET supports Unicode normalization forms C, D, KC, and KD.</span></span> <span data-ttu-id="b0200-421">当字符串被正常化为相同的范式时，它们可以通过使用序号比较进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-421">When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="b0200-422">序号比较是对应的 Unicode 标量值的二进制比较<xref:System.Char>中每个字符串的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-422">An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string.</span></span> <span data-ttu-id="b0200-423"><xref:System.String>类包括许多方法可以执行序号比较，其中包括：</span><span class="sxs-lookup"><span data-stu-id="b0200-423">The <xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:</span></span>  
  
-   <span data-ttu-id="b0200-424">任何重载<xref:System.String.Compare%2A>， <xref:System.String.Equals%2A>， <xref:System.String.StartsWith%2A>， <xref:System.String.EndsWith%2A>， <xref:System.String.IndexOf%2A>，并且<xref:System.String.LastIndexOf%2A>方法包括<xref:System.StringComparison>参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-424">Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="b0200-425">如果提供的值，该方法执行序号比较<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>或<xref:System.StringComparison.OrdinalIgnoreCase>为此参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-425">The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.</span></span>  
  
-   <span data-ttu-id="b0200-426">重载<xref:System.String.CompareOrdinal%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-426">The overloads of the <xref:System.String.CompareOrdinal%2A> method.</span></span>  
  
-   <span data-ttu-id="b0200-427">默认情况下，如使用序号比较的方法<xref:System.String.Contains%2A>， <xref:System.String.Replace%2A>，和<xref:System.String.Split%2A>。</span><span class="sxs-lookup"><span data-stu-id="b0200-427">Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.</span></span>  
  
-   <span data-ttu-id="b0200-428">搜索的方法<xref:System.Char>值或中的元素<xref:System.Char>字符串实例中的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-428">Methods that search for a <xref:System.Char> value or for the elements in a <xref:System.Char> array in a string instance.</span></span> <span data-ttu-id="b0200-429">此类方法包括<xref:System.String.IndexOf%28System.Char%29>和<xref:System.String.Split%28System.Char%5B%5D%29>。</span><span class="sxs-lookup"><span data-stu-id="b0200-429">Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.</span></span>  
  
 <span data-ttu-id="b0200-430">您可以确定一个字符串，指示是否被规范化为范式 C 通过调用<xref:System.String.IsNormalized?displayProperty=nameWithType>方法，或者可以调用<xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType>方法，以确定是否将字符串规范化为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-430">You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=nameWithType> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to determine whether a string is normalized to a specified normalization form.</span></span> <span data-ttu-id="b0200-431">您还可以调用<xref:System.String.Normalize?displayProperty=nameWithType>方法将字符串转换到范式 C，也可以调用<xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType>方法将字符串转换为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-431">You can also call the <xref:System.String.Normalize?displayProperty=nameWithType> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to convert a string to a specified normalization form.</span></span> <span data-ttu-id="b0200-432">有关规范化和比较字符串的分步信息，请参阅<xref:System.String.Normalize>和<xref:System.String.Normalize%28System.Text.NormalizationForm%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-432">For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.</span></span>  
  
 <span data-ttu-id="b0200-433">下面的简单示例说明了字符串标准化。</span><span class="sxs-lookup"><span data-stu-id="b0200-433">The following simple example illustrates string normalization.</span></span> <span data-ttu-id="b0200-434">它在三个不同字符串中的三种不同方式定义了字母"ố"，并使用序号比较相等来确定每个字符串不同于其他两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-434">It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</span></span> <span data-ttu-id="b0200-435">它然后将每个字符串转换为受支持的规范化窗体，并再次执行序号比较每个字符串中指定的范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-435">It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</span></span> <span data-ttu-id="b0200-436">在每种情况下，第二个相等性测试显示字符串相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-436">In each case, the second test for equality shows that the strings are equal.</span></span>  
  
 [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]
 [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]
 [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]  
  
 <span data-ttu-id="b0200-437">有关规范化和规范化窗体的详细信息，请参阅<xref:System.Text.NormalizationForm?displayProperty=nameWithType>，以及[Unicode 标准附录 #15:Unicode 范式](https://unicode.org/reports/tr15/)并[规范化常见问题解答](https://www.unicode.org/faq/normalization.html)unicode.org 网站上。</span><span class="sxs-lookup"><span data-stu-id="b0200-437">For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) and the [Normalization FAQ](https://www.unicode.org/faq/normalization.html) on the unicode.org website.</span></span>  
  
<a name="ByCategory"></a>   
## <a name="string-operations-by-category"></a><span data-ttu-id="b0200-438">按类别的字符串操作</span><span class="sxs-lookup"><span data-stu-id="b0200-438">String operations by category</span></span>  
 <span data-ttu-id="b0200-439"><xref:System.String>类提供用于比较字符串，测试字符串是否相等，查找字符或字符串，修改字符串，提取字符串的组合字符串，格式化值，复制字符串的字符串中子字符串的成员和规范化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-439">The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</span></span>  
  
### <a name="comparing-strings"></a><span data-ttu-id="b0200-440">比较字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-440">Comparing strings</span></span>  
 <span data-ttu-id="b0200-441">您可以比较字符串来确定二者在排序顺序中的相对位置通过使用以下<xref:System.String>方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-441">You can compare strings to determine their relative position in the sort order by using the following <xref:System.String> methods:</span></span>  
  
-   <span data-ttu-id="b0200-442"><xref:System.String.Compare%2A> 返回一个整数，指示一个字符串在排序顺序中第二个字符串的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-442"><xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.</span></span>  
  
-   <span data-ttu-id="b0200-443"><xref:System.String.CompareOrdinal%2A> 返回一个整数，指示一个根据其码位比较的第二个字符串的字符串的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-443"><xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</span></span>  
  
-   <span data-ttu-id="b0200-444"><xref:System.String.CompareTo%2A> 返回一个整数，指示当前的字符串实例与第二个字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-444"><xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</span></span> <span data-ttu-id="b0200-445"><xref:System.String.CompareTo%28System.String%29>方法提供<xref:System.IComparable>并<xref:System.IComparable%601>实现<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-445">The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.</span></span>  
  
### <a name="testing-strings-for-equality"></a><span data-ttu-id="b0200-446">测试字符串相等</span><span class="sxs-lookup"><span data-stu-id="b0200-446">Testing strings for equality</span></span>  
 <span data-ttu-id="b0200-447">在调用<xref:System.String.Equals%2A>方法来确定两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-447">You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal.</span></span> <span data-ttu-id="b0200-448">实例<xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29>和静态<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>重载允许您指定比较是否区分区域性的或序号，以及是否考虑或忽略大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-448">The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</span></span> <span data-ttu-id="b0200-449">为确定相等性的大多数测试是序号，并确定为系统资源 （如文件系统对象） 的访问权限为确定相等性比较应始终为序号。</span><span class="sxs-lookup"><span data-stu-id="b0200-449">Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</span></span>  
  
### <a name="finding-characters-in-a-string"></a><span data-ttu-id="b0200-450">查找字符串中的字符</span><span class="sxs-lookup"><span data-stu-id="b0200-450">Finding characters in a string</span></span>  
 <span data-ttu-id="b0200-451"><xref:System.String>类包括两种类型的搜索方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-451">The <xref:System.String> class includes two kinds of search methods:</span></span>  
  
-   <span data-ttu-id="b0200-452">返回的方法<xref:System.Boolean>值，以指示特定的子字符串中是否存在字符串实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-452">Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance.</span></span> <span data-ttu-id="b0200-453">其中包括<xref:System.String.Contains%2A>， <xref:System.String.EndsWith%2A>，和<xref:System.String.StartsWith%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-453">These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.</span></span>  
  
-   <span data-ttu-id="b0200-454">指示子字符串的字符串实例中的起始位置的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-454">Methods that indicate the starting position of a substring in a string instance.</span></span> <span data-ttu-id="b0200-455">其中包括<xref:System.String.IndexOf%2A>， <xref:System.String.IndexOfAny%2A>， <xref:System.String.LastIndexOf%2A>，和<xref:System.String.LastIndexOfAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-455">These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-456">如果你想要搜索字符串中的特定模式而不是特定的子字符串，则应使用正则表达式。</span><span class="sxs-lookup"><span data-stu-id="b0200-456">If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</span></span> <span data-ttu-id="b0200-457">有关详细信息，请参阅[.NET 正则表达式](~/docs/standard/base-types/regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-457">For more information, see [.NET Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
### <a name="modifying-a-string"></a><span data-ttu-id="b0200-458">修改字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-458">Modifying a string</span></span>  
 <span data-ttu-id="b0200-459"><xref:System.String>类包括以下方法看起来要修改字符串的值：</span><span class="sxs-lookup"><span data-stu-id="b0200-459">The <xref:System.String> class includes the following methods that appear to modify the value of a string:</span></span>  
  
-   <span data-ttu-id="b0200-460"><xref:System.String.Insert%2A> 将字符串插入到当前<xref:System.String>实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-460"><xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="b0200-461"><xref:System.String.PadLeft%2A> 字符串的开头处插入指定字符的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-461"><xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.</span></span>  
  
-   <span data-ttu-id="b0200-462"><xref:System.String.PadRight%2A> 字符串的末尾处插入指定字符的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-462"><xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the end of a string.</span></span>  
  
-   <span data-ttu-id="b0200-463"><xref:System.String.Remove%2A> 删除从当前的子字符串<xref:System.String>实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-463"><xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="b0200-464"><xref:System.String.Replace%2A> 子字符串替换为另一个子字符串在当前<xref:System.String>实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-464"><xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="b0200-465"><xref:System.String.ToLower%2A> 和<xref:System.String.ToLowerInvariant%2A>字符串中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-465"><xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.</span></span>  
  
-   <span data-ttu-id="b0200-466"><xref:System.String.ToUpper%2A> 和<xref:System.String.ToUpperInvariant%2A>将字符串中的所有字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-466"><xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.</span></span>  
  
-   <span data-ttu-id="b0200-467"><xref:System.String.Trim%2A> 开始位置和字符串的末尾移除所有空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-467"><xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.</span></span>  
  
-   <span data-ttu-id="b0200-468"><xref:System.String.TrimEnd%2A> 删除字符串的末尾出现的所有字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-468"><xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.</span></span>  
  
-   <span data-ttu-id="b0200-469"><xref:System.String.TrimStart%2A> 从字符串的开头移除所有空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-469"><xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0200-470">所有字符串修改方法都返回一个新<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-470">All string modification methods return a new <xref:System.String> object.</span></span> <span data-ttu-id="b0200-471">它们不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-471">They don't modify the value of the current instance.</span></span>  
  
### <a name="extracting-substrings-from-a-string"></a><span data-ttu-id="b0200-472">从字符串中提取子字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-472">Extracting substrings from a string</span></span>  
 <span data-ttu-id="b0200-473"><xref:System.String.Split%2A?displayProperty=nameWithType>方法将单个字符串拆分为多个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-473">The <xref:System.String.Split%2A?displayProperty=nameWithType> method separates a single string into multiple strings.</span></span> <span data-ttu-id="b0200-474">该方法的重载，可以指定多个分隔符，以确定最大数量的子字符串中提取方法，并确定是否包括在返回的字符串为空字符串 （它是相邻的分隔符时发生）。</span><span class="sxs-lookup"><span data-stu-id="b0200-474">Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</span></span>  
  
### <a name="combining-strings"></a><span data-ttu-id="b0200-475">组合字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-475">Combining strings</span></span>  
 <span data-ttu-id="b0200-476">以下<xref:System.String>方法可用来进行字符串串联：</span><span class="sxs-lookup"><span data-stu-id="b0200-476">The following <xref:System.String> methods can be used for string concatenation:</span></span>  
  
-   <span data-ttu-id="b0200-477"><xref:System.String.Concat%2A> 将合并成单个字符串的一个或多个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-477"><xref:System.String.Concat%2A> combines one or more substrings into a single string.</span></span>  
  
-   <span data-ttu-id="b0200-478"><xref:System.String.Join%2A> 将一个或多个到单个元素的子字符串连接在一起，并添加每个子字符串之间的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-478"><xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.</span></span>  
  
### <a name="formatting-values"></a><span data-ttu-id="b0200-479">设置值的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-479">Formatting values</span></span>  
 <span data-ttu-id="b0200-480"><xref:System.String.Format%2A?displayProperty=nameWithType>方法使用复合格式设置功能来在字符串中的一个或多个占位符替换为某些对象或值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-480">The <xref:System.String.Format%2A?displayProperty=nameWithType> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</span></span> <span data-ttu-id="b0200-481"><xref:System.String.Format%2A>方法通常用于执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="b0200-481">The <xref:System.String.Format%2A> method is often used to do the following:</span></span>  
  
-   <span data-ttu-id="b0200-482">若要在字符串中嵌入的数字值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-482">To embed the string representation of a numeric value in a string.</span></span>  
  
-   <span data-ttu-id="b0200-483">若要在字符串中嵌入的日期和时间值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-483">To embed the string representation of a date and time value in a string.</span></span>  
  
-   <span data-ttu-id="b0200-484">若要在字符串中嵌入一个枚举值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-484">To embed the string representation of an enumeration value in a string.</span></span>  
  
-   <span data-ttu-id="b0200-485">若要嵌入支持某些对象的字符串表示形式<xref:System.IFormattable>字符串中的接口。</span><span class="sxs-lookup"><span data-stu-id="b0200-485">To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.</span></span>  
  
-   <span data-ttu-id="b0200-486">若要从右对齐或左对齐更大的字符串中的字段中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-486">To right-justify or left-justify a substring in a field within a larger string.</span></span>  
  
 <span data-ttu-id="b0200-487">有关格式设置操作和示例的详细信息，请参阅<xref:System.String.Format%2A>重载摘要。</span><span class="sxs-lookup"><span data-stu-id="b0200-487">For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.</span></span>  
  
### <a name="copying-a-string"></a><span data-ttu-id="b0200-488">复制字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-488">Copying a string</span></span>  
 <span data-ttu-id="b0200-489">您可以通过调用以下<xref:System.String>方法，以便可以字符串的副本：</span><span class="sxs-lookup"><span data-stu-id="b0200-489">You can call the following <xref:System.String> methods to make a copy of a string:</span></span>  
  
-   <span data-ttu-id="b0200-490"><xref:System.String.Clone%2A> 返回对现有的引用<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-490"><xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.</span></span>  
  
-   <span data-ttu-id="b0200-491"><xref:System.String.Copy%2A> 创建现有字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-491"><xref:System.String.Copy%2A> creates a copy of an existing string.</span></span>  
  
-   <span data-ttu-id="b0200-492"><xref:System.String.CopyTo%2A> 将字符串的一部分复制到字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-492"><xref:System.String.CopyTo%2A> copies a portion of a string to a character array.</span></span>  
  
### <a name="normalizing-a-string"></a><span data-ttu-id="b0200-493">规范化字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-493">Normalizing a string</span></span>  
 <span data-ttu-id="b0200-494">Unicode 字符，单个字符可具有多个代码点。</span><span class="sxs-lookup"><span data-stu-id="b0200-494">In Unicode, a single character can have multiple code points.</span></span> <span data-ttu-id="b0200-495">规范化将相同的二进制表示形式转换为这些等效字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-495">Normalization converts these equivalent characters into the same binary representation.</span></span> <span data-ttu-id="b0200-496"><xref:System.String.Normalize%2A?displayProperty=nameWithType>方法执行规范化和<xref:System.String.IsNormalized%2A?displayProperty=nameWithType>方法确定是否规范化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-496">The <xref:System.String.Normalize%2A?displayProperty=nameWithType> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> method determines whether a string is normalized.</span></span>  
  
 <span data-ttu-id="b0200-497">有关详细信息和示例，请参阅[规范化](#Normalization)本主题前面的部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-497">For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.</span></span>  

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921"><span data-ttu-id="b0200-498">排序权重表为 Windows 操作系统</span><span class="sxs-lookup"><span data-stu-id="b0200-498">Sorting Weight Tables for Windows operating systems</span></span></related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt"><span data-ttu-id="b0200-499">默认 Unicode 排序规则元素表，适用于 Linux 和 macOS</span><span class="sxs-lookup"><span data-stu-id="b0200-499">Default Unicode Collation Element Table, for Linux and macOS</span></span></related>
    <threadsafe><span data-ttu-id="b0200-500">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="b0200-500">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-501">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-501">Formatting Types in .NET</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b9f0bf53-e2de-4116-8ce9-d4f91a1df4f7"><span data-ttu-id="b0200-502">在 .NET Framework 中使用字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="b0200-502">Best Practices for Using Strings in the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-503">初始化 <see cref="T:System.String" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-503">Initializes a new instance of the <see cref="T:System.String" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-504">本节内容：</span><span class="sxs-lookup"><span data-stu-id="b0200-504">In this section:</span></span>  
  
 <span data-ttu-id="b0200-505">[重载的构造函数语法](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="b0200-505">[Overloaded constructor syntax](#Syntax) </span></span>  
 <span data-ttu-id="b0200-506">[参数](#Params) </span><span class="sxs-lookup"><span data-stu-id="b0200-506">[Parameters](#Params) </span></span>  
 <span data-ttu-id="b0200-507">[异常](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="b0200-507">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="b0200-508">[我调用哪个方法？](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="b0200-508">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="b0200-509">[创建字符串](#Creating_Strings) </span><span class="sxs-lookup"><span data-stu-id="b0200-509">[Creating strings](#Creating_Strings) </span></span>  
 <span data-ttu-id="b0200-510">[处理重复字符串](#Repetitive) </span><span class="sxs-lookup"><span data-stu-id="b0200-510">[Handling repetitive strings](#Repetitive) </span></span>  
 <span data-ttu-id="b0200-511">实例化字符串的示例：</span><span class="sxs-lookup"><span data-stu-id="b0200-511">Examples of instantiating strings:</span></span>   
 [<span data-ttu-id="b0200-512">使用字符串赋值</span><span class="sxs-lookup"><span data-stu-id="b0200-512">Using string assignment</span></span>](#Ctor1_Example)  
 [<span data-ttu-id="b0200-513">使用的字符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-513">Using a character array</span></span>](#Ctor2_Example)  
 [<span data-ttu-id="b0200-514">使用字符数组的一部分并重复单个字符</span><span class="sxs-lookup"><span data-stu-id="b0200-514">Using a portion of a character array and repeating a single character</span></span>](#Ctor3_Example)  
 [<span data-ttu-id="b0200-515">使用指向字符数组的指针</span><span class="sxs-lookup"><span data-stu-id="b0200-515">Using a pointer to a character array</span></span>](#Ctor4_Example)  
 [<span data-ttu-id="b0200-516">使用指针和数组的范围</span><span class="sxs-lookup"><span data-stu-id="b0200-516">Using  a pointer and a range of an array</span></span>](#Ctor5_Example)  
 [<span data-ttu-id="b0200-517">使用指向有符号的字节数组的指针</span><span class="sxs-lookup"><span data-stu-id="b0200-517">Using a pointer to a signed byte array</span></span>](#Ctor6_Example)  
[<span data-ttu-id="b0200-518">版本信息</span><span class="sxs-lookup"><span data-stu-id="b0200-518">Version information</span></span>](#Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-constructor-syntax"></a><span data-ttu-id="b0200-519">重载的构造函数语法</span><span class="sxs-lookup"><span data-stu-id="b0200-519">Overloaded constructor syntax</span></span>  
 <span data-ttu-id="b0200-520">字符串构造函数分为两类： 不带指针参数，以及使用指针参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-520">String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</span></span> <span data-ttu-id="b0200-521">使用指针的构造函数不符合 CLS 規格。</span><span class="sxs-lookup"><span data-stu-id="b0200-521">The constructors that use pointers are not CLS-compliant.</span></span> <span data-ttu-id="b0200-522">此外，Visual Basic 不支持使用指针，并且 C# 要求使用指针不安全的上下文中运行的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-522">In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</span></span> <span data-ttu-id="b0200-523">有关详细信息，请参阅 [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-523">For more information, see [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md).</span></span>  
  
 <span data-ttu-id="b0200-524">选择重载方法的其他指导，请参阅[我调用哪个方法？](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="b0200-524">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 `String(Char[] value)`  
 <span data-ttu-id="b0200-525">初始化为由 Unicode 字符数组的值的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-525">Initializes the new instance to the value indicated by an array of Unicode characters.</span></span> <span data-ttu-id="b0200-526">此构造函数复制 Unicode 字符 ([示例](#Ctor2_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-526">This constructor copies Unicode characters([example](#Ctor2_Example)).</span></span>  
  
 `String(Char[] value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="b0200-527">初始化为由 Unicode 字符，该数组和一个长度内的起始字符位置的数组的值的新实例 ([示例](#Ctor3_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-527">Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length ([example](#Ctor3_Example)).</span></span>  
  
 `String(Char c, Int32 count)`  
 <span data-ttu-id="b0200-528">由指定的 Unicode 字符指示的值的新实例的初始化重复指定的次数的 ([示例](#Ctor3_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-528">Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times ([example](#Ctor3_Example)).</span></span>  
  
 `String(char* value)`  
 <span data-ttu-id="b0200-529">**(不符合 cls 的)** 初始化为由指向 null 字符终止的 Unicode 字符数组指示的值的新实例 (U + 0000 或 \0)。</span><span class="sxs-lookup"><span data-stu-id="b0200-529">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</span></span> <span data-ttu-id="b0200-530">([示例](#Ctor4_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-530">([example](#Ctor4_Example)).</span></span>  
  
 <span data-ttu-id="b0200-531">权限： <xref:System.Security.SecurityCriticalAttribute>，直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-531">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-532">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-532">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(char* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="b0200-533">**(不符合 cls 的)** 初始化为由指向 Unicode 字符，该数组和一个长度内的起始字符位置的数组的指示的值的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-533">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span> <span data-ttu-id="b0200-534">构造函数复制中的 Unicode 字符`value`从索引处开始`startIndex`和结束索引处`startIndex`  +  `length` -1 ([示例](#Ctor5_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-534">The constructor copies the Unicode characters from `value` starting at index `startIndex` and ending at index `startIndex` + `length` - 1 ([example](#Ctor5_Example)).</span></span>  
  
 <span data-ttu-id="b0200-535">权限： <xref:System.Security.SecurityCriticalAttribute>，直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-535">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-536">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-536">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value)`  
 <span data-ttu-id="b0200-537">**(不符合 cls 的)** 初始化为由指向 8 位有符号整数的数组的指示的值的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-537">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="b0200-538">假定数组来表示使用当前系统代码页编码的字符串 (即指定的编码<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="b0200-538">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="b0200-539">构造函数处理中的字符`value`从指定的指针，直到达到 null 字符 (0x00) 位置 ([示例](#Ctor6_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-539">The constructor processes characters from `value` starting from the location specified by the pointer until a null character (0x00) is reached ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="b0200-540">权限： <xref:System.Security.SecurityCriticalAttribute>，直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-540">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-541">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-541">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="b0200-542">**(不符合 cls 的)** 初始化为由指向 8 位有符号的整数，该数组和一个长度内的起始位置的数组的指示的值的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-542">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span>  <span data-ttu-id="b0200-543">假定数组来表示使用当前系统代码页编码的字符串 (即指定的编码<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="b0200-543">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="b0200-544">构造函数处理从值开始的字符`startIndex`结束时间`startIndex`  +  `length` -1 ([示例](#Ctor6_Example))。</span><span class="sxs-lookup"><span data-stu-id="b0200-544">The constructor processes characters from value starting at `startIndex` and ending at `startIndex` + `length` - 1 ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="b0200-545">权限： <xref:System.Security.SecurityCriticalAttribute>，直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-545">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-546">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-546">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)`  
 <span data-ttu-id="b0200-547">**(不符合 cls 的)** 初始化为由指向 8 位有符号整数，该数组长度内的起始位置的数组的指示的值的新实例和一个<xref:System.Text.Encoding>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-547">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref:System.Text.Encoding> object.</span></span>  
  
 <span data-ttu-id="b0200-548">权限： <xref:System.Security.SecurityCriticalAttribute>，直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-548">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-549">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-549">This member cannot be used by partially trusted or transparent code.</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="b0200-550">参数</span><span class="sxs-lookup"><span data-stu-id="b0200-550">Parameters</span></span>  
 <span data-ttu-id="b0200-551">下面是使用参数的完整列表<xref:System.String>不包括指针参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-551">Here is a complete list of parameters used by <xref:System.String> constructors that don't include a pointer parameter.</span></span> <span data-ttu-id="b0200-552">使用每个重载的参数，请参阅上述重载语法。</span><span class="sxs-lookup"><span data-stu-id="b0200-552">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="b0200-553">参数</span><span class="sxs-lookup"><span data-stu-id="b0200-553">Parameter</span></span>|<span data-ttu-id="b0200-554">类型</span><span class="sxs-lookup"><span data-stu-id="b0200-554">Type</span></span>|<span data-ttu-id="b0200-555">描述</span><span class="sxs-lookup"><span data-stu-id="b0200-555">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<span data-ttu-id="b0200-556"><xref:System.Char>[]</span><span class="sxs-lookup"><span data-stu-id="b0200-556"><xref:System.Char>[]</span></span>|<span data-ttu-id="b0200-557">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-557">An array of Unicode characters.</span></span>|  
|`c`|<xref:System.Char>|<span data-ttu-id="b0200-558">一个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-558">A Unicode character.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="b0200-559">中的起始位置`value`的新字符串中的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-559">The starting position in `value` of the first character in the new string.</span></span><br /><br /> <span data-ttu-id="b0200-560">默认值：0</span><span class="sxs-lookup"><span data-stu-id="b0200-560">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="b0200-561">中的字符数`value`要包括在新的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-561">The number of characters in `value` to include in the new string.</span></span><br /><br /> <span data-ttu-id="b0200-562">默认值： <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b0200-562">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="b0200-563">数乘以字符`c`重复新的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-563">The number of times the character `c` is repeated in the new string.</span></span> <span data-ttu-id="b0200-564">如果`count`为零，新对象的值是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-564">If `count` is zero, the value of the new object is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="b0200-565">下面是使用参数的完整列表<xref:System.String>包括指针参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-565">Here is a complete list of parameters used by <xref:System.String> constructors that include a pointer parameter.</span></span> <span data-ttu-id="b0200-566">使用每个重载的参数，请参阅上述重载语法。</span><span class="sxs-lookup"><span data-stu-id="b0200-566">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="b0200-567">参数</span><span class="sxs-lookup"><span data-stu-id="b0200-567">Parameter</span></span>|<span data-ttu-id="b0200-568">类型</span><span class="sxs-lookup"><span data-stu-id="b0200-568">Type</span></span>|<span data-ttu-id="b0200-569">描述</span><span class="sxs-lookup"><span data-stu-id="b0200-569">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<xref:System.Char>*<br /><br /> <span data-ttu-id="b0200-570">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-570">-or-</span></span><br /><br /> <xref:System.SByte>\*|<span data-ttu-id="b0200-571">指向以 null 结尾的 Unicode 字符数组或 8 位有符号整数的数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-571">A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</span></span> <span data-ttu-id="b0200-572">如果`value`是`null`或空数组的新字符串的值为<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-572">If `value` is `null` or an empty array, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="b0200-573">新的字符串中定义的第一个字符的数组元素的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-573">The index of the array element that defines the first character in the new string.</span></span><br /><br /> <span data-ttu-id="b0200-574">默认值：0</span><span class="sxs-lookup"><span data-stu-id="b0200-574">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="b0200-575">要用于创建新的字符串的数组元素数。</span><span class="sxs-lookup"><span data-stu-id="b0200-575">The number of array elements to use to create the new string.</span></span> <span data-ttu-id="b0200-576">如果长度为零，该构造函数创建一个字符串，其值<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-576">If length is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span><br /><br /> <span data-ttu-id="b0200-577">默认值： <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b0200-577">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`enc`|<xref:System.Text.Encoding>|<span data-ttu-id="b0200-578">一个对象，指定如何`value`数组进行编码。</span><span class="sxs-lookup"><span data-stu-id="b0200-578">An object that specifies how the `value` array is encoded.</span></span><br /><br /> <span data-ttu-id="b0200-579">默认值： <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>，或系统的当前 ANSI 代码页</span><span class="sxs-lookup"><span data-stu-id="b0200-579">Default value: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, or the system's current ANSI code page</span></span>|  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="b0200-580">异常</span><span class="sxs-lookup"><span data-stu-id="b0200-580">Exceptions</span></span>  
 <span data-ttu-id="b0200-581">下面是由不包括指针参数的构造函数引发的异常的列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-581">Here's a list of exceptions thrown by constructors that don't include pointer parameters.</span></span>  
  
|<span data-ttu-id="b0200-582">例外</span><span class="sxs-lookup"><span data-stu-id="b0200-582">Exception</span></span>|<span data-ttu-id="b0200-583">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-583">Condition</span></span>|<span data-ttu-id="b0200-584">引发的</span><span class="sxs-lookup"><span data-stu-id="b0200-584">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="b0200-585">`value` 为 `null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-585">`value` is `null`.</span></span>|<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="b0200-586">`startIndex``length`，或`count`小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-586">`startIndex`,`length`, or `count` is less than zero.</span></span><br /><br /> <span data-ttu-id="b0200-587">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-587">-or-</span></span><br /><br /> <span data-ttu-id="b0200-588">`startIndex` 与 `length` 的和大于 `value` 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="b0200-588">The sum of `startIndex` and `length` is greater than the number of elements in `value`.</span></span><br /><br /> <span data-ttu-id="b0200-589">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-589">-or-</span></span><br /><br /> <span data-ttu-id="b0200-590">`count` 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-590">`count` is less than zero.</span></span>|<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
  
 <span data-ttu-id="b0200-591">下面是由包含指针参数的构造函数引发的异常的列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-591">Here's a list of exceptions thrown by constructors that include pointer parameters.</span></span>  
  
|<span data-ttu-id="b0200-592">例外</span><span class="sxs-lookup"><span data-stu-id="b0200-592">Exception</span></span>|<span data-ttu-id="b0200-593">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-593">Condition</span></span>|<span data-ttu-id="b0200-594">引发的</span><span class="sxs-lookup"><span data-stu-id="b0200-594">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="b0200-595">`value` 指定包含无效的 Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-595">`value` specifies an array that contains an invalid Unicode character.</span></span><br /><br /> <span data-ttu-id="b0200-596">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-596">-or-</span></span><br /><br /> <span data-ttu-id="b0200-597">`value` 或`value`  +  `startIndex`指定的地址小于 64k。</span><span class="sxs-lookup"><span data-stu-id="b0200-597">`value` or `value` + `startIndex` specifies an address that is less than 64K.</span></span><br /><br /> <span data-ttu-id="b0200-598">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-598">-or-</span></span><br /><br /> <span data-ttu-id="b0200-599">一个新<xref:System.String>无法初始化实例，从`value`字节数组的因为`value`不使用默认代码页编码。</span><span class="sxs-lookup"><span data-stu-id="b0200-599">A new <xref:System.String> instance could not be initialized from the `value` byte array because `value` does not use the default code page encoding.</span></span>|<span data-ttu-id="b0200-600">所有构造函数的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-600">All constructors with pointers.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="b0200-601">`value` 为 null。</span><span class="sxs-lookup"><span data-stu-id="b0200-601">`value` is null.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="b0200-602">当前进程不具有对所有通过地址访问的字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="b0200-602">The current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="b0200-603">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-603">-or-</span></span><br /><br /> <span data-ttu-id="b0200-604">`startIndex` 或 `length` 小于零，`value` + `startIndex` 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="b0200-604">`startIndex` or `length` is less than zero, `value` + `startIndex` cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="b0200-605">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-605">-or-</span></span><br /><br /> <span data-ttu-id="b0200-606">新字符串的长度为太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="b0200-606">The length of the new string is too large to allocate.</span></span>|<span data-ttu-id="b0200-607">所有构造函数的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-607">All constructors with pointers.</span></span>|  
|<xref:System.AccessViolationException>|<span data-ttu-id="b0200-608">`value`或`value`  +  `startIndex`  +  `length` -1，指定了无效的地址。</span><span class="sxs-lookup"><span data-stu-id="b0200-608">`value`, or `value` + `startIndex` + `length` - 1, specifies an invalid address.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="b0200-609">我调用哪个方法？</span><span class="sxs-lookup"><span data-stu-id="b0200-609">Which method do I call?</span></span>  
  
|<span data-ttu-id="b0200-610">功能</span><span class="sxs-lookup"><span data-stu-id="b0200-610">To</span></span>|<span data-ttu-id="b0200-611">调用或使用</span><span class="sxs-lookup"><span data-stu-id="b0200-611">Call or use</span></span>|  
|--------|-----------------|  
|<span data-ttu-id="b0200-612">创建一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-612">Create a string.</span></span>|<span data-ttu-id="b0200-613">从字符串文字或现有字符串的分配 ([示例](#Ctor1_Example))</span><span class="sxs-lookup"><span data-stu-id="b0200-613">Assignment from a string literal or an existing string ([example](#Ctor1_Example))</span></span>|  
|<span data-ttu-id="b0200-614">从整个字符数组创建字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-614">Create a string from an entire character array.</span></span>|<span data-ttu-id="b0200-615"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([示例](#Ctor2_Example))</span><span class="sxs-lookup"><span data-stu-id="b0200-615"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([example](#Ctor2_Example))</span></span>|  
|<span data-ttu-id="b0200-616">从字符数组的一部分创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-616">Create a string from a portion of a character array.</span></span>|<span data-ttu-id="b0200-617"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([示例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="b0200-617"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="b0200-618">创建重复多次的同一字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-618">Create a string that repeats the same character multiple times.</span></span>|<span data-ttu-id="b0200-619"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([示例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="b0200-619"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="b0200-620">从指针到 Unicode 或宽字符数组创建字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-620">Create a string from a pointer to a Unicode or wide character array.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%29>|  
|<span data-ttu-id="b0200-621">从 Unicode 或宽字符数组的一部分创建一个字符串，使用它的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-621">Create a string from a portion of a Unicode or wide character array by using its pointer.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>|  
|<span data-ttu-id="b0200-622">创建从一个字符串C++`char`数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-622">Create a string from a C++ `char` array.</span></span>|<span data-ttu-id="b0200-623"><xref:System.String.%23ctor%28System.SByte%2A%29>， <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="b0200-623"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span></span><br /><br /> <span data-ttu-id="b0200-624">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-624">-or-</span></span><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<span data-ttu-id="b0200-625">创建从 ASCII 字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-625">Create a string from ASCII characters.</span></span>|<xref:System.Text.ASCIIEncoding.GetString%2A?displayProperty=nameWithType>|  
  
<a name="Creating_Strings"></a>   
## <a name="creating-strings"></a><span data-ttu-id="b0200-626">创建字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-626">Creating strings</span></span>  
 <span data-ttu-id="b0200-627">最常用的方法以编程方式创建字符串是简单的赋值，如中所示[本例](#Ctor1_Example)。</span><span class="sxs-lookup"><span data-stu-id="b0200-627">The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in [this example](#Ctor1_Example).</span></span> <span data-ttu-id="b0200-628"><xref:System.String>类还包括四种类型的构造函数重载，可从以下值创建字符串：</span><span class="sxs-lookup"><span data-stu-id="b0200-628">The <xref:System.String> class also includes four types of constructor overloads that let you create strings from the following values:</span></span>  
  
-   <span data-ttu-id="b0200-629">从字符数组 （数组的 UTF 16 编码的字符）。</span><span class="sxs-lookup"><span data-stu-id="b0200-629">From a character array (an array of UTF-16-encoded characters).</span></span> <span data-ttu-id="b0200-630">您可以创建一个新<xref:System.String>整个数组或它的一部分中的字符的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-630">You can create a new <xref:System.String> object from the characters in the entire array or a portion of it.</span></span> <span data-ttu-id="b0200-631"><xref:System.String.%23ctor%28System.Char%5B%5D%29>构造函数将所有字符数组中都复制到新的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-631">The <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor copies all the characters in the array to the new string.</span></span> <span data-ttu-id="b0200-632"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>索引中的字符复制构造函数`startIndex`到索引`startIndex`  +  `length` -1 到新的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-632">The <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor copies the characters from index `startIndex` to index `startIndex` + `length` - 1 to the new string.</span></span> <span data-ttu-id="b0200-633">如果`length`为零，新的字符串的值是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-633">If `length` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
     <span data-ttu-id="b0200-634">如果你的代码重复实例化具有相同的值的字符串，可以通过使用创建字符串的替代方法来提高应用程序的性能。</span><span class="sxs-lookup"><span data-stu-id="b0200-634">If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</span></span> <span data-ttu-id="b0200-635">有关详细信息，请参阅[处理重复字符串](#Repetitive)。</span><span class="sxs-lookup"><span data-stu-id="b0200-635">For more information, see [Handling repetitive strings](#Repetitive).</span></span>  
  
-   <span data-ttu-id="b0200-636">通过单个字符，这是一个，或更多次使用的重复的零<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-636">From a single character that is duplicated zero, one, or more times, by using the <xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="b0200-637">如果`count`为零，新的字符串的值是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-637">If `count` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b0200-638">从指向以 null 结尾的字符数组的指针，通过使用<xref:System.String.%23ctor%28System.Char%2A%29>或<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-638">From a pointer to a null-terminated character array, by using the <xref:System.String.%23ctor%28System.Char%2A%29> or <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="b0200-639">整个数组或指定范围内可用于初始化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-639">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="b0200-640">构造函数将复制从指定的指针或从指定的指针加上启动的 Unicode 字符序列`startIndex`直到结束数组或为`length`字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-640">The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus `startIndex` and continuing to the end of the array or for `length` characters.</span></span> <span data-ttu-id="b0200-641">如果`value`是 null 指针或`length`为零，该构造函数创建一个字符串，其值<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-641">If `value` is a null pointer or `length` is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-642">如果复制操作继续到数组末尾，数组不是以 null 结尾的构造函数行为与系统相关。</span><span class="sxs-lookup"><span data-stu-id="b0200-642">If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</span></span> <span data-ttu-id="b0200-643">此类条件可能会导致访问冲突。</span><span class="sxs-lookup"><span data-stu-id="b0200-643">Such a condition might cause an access violation.</span></span>  
  
     <span data-ttu-id="b0200-644">如果数组包含任何嵌入的 null 字符 (U + 0000 或 \0) 和<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>调用重载，字符串实例包含`length`字符包括任何嵌入的 null 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-644">If the array contains any embedded null characters (U+0000 or '\0') and the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="b0200-645">下面的示例演示包含两个空字符的 10 个元素数组的指针传递到会发生什么情况<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-645">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="b0200-646">由于地址是数组的开头，并且数组中的所有元素都都要添加到字符串，该构造函数实例化具有 10 个字符，包括两个嵌入的 null 的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-646">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="b0200-647">另一方面，如果将相同的数组传递给<xref:System.String.%23ctor%28System.Char%2A%29>构造函数，结果是不包括第一个空字符的四个字符字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-647">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.Char%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/chptrctor_null.cpp#5)]
     [!code-csharp[System.String.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/chptrctor_null.cs#5)]  
  
     <span data-ttu-id="b0200-648">该数组必须包含 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-648">The array must contain Unicode characters.</span></span> <span data-ttu-id="b0200-649">在C++，则此表示的字符数组必须被定义为托管<xref:System.Char>[] 类型或非托管`wchar_t`[] 类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-649">In C++, this means that the character array must be defined either as the managed <xref:System.Char>[] type or the unmanaged`wchar_t`[] type.</span></span>  
  
     <span data-ttu-id="b0200-650">如果<xref:System.String.%23ctor%28System.Char%2A%29>调用重载和数组不是以 null 结尾，或者如果<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>调用重载和`startIndex`  +  `length`-1 包括为字符序列，其外部内存分配的范围构造函数的行为是依赖于系统和可能出现访问冲突。</span><span class="sxs-lookup"><span data-stu-id="b0200-650">If the <xref:System.String.%23ctor%28System.Char%2A%29> overload is called and the array is not null-terminated, or if the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called and `startIndex` + `length`-1 includes a range that it outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</span></span> <span data-ttu-id="b0200-651">此外，Intel Itanium 处理器上调用<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>构造函数可能会引发<xref:System.DataMisalignedException>异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-651">In addition, on the Intel Itanium processor, calls to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor may throw a <xref:System.DataMisalignedException> exception.</span></span> <span data-ttu-id="b0200-652">如果发生这种情况，调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>相反。</span><span class="sxs-lookup"><span data-stu-id="b0200-652">If this occurs, call the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> instead.</span></span>  
  
-   <span data-ttu-id="b0200-653">从指向一个有符号的字节数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-653">From a pointer to a signed byte array.</span></span> <span data-ttu-id="b0200-654">整个数组或指定范围内可用于初始化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-654">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="b0200-655">可以通过使用默认代码页编码，解释的字节序列的或可以构造函数调用中指定的编码。</span><span class="sxs-lookup"><span data-stu-id="b0200-655">The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</span></span> <span data-ttu-id="b0200-656">如果构造函数会尝试实例化整个数组，它不是以 null 结尾的字符串，或者从数组的范围`value`  +  `startIndex`到`value`  +  `startIndex`  +  `length` -1 表示为数组分配的内存之外，此构造函数的行为是依赖于系统，可能出现访问冲突。</span><span class="sxs-lookup"><span data-stu-id="b0200-656">If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from `value` + `startIndex` to `value` + `startIndex` + `length` -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</span></span>  
  
     <span data-ttu-id="b0200-657">包含作为参数的有符号的字节数组的三个构造函数主要用于转换C++`char`数组化为一个字符串，在此示例中所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-657">The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ `char` array to a string, as shown in this example:</span></span>  
  
     [!code-cpp[System.String.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/sbyte_ctor1.cpp#4)]  
  
     <span data-ttu-id="b0200-658">如果数组包含值为 0 的任何 null 字符 (\0) 或字节和<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>调用重载，字符串实例包含`length`字符包括任何嵌入的 null 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-658">If the array contains any null characters ('\0') or bytes whose value is 0 and the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="b0200-659">下面的示例演示包含两个空字符的 10 个元素数组的指针传递到会发生什么情况<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-659">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="b0200-660">由于地址是数组的开头，并且数组中的所有元素都都要添加到字符串，该构造函数实例化具有 10 个字符，包括两个嵌入的 null 的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-660">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="b0200-661">另一方面，如果将相同的数组传递给<xref:System.String.%23ctor%28System.SByte%2A%29>构造函数，结果是不包括第一个空字符的四个字符字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-661">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/ptrctor_null.cpp#6)]
     [!code-csharp[System.String.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ptrctor_null.cs#6)]  
  
     <span data-ttu-id="b0200-662">因为<xref:System.String.%23ctor%28System.SByte%2A%29>并<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29>构造函数将解释`value`通过使用默认的 ANSI 代码页，调用这些构造函数的完全相同的字节数组可能创建不同的系统具有不同的值的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-662">Because the <xref:System.String.%23ctor%28System.SByte%2A%29> and <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> constructors interpret `value` by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</span></span>  
  
<a name="Repetitive"></a>   
## <a name="handling-repetitive-strings"></a><span data-ttu-id="b0200-663">处理重复字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-663">Handling repetitive strings</span></span>  
 <span data-ttu-id="b0200-664">使用应用程序分析或解码的文本流通常<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>构造函数或<xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法以将字符序列转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-664">Apps that parse or decode streams of text often use the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor or the <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to convert sequences of characters into a string.</span></span> <span data-ttu-id="b0200-665">重复使用相同的值而不是创建和重复使用一个字符串创建新字符串，浪费内存。</span><span class="sxs-lookup"><span data-stu-id="b0200-665">Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</span></span> <span data-ttu-id="b0200-666">如果你很可能会反复创建相同的字符串值，通过调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>构造函数，即使您不知道在继续学习这些相同的字符串值可能是，可以改为使用查找表。</span><span class="sxs-lookup"><span data-stu-id="b0200-666">If you are likely to create the same string value repeatedly by calling the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</span></span>  
  
 <span data-ttu-id="b0200-667">例如，假设您读取和分析从包含 XML 标记和特性的文件的字符流。</span><span class="sxs-lookup"><span data-stu-id="b0200-667">For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</span></span> <span data-ttu-id="b0200-668">当分析流时，反复遇到某些令牌 （即，具有符号的含义的字符序列）。</span><span class="sxs-lookup"><span data-stu-id="b0200-668">When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</span></span> <span data-ttu-id="b0200-669">等效于字符串"0"、"1"、"true"和"false"的令牌会在 XML 流中发生的频率。</span><span class="sxs-lookup"><span data-stu-id="b0200-669">Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</span></span>  
  
 <span data-ttu-id="b0200-670">而不是将每个令牌转换成一个新字符串，可以创建<xref:System.Xml.NameTable?displayProperty=nameWithType>对象以保存经常出现的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-670">Instead of converting each token into a new string, you can create a <xref:System.Xml.NameTable?displayProperty=nameWithType> object to hold commonly occurring strings.</span></span> <span data-ttu-id="b0200-671"><xref:System.Xml.NameTable>对象可以改善性能，因为它无需分配临时内存中检索存储的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-671">The <xref:System.Xml.NameTable> object improves performance, because it retrieves stored strings without allocating temporary memory.</span></span> <span data-ttu-id="b0200-672">当遇到一个令牌时，使用<xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法以从表中检索令牌。</span><span class="sxs-lookup"><span data-stu-id="b0200-672">When you encounter a token, use the <xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to retrieve the token from the table.</span></span> <span data-ttu-id="b0200-673">如果令牌存在，该方法将返回对应的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-673">If the token exists, the method returns the corresponding string.</span></span> <span data-ttu-id="b0200-674">如果该令牌不存在，则使用<xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法以向表中插入令牌并获取相应的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-674">If the token does not exist, use the <xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to insert the token into the table and to get the corresponding string.</span></span>  
  
<a name="Ctor1_Example"></a>   
## <a name="example-1-using-string-assignment"></a><span data-ttu-id="b0200-675">示例 1：使用字符串赋值</span><span class="sxs-lookup"><span data-stu-id="b0200-675">Example 1: Using string assignment</span></span>  
 <span data-ttu-id="b0200-676">下面的示例通过将其分配字符串文本创建一个新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-676">The following example creates a new string by assigning it a string literal.</span></span> <span data-ttu-id="b0200-677">它通过将第一个字符串的值分配给它创建第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-677">It creates a second string by assigning the value of the first string to it.</span></span> <span data-ttu-id="b0200-678">这些是实例化一个新的两个最常见方法<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-678">These are the two most common ways to instantiate a new <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.String.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/assignment.cpp#1)]
 [!code-csharp[System.String.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.String.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.ctor/vb/ctor1.vb#1)]  
  
<a name="Ctor2_Example"></a>   
## <a name="example-2-using-a-character-array"></a><span data-ttu-id="b0200-679">示例 2：使用的字符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-679">Example 2: Using a character array</span></span>  
 <span data-ttu-id="b0200-680">下面的示例演示如何创建一个新<xref:System.String>字符数组中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-680">The following example demonstrates how to create a new <xref:System.String> object from a character array.</span></span>  
  
 [!code-cpp[stringexample1#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#1)]
 [!code-csharp[stringexample1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#1)]
 [!code-vb[stringexample1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#1)]  
  
<a name="Ctor3_Example"></a>   
## <a name="example-3-using-a-portion-of-a-character-array-and-repeating-a-single-character"></a><span data-ttu-id="b0200-681">示例 3：使用字符数组的一部分并重复单个字符</span><span class="sxs-lookup"><span data-stu-id="b0200-681">Example 3: Using a portion of a character array and repeating a single character</span></span>  
 <span data-ttu-id="b0200-682">下面的示例演示如何创建一个新<xref:System.String>字符数组，以及如何创建一个新的部分中的对象<xref:System.String>包含单个字符的多个匹配项的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-682">The following example demonstrates how to create a new <xref:System.String> object from a portion of a character array, and how to create a new <xref:System.String> object that contains multiple occurrences of a single character.</span></span>  
  
 [!code-cpp[stringexample1#3](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#3)]
 [!code-csharp[stringexample1#3](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#3)]
 [!code-vb[stringexample1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#3)]  
  
<a name="Ctor4_Example"></a>   
## <a name="example-4-using-a-pointer-to-a-character-array"></a><span data-ttu-id="b0200-683">示例 4：使用指向字符数组的指针</span><span class="sxs-lookup"><span data-stu-id="b0200-683">Example 4: Using a pointer to a character array</span></span>  
 <span data-ttu-id="b0200-684">下面的示例演示如何创建一个新<xref:System.String>从指针到字符数组的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-684">The following example demonstrates how to create a new <xref:System.String> object from a pointer to an array of characters.</span></span> <span data-ttu-id="b0200-685">必须通过使用编译 C# 示例`/unsafe`编译器开关。</span><span class="sxs-lookup"><span data-stu-id="b0200-685">The C# example must be compiled by using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char1_ctor.cpp#2)]
 [!code-csharp[System.String.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor2.cs#2)]  
  
<a name="Ctor5_Example"></a>   
## <a name="example-5-instantiating-a-string-from-a-pointer-and-a-range-of-an-array"></a><span data-ttu-id="b0200-686">示例 5:实例化的字符串指针和数组的范围</span><span class="sxs-lookup"><span data-stu-id="b0200-686">Example 5: Instantiating a string from a pointer and a range of an array</span></span>  
 <span data-ttu-id="b0200-687">下面的示例将检查一段或感叹号字符数组的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-687">The following example examines the elements of a character array for either a period or an exclamation point.</span></span> <span data-ttu-id="b0200-688">如果找到一个对象，它实例化前标点符号的字符数组中的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-688">If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</span></span> <span data-ttu-id="b0200-689">如果没有，它实例化的字符串数组的全部内容。</span><span class="sxs-lookup"><span data-stu-id="b0200-689">If not, it instantiates a string with the entire contents of the array.</span></span> <span data-ttu-id="b0200-690">必须使用编译 C# 示例`/unsafe`编译器开关。</span><span class="sxs-lookup"><span data-stu-id="b0200-690">The C# example must be compiled using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char2_ctor.cpp#3)]
 [!code-csharp[System.String.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/char2_ctor.cs#3)]  
  
<a name="Ctor6_Example"></a>   
## <a name="example-6-instantiating-a-string-from-a-pointer-to-a-signed-byte-array"></a><span data-ttu-id="b0200-691">示例 6:实例化从指针到带符号的字节数组的字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-691">Example 6: Instantiating a string from a pointer to a signed byte array</span></span>  
 <span data-ttu-id="b0200-692">下面的示例演示如何创建的实例<xref:System.String>类的<xref:System.String.%23ctor%28System.SByte%2A%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-692">The following example demonstrates how you can create an instance of the <xref:System.String> class with the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor.</span></span>  
  
 [!code-cpp[stringexample1#2](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#2)]
 [!code-csharp[stringexample1#2](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#2)]  
  
<a name="Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="b0200-693">版本信息</span><span class="sxs-lookup"><span data-stu-id="b0200-693">Version information</span></span>  
 <span data-ttu-id="b0200-694">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="b0200-694">.NET Framework</span></span>  
 <span data-ttu-id="b0200-695">在中，所有重载都受都支持：4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span><span class="sxs-lookup"><span data-stu-id="b0200-695">All overloads are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
  
 <span data-ttu-id="b0200-696">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="b0200-696">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="b0200-697">在中，所有重载都受都支持：4，3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="b0200-697">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="b0200-698">可移植类库</span><span class="sxs-lookup"><span data-stu-id="b0200-698">Portable Class Library</span></span>  
 <span data-ttu-id="b0200-699">所有重载，而无需<xref:System.SByte>`*`参数支持</span><span class="sxs-lookup"><span data-stu-id="b0200-699">All overloads without an <xref:System.SByte>`*` parameter are supported</span></span>  
  
 <span data-ttu-id="b0200-700">适用于 Windows 应用商店应用的 .NET</span><span class="sxs-lookup"><span data-stu-id="b0200-700">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="b0200-701">所有重载，而无需<xref:System.SByte>`*`中支持参数：Windows 8</span><span class="sxs-lookup"><span data-stu-id="b0200-701">All overloads without an <xref:System.SByte>`*` parameter are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-702">指向以 null 终止的 Unicode 字符数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-702">A pointer to a null-terminated array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="b0200-703">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-703">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-704">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-704">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-705">当前进程不具有对所有通过地址访问的字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="b0200-705">The current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-706"><paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> 指定的地址小于 64000。</span><span class="sxs-lookup"><span data-stu-id="b0200-706"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b0200-707">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-707">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-708">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-708">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new string : char[] -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-709">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-709">An array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="b0200-710">将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-710">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-711">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-711">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="new string : ReadOnlySpan&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-712">一个指针，指向以 null 结尾的 8 位带符号整数数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-712">A pointer to a null-terminated array of 8-bit signed integers.</span></span> <span data-ttu-id="b0200-713">使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</span><span class="sxs-lookup"><span data-stu-id="b0200-713">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <summary><span data-ttu-id="b0200-714">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指针指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-714">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-715">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-715">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-716"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-716"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-717">如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-717">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-718">要初始化的新字符串的长度（该长度由 <paramref name="value" /> 的 null 终止字符确定）太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="b0200-718">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="b0200-719"><paramref name="value" /> 指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-719"><paramref name="value" /> specifies an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b0200-720">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-720">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-721">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-721">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char c, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char c, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (c As Char, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char c, int count);" />
      <MemberSignature Language="F#" Value="new string : char * int -&gt; string" Usage="new System.string (c, count)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="b0200-722">一个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-722">A Unicode character.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-723"><paramref name="c" /> 出现的次数。</span><span class="sxs-lookup"><span data-stu-id="b0200-723">The number of times <paramref name="c" /> occurs.</span></span></param>
        <summary><span data-ttu-id="b0200-724">将 <see cref="T:System.String" /> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-724">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-725">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-725">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-726"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-726"><paramref name="count" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-727">指向 Unicode 字符数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-727">A pointer to an array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-728"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-728">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-729">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-729">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="b0200-730">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-730">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-731">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-731">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-732"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，<paramref name="value" /> + <paramref name="startIndex" /> 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="b0200-732"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-733"><paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64000。</span><span class="sxs-lookup"><span data-stu-id="b0200-733"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b0200-734">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-734">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-735">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-735">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : char[] * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-736">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-736">An array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-737"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-737">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-738">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-738">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="b0200-739">将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-739">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-740">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-740">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-741"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-741"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-742"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-742"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-743">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-743">-or-</span></span> 
<span data-ttu-id="b0200-744"><paramref name="startIndex" /> 与 <paramref name="length" /> 的和大于 <paramref name="value" /> 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="b0200-744">The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-745">指向 8 位带符号整数数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-745">A pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="b0200-746">使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</span><span class="sxs-lookup"><span data-stu-id="b0200-746">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-747"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-747">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-748">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-748">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="b0200-749">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-749">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-750">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-750">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-751"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-751"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-752"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-752"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-753">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-753">-or-</span></span> 
<span data-ttu-id="b0200-754">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</span><span class="sxs-lookup"><span data-stu-id="b0200-754">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>  
  
<span data-ttu-id="b0200-755">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-755">-or-</span></span> 
<span data-ttu-id="b0200-756">要初始化的新字符串的长度太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="b0200-756">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-757">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。</span><span class="sxs-lookup"><span data-stu-id="b0200-757">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>  
  
<span data-ttu-id="b0200-758">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-758">-or-</span></span> 
<span data-ttu-id="b0200-759">如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-759">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="b0200-760"><paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-760"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b0200-761">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-761">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-762">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-762">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length, class System.Text.Encoding enc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length, System::Text::Encoding ^ enc);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int * System.Text.Encoding -&gt; string" Usage="new System.string (value, startIndex, length, enc)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="enc" Type="System.Text.Encoding" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-763">指向 8 位带符号整数数组的指针。</span><span class="sxs-lookup"><span data-stu-id="b0200-763">A pointer to an array of 8-bit signed integers.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-764"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-764">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-765">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-765">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <param name="enc"><span data-ttu-id="b0200-766">一个对象，用于指定如何对 <paramref name="value" /> 所引用的数组进行编码。</span><span class="sxs-lookup"><span data-stu-id="b0200-766">An object that specifies how the array referenced by <paramref name="value" /> is encoded.</span></span> <span data-ttu-id="b0200-767">如果 <paramref name="enc" /> 为 <see langword="null" />，则假定以 ANSI 编码。</span><span class="sxs-lookup"><span data-stu-id="b0200-767">If <paramref name="enc" /> is <see langword="null" />, ANSI encoding is assumed.</span></span></param>
        <summary><span data-ttu-id="b0200-768">将 <see cref="T:System.String" /> 的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置、长度以及 <see cref="T:System.Text.Encoding" /> 对象指示的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-768">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-769">有关示例和全面的使用情况信息和其他`String`构造函数重载，请参阅<xref:System.String.%23ctor%2A>摘要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-769">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-770"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-770"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-771"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-771"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-772">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-772">-or-</span></span> 
<span data-ttu-id="b0200-773">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</span><span class="sxs-lookup"><span data-stu-id="b0200-773">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>  
  
<span data-ttu-id="b0200-774">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-774">-or-</span></span> 
<span data-ttu-id="b0200-775">要初始化的新字符串的长度太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="b0200-775">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-776">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。</span><span class="sxs-lookup"><span data-stu-id="b0200-776">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>  
  
<span data-ttu-id="b0200-777">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-777">-or-</span></span> 
<span data-ttu-id="b0200-778">如果 <paramref name="value" /> 按照指定的 <paramref name="enc" /> 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-778">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="b0200-779"><paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-779"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b0200-780">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="b0200-780">requires full trust for the immediate caller.</span></span> <span data-ttu-id="b0200-781">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-781">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[Index index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(valuetype System.Index)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Index) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[Index] { char get(Index index); };" />
      <MemberSignature Language="F#" Value="member this.Chars(Index) : char" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Index" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Chars(int) : char" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b0200-782">当前的字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-782">A position in the current string.</span></span></param>
        <summary><span data-ttu-id="b0200-783">获取当前 <see cref="T:System.Char" /> 对象中位于指定位置的 <see cref="T:System.String" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-783">Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="b0200-784">位于 <paramref name="index" /> 位置的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-784">The object at position <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-785">`index`参数是从零开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-785">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="b0200-786">此属性返回<xref:System.Char>对象中指定的位置`index`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-786">This property returns the <xref:System.Char> object at the position specified by the `index` parameter.</span></span> <span data-ttu-id="b0200-787">但是，可能由多个表示 Unicode 字符<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="b0200-787">However, a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="b0200-788">使用<xref:System.Globalization.StringInfo?displayProperty=nameWithType>类，以便使用 Unicode 字符而不是<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-788">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with Unicode characters instead of <xref:System.Char> objects.</span></span> <span data-ttu-id="b0200-789">有关详细信息，请参阅中的"Char 对象和 Unicode 字符"一节<xref:System.String>类概述。</span><span class="sxs-lookup"><span data-stu-id="b0200-789">For more information, see the "Char Objects and Unicode Characters" section in the <xref:System.String> class overview.</span></span>  
  
 <span data-ttu-id="b0200-790">在 C# 中，<xref:System.String.Chars%2A>属性是一个索引器。</span><span class="sxs-lookup"><span data-stu-id="b0200-790">In C#, the <xref:System.String.Chars%2A> property is an indexer.</span></span> <span data-ttu-id="b0200-791">在 Visual Basic 中，它是默认属性的<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-791">In Visual Basic, it is the default property of the <xref:System.String> class.</span></span> <span data-ttu-id="b0200-792">每个<xref:System.Char>可以通过使用如下所示的代码访问字符串中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-792">Each <xref:System.Char> object in the string can be accessed by using code such as the following.</span></span>  
  
 [!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]
 [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-793">下面的示例演示如何在例程中使用此索引器来验证字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-793">The following example demonstrates how you can use this indexer in a routine to validate a string.</span></span>  
  
 [!code-cpp[Uri_IsHexDigit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp#1)]
 [!code-csharp[Uri_IsHexDigit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs#1)]
 [!code-vb[Uri_IsHexDigit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="b0200-794"><paramref name="index" /> 大于或等于此对象的长度或小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-794"><paramref name="index" /> is greater than or equal to the length of this object or less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.GetEnumerator" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public string this[Range range] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Chars(valuetype System.Range)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Range)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(range As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[Range] { System::String ^ get(Range range); };" />
      <MemberSignature Language="F#" Value="member this.Chars(Range) : string" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="string.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-795">返回对此 <see cref="T:System.String" /> 实例的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-795">Returns a reference to this instance of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-796">此 <see cref="T:System.String" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-796">This instance of <see cref="T:System.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-797">返回值不是此实例; 的一个独立副本它是只是另一个视图相同的数据。</span><span class="sxs-lookup"><span data-stu-id="b0200-797">The return value is not an independent copy of this instance; it is simply another view of the same data.</span></span> <span data-ttu-id="b0200-798">使用<xref:System.String.Copy%2A>或<xref:System.String.CopyTo%2A>方法来创建一个单独<xref:System.String>使用值与此实例相同的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-798">Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.</span></span>  
  
 <span data-ttu-id="b0200-799">因为<xref:System.String.Clone%2A>方法仅返回现有的字符串实例，则几乎不需要直接调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-799">Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Copy(System.String)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-800">比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="b0200-800">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-801"><xref:System.String.Compare%2A> 方法的所有重载返回一个 32 位有符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-801">All overloads of the <xref:System.String.Compare%2A> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>  
  
|<span data-ttu-id="b0200-802">值</span><span class="sxs-lookup"><span data-stu-id="b0200-802">Value</span></span>|<span data-ttu-id="b0200-803">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-803">Condition</span></span>|  
|-----------|---------------|  
|<span data-ttu-id="b0200-804">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-804">Less than zero</span></span>|<span data-ttu-id="b0200-805">第一个子字符串在排序顺序中位于第二个的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-805">The first substring precedes the second substring in the sort order.</span></span>|  
|<span data-ttu-id="b0200-806">零</span><span class="sxs-lookup"><span data-stu-id="b0200-806">Zero</span></span>|<span data-ttu-id="b0200-807">子字符串在排序顺序中出现的位置相同或 `length` 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-807">The substrings occur in the same position in the sort order, or `length` is zero.</span></span>|  
|<span data-ttu-id="b0200-808">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-808">Greater than zero</span></span>|<span data-ttu-id="b0200-809">第一个子字符串在排序顺序中的第二个子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-809">The first substring follows the second substring in the sort order.</span></span>|  
  
> [!WARNING]
>  <span data-ttu-id="b0200-810">只要有可能，应调用的重载<xref:System.String.Compare%2A>方法，包括<xref:System.StringComparison>参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-810">Whenever possible, you should call an overload of the <xref:System.String.Compare%2A> method that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="b0200-811">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-811">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/b9f0bf53-e2de-4116-8ce9-d4f91a1df4f7"><span data-ttu-id="b0200-812">在 .NET Framework 中使用字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="b0200-812">Best Practices for Using Strings in the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string -&gt; int" Usage="System.string.Compare (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-813">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-813">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-814">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-814">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="b0200-815">比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="b0200-815">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-816">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-816">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-817">值</span><span class="sxs-lookup"><span data-stu-id="b0200-817">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-818">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-818">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-819">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-819">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-820"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-820"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-821">零</span><span class="sxs-lookup"><span data-stu-id="b0200-821">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-822"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-822"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-823">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-823">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-824"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-824"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-825">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-825">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-826">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-826">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-827">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-827">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-828">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-828">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-829">比较字符串时，应调用<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法，要求您显式指定该方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-829">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="b0200-830">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-830">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-831">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-831">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-832">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-832">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-833">比较终止时发现不相等或已经比较了两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-833">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="b0200-834">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-834">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-835">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-835">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-836">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-836">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-837">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-837">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]
 [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]
 [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]  
  
 <span data-ttu-id="b0200-838">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-838">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-839">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-839">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]
 [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]
 [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-840">下面的示例调用<xref:System.String.Compare%28System.String%2CSystem.String%29>方法来比较三个集的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-840">The following example calls the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to compare three sets of strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 <span data-ttu-id="b0200-841">在以下示例中，`ReverseStringComparer`类演示如何评估使用的两个字符串<xref:System.String.Compare%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-841">In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.</span></span>  
  
 [!code-cpp[ArrayList#7](~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp#7)]
 [!code-csharp[ArrayList#7](~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs#7)]
 [!code-vb[ArrayList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-842">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-842">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-843"><see cref="M:System.String.Compare(System.String,System.String)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-843">The <see cref="M:System.String.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-844">例如，如果运行下面的代码[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 的区分区域性的比较该值指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-844">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
<span data-ttu-id="b0200-845">[!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)] [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span><span class="sxs-lookup"><span data-stu-id="b0200-845">[!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)] [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span></span> 
<span data-ttu-id="b0200-846">若要识别的字符串比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-846">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-847">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-847">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-848">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-848">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-849">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-849"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b0200-850">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-850">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-851">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-851">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-852">值</span><span class="sxs-lookup"><span data-stu-id="b0200-852">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-853">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-853">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-854">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-854">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-855"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-855"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-856">零</span><span class="sxs-lookup"><span data-stu-id="b0200-856">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-857"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-857"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-858">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-858">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-859"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-859"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-860">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-860">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-861">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-861">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-862">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-862">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-863">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-863">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-864">比较字符串时，应调用<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法，要求您显式指定该方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-864">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="b0200-865">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-865">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-866">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-866">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-867">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-867">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-868">比较终止时发现不相等或已经比较了两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-868">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="b0200-869">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-869">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-870">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-870">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-871">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-871">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-872">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-872">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]
 [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]
 [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]  
  
 <span data-ttu-id="b0200-873">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-873">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-874">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-874">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]
 [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]
 [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-875">下面的示例演示<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29>方法相当于使用<xref:System.String.ToUpper%2A>或<xref:System.String.ToLower%2A>比较字符串时。</span><span class="sxs-lookup"><span data-stu-id="b0200-875">The following example demonstrates that the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-876">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-876">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-877"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-877">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-878">例如，如果运行下面的代码[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，"动物"与"Ani 邮件"（使用软连字符或 U + 00AD） 的区分区域性的、 不区分大小写比较该值指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-878">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
<span data-ttu-id="b0200-879">[!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)] [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span><span class="sxs-lookup"><span data-stu-id="b0200-879">[!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)] [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span></span> 
<span data-ttu-id="b0200-880">若要识别的字符串比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-880">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * StringComparison -&gt; int" Usage="System.string.Compare (strA, strB, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-881">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-881">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-882">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-882">The second string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-883">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-883">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="b0200-884">使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-884">Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-885">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-885">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-886">值</span><span class="sxs-lookup"><span data-stu-id="b0200-886">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-887">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-887">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-888">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-888">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-889"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-889"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-890">零</span><span class="sxs-lookup"><span data-stu-id="b0200-890">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-891"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中的位置相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-891"><paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-892">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-892">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-893"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-893"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-894">`comparisonType`参数指示是否比较应使用当前或固定区域性，接受或忽略大小写的比较数，或使用 word （区分区域性） 或序号 （不区分区域性的） 排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-894">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="b0200-895">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-895">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-896">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-896">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-897">比较终止时发现不相等或已经比较了两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-897">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="b0200-898">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，其余字符的字符串则认为较大。</span><span class="sxs-lookup"><span data-stu-id="b0200-898">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-899">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-899">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-900">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-900">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-901">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-901">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]
 [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]
 [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]  
  
 <span data-ttu-id="b0200-902">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-902">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-903">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-903">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]
 [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]
 [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-904">以下示例比较了三个版本的字母"I"。</span><span class="sxs-lookup"><span data-stu-id="b0200-904">The following example compares three versions of the letter "I".</span></span> <span data-ttu-id="b0200-905">区域性，是否忽略大小写，和是否执行序号比较的选择会影响结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-905">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]
 [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]
 [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-906"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-906"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b0200-907">不支持 <see cref="T:System.StringComparison" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-907"><see cref="T:System.StringComparison" /> is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-908">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-908">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-909"><see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-909">The <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-910">若要识别您的比较中的可忽略字符，提供的值<see cref="F:System.StringComparison.Ordinal" />或<see cref="F:System.StringComparison.OrdinalIgnoreCase" />为<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-910">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-911">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-911">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-912">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-912">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-913">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-913"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-914">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-914">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="b0200-915">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-915">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-916">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-916">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-917">值</span><span class="sxs-lookup"><span data-stu-id="b0200-917">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-918">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-918">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-919">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-919">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-920"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-920"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-921">零</span><span class="sxs-lookup"><span data-stu-id="b0200-921">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-922"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-922"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-923">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-923">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-924"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-924"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-925">比较使用`culture`参数来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-925">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-926">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-926">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-927">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-927">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-928">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-928">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-929">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-929">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-930">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-930">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-931">比较终止时发现不相等或已经比较了两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-931">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="b0200-932">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-932">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-933">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-933">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-934">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-934">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-935">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-935">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]
 [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]
 [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]  
  
 <span data-ttu-id="b0200-936">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-936">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-937">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-937">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]
 [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]
 [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-938">下面的示例演示如何区域性可能会影响比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-938">The following example demonstrates how culture can affect a comparison.</span></span> <span data-ttu-id="b0200-939">捷克语-捷克共和国区域性，在"ch"是单个字符的最大"d"。</span><span class="sxs-lookup"><span data-stu-id="b0200-939">In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</span></span> <span data-ttu-id="b0200-940">但是，在英语-美国区域性"ch"包含两个字符，并且"c"小于"d"。</span><span class="sxs-lookup"><span data-stu-id="b0200-940">However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</span></span>  
  
 [!code-cpp[string.comp4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp#1)]
 [!code-csharp[string.comp4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs#1)]
 [!code-vb[string.comp4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-941"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-941"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-942">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-942">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-943"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-943">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-944">例如，如果运行下面的代码[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，不区分大小写比较的"动物"与"Ani 邮件"（使用软连字符或 U + 00AD） 使用固定区域性指示两个字符串相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-944">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.</span></span>  
  
<span data-ttu-id="b0200-945">[!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)] [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span><span class="sxs-lookup"><span data-stu-id="b0200-945">[!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)] [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span></span> 
<span data-ttu-id="b0200-946">若要识别的字符串比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="options" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-946">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, strB, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-947">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-947">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-948">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-948">The second string to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-949">提供区域性特定的比较信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-949">The culture that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-950">要在执行比较时使用的选项（如忽略大小写或符号）。</span><span class="sxs-lookup"><span data-stu-id="b0200-950">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="b0200-951">对两个指定的 <see cref="T:System.String" /> 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-951">Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-952">一个 32 位带符号整数，该整数指示 <paramref name="strA" /> 与 <paramref name="strB" /> 之间的词法关系，如下表所示</span><span class="sxs-lookup"><span data-stu-id="b0200-952">A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="b0200-953">值</span><span class="sxs-lookup"><span data-stu-id="b0200-953">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-954">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-954">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-955">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-955">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-956"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-956"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-957">零</span><span class="sxs-lookup"><span data-stu-id="b0200-957">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-958"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-958"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-959">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-959">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-960"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-960"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-961">比较使用`culture`参数来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-961">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="b0200-962">例如，某些组合字符被视为单个字符、 大写和小写字符进行比较以特定方式，可以指定特定区域性或依赖于字符的字符的排序顺序的前面或后面。</span><span class="sxs-lookup"><span data-stu-id="b0200-962">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b0200-963"><xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>方法主要用于在排序或按字母顺序排列的操作中使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-963">The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="b0200-964">其值不应在方法调用的主要用途是确定两个字符串是否相等 （即，当方法调用的目的是要测试其返回值为 0） 时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-964">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="b0200-965">若要确定两个字符串是否相等，请调用<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-965">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-966">可以通过进一步指定比较`options`参数，它包含一个或多个成员的<xref:System.Globalization.CompareOptions>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-966">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration.</span></span> <span data-ttu-id="b0200-967">但是，此方法的目的是执行区分区域性的字符串比较，因为<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>和<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>值不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="b0200-967">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="b0200-968">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-968">Either or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-969">根据定义，任意字符串，其中包括<xref:System.String.Empty?displayProperty=nameWithType>，比较结果大于 null 引用，且两个 null 的引用比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-969">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-970">比较终止时发现不相等或已经比较了两个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-970">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="b0200-971">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，则认为较大的剩余字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-971">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-972">下面的示例对两个字符串进行比较三个不同的方式： 使用 EN-US 区域性; 语义比较使用 EN-US 区域性; 语言区分大小写的比较并使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-972">The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</span></span> <span data-ttu-id="b0200-973">它演示了如何比较的三种方法生成三个不同的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-973">It illustrates how the three methods of comparison produce three different results.</span></span>  
  
 [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]
 [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]
 [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-974"><paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-974"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-975"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-975"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-976">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-976">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-977"><see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-977">The <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-978">若要识别您的比较中的可忽略字符，提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="options" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-978">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.CompareOrdinal" />
        <altmember cref="Overload:System.String.CompareTo" />
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-979">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-979">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-980"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-980">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-981">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-981">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-982"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-982">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-983">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-983">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="b0200-984">比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="b0200-984">Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-985">一个 32 位有符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-985">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-986">值</span><span class="sxs-lookup"><span data-stu-id="b0200-986">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-987">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-987">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-988">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-988">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-989"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-989">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-990">零</span><span class="sxs-lookup"><span data-stu-id="b0200-990">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-991">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-991">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-992">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-992">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-993"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-993">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-994">要比较的子字符串在启动`strA`处`indexA`并在`strB`在`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-994">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="b0200-995">这两`indexA`并`indexB`是从零开始; 即中的第一个字符`strA`和`strB`位置为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-995">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="b0200-996">第一个子字符串的长度等于的长度`strA`减去`indexA`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-996">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="b0200-997">第二个的子字符串的长度等于的长度`strB`减去`indexB`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-997">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="b0200-998">要比较的字符数是较小的两个子字符串的长度和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-998">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="b0200-999">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-999">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1000">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1000">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-1001">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1001">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-1002">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1002">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-1003">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1003">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-1004">比较字符串时，应调用<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>方法，要求您显式指定该方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1004">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="b0200-1005">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1005">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-1006">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1006">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-1007">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1007">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-1008">比较终止时发现不相等或已经比较了这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1008">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="b0200-1009">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-1009">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-1010">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1010">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-1011">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1011">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-1012">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1012">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]
 [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]
 [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]  
  
 <span data-ttu-id="b0200-1013">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1013">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-1014">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-1014">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]
 [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]
 [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1015">下面的示例比较这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1015">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1016"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1016"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1017">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1017">-or-</span></span> 
 <span data-ttu-id="b0200-1018"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1018"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1019">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1019">-or-</span></span> 
 <span data-ttu-id="b0200-1020"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1020"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-1021">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1021">-or-</span></span> 
<span data-ttu-id="b0200-1022"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1022">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1023">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1023">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1024"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />方法执行语言性的或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1024">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1025">若要识别您的比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1025">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1026">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1026">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-1027"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1027">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1028">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1028">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-1029"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1029">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-1030">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1030">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-1031">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1031"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1032">比较两个指定的 <see cref="T:System.String" /> 对象的子字符串（忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1032">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-1033">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1033">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1034">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1034">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1035">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1035">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1036">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1036">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1037"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1037">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1038">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1038">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1039">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1039">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1040">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1040">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1041"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1041">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1042">要比较的子字符串在启动`strA`处`indexA`，然后在`strB`在`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1042">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="b0200-1043">这两`indexA`并`indexB`是从零开始; 即中的第一个字符`strA`和`strB`位置为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1043">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="b0200-1044">第一个子字符串的长度等于的长度`strA`减去`indexA`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1044">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="b0200-1045">第二个的子字符串的长度等于的长度`strB`减去`indexB`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1045">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="b0200-1046">要比较的字符数是较小的两个子字符串的长度和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1046">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="b0200-1047">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-1047">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1048">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1048">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-1049">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1049">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-1050">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1050">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-1051">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1051">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b0200-1052">比较字符串时，应调用<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>方法，要求您显式指定该方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1052">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="b0200-1053">有关详细信息，请参阅[有关使用字符串的最佳实践](~/docs/standard/base-types/best-practices-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1053">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="b0200-1054">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1054">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-1055">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1055">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-1056">比较终止时发现不相等或已经比较了这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1056">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="b0200-1057">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-1057">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-1058">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1058">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-1059">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1059">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-1060">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1060">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]
 [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]
 [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]  
  
 <span data-ttu-id="b0200-1061">路径名称必须以固定的方式进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1061">The path name needs to be compared in an invariant manner.</span></span> <span data-ttu-id="b0200-1062">若要执行此操作的正确代码如下所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1062">The correct code to do this is as follows.</span></span>  
  
 [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]
 [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]
 [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1063">下面的示例执行两个只不同的子字符串的两个的比较操作中用例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1063">The following example performs two comparisons of two substrings that only differ in case.</span></span> <span data-ttu-id="b0200-1064">第一次比较不区分大小写和第二个比较考虑大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-1064">The first comparison ignores case and the second comparison considers case.</span></span>  
  
 [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]
 [!code-csharp[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]
 [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1065"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1065"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1066">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1066">-or-</span></span> 
 <span data-ttu-id="b0200-1067"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1067"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1068">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1068">-or-</span></span> 
 <span data-ttu-id="b0200-1069"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1069"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-1070">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1070">-or-</span></span> 
<span data-ttu-id="b0200-1071"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1071">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1072">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1072">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1073"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />方法执行语言性的或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1073">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1074">若要识别您的比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1074">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * StringComparison -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1075">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1075">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-1076"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1076">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1077">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1077">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-1078"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1078">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-1079">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1079">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-1080">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1080">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="b0200-1081">使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1081">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-1082">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1082">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1083">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1083">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1084">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1084">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1085">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1085">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1086"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1086">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1087">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1087">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1088">子字符串在排序顺序中出现的位置相同，或 <paramref name="length" /> 参数为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1088">The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1089">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1089">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1090"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1090">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1091">要比较的子字符串在启动`strA`处`indexA`并在`strB`在`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1091">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="b0200-1092">这两`indexA`并`indexB`是从零开始; 即中的第一个字符`strA`和`strB`是在位置零，定位一个。</span><span class="sxs-lookup"><span data-stu-id="b0200-1092">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="b0200-1093">第一个子字符串的长度等于的长度`strA`减去`indexA`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1093">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="b0200-1094">第二个的子字符串的长度等于的长度`strB`减去`indexB`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1094">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="b0200-1095">要比较的字符数是较小的两个子字符串的长度和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1095">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="b0200-1096">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-1096">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1097">`comparisonType`参数指示是否比较应使用当前或固定区域性，接受或忽略大小写的比较数，或使用 word （区分区域性） 或序号 （不区分区域性的） 排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1097">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="b0200-1098">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1098">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-1099">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1099">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-1100">比较终止时发现不相等或已经比较了这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1100">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="b0200-1101">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，其余字符的字符串则认为较大。</span><span class="sxs-lookup"><span data-stu-id="b0200-1101">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-1102">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1102">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-1103">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1103">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-1104">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1104">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]
 [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]
 [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]  
  
 <span data-ttu-id="b0200-1105">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1105">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-1106">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-1106">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]
 [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]
 [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1107">下面的示例比较这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1107">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1108"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1108"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1109">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1109">-or-</span></span> 
 <span data-ttu-id="b0200-1110"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1110"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1111">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1111">-or-</span></span> 
 <span data-ttu-id="b0200-1112"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1112"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-1113">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1113">-or-</span></span> 
<span data-ttu-id="b0200-1114"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1114">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1115"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1115"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1116">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1116">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1117"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />方法执行语言性的或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1117">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1118">若要识别您的比较中的可忽略字符，提供的值<see cref="F:System.StringComparison.Ordinal" />或<see cref="F:System.StringComparison.OrdinalIgnoreCase" />为<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1118">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1119">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1119">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-1120"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1120">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1121">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1121">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-1122"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1122">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-1123">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1123">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-1124">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1124"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-1125">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1125">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="b0200-1126">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1126">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-1127">一个整数，指示两个比较字之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1127">An integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1128">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1128">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1129">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1129">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1130">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1130">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1131"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1131">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1132">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1132">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1133">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1133">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1134">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1134">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1135"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1135">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1136">要比较的子字符串在启动`strA`处`indexA`，然后在`strB`在`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1136">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="b0200-1137">这两`indexA`并`indexB`是从零开始; 即中的第一个字符`strA`和`strB`是在位置零，定位一个。</span><span class="sxs-lookup"><span data-stu-id="b0200-1137">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="b0200-1138">第一个子字符串的长度等于的长度`strA`减去`indexA`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1138">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="b0200-1139">第二个的子字符串的长度等于的长度`strB`减去`indexB`加一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1139">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="b0200-1140">要比较的字符数是较小的两个子字符串的长度和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1140">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="b0200-1141">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-1141">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1142">比较使用`culture`参数来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1142">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="b0200-1143">例如，某些字符的组合被视为单个字符或大写和小写字符进行比较以特定方式，可以指定区域性或字符的排序顺序取决于前的字符，或在其后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1143">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="b0200-1144">使用单词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1144">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="b0200-1145">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1145">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1146">可以是一个或两个比较数`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1146">One or both comparands can be `null`.</span></span> <span data-ttu-id="b0200-1147">根据定义，任意字符串，其中包括空字符串 ("")，进行比较，大于 null 的引用;和两个 null 引用的比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1147">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-1148">比较终止时发现不相等或已经比较了这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1148">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="b0200-1149">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，然后其余的字符的字符串被视为更高版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-1149">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-1150">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1150">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="b0200-1151">当比较受特定于区域性的大小写规则，会发生意外的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1151">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="b0200-1152">例如，在土耳其语，下面的示例生成错误结果由于土耳其语中的文件系统对字母"i"不使用语言的大小写规则"文件"中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1152">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]
 [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]
 [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]  
  
 <span data-ttu-id="b0200-1153">进行比较的路径名称为"file"使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1153">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="b0200-1154">若要执行此操作的正确代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-1154">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]
 [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]
 [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1155">下面的示例比较这两个子字符串使用不同的区域性并忽略子字符串的大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-1155">The following example compares two substrings using different cultures and ignoring the case of the substrings.</span></span> <span data-ttu-id="b0200-1156">区域性的选择会影响字母"I"的方式进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1156">The choice of culture affects how the letter "I" is compared.</span></span>  
  
 [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]
 [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]
 [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1157"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1157"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1158">-or-</span></span> 
 <span data-ttu-id="b0200-1159"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1159"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1160">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1160">-or-</span></span> 
 <span data-ttu-id="b0200-1161"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1161"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-1162">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1162">-or-</span></span> 
<span data-ttu-id="b0200-1163"><paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1163">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1164"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1164"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1165">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1165">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1166"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />方法执行语言性的或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1166">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1167">若要识别您的比较中的可忽略字符，调用<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />方法并提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="options" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1167">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1168">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1168">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-1169"><paramref name="strA" /> 中子字符串开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1169">The starting position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1170">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1170">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-1171"><paramref name="strB" /> 中子字符串开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1171">The starting position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-1172">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1172">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-1173">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1173">An object that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-1174">要在执行比较时使用的选项（如忽略大小写或符号）。</span><span class="sxs-lookup"><span data-stu-id="b0200-1174">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="b0200-1175">对两个指定 <see cref="T:System.String" /> 对象的子字符串进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个子字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1175">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="b0200-1176">一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1176">An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1177">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1177">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1178">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1178">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1179">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1179">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1180"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1180">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1181">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1181">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1182">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1182">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1183">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1183">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1184"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1184">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1185">要比较的子字符串在启动`strA`位置处`indexA`并在`strB`位置处`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1185">The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`.</span></span> <span data-ttu-id="b0200-1186">第一个子字符串长度的长度`strA`减去`indexA`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1186">The length of the first substring is the length of `strA` minus `indexA`.</span></span> <span data-ttu-id="b0200-1187">第二个的子字符串的长度是长度`strB`减去`indexB`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1187">The length of the second substring is the length of `strB` minus `indexB`.</span></span>  
  
 <span data-ttu-id="b0200-1188">要比较的字符数是较小的两个子字符串的长度和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1188">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="b0200-1189">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-1189">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1190">比较使用`culture`参数来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1190">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="b0200-1191">例如，某些组合字符被视为单个字符、 大写和小写字符进行比较以特定方式，可以指定特定区域性或依赖于字符的字符的排序顺序的前面或后面。</span><span class="sxs-lookup"><span data-stu-id="b0200-1191">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b0200-1192"><xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>方法主要用于在排序或按字母顺序排列的操作中使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1192">The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="b0200-1193">其值不应在方法调用的主要用途是确定这两个子字符串是否等效 （即，当方法调用的目的是要测试其返回值为 0） 时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1193">It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="b0200-1194">若要确定两个字符串是否相等，请调用<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1194">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-1195">一个或两个`strA`并`strB`可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1195">One or both of `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="b0200-1196">根据定义，任意字符串，其中包括<xref:System.String.Empty?displayProperty=nameWithType>，比较结果大于 null 引用，且两个 null 的引用比较结果相等的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1196">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="b0200-1197">可以通过进一步指定比较`options`参数，它包含一个或多个成员的<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-1197">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="b0200-1198">但是，此方法的目的是执行区分区域性的字符串比较，因为<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>和<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>值不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1198">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="b0200-1199">比较终止时发现不相等或已经比较了这两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1199">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="b0200-1200">但是，如果两个字符串比较等于一个字符串的末尾，但在其他字符串有个剩余字符，则认为较大的剩余字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1200">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span> <span data-ttu-id="b0200-1201">返回值为执行的最后一个比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1201">The return value is the result of the last comparison performed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1202">下面的示例使用<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>方法来比较两名人员的姓氏。</span><span class="sxs-lookup"><span data-stu-id="b0200-1202">The following example uses the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method to compare the last names of two people.</span></span> <span data-ttu-id="b0200-1203">然后，列出它们按字母顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1203">It then lists them in alphabetical order.</span></span>  
  
 [!code-csharp[System.String.Compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs#1)]
 [!code-vb[System.String.Compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1204"><paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1204"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1205"><paramref name="indexA" /> 大于 <paramref name="strA" /><see langword=".Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1205"><paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.</span></span>  
  
<span data-ttu-id="b0200-1206">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1206">-or-</span></span> 
 <span data-ttu-id="b0200-1207"><paramref name="indexB" /> 大于 <paramref name="strB" /><see langword=".Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1207"><paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.</span></span>  
  
<span data-ttu-id="b0200-1208">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1208">-or-</span></span> 
 <span data-ttu-id="b0200-1209"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1209"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-1210">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1210">-or-</span></span> 
<span data-ttu-id="b0200-1211"><paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1211">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1212"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1212"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1213">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1213">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1214"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />方法执行语言性的或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1214">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1215">若要识别您的比较中的可忽略字符，提供的值<see cref="F:System.Globalization.CompareOptions.Ordinal" />或<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />为<paramref name="options" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1215">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareOrdinal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1216">通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1216">Compares two <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * string -&gt; int" Usage="System.string.CompareOrdinal (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1217">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1217">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1218">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1218">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="b0200-1219">通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1219">Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1220">一个整数，指示两个比较字之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1220">An integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1221">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1221">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1222">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1222">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1223">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1223">Less than zero</span></span> 
 </term><description><span data-ttu-id="b0200-1224"><paramref name="strA" /> 小于 <paramref name="strB" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1224"><paramref name="strA" /> is less than <paramref name="strB" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1225">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1225">Zero</span></span> 
 </term><description><span data-ttu-id="b0200-1226"><paramref name="strA" /> 与 <paramref name="strB" /> 相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1226"><paramref name="strA" /> and <paramref name="strB" /> are equal.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1227">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1227">Greater than zero</span></span> 
 </term><description><span data-ttu-id="b0200-1228"><paramref name="strA" /> 大于 <paramref name="strB" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1228"><paramref name="strA" /> is greater than <paramref name="strB" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1229">此方法执行区分大小写的比较使用序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1229">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="b0200-1230">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1230">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-1231">若要执行不区分大小写的比较使用序号排序规则，请调用<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法替换`comparisonType`参数设置为<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1231">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1232">因为<xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>是一种静态方法，`strA`并`strB`可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1232">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="b0200-1233">如果两个值均`null`，该方法返回 0 （零），指示`strA`和`strB`是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1233">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="b0200-1234">如果仅有一个值为`null`，该方法会考虑要更大的非 null 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1234">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1235">下面的示例执行和序号比较两个字符串仅大小写不同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1235">The following example performs and ordinal comparison of two strings that only differ in case.</span></span>  
  
 [!code-cpp[string.compareordinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp#1)]
 [!code-csharp[string.compareordinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs#1)]
 [!code-vb[string.compareordinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * int * string * int * int -&gt; int" Usage="System.string.CompareOrdinal (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="b0200-1236">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1236">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="b0200-1237"><paramref name="strA" /> 中子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1237">The starting index of the substring in <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="b0200-1238">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1238">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="b0200-1239"><paramref name="strB" /> 中子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1239">The starting index of the substring in <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-1240">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1240">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="b0200-1241">通过计算每个子字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1241">Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</span></span></summary>
        <returns><span data-ttu-id="b0200-1242">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="b0200-1242">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1243">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1243">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1244">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1244">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1245">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1245">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1246"><paramref name="strA" /> 中的子字符串小于 <paramref name="strB" /> 中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1246">The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1247">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1247">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1248">子字符串相等，或者 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1248">The substrings are equal, or <paramref name="length" /> is zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1249">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1249">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1250"><paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1250">The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1251">`indexA`， `indexB`，和`length`参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="b0200-1251">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="b0200-1252">比较的字符数是较小的时长`strA`更少`indexA`，时长`strB`较少`indexB`，和`length`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1252">The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.</span></span>  
  
 <span data-ttu-id="b0200-1253">此方法执行区分大小写的比较使用序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1253">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="b0200-1254">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1254">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-1255">若要执行不区分大小写的比较使用序号排序规则，请调用<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29>方法替换`comparisonType`参数设置为<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1255">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1256">因为<xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29>是一种静态方法，`strA`并`strB`可以是`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1256">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="b0200-1257">如果两个值均`null`，该方法返回 0 （零），指示`strA`和`strB`是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1257">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="b0200-1258">如果仅有一个值为`null`，该方法会考虑要更大的非 null 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1258">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1259">下面的示例演示<xref:System.String.CompareOrdinal%2A>和<xref:System.String.Compare%2A>使用不同的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1259">This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.</span></span>  
  
 [!code-cpp[StringCompareOrdinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp#1)]
 [!code-csharp[StringCompareOrdinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs#1)]
 [!code-vb[StringCompareOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1260"><paramref name="strA" /> 不为 <see langword="null" />，且 <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1260"><paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1261">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1261">-or-</span></span> 
 <span data-ttu-id="b0200-1262"><paramref name="strB" /> 不为 <see langword="null" />，且 <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1262"><paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>  
  
<span data-ttu-id="b0200-1263">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1263">-or-</span></span> 
 <span data-ttu-id="b0200-1264"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1264"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span></exception>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1265">将此实例与指定对象或 <see cref="T:System.String" /> 进行比较，并返回一个整数，该整数指示此实例在排序顺序中是位于指定对象或 <see cref="T:System.String" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1265">Compares this instance with a specified object or <see cref="T:System.String" /> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <see cref="T:System.String" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1266">这两个重载<xref:System.String.CompareTo%2A>方法执行区分区域性且区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1266">Both overloads of the <xref:System.String.CompareTo%2A> method perform culture-sensitive and case-sensitive comparison.</span></span> <span data-ttu-id="b0200-1267">不能使用此方法来执行不区分区域性的或序号比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1267">You cannot use this method to perform culture-insensitive or ordinal comparisons.</span></span> <span data-ttu-id="b0200-1268">为了代码清楚起见，我们建议你避免<xref:System.String.CompareTo%2A>方法并调用<xref:System.String.Compare%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="b0200-1268">For code clarity, we recommend that you avoid the <xref:System.String.CompareTo%2A> method and call the <xref:System.String.Compare%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="string.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1269">一个对象，其计算结果为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1269">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1270">将此实例与指定的 <see cref="T:System.Object" /> 进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1270">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1271">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value" /> 参数之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1271">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1272">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1272">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1273">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1273">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1274">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1274">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1275">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1275">This instance precedes <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1276">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1276">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1277">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1277">This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1278">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1278">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1279">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1279">This instance follows <paramref name="value" />.</span></span>  
  
<span data-ttu-id="b0200-1280">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1280">-or-</span></span> 
 <span data-ttu-id="b0200-1281"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1281"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1282">`value` 必须为<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1282">`value` must be a <xref:System.String> object.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b0200-1283"><xref:System.String.CompareTo%2A>方法旨在主要用于在排序或按字母顺序排列的操作中使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1283">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="b0200-1284">它应为时不使用方法调用的主要用途是确定两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1284">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="b0200-1285">若要确定两个字符串是否相等，请调用<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1285">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-1286">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1286">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="b0200-1287">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1287">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1288">此方法的行为的详细信息，请参阅备注部分的<xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1288">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1289">下面的示例使用<xref:System.String.CompareTo%2A>方法替换<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1289">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="b0200-1290">因为它尝试比较<xref:System.String>实例向`TestClass`对象，该方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1290">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>  
  
 [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
 [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
 [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1291"><paramref name="value" /> 不是 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1291"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1292">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1292">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1293"><see cref="M:System.String.CompareTo(System.Object)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1293">The <see cref="M:System.String.CompareTo(System.Object)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1294">例如，如果运行下面的代码[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 的比较该值指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1294">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
<span data-ttu-id="b0200-1295">[!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="b0200-1295">[!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span></span> 
<span data-ttu-id="b0200-1296">若要识别的字符串比较中的可忽略字符，调用<see cref="M:System.String.CompareOrdinal(System.String,System.String)" />方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1296">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::String ^ strB);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : string -&gt; int&#xA;override this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strB"><span data-ttu-id="b0200-1297">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1297">The string to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-1298">将此实例与指定的 <see cref="T:System.String" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1298">Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1299">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="strB" /> 参数之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1299">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b0200-1300">值</span><span class="sxs-lookup"><span data-stu-id="b0200-1300">Value</span></span> 
 </term><description> <span data-ttu-id="b0200-1301">条件</span><span class="sxs-lookup"><span data-stu-id="b0200-1301">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b0200-1302">小于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1302">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1303">此实例位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-1303">This instance precedes <paramref name="strB" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1304">零</span><span class="sxs-lookup"><span data-stu-id="b0200-1304">Zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1305">此实例在排序顺序中的位置与 <paramref name="strB" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1305">This instance has the same position in the sort order as <paramref name="strB" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b0200-1306">大于零</span><span class="sxs-lookup"><span data-stu-id="b0200-1306">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b0200-1307">此实例位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="b0200-1307">This instance follows <paramref name="strB" />.</span></span>  
  
<span data-ttu-id="b0200-1308">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1308">-or-</span></span> 
 <span data-ttu-id="b0200-1309"><paramref name="strB" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1309"><paramref name="strB" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1310">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1310">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="b0200-1311">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1311">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="b0200-1312"><xref:System.String.CompareTo%2A>方法旨在主要用于在排序或按字母顺序排列的操作中使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1312">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="b0200-1313">它应为时不使用方法调用的主要用途是确定两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1313">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="b0200-1314">若要确定两个字符串是否相等，请调用<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1314">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-1315">此方法的行为的详细信息，请参阅备注部分的<xref:System.String.Compare%28System.String%2CSystem.String%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1315">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.</span></span>  
  
 <span data-ttu-id="b0200-1316">此方法实现<xref:System.IComparable%601?displayProperty=nameWithType>接口，并且执行略微优于<xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType>方法，因为它没有以确定是否`strB`参数是必须进行装箱，可变值类型，不需要强制转换其中的参数<xref:System.Object>到<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1316">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object> to a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1317">下面的示例使用<xref:System.String.CompareTo%2A>方法来比较当前字符串实例与另一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1317">The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.</span></span>  
  
 [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]
 [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]
 [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]  
  
 <span data-ttu-id="b0200-1318">下面的示例演示了针对多个值和引用类型的 CompareTo 方法的泛型和非泛型版本。</span><span class="sxs-lookup"><span data-stu-id="b0200-1318">The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1319">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1319">Character sets include ignorable characters.</span></span> <span data-ttu-id="b0200-1320"><see cref="M:System.String.CompareTo(System.String)" />方法执行区分区域性的比较时不考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1320">The <see cref="M:System.String.CompareTo(System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-1321">例如，如果运行下面的代码[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，"动物"与"ani 邮件"（使用软连字符或 U + 00AD） 的比较该值指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1321">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>  
  
<span data-ttu-id="b0200-1322">[!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="b0200-1322">[!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span></span> 
<span data-ttu-id="b0200-1323">若要识别的字符串比较中的可忽略字符，调用<see cref="M:System.String.CompareOrdinal(System.String,System.String)" />方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1323">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Concat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1324">连接 <see cref="T:System.String" /> 的一个或多个实例，或 <see cref="T:System.String" /> 的一个或多个实例的值的 <see cref="T:System.Object" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1324">Concatenates one or more instances of <see cref="T:System.String" />, or the <see cref="T:System.String" /> representations of the values of one or more instances of <see cref="T:System.Object" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

> [!NOTE]
>  <span data-ttu-id="b0200-1325">此外可以使用你的语言的字符串串联运算符，如`+`在C#，或`&`并`+`在 Visual Basic 中，连接字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1325">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic, to concatenate strings.</span></span> <span data-ttu-id="b0200-1326">这两个编译器将串联运算符转换为调用的重载之一`String.Concat`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1326">Both compilers translate the concatenation operator into a call to one of the overloads of `String.Concat`.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;string&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="b0200-1327">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型类型参数为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1327">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1328">串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-1328">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1329"><paramref name="values" /> 中的串联字符串；如果 <paramref name="values" /> 为空 <see langword="IEnumerable(Of String)" />，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1329">The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1330">该方法将连接中的每个对象`values`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1330">The method concatenates each object in `values`; it does not add any delimiters.</span></span> <span data-ttu-id="b0200-1331">若要指定的每个成员之间的分隔符`values`，调用<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1331">To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="b0200-1332"><xref:System.String.Empty>字符串用来替代中任何 null 元素`values`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1332">An <xref:System.String.Empty> string is used in place of any null element in `values`.</span></span>  
  
 <span data-ttu-id="b0200-1333">如果`values`是一个空`IEnumerable(Of String)`，该方法将返回<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1333">If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-1334">如果`values`是`null`，该方法将引发<xref:System.ArgumentNullException>异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-1334">If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.</span></span>  
  
 <span data-ttu-id="b0200-1335"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 是可以串联的每个元素的便捷方法`IEnumerable(Of String)`不必先转换为字符串数组元素的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-1335"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="b0200-1336">它是语言集成查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1336">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="b0200-1337">下面的示例传入`List(Of String)`对象，其中包含为 lambda 表达式的选择是等于或大于特定字母 （即，在示例中，"M"） 的字母字母表中的大写或小写字母。</span><span class="sxs-lookup"><span data-stu-id="b0200-1337">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="b0200-1338">`IEnumerable(Of String)`返回的集合<xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>方法将传递给<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法以将结果显示为单个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1338">The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]
 [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1339">以下示例使用埃拉托色的尼斯筛法算法来计算小于或等于 100 的质数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1339">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="b0200-1340">它会将结果发送到将分配<xref:System.Collections.Generic.List%601>类型的对象<xref:System.String>，然后将其传递到<xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1340">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Concat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs#2)]
 [!code-vb[System.String.Concat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1341"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1341"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Concat : obj -&gt; string" Usage="System.string.Concat arg0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="b0200-1342">要表示的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1342">The object to represent, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1343">创建指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1343">Creates the string  representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="b0200-1344"><paramref name="arg0" /> 的值的字符串表示形式，如果 <see cref="F:System.String.Empty" /> 为 <paramref name="arg0" />，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1344">The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1345"><xref:System.String.Concat%28System.Object%29>方法表示`arg0`通过调用其无参数的字符串作为`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1345">The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1346">下面的示例演示<xref:System.String.Concat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1346">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Concat : obj[] -&gt; string" Usage="System.string.Concat args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="b0200-1347">一个对象数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-1347">An object array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1348">连接指定 <see cref="T:System.Object" /> 数组中的元素的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1348">Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</span></span></summary>
        <returns><span data-ttu-id="b0200-1349"><paramref name="args" /> 中元素的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1349">The concatenated string representations of the values of the elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1350">该方法将在每个对象连接在一起`args`通过调用无参数`ToString`该对象; 方法不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1350">The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1351"><xref:System.String.Empty?displayProperty=nameWithType> 将代替数组中的任何 null 对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1351"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1352">下面的示例演示如何将<xref:System.String.Concat%2A>方法替换<xref:System.Object>数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1352">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.</span></span>  
  
 [!code-csharp[stringconcat1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs#1)]
 [!code-vb[stringconcat1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1353"><paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1353"><paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="b0200-1354">内存不足。</span><span class="sxs-lookup"><span data-stu-id="b0200-1354">Out of memory.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1355">此方法不由调用C++代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1355">This method is not called by C++ code.</span></span> <span data-ttu-id="b0200-1356">C++编译器解析对调用<see cref="Overload:System.String.Concat" />与调用具有四个或多个对象参数<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1356">The C++ compiler resolves calls to <see cref="Overload:System.String.Concat" /> that have four or more object parameters as a call to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray values As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : string[] -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="b0200-1357">字符串实例的数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1357">An array of string instances.</span></span></param>
        <summary><span data-ttu-id="b0200-1358">连接指定的 <see cref="T:System.String" /> 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-1358">Concatenates the elements of a specified <see cref="T:System.String" /> array.</span></span></summary>
        <returns><span data-ttu-id="b0200-1359"><paramref name="values" /> 的串联元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-1359">The concatenated elements of <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1360">该方法将连接中的每个对象`values`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1360">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1361"><xref:System.String.Empty>字符串代替数组中的任何 null 对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1361">An <xref:System.String.Empty> string is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1362">下面的示例演示如何将<xref:System.String.Concat%2A>方法替换<xref:System.String>数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1362">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.</span></span>  
  
 [!code-cpp[stringconcat3#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp#1)]
 [!code-csharp[stringconcat3#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs#1)]
 [!code-vb[stringconcat3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1363"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1363"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="b0200-1364">内存不足。</span><span class="sxs-lookup"><span data-stu-id="b0200-1364">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="b0200-1365">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1365">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1366">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1366">The second object to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1367">连接两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1367">Concatenates the string representations of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="b0200-1368"><paramref name="arg0" /> 和 <paramref name="arg1" /> 的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1368">The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1369">该方法将连接在一起`arg0`并`arg1`通过调用无参数`ToString`方法`arg0`和`arg1`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1369">The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1370"><xref:System.String.Empty?displayProperty=nameWithType> 将代替任何 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1370"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="b0200-1371">如果参数是数组引用，该方法将一个字符串，表示该数组，而不是其成员 (例如，"System.String[]")。</span><span class="sxs-lookup"><span data-stu-id="b0200-1371">If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1372">下面的示例演示<xref:System.String.Concat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1372">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str0">To be added.</param>
        <param name="str1">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="b0200-1373">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1373">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="b0200-1374">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1374">The second string to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1375">连接 <see cref="T:System.String" /> 的两个指定实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1375">Concatenates two specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1376"><paramref name="str0" /> 和 <paramref name="str1" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="b0200-1376">The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1377">该方法将连接在一起`str0`和`str1`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1377">The method concatenates `str0` and `str1`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1378"><xref:System.String.Empty>字符串代替任何 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1378">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
## Examples  
 <span data-ttu-id="b0200-1379">下面的示例将一个人的名字、 中间名和姓氏名称串联起来。</span><span class="sxs-lookup"><span data-stu-id="b0200-1379">The following example concatenates a person's first, middle, and last name.</span></span>  
  
 [!code-cpp[stringconcat4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp#1)]
 [!code-csharp[stringconcat4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs#1)]
 [!code-vb[stringconcat4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="b0200-1380">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1380">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1381">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1381">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b0200-1382">要连接的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1382">The third object to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1383">连接三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1383">Concatenates the string representations of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="b0200-1384"><paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1384">The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1385">该方法将连接在一起`arg0`， `arg1`，并`arg2`通过调用无参数`ToString`方法的每个对象; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1385">The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1386"><xref:System.String.Empty?displayProperty=nameWithType> 将代替任何 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1386"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1387">下面的示例演示<xref:System.String.Concat%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1387">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str0">To be added.</param>
        <param name="str1">To be added.</param>
        <param name="str2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="b0200-1388">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1388">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="b0200-1389">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1389">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="b0200-1390">要比较的第三个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1390">The third string to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1391">连接 <see cref="T:System.String" /> 的三个指定实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1391">Concatenates three specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1392"><paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="b0200-1392">The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1393">该方法将连接在一起`str0`， `str1`，和`str2`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1393">The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.</span></span>  
  
## Examples  
 <span data-ttu-id="b0200-1394">下面的示例使用<xref:System.String.Concat%2A>方法要串联三个字符串，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1394">The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.</span></span>  
  
 [!code-cpp[System.String.Concat#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp#6)]
 [!code-csharp[System.String.Concat#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs#6)]
 [!code-vb[System.String.Concat#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="b0200-1395">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1395">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1396">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1396">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="b0200-1397">要连接的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1397">The third object to concatenate.</span></span></param>
        <param name="arg3"><span data-ttu-id="b0200-1398">要连接的第四个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1398">The fourth object to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1399">将四个指定对象的字符串表示形式与可选变量长度参数列表中指定的任何对象串联起来。</span><span class="sxs-lookup"><span data-stu-id="b0200-1399">Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</span></span></summary>
        <returns><span data-ttu-id="b0200-1400">参数列表中的每个值的连接字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1400">The concatenated string representation of each value in the parameter list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b0200-1401">此 API 不兼容 CLS。</span><span class="sxs-lookup"><span data-stu-id="b0200-1401">This API is not CLS-compliant.</span></span> <span data-ttu-id="b0200-1402">符合 CLS 的替代方法是 <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1402">The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-1403">C# 和 Visual Basic 编译器会自动解决调用此方法与调用<xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1403">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1404">该方法通过调用其无参数串联在参数列表中的每个对象`ToString`方法; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1404">The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1405"><xref:System.String.Empty?displayProperty=nameWithType> 将代替任何 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1405"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-1406">最后一个参数<xref:System.String.Concat%2A>方法是可选的一个或多个要串联的其他对象以逗号分隔列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1406">The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1407">下面的示例演示如何使用<xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法要串联的变量参数列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1407">The following example illustrates the use of the <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to concatenate a list of variable parameters.</span></span> <span data-ttu-id="b0200-1408">在这种情况下，使用 9 个参数调用该方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1408">In this case, the method is called with nine parameters.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1409">此方法将标有<see langword="vararg" />关键字，这意味着它支持个数可变的参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1409">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="b0200-1410">可以从视觉对象调用方法C++，但它不能从调用C#或 Visual Basic 代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1410">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="b0200-1411">C# 和 Visual Basic 编译器解决对调用<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />一样调用<see cref="M:System.String.Concat(System.Object[])" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1411">The C# and Visual Basic compilers resolve calls to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.String.Concat(System.Object[])" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2, valuetype System.ReadOnlySpan`1&lt;char&gt; str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char), str3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="str3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str0">To be added.</param>
        <param name="str1">To be added.</param>
        <param name="str2">To be added.</param>
        <param name="str3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2, string str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2, string str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String, str3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2, System::String ^ str3);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
        <Parameter Name="str3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="b0200-1412">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1412">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="b0200-1413">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1413">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="b0200-1414">要比较的第三个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1414">The third string to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="b0200-1415">要比较的第四个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1415">The fourth string to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-1416">连接 <see cref="T:System.String" /> 的四个指定实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1416">Concatenates four specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1417"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="b0200-1417">The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1418">该方法将连接在一起`str0`， `str1`， `str2`，和`str3`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1418">The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.</span></span>  
  
## Examples  
 <span data-ttu-id="b0200-1419">下面的示例定义的四字母单词数组，并将其单个字母为字符串数组存储以便混排它们。</span><span class="sxs-lookup"><span data-stu-id="b0200-1419">The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</span></span> <span data-ttu-id="b0200-1420">然后，它调用<xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29>方法来重新组合打乱的单词。</span><span class="sxs-lookup"><span data-stu-id="b0200-1420">It then calls the <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> method to reassemble the scrambled words.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat(Of T) (values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'T&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0200-1421"><paramref name="values" /> 成员的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1421">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="values"><span data-ttu-id="b0200-1422">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的集合对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1422">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</span></span></param>
        <summary><span data-ttu-id="b0200-1423">串联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-1423">Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="b0200-1424"><paramref name="values" /> 中的串联成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-1424">The concatenated members in <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1425">该方法将连接中的每个对象`values`; 它不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1425">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="b0200-1426"><xref:System.String.Empty>字符串代替任何 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1426">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="b0200-1427"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 是可以串联的每个元素的便捷方法<xref:System.Collections.Generic.IEnumerable%601>而无需事先将元素转换为字符串的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-1427"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings.</span></span> <span data-ttu-id="b0200-1428">如示例所示，它是语言集成查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1428">It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</span></span> <span data-ttu-id="b0200-1429">在每个对象的字符串表示形式<xref:System.Collections.Generic.IEnumerable%601>通过调用该对象的派生集合`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1429">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1430">下面的示例定义一个非常简单`Animal`类，该类包含动物和它所属的顺序的名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-1430">The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="b0200-1431">然后，它定义<xref:System.Collections.Generic.List%601>对象，以包含大量`Animal`对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1431">It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects.</span></span> <span data-ttu-id="b0200-1432"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>调用扩展方法来提取`Animal`对象的`Order`属性等于"老鼠"。</span><span class="sxs-lookup"><span data-stu-id="b0200-1432">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="b0200-1433">将结果传递给<xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法并向控制台显示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1433">The result is passed to the <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method and displayed to the console.</span></span>  
  
 [!code-csharp[System.String.Concat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs#4)]
 [!code-vb[System.String.Concat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1434"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1434"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value);" />
      <MemberSignature Language="F#" Value="member this.Contains : char -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1435">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1435">The string to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-1436">返回一个值，该值指示指定的子串是否出现在此字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1436">Returns a value indicating whether a specified substring occurs within this string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1437">如果 <see langword="true" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1437"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1438">此方法执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1438">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span> <span data-ttu-id="b0200-1439">搜索此字符串的第一个字符位置开始并持续到最后一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1439">The search begins at the first character position of this string and continues through the last character position.</span></span>  
  
 <span data-ttu-id="b0200-1440">确定字符串是否包含指定的子字符串使用序号比较 （如区分区域性的比较或不区分大小写的序号比较） 以外的内容，可以创建自定义方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1440">To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.</span></span> <span data-ttu-id="b0200-1441">下面的示例说明了一种方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1441">The following example illustrates one such approach.</span></span> <span data-ttu-id="b0200-1442">它定义<xref:System.String>包括的扩展方法<xref:System.StringComparison>参数，并指示时使用指定的窗体的字符串比较的字符串是否包含子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1442">It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]
 [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]  
  
 <span data-ttu-id="b0200-1443">下面的示例然后调用`Contains`扩展方法，以确定使用序号比较和不区分大小写的序号比较时是否在字符串中找到子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1443">The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]
 [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]  
  
 <span data-ttu-id="b0200-1444">如果您感兴趣子字符串的位置`value`在当前实例中，可以调用<xref:System.String.IndexOf%2A>方法以获取其第一个匹配项，或您的起始位置可以调用<xref:System.String.LastIndexOf%2A>方法获取的起始位置及其最后一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-1444">If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence.</span></span> <span data-ttu-id="b0200-1445">该示例包含对的调用<xref:System.String.IndexOf%28System.String%29>方法，如果在字符串实例中找到子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1445">The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1446">下面的示例确定字符串"fox"是否熟悉引起来的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1446">The following example determines whether the string "fox" is a substring of a familiar quotation.</span></span> <span data-ttu-id="b0200-1447">如果"按照 fox"在字符串中找到，它还显示其起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1447">If "fox" is found in the string, it also displays its starting position.</span></span>  
  
 [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]
 [!code-csharp[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]
 [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1448"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1448"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : char * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : string * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static string Copy (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Copy(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Copy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Copy (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Copy(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Copy : string -&gt; string" Usage="System.string.Copy str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This API should not be used to create mutable strings. See https://go.microsoft.com/fwlink/?linkid=2084035 for alternatives.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="b0200-1449">要复制的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1449">The string to copy.</span></span></param>
        <summary><span data-ttu-id="b0200-1450">创建一个与指定的 <see cref="T:System.String" /> 具有相同值的 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1450">Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1451">值与 <paramref name="str" /> 相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1451">A new string with the same value as <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="b0200-1452">`Copy`方法将返回<xref:System.String>具有相同的值作为原始字符串，但表示不同的对象引用的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1452">The `Copy` method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference.</span></span> <span data-ttu-id="b0200-1453">它不同于赋值运算，将分配给其他对象变量的现有字符串引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1453">It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="b0200-1454">从.NET Core 3.0 开始，此方法已过时。</span><span class="sxs-lookup"><span data-stu-id="b0200-1454">Starting with .NET Core 3.0, this method is obsolete.</span></span> <span data-ttu-id="b0200-1455">但是，我们不建议在任何.NET 实现中的使用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-1455">However, we do not recommend its use in any .NET implementation.</span></span> <span data-ttu-id="b0200-1456">具体而言，由于字符串暂留在.NET Core 3.0 中，在某些情况下更改`Copy`方法将不会创建一个新字符串，但将只返回对现有留用的字符串的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1456">In particular, because of changes in string interning in .NET Core 3.0, in some cases the `Copy` method will not create a new string but will simply return a reference to an existing interned string.</span></span>   

<span data-ttu-id="b0200-1457">具体取决于你想要调用的为什么`Copy`方法中，有多种替代方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-1457">Depending on Why you want to call the `Copy` method, there are a number of alternatives:</span></span>

- <span data-ttu-id="b0200-1458">如果你想要修改的字符串操作中使用的不同的字符串实例，则使用原始的字符串实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1458">If you want a different string instance to use in an operation that modifies the string, use the original string instance.</span></span> <span data-ttu-id="b0200-1459">由于字符串是不可变的字符串操作将创建一个新的字符串实例，并且原始字符串不会受到影响。</span><span class="sxs-lookup"><span data-stu-id="b0200-1459">Because strings are immutable, the string operation creates a new string instance, and the original string remains unaffected.</span></span> <span data-ttu-id="b0200-1460">在这种情况下，不应将分配到的原始字符串变量的新字符串引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1460">In this case, you should not assign the new string reference to the original string variable.</span></span> <span data-ttu-id="b0200-1461">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1461">The following example provides an illustration.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#1)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#1)]  
  
   <span data-ttu-id="b0200-1462">在这种情况下，调用`Copy`方法来创建一个新字符串，然后才能调用<xref:System.String.Substring%2A>方法不必要地创建新的字符串实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1462">In this case, calling the `Copy` method to create a new string before calling the <xref:System.String.Substring%2A> method unnecessarily creates a new string instance.</span></span> 

- <span data-ttu-id="b0200-1463">如果你想要创建带有原始字符串的内容相同的可变的缓冲区，则调用<xref:System.String.ToCharArray%2A?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1463">If you want to create a mutable buffer with the same contents as the original string, call the <xref:System.String.ToCharArray%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="b0200-1464">例如:</span><span class="sxs-lookup"><span data-stu-id="b0200-1464">For example:</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#2)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#2)]  

- <span data-ttu-id="b0200-1465">如果你想要创建可变字符串的副本，以便可以使用不安全代码要修改字符串内容，请使用<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1465">If you want to create a mutable copy of the string so that you can use unsafe code to modify the string contents, use <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-1466">下面的示例使用<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType>方法进入非托管内存指针复制字符串的位置递增 1，在字符串中的每个字符的 Unicode 码位，将生成的字符串复制回托管字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1466">The following example uses the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method to get a pointer to the location of an copied string in unmanaged memory, increments the Unicode code point of each character in the string by one, and copies the resulting string back to a managed string.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1467"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1467"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * char[] * int * int -&gt; unit" Usage="string.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex"><span data-ttu-id="b0200-1468">要复制的此实例中第一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1468">The index of the first character in this instance to copy.</span></span></param>
        <param name="destination"><span data-ttu-id="b0200-1469">此实例中的字符所复制到的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1469">An array of Unicode characters to which characters in this instance are copied.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="b0200-1470"><paramref name="destination" /> 中的索引，在此处开始复制操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-1470">The index in <paramref name="destination" /> at which the copy operation begins.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-1471">此实例中要复制到 <paramref name="destination" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1471">The number of characters in this instance to copy to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1472">将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1472">Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1473">此方法复制`count`个字符`sourceIndex`位置的此实例与`destinationIndex`位置`destination`字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1473">This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array.</span></span> <span data-ttu-id="b0200-1474">此方法不会调整大小`destination`字符数组; 它必须具有足够数量的元素，以便复制的字符或该方法将引发<xref:System.ArgumentOutOfRangeException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1474">This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="b0200-1475">`sourceIndex` 和`destinationIndex`都从零开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-1475">`sourceIndex` and `destinationIndex` are zero-based.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1476">下面的示例演示<xref:System.String.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1476">The following example demonstrates the <xref:System.String.CopyTo%2A> method.</span></span>  
  
 [!code-cpp[stringcopyto#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp#1)]
 [!code-csharp[stringcopyto#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs#1)]
 [!code-vb[stringcopyto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1477"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1477"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-1478"><paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 为负</span><span class="sxs-lookup"><span data-stu-id="b0200-1478"><paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative</span></span> 
<span data-ttu-id="b0200-1479">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1479">-or-</span></span> 
 <span data-ttu-id="b0200-1480"><paramref name="sourceIndex" /> 不标识当前实例中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1480"><paramref name="sourceIndex" /> does not identify a position in the current instance.</span></span>  
  
<span data-ttu-id="b0200-1481">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1481">-or-</span></span> 
 <span data-ttu-id="b0200-1482"><paramref name="destinationIndex" /> 不标识 <paramref name="destination" /> 数组中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1482"><paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.</span></span>  
  
<span data-ttu-id="b0200-1483">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1483">-or-</span></span> 
 <span data-ttu-id="b0200-1484"><paramref name="count" /> 大于从 <paramref name="sourceIndex" /> 到此实例末尾的子字符串的长度</span><span class="sxs-lookup"><span data-stu-id="b0200-1484"><paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance</span></span> 
<span data-ttu-id="b0200-1485">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1485">-or-</span></span> 
 <span data-ttu-id="b0200-1486"><paramref name="count" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 数组末尾的子数组的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1486"><paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static string Create&lt;TState&gt; (int length, TState state, System.Buffers.SpanAction&lt;char,TState&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create&lt;TState&gt;(int32 length, !!TState state, class System.Buffers.SpanAction`2&lt;char, !!TState&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TState) (length As Integer, state As TState, action As SpanAction(Of Char, TState)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static System::String ^ Create(int length, TState state, System::Buffers::SpanAction&lt;char, TState&gt; ^ action);" />
      <MemberSignature Language="F#" Value="static member Create : int * 'State * System.Buffers.SpanAction&lt;char, 'State&gt; -&gt; string" Usage="System.string.Create (length, state, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="action" Type="System.Buffers.SpanAction&lt;System.Char,TState&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="state">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly string Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Empty" />
      <MemberSignature Language="DocId" Value="F:System.String.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : string" Usage="System.string.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0200-1487">表示空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1487">Represents the empty string.</span></span> <span data-ttu-id="b0200-1488">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="b0200-1488">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1489">此字段的值为零长度字符串，""。</span><span class="sxs-lookup"><span data-stu-id="b0200-1489">The value of this field is the zero-length string, "".</span></span>  
  
 <span data-ttu-id="b0200-1490">在应用程序代码中，此字段是最常用于在分配中初始化为空字符串的字符串变量。</span><span class="sxs-lookup"><span data-stu-id="b0200-1490">In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</span></span> <span data-ttu-id="b0200-1491">若要测试是否字符串的值为`null`或<xref:System.String.Empty?displayProperty=nameWithType>，使用<xref:System.String.IsNullOrEmpty%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1491">To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, use the <xref:System.String.IsNullOrEmpty%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EndsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1492">确定此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1492">Determines whether the end of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : char -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1493">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1493">The string to compare to the substring at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-1494">确定此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1494">Determines whether the end of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1495">如果 <see langword="true" /> 与此实例的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1495"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1496">此方法比较`value`是相同的长度与此实例的结尾处的子字符串到`value`，并返回指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1496">This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="b0200-1497">若要对等，`value`必须对此相同的实例的引用或与此实例的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1497">To be equal, `value` must be a reference to this same instance or match the end of this instance.</span></span>  
  
 <span data-ttu-id="b0200-1498">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1498">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1499">下面的示例指示数组中的每个字符串是否以句点结尾 ("。")。</span><span class="sxs-lookup"><span data-stu-id="b0200-1499">The following example indicates whether each string in an array ends with a period (".").</span></span>  
  
 [!code-csharp[System.String.EndsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs#1)]
 [!code-vb[System.String.EndsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb#1)]  
  
 <span data-ttu-id="b0200-1500">下面的示例定义`StripEndTags`方法，它使用<xref:System.String.EndsWith%28System.String%29>方法从行的末尾删除 HTML 结束标记。</span><span class="sxs-lookup"><span data-stu-id="b0200-1500">The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith%28System.String%29> method to remove HTML end tags from the end of a line.</span></span> <span data-ttu-id="b0200-1501">请注意，`StripEndTags`方法称为递归，请确保删除在行尾的多个 HTML 结束标记。</span><span class="sxs-lookup"><span data-stu-id="b0200-1501">Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</span></span>  
  
 [!code-cpp[stringendswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp#1)]
 [!code-csharp[stringendswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs#1)]
 [!code-vb[stringendswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1502"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1502"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1503">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1503">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-1504">若要确定是否字符串结尾的特定子字符串使用当前区域性的字符串比较规则，请调用<see cref="M:System.String.EndsWith(System.String,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1504">To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.StartsWith(System.String)" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * StringComparison -&gt; bool" Usage="string.EndsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1505">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1505">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-1506">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1506">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="b0200-1507">确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1507">Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="b0200-1508">如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1508"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1509"><xref:System.String.EndsWith%2A>方法比较`value`此字符串的末尾处的子字符串的参数，并返回一个值，指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1509">The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="b0200-1510">若要对等，`value`必须为对此相同的字符串的引用，必须为空字符串 ("")，或必须与此字符串的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1510">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the end of this string.</span></span> <span data-ttu-id="b0200-1511">执行比较的类型<xref:System.String.EndsWith%2A>方法的值取决于`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1511">The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1512">下面的示例确定字符串是否以特定子字符串结尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-1512">The following example determines whether a string ends with a particular substring.</span></span> <span data-ttu-id="b0200-1513">区域性，是否忽略大小写，和是否执行序号比较的选择会影响结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-1513">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.EndsWithCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp#1)]
 [!code-csharp[System.String.EndsWithCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs#1)]
 [!code-vb[System.String.EndsWithCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1514"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1514"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1515"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1515"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.EndsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1516">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1516">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-1517">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1517"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-1518">确定如何对此实例与 <paramref name="value" /> 进行比较的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1518">Cultural information that determines how this instance and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="b0200-1519">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1519">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="b0200-1520">确定在使用指定的区域性进行比较时此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1520">Determines whether the end of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-1521">如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1521"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1522">此方法比较`value`参数是相同的长度与此字符串的末尾处的子字符串`value`，并返回一个值，指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-1522">This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="b0200-1523">若要对等，`value`必须对此相同的实例的引用或与此字符串的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-1523">To be equal, `value` must be a reference to this same instance or match the end of this string.</span></span>  
  
 <span data-ttu-id="b0200-1524">此方法执行使用指定的大小写和区域性的单词 （区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1524">This method performs a word (culture-sensitive) comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1525">下面的示例确定字符串是否出现在另一个字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-1525">The following example determines whether a string occurs at the end of another string.</span></span> <span data-ttu-id="b0200-1526"><xref:System.String.EndsWith%2A>使用区分大小写，不区分大小写和影响搜索结果的不同区域性的多次调用方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1526">The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.EndsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs#1)]
 [!code-vb[system.string.EndsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1527"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1527"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public System.Text.StringRuneEnumerator EnumerateRunes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.StringRuneEnumerator EnumerateRunes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EnumerateRunes" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateRunes () As StringRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringRuneEnumerator EnumerateRunes();" />
      <MemberSignature Language="F#" Value="member this.EnumerateRunes : unit -&gt; System.Text.StringRuneEnumerator" Usage="string.EnumerateRunes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1528">确定两个 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1528">Determines whether two <see cref="T:System.String" /> objects have the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="string.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b0200-1529">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1529">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-1530">确定此实例是否与指定的对象（也必须是 <see cref="T:System.String" /> 对象）具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1530">Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</span></span></summary>
        <returns><span data-ttu-id="b0200-1531">如果 <see langword="true" /> 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.String" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1531"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="b0200-1532">如果 <paramref name="obj" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1532">If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1533">此方法执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1533">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1534">下面的示例演示<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1534">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : string -&gt; bool" Usage="string.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1535">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1535">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-1536">确定此实例是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1536">Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="b0200-1537">如果 <see langword="true" /> 参数的值与此实例的值相同，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1537"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b0200-1538">如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1538">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1539">此方法执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1539">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1540">下面的示例演示<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1540">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span> <span data-ttu-id="b0200-1541">它将标题的大小写的单词"文件"等效 word、 其小写等效项，其大写等效项，与包含拉丁文小写字母无点 I 的词进行比较 (U + 0131) 而不是拉丁文小写字母 I (U + 0069)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1541">It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</span></span> <span data-ttu-id="b0200-1542">因为<xref:System.String.Equals%28System.String%29>方法执行序号比较，仅使用完全相同的单词比较返回`true`。</span><span class="sxs-lookup"><span data-stu-id="b0200-1542">Because the <xref:System.String.Equals%28System.String%29> method performs an ordinal comparison, only the comparison with an identical word returns `true`.</span></span>  
  
 [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]
 [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string -&gt; bool" Usage="System.string.Equals (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b0200-1543">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1543">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="b0200-1544">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1544">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-1545">确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1545">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="b0200-1546">如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1546"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b0200-1547">如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 <see langword="null" />，此方法将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1547">If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1548">此方法执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-1548">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1549">下面的示例演示<xref:System.String.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1549">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * StringComparison -&gt; bool" Usage="string.Equals (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-1550">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1550">The string to compare to this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-1551">枚举值之一，用于指定如何比较字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1551">One of the enumeration values that specifies how the strings will be compared.</span></span></param>
        <summary><span data-ttu-id="b0200-1552">确定此字符串是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1552">Determines whether this string and a specified <see cref="T:System.String" /> object have the same value.</span></span> <span data-ttu-id="b0200-1553">参数指定区域性、大小写以及比较所用的排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1553">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="b0200-1554">如果 <see langword="true" /> 参数的值与此字符串相同，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1554"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1555">`comparisonType`参数指示是否比较应使用当前或固定区域性，接受或忽略所比较的两个字符串的大小写或不使用 word 或序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1555">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1556">以下示例创建一个字符串数组，包含一个大写"I"、 一个小写"i"和无点"ı"。</span><span class="sxs-lookup"><span data-stu-id="b0200-1556">The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</span></span> <span data-ttu-id="b0200-1557">然后，它调用<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29>方法使用每个可能比较<xref:System.StringComparison>枚举值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1557">It then calls the <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method to compare them by using each possible <xref:System.StringComparison> enumeration value.</span></span>  
  
 [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]
 [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]  
  
 <span data-ttu-id="b0200-1558">下面的示例使用的每个成员比较字的四个集<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-1558">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="b0200-1559">比较使用英语 （美国） 和萨米语 （上部瑞典） 区域性的约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-1559">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="b0200-1560">请注意，字符串"encyclopædia"和"百科全书"都视为等效 EN-US 区域性中但不是会在萨米语 （北方瑞典） 区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1560">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs#4)]
 [!code-vb[System.String.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1561"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1561"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string * StringComparison -&gt; bool" Usage="System.string.Equals (a, b, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="b" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b0200-1562">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1562">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="b0200-1563">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1563">The second string to compare, or <see langword="null" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-1564">枚举值之一，用于指定比较的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1564">One of the enumeration values that specifies the rules for the comparison.</span></span></param>
        <summary><span data-ttu-id="b0200-1565">确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1565">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span> <span data-ttu-id="b0200-1566">参数指定区域性、大小写以及比较所用的排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1566">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="b0200-1567">如果 <see langword="true" /> 参数的值与 <paramref name="a" /> 参数的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1567"><see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1568">`comparisonType`参数指示是否比较应使用当前或固定区域性，接受或忽略所比较的两个字符串的大小写或不使用 word 或序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-1568">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1569">下面的示例使用的每个成员比较字的四个集<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-1569">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="b0200-1570">比较使用英语 （美国） 和萨米语 （上部瑞典） 区域性的约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-1570">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="b0200-1571">请注意，字符串"encyclopædia"和"百科全书"都视为等效 EN-US 区域性中但不是会在萨米语 （北方瑞典） 区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1571">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs#3)]
 [!code-vb[System.String.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-1572"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1572"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Format">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1573">将对象的值转换为基于指定格式的字符串，并将其插入到另一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1573">Converts the value of objects to strings based on the formats specified and inserts them into another string.</span></span>  
  
<span data-ttu-id="b0200-1574">如果不熟悉 `String.Format` 方法，请参阅 [String.Format 方法入门](#Starting)一节来进行快速了解。</span><span class="sxs-lookup"><span data-stu-id="b0200-1574">If you are new to the `String.Format` method, see the [Get started with the String.Format method](#Starting) section for a quick overview.</span></span>  
  
<span data-ttu-id="b0200-1575">有关 `String.Format` 方法的常规文档，请参阅[备注](#remarks-top)部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-1575">See the [Remarks](#remarks-top) section for general documentation for the `String.Format` method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
<a name="remarks-top"></a>   
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
 
 <span data-ttu-id="b0200-1576">本节内容：</span><span class="sxs-lookup"><span data-stu-id="b0200-1576">In this section:</span></span>  
  
 <span data-ttu-id="b0200-1577">[开始使用 String.Format 方法](#Starting) </span><span class="sxs-lookup"><span data-stu-id="b0200-1577">[Get started with the String.Format method](#Starting) </span></span>  
 <span data-ttu-id="b0200-1578">[我调用哪个方法？](#FTaskList) </span><span class="sxs-lookup"><span data-stu-id="b0200-1578">[Which method do I call?](#FTaskList) </span></span>  
 <span data-ttu-id="b0200-1579">[Format 方法概述](#Format_Brief) </span><span class="sxs-lookup"><span data-stu-id="b0200-1579">[The Format method in brief](#Format_Brief) </span></span>  
 <span data-ttu-id="b0200-1580">[格式项](#FormatItem) </span><span class="sxs-lookup"><span data-stu-id="b0200-1580">[The Format item](#FormatItem) </span></span>  
 <span data-ttu-id="b0200-1581">[如何设置参数的格式](#HowFormatted) </span><span class="sxs-lookup"><span data-stu-id="b0200-1581">[How arguments are formatted](#HowFormatted) </span></span>  
 <span data-ttu-id="b0200-1582">[格式项具有相同的索引](#SameIndex) </span><span class="sxs-lookup"><span data-stu-id="b0200-1582">[Format items that have the same index](#SameIndex) </span></span>  
 <span data-ttu-id="b0200-1583">[格式设置和区域性](#Format_Culture) </span><span class="sxs-lookup"><span data-stu-id="b0200-1583">[Formatting and culture](#Format_Culture) </span></span>  
 <span data-ttu-id="b0200-1584">[自定义格式设置操作](#Format_Custom) </span><span class="sxs-lookup"><span data-stu-id="b0200-1584">[Custom formatting operations](#Format_Custom) </span></span>  
 [<span data-ttu-id="b0200-1585">String.Format Q & A</span><span class="sxs-lookup"><span data-stu-id="b0200-1585">String.Format Q & A</span></span>](#QA)  
  
<a name="Starting"></a>   
## <a name="get-started-with-the-stringformat-method"></a><span data-ttu-id="b0200-1586">开始使用 String.Format 方法</span><span class="sxs-lookup"><span data-stu-id="b0200-1586">Get started with the String.Format method</span></span>  
 <span data-ttu-id="b0200-1587">使用<xref:System.String.Format%2A?displayProperty=nameWithType>如果你需要将对象、 变量或表达式的值插入到另一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1587">Use <xref:System.String.Format%2A?displayProperty=nameWithType> if you need to insert the value of an object, variable, or expression into another string.</span></span> <span data-ttu-id="b0200-1588">例如，可以插入的值<xref:System.Decimal>为字符串，用于显示给用户作为单个字符串值：</span><span class="sxs-lookup"><span data-stu-id="b0200-1588">For example, you can insert the value of a <xref:System.Decimal> value into a string to display it to the user as a single string:</span></span>  
  
 [!code-cpp[System.String.Format#35](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#35)]
 [!code-csharp-interactive[System.String.Format#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#35)]
 [!code-vb[System.String.Format#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#35)]  
  
 <span data-ttu-id="b0200-1589">你可以控制该值的格式设置：</span><span class="sxs-lookup"><span data-stu-id="b0200-1589">And you can control that value's formatting:</span></span>  
  
 [!code-cpp[System.String.Format#36](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#36)]
 [!code-csharp[System.String.Format#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#36)]
 [!code-vb[System.String.Format#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#36)]  
  
 <span data-ttu-id="b0200-1590">除了设置格式，还可以控制对齐方式和间距。</span><span class="sxs-lookup"><span data-stu-id="b0200-1590">Besides formatting, you can also control alignment and spacing.</span></span>  
  
 ### <a name="inserting-a-string"></a><span data-ttu-id="b0200-1591">将字符串插入</span><span class="sxs-lookup"><span data-stu-id="b0200-1591">Inserting a string</span></span>  

 <span data-ttu-id="b0200-1592"><xref:System.String.Format%2A?displayProperty=nameWithType> 开始一个格式字符串后, 跟一个或多个对象或表达式将转换为字符串并在格式字符串中的指定位置处插入。</span><span class="sxs-lookup"><span data-stu-id="b0200-1592"><xref:System.String.Format%2A?displayProperty=nameWithType> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</span></span> <span data-ttu-id="b0200-1593">例如:</span><span class="sxs-lookup"><span data-stu-id="b0200-1593">For example:</span></span>  
  
 [!code-cpp[System.String.Format#30](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#30)]
 [!code-csharp-interactive[System.String.Format#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#30)]
 [!code-vb[System.String.Format#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#30)]  
  
 <span data-ttu-id="b0200-1594">`{0}`格式字符串是一个格式项。</span><span class="sxs-lookup"><span data-stu-id="b0200-1594">The `{0}` in the format string is a format item.</span></span> <span data-ttu-id="b0200-1595">`0` 是将该位置处插入其字符串值的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1595">`0` is the index of the object whose string value will be inserted at that position.</span></span> <span data-ttu-id="b0200-1596">（索引从 0 开始。）如果要插入的对象不是字符串，其`ToString`调用方法以将其转换为一个之前将其插入结果字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1596">(Indexes start at 0.) If the object to be inserted is not a string, its `ToString` method is called to convert it to one before inserting it in the result string.</span></span>  
  
 <span data-ttu-id="b0200-1597">下面是使用对象列表中的两个格式项和两个对象的另一个示例：</span><span class="sxs-lookup"><span data-stu-id="b0200-1597">Here's another example that uses two format items and two objects in the object list:</span></span>  
  
 [!code-cpp[System.String.Format#31](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#31)]
 [!code-csharp[System.String.Format#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#31)]
 [!code-vb[System.String.Format#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#31)]  
  
 <span data-ttu-id="b0200-1598">可以有任意多个格式项并想在对象列表中的多个对象，只要每个格式项的索引对象列表中具有匹配的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1598">You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</span></span> <span data-ttu-id="b0200-1599">你还无需担心有关哪个重载调用;编译器将选择相应的一个。</span><span class="sxs-lookup"><span data-stu-id="b0200-1599">You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</span></span>  
  
 ### <a name="controlling-formatting"></a><span data-ttu-id="b0200-1600">控制格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1600">Controlling formatting</span></span>  
 <span data-ttu-id="b0200-1601">可以按照与要控制如何格式化对象的格式字符串的格式项中的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1601">You can follow the index in a format item with a format string to control how an object is formatted.</span></span> <span data-ttu-id="b0200-1602">例如， `{0:d}` "d"格式字符串应用于对象列表中的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1602">For example, `{0:d}` applies the "d" format string to the first object in the object list.</span></span> <span data-ttu-id="b0200-1603">下面是包含单个对象的一个示例，两个项目的格式：</span><span class="sxs-lookup"><span data-stu-id="b0200-1603">Here is an example with a single object and two format items:</span></span>  
  
 [!code-cpp[System.String.Format#32](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#32)]
 [!code-csharp[System.String.Format#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#32)]
 [!code-vb[System.String.Format#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#32)]  
  
 <span data-ttu-id="b0200-1604">类型支持的数字格式字符串，其中包括所有数值类型 (同时[标准](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义](~/docs/standard/base-types/custom-numeric-format-strings.md)格式字符串)，所有日期和时间 (同时[标准](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义](~/docs/standard/base-types/custom-date-and-time-format-strings.md)格式字符串) 和时间间隔 (同时[标准](~/docs/standard/base-types/standard-timespan-format-strings.md)并[自定义](~/docs/standard/base-types/custom-timespan-format-strings.md)格式字符串)，所有枚举类型[枚举类型](~/docs/standard/base-types/enumeration-format-strings.md)，并[Guid](https://msdn.microsoft.com/library/97af8hh4.aspx)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1604">A number of types support format strings, including all numeric types (both [standard](~/docs/standard/base-types/standard-numeric-format-strings.md) and [custom](~/docs/standard/base-types/custom-numeric-format-strings.md) format strings), all dates and times (both [standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [custom](~/docs/standard/base-types/custom-date-and-time-format-strings.md) format strings) and time intervals (both [standard](~/docs/standard/base-types/standard-timespan-format-strings.md) and [custom](~/docs/standard/base-types/custom-timespan-format-strings.md) format strings), all enumeration types [enumeration types](~/docs/standard/base-types/enumeration-format-strings.md), and [GUIDs](https://msdn.microsoft.com/library/97af8hh4.aspx).</span></span> <span data-ttu-id="b0200-1605">您还可以向你自己的类型添加支持的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1605">You can also add support for format strings to your own types.</span></span>  
  
 ### <a name="controlling-spacing"></a><span data-ttu-id="b0200-1606">控制间距</span><span class="sxs-lookup"><span data-stu-id="b0200-1606">Controlling spacing</span></span>  
 <span data-ttu-id="b0200-1607">您可以定义使用的语法类似于插入到结果字符串的字符串的宽度`{0,12}`，用于插入 12 个字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1607">You can define the width of the string that is inserted into the result string by using syntax such as `{0,12}`, which inserts a 12-character string.</span></span> <span data-ttu-id="b0200-1608">在这种情况下，第一个对象的字符串表示形式为右对齐 12 个字符字段中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1608">In this case, the string representation of the first object is right-aligned in the 12-character field.</span></span>  <span data-ttu-id="b0200-1609">（如果第一个对象的字符串表示形式的长度超过 12 个字符，不过，首选的字段宽度忽略，并且整个字符串插入到结果字符串。）</span><span class="sxs-lookup"><span data-stu-id="b0200-1609">(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</span></span>  
  
 <span data-ttu-id="b0200-1610">下面的示例定义一个 6 字符字段以保存该字符串"Year"和某些年字符串，以及 15 个字符字段以保存"填充"的字符串和某些填充数据。</span><span class="sxs-lookup"><span data-stu-id="b0200-1610">The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</span></span> <span data-ttu-id="b0200-1611">请注意，这些字符右对齐的字段中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1611">Note that the characters are right-aligned in the field.</span></span>  
  
 [!code-cpp[System.String.Format#33](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#33)]
 [!code-csharp[System.String.Format#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting3.cs#33)]
 [!code-vb[System.String.Format#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#33)]  
  
 ### <a name="controlling-alignment"></a><span data-ttu-id="b0200-1612">控制对齐方式</span><span class="sxs-lookup"><span data-stu-id="b0200-1612">Controlling alignment</span></span>  
 <span data-ttu-id="b0200-1613">默认情况下，字符串是右对齐，其字段中如果指定字段宽度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1613">By default, strings are right-aligned within their field if you specify a field width.</span></span> <span data-ttu-id="b0200-1614">若要左对齐字符串字段中的，您的前面加上负号的字段宽度如`{0,-12}`定义 12 个字符左对齐字段。</span><span class="sxs-lookup"><span data-stu-id="b0200-1614">To left-align strings in a field, you preface the field width with a negative sign, such as `{0,-12}` to define a 12-character left-aligned field.</span></span>  
  
 <span data-ttu-id="b0200-1615">下面的示例是类似于前一个，只不过它左对齐标签和数据。</span><span class="sxs-lookup"><span data-stu-id="b0200-1615">The following example is similar to the previous one, except that it left-aligns both labels and data.</span></span>  
  
 [!code-cpp[System.String.Format#34](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#34)]
 [!code-csharp[System.String.Format#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#34)]
 [!code-vb[System.String.Format#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#34)]  
  
 <span data-ttu-id="b0200-1616"><xref:System.String.Format%2A?displayProperty=nameWithType> 使用复合格式设置功能。</span><span class="sxs-lookup"><span data-stu-id="b0200-1616"><xref:System.String.Format%2A?displayProperty=nameWithType> makes use of the composite formatting feature.</span></span> <span data-ttu-id="b0200-1617">有关更多信息，请参见[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1617">For more information, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
<a name="FTaskList"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="b0200-1618">我调用哪个方法？</span><span class="sxs-lookup"><span data-stu-id="b0200-1618">Which method do I call?</span></span>  
  
|<span data-ttu-id="b0200-1619">功能</span><span class="sxs-lookup"><span data-stu-id="b0200-1619">To</span></span>|<span data-ttu-id="b0200-1620">Call</span><span class="sxs-lookup"><span data-stu-id="b0200-1620">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="b0200-1621">使用当前区域性的约定格式化的一个或多个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1621">Format one or more objects by using the conventions of the current culture.</span></span>|<span data-ttu-id="b0200-1622">包括重载除外`provider`参数，其余<xref:System.String.Format%2A>重载包括<xref:System.String>参数后跟一个或多个对象参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1622">Except for the overloads that include a `provider` parameter, the remaining <xref:System.String.Format%2A> overloads include a <xref:System.String> parameter followed by one or more object parameters.</span></span> <span data-ttu-id="b0200-1623">因此，无需确定哪个<xref:System.String.Format%2A>你想要调用的重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-1623">Because of this, you don't have to determine which <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="b0200-1624">你的语言编译器选择适当的重载中没有的重载进行`provider`参数，根据您的自变量列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1624">Your language compiler selects the appropriate overload from among the overloads that don't have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="b0200-1625">例如，如果自变量列表中包含五个参数，编译器将调用<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1625">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="b0200-1626">使用特定区域性的约定格式化的一个或多个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1626">Format one or more objects by using the conventions of a specific culture.</span></span>|<span data-ttu-id="b0200-1627">每个<xref:System.String.Format%2A>开头的重载`provider`参数后跟<xref:System.String>参数和一个或多个对象的参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1627">Each <xref:System.String.Format%2A> overload that begins with a `provider` parameter is followed by a <xref:System.String> parameter and one or more object parameters.</span></span> <span data-ttu-id="b0200-1628">正因为如此，则不需要确定哪个特定<xref:System.String.Format%2A>你想要调用的重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-1628">Because of this, you don't have to determine which specific <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="b0200-1629">你的语言编译器选择从具有重载的适当重载`provider`参数，根据您的自变量列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1629">Your language compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="b0200-1630">例如，如果自变量列表中包含五个参数，编译器将调用<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1630">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="b0200-1631">执行自定义格式设置操作中使用<xref:System.ICustomFormatter>实现或<xref:System.IFormattable>实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1631">Perform a custom formatting operation either with an <xref:System.ICustomFormatter> implementation or an <xref:System.IFormattable> implementation.</span></span>|<span data-ttu-id="b0200-1632">任何具有四个重载`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1632">Any of the four overloads with a `provider` parameter.</span></span> <span data-ttu-id="b0200-1633">编译器将选择从具有重载的适当重载`provider`参数，根据您的自变量列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1633">The compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span>|  
  
<a name="Format_Brief"></a>   
## <a name="the-format-method-in-brief"></a><span data-ttu-id="b0200-1634">Format 方法概述</span><span class="sxs-lookup"><span data-stu-id="b0200-1634">The Format method in brief</span></span> 

 <span data-ttu-id="b0200-1635">每个重载<xref:System.String.Format%2A>方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)包括从零开始索引的占位符称为*项目的格式*，复合格式字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1635">Each overload of the <xref:System.String.Format%2A> method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to include zero-based indexed placeholders, called *format items*, in a composite format string.</span></span> <span data-ttu-id="b0200-1636">在运行时，每个格式项替换的参数列表中的相应参数的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1636">At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</span></span> <span data-ttu-id="b0200-1637">如果自变量的值为`null`，格式项替换<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1637">If the value of the argument is `null`, the format item is replaced with <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-1638">例如，以下调用到<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法包含与三个格式项，一个格式字符串{0}， {1}，和{2}，和包含三个项目的参数列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1638">For example, the following call to the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method includes a format string with three format items, {0}, {1}, and {2}, and an argument list with three items.</span></span>  
  
 [!code-cpp[System.String.Format#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload1.cpp#8)]
 [!code-csharp[System.String.Format#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload1.cs#8)]
 [!code-vb[System.String.Format#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload1.vb#8)]  
  
<a name="FormatItem"></a>   
## <a name="the-format-item"></a><span data-ttu-id="b0200-1639">格式项</span><span class="sxs-lookup"><span data-stu-id="b0200-1639">The format item</span></span>  
 <span data-ttu-id="b0200-1640">格式项具有此语法：</span><span class="sxs-lookup"><span data-stu-id="b0200-1640">A format item has this syntax:</span></span>  
  
```  
{index[,alignment][:formatString]}  
```  
 
 <span data-ttu-id="b0200-1641">括号表示可选元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-1641">Brackets denote optional elements.</span></span> <span data-ttu-id="b0200-1642">左括号和右大括号是必需的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1642">The opening and closing braces are required.</span></span> <span data-ttu-id="b0200-1643">(包括文本左或右大括号中的格式字符串，请参阅[转义大括号](~/docs/standard/base-types/composite-formatting.md#escaping-braces)主题中[复合格式设置](~/docs/standard/base-types/composite-formatting.md)文章。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1643">(To include a literal opening or closing brace in the format string, see the [Escaping Braces](~/docs/standard/base-types/composite-formatting.md#escaping-braces) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.)</span></span>  
  
 <span data-ttu-id="b0200-1644">例如，若要设置格式的货币值的格式项可能显示如下：</span><span class="sxs-lookup"><span data-stu-id="b0200-1644">For example, a format item to format a currency value might appear like this:</span></span>  
  
 [!code-cpp[System.String.Format#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatsyntax1.cpp#12)]
 [!code-csharp[System.String.Format#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatsyntax1.cs#12)]  
 [!code-vb[System.String.Format#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatsyntax1.vb#12)]  

 <span data-ttu-id="b0200-1645">格式项具有以下元素：</span><span class="sxs-lookup"><span data-stu-id="b0200-1645">A format item has the following elements:</span></span>  
  
 <span data-ttu-id="b0200-1646">*index*</span><span class="sxs-lookup"><span data-stu-id="b0200-1646">*index*</span></span>  
 <span data-ttu-id="b0200-1647">将成为其字符串表示形式的参数的从零开始的索引包含在字符串中的此位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1647">The zero-based index of the argument whose string representation is to be included at this position in the string.</span></span> <span data-ttu-id="b0200-1648">如果此参数为`null`，将在此位置在字符串中包含空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1648">If this argument is `null`, an empty string will be included at this position in the string.</span></span>  
  
 <span data-ttu-id="b0200-1649">*alignment*</span><span class="sxs-lookup"><span data-stu-id="b0200-1649">*alignment*</span></span>  
 <span data-ttu-id="b0200-1650">可选。</span><span class="sxs-lookup"><span data-stu-id="b0200-1650">Optional.</span></span> <span data-ttu-id="b0200-1651">一个有符号的整数，指示插入参数以及它为右对齐 （正整数） 还是左对齐 （负整数） 到该字段的总长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1651">A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</span></span> <span data-ttu-id="b0200-1652">如果省略*对齐*，相应参数的字符串表示形式插入没有前导或尾随空格的字段中。</span><span class="sxs-lookup"><span data-stu-id="b0200-1652">If you omit *alignment*, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</span></span>  
  
 <span data-ttu-id="b0200-1653">如果的值*对齐*是要插入的参数的长度小于*对齐方式*将被忽略并使用参数的字符串表示形式的长度作为字段宽度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1653">If the value of *alignment* is less than the length of the argument to be inserted, *alignment* is ignored and the length of the string representation of the argument is used as the field width.</span></span>  
  
 <span data-ttu-id="b0200-1654">*formatString*</span><span class="sxs-lookup"><span data-stu-id="b0200-1654">*formatString*</span></span>  
 <span data-ttu-id="b0200-1655">可选。</span><span class="sxs-lookup"><span data-stu-id="b0200-1655">Optional.</span></span> <span data-ttu-id="b0200-1656">一个字符串，指定相应参数的结果字符串的格式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1656">A string that specifies the format of the corresponding argument's result string.</span></span> <span data-ttu-id="b0200-1657">如果省略*formatString*，相应参数的无参数`ToString`调用方法来生成其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1657">If you omit *formatString*, the corresponding argument's parameterless `ToString` method is called to produce its string representation.</span></span> <span data-ttu-id="b0200-1658">如果指定*formatString*，参数引用的格式项必须实现<xref:System.IFormattable>接口。</span><span class="sxs-lookup"><span data-stu-id="b0200-1658">If you specify *formatString*, the argument referenced by the format item must implement the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="b0200-1659">支持格式字符串的类型包括：</span><span class="sxs-lookup"><span data-stu-id="b0200-1659">Types that support format strings include:</span></span>  
  
-   <span data-ttu-id="b0200-1660">整型和浮点型的所有类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1660">All integral and floating-point types.</span></span> <span data-ttu-id="b0200-1661">(请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1661">(See [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="b0200-1662"><xref:System.DateTime> 和 <xref:System.DateTimeOffset>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1662"><xref:System.DateTime> and <xref:System.DateTimeOffset>.</span></span> <span data-ttu-id="b0200-1663">(请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1663">(See [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="b0200-1664">所有枚举类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1664">All enumeration types.</span></span> <span data-ttu-id="b0200-1665">(请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1665">(See [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="b0200-1666"><xref:System.TimeSpan> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1666"><xref:System.TimeSpan> values.</span></span> <span data-ttu-id="b0200-1667">(请参阅[标准 TimeSpan 格式字符串](~/docs/standard/base-types/standard-timespan-format-strings.md)并[自定义 TimeSpan 格式字符串](~/docs/standard/base-types/custom-timespan-format-strings.md)。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1667">(See [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="b0200-1668">GUID。</span><span class="sxs-lookup"><span data-stu-id="b0200-1668">GUIDs.</span></span> <span data-ttu-id="b0200-1669">(请参阅<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>方法。)</span><span class="sxs-lookup"><span data-stu-id="b0200-1669">(See the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> method.)</span></span>  
  
 <span data-ttu-id="b0200-1670">但请注意，可以实现任何自定义类型<xref:System.IFormattable>或扩展现有类型的<xref:System.IFormattable>实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1670">However, note that any custom type can implement <xref:System.IFormattable> or extend an existing type's <xref:System.IFormattable> implementation.</span></span>  
  
 <span data-ttu-id="b0200-1671">下面的示例使用`alignment`和`formatString`自变量才能生成格式化的输出。</span><span class="sxs-lookup"><span data-stu-id="b0200-1671">The following example uses the `alignment` and `formatString` arguments to produce formatted output.</span></span>  
  
 [!code-cpp[System.String.Format#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload2.cpp#9)]
 [!code-csharp[System.String.Format#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload2.cs#9)]
 [!code-vb[System.String.Format#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload2.vb#9)]  
  
<a name="HowFormatted"></a>   
## <a name="how-arguments-are-formatted"></a><span data-ttu-id="b0200-1672">如何设置参数的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1672">How arguments are formatted</span></span>  
 <span data-ttu-id="b0200-1673">格式项按顺序处理从字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-1673">Format items are processed sequentially from the beginning of the string.</span></span> <span data-ttu-id="b0200-1674">每个格式项的索引对应于该方法的参数列表中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1674">Each format item has an index that corresponds to an object in the method's argument list.</span></span> <span data-ttu-id="b0200-1675"><xref:System.String.Format%2A>方法检索自变量，并派生其字符串表示形式，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-1675">The <xref:System.String.Format%2A> method retrieves the argument and derives its string representation as follows:</span></span>  
  
-   <span data-ttu-id="b0200-1676">如果参数为`null`，则该方法插入<xref:System.String.Empty?displayProperty=nameWithType>到结果字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1676">If the argument is `null`, the method inserts <xref:System.String.Empty?displayProperty=nameWithType> into the result string.</span></span> <span data-ttu-id="b0200-1677">无需关心处理<xref:System.NullReferenceException>的 null 参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1677">You don't have to be concerned with handling a <xref:System.NullReferenceException> for null arguments.</span></span> 
  
-   <span data-ttu-id="b0200-1678">如果您调用<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>重载并`provider`对象的<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>实现返回非 null<xref:System.ICustomFormatter>实现中，将参数传递给其<xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1678">If you call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> overload and the `provider` object's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation returns a non-null <xref:System.ICustomFormatter> implementation, the argument is passed to its <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-1679">如果格式项包括*formatString*参数，它作为第一个参数传递给该方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1679">If the format item includes a *formatString* argument, it is passed as the first argument to the method.</span></span> <span data-ttu-id="b0200-1680">如果<xref:System.ICustomFormatter>实现可用，并生成一个非空字符串，字符串作为参数的字符串表示形式返回; 否则下, 一步执行。</span><span class="sxs-lookup"><span data-stu-id="b0200-1680">If the <xref:System.ICustomFormatter> implementation is available and produces a non-null string, that string is returned as the string representation of the argument; otherwise, the next step executes.</span></span>  
  
-   <span data-ttu-id="b0200-1681">如果参数实现<xref:System.IFormattable>接口，其<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>调用实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1681">If the argument implements the <xref:System.IFormattable> interface, its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation is called.</span></span>  
  
-   <span data-ttu-id="b0200-1682">自变量的无参数`ToString`方法，重写或继承的基类实现，该方法调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1682">The argument's parameterless `ToString` method, which either overrides or inherits from a base class implementation, is called.</span></span>  
  
 <span data-ttu-id="b0200-1683">有关截获对的调用的示例<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>方法，并允许您查看哪些信息<xref:System.String.Format%2A>方法将传递给在复合格式字符串中，每个格式项的格式设置方法请参阅[示例：截距提供程序和罗马数字格式化程序](#Format7_Example)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1683">For an example that intercepts calls to the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method and allows you to see what information the <xref:System.String.Format%2A> method passes to a formatting method for each format item in a composite format string, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  

 <span data-ttu-id="b0200-1684">有关详细信息，请参阅[处理顺序](~/docs/standard/base-types/composite-formatting.md##processing-order)主题中[复合格式设置](~/docs/standard/base-types/composite-formatting.md)一文。</span><span class="sxs-lookup"><span data-stu-id="b0200-1684">For more information, see the [Processing Order](~/docs/standard/base-types/composite-formatting.md##processing-order) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.</span></span>  
  
<a name="SameIndex"></a>   
## <a name="format-items-that-have-the-same-index"></a><span data-ttu-id="b0200-1685">格式项具有相同的索引</span><span class="sxs-lookup"><span data-stu-id="b0200-1685">Format items that have the same index</span></span>  
 <span data-ttu-id="b0200-1686"><xref:System.String.Format%2A>方法会抛出<xref:System.FormatException>异常索引项的索引是否大于或等于自变量列表中的参数的数目。</span><span class="sxs-lookup"><span data-stu-id="b0200-1686">The <xref:System.String.Format%2A> method throws a <xref:System.FormatException> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</span></span> <span data-ttu-id="b0200-1687">但是，`format`可以包含多个格式项不是没有自变量，前提是多个格式项都具有相同的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1687">However, `format` can include more format items than there are arguments, as long as multiple format items have the same index.</span></span> <span data-ttu-id="b0200-1688">在调用<xref:System.String.Format%28System.String%2CSystem.Object%29>在以下示例中，参数列表的方法具有一个参数，但在格式字符串包括两个格式项： 一个窗格显示一个数字，十进制值和另一个显示十六进制值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1688">In the call to the <xref:System.String.Format%28System.String%2CSystem.Object%29> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example1.cs#1)]
 [!code-vb[System.String.Format2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example1.vb#1)]  
  
<a name="Format_Culture"></a>   
## <a name="formatting-and-culture"></a><span data-ttu-id="b0200-1689">格式设置和区域性</span><span class="sxs-lookup"><span data-stu-id="b0200-1689">Formatting and culture</span></span>  
 <span data-ttu-id="b0200-1690">通常情况下，参数列表中的对象将转换为其字符串表示形式通过使用当前区域性的约定返回<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1690">Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="b0200-1691">可以通过调用的重载之一来控制此行为<xref:System.String.Format%2A>，其中包含`provider`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1691">You can control this behavior by calling one of the overloads of <xref:System.String.Format%2A> that includes a `provider` parameter.</span></span> <span data-ttu-id="b0200-1692">`provider`参数是<xref:System.IFormatProvider>实现，提供用于控制格式设置的自定义和特定于区域性的格式设置信息处理。</span><span class="sxs-lookup"><span data-stu-id="b0200-1692">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</span></span>  
  
 <span data-ttu-id="b0200-1693"><xref:System.IFormatProvider>接口具有一个成员， <xref:System.IFormatProvider.GetFormat%2A>，这是负责返回提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1693">The <xref:System.IFormatProvider> interface has a single member, <xref:System.IFormatProvider.GetFormat%2A>, which is responsible for returning the object that provides formatting information.</span></span> <span data-ttu-id="b0200-1694">.NET 具有三个<xref:System.IFormatProvider>提供特定于区域性的格式设置的实现：</span><span class="sxs-lookup"><span data-stu-id="b0200-1694">.NET has three <xref:System.IFormatProvider> implementations that provide culture-specific formatting:</span></span>  
  
-   <span data-ttu-id="b0200-1695"><xref:System.Globalization.CultureInfo>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1695"><xref:System.Globalization.CultureInfo>.</span></span> <span data-ttu-id="b0200-1696">其<xref:System.Globalization.CultureInfo.GetFormat%2A>方法返回区域性特定<xref:System.Globalization.NumberFormatInfo>设置的数字值和区域性特定格式的对象<xref:System.Globalization.DateTimeFormatInfo>格式化日期和时间值的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1696">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> object for formatting numeric values and a culture-specific <xref:System.Globalization.DateTimeFormatInfo> object for formatting date and time values.</span></span>  
  
-   <span data-ttu-id="b0200-1697"><xref:System.Globalization.DateTimeFormatInfo>它用于特定于区域性的日期和时间值的格式设置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1697"><xref:System.Globalization.DateTimeFormatInfo>, which is used for culture-specific formatting of date and time values.</span></span> <span data-ttu-id="b0200-1698">其<xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A>方法返回其自身。</span><span class="sxs-lookup"><span data-stu-id="b0200-1698">Its <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> method returns itself.</span></span>  
  
-   <span data-ttu-id="b0200-1699"><xref:System.Globalization.NumberFormatInfo>它用于特定于区域性的数值的格式设置。</span><span class="sxs-lookup"><span data-stu-id="b0200-1699"><xref:System.Globalization.NumberFormatInfo>, which is used for culture-specific formatting of numeric values.</span></span> <span data-ttu-id="b0200-1700">其<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>属性返回其自身。</span><span class="sxs-lookup"><span data-stu-id="b0200-1700">Its <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> property returns itself.</span></span> 

<a name="Format_Custom"></a>   
## <a name="custom-formatting-operations"></a><span data-ttu-id="b0200-1701">自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="b0200-1701">Custom formatting operations</span></span>  
 <span data-ttu-id="b0200-1702">你还可以调用的重载的任意<xref:System.String.Format%2A>方法具有`provider`类型的参数<xref:System.IFormatProvider>来执行自定义格式设置操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-1702">You can also call the any of the overloads of the <xref:System.String.Format%2A> method that have a `provider` parameter of type <xref:System.IFormatProvider> to perform custom formatting operations.</span></span> <span data-ttu-id="b0200-1703">例如，您无法设置整数格式作为一个标识号或电话号码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1703">For example, you could format an integer as an identification number or as a telephone number.</span></span> <span data-ttu-id="b0200-1704">若要执行自定义格式设置，你`provider`自变量必须同时实现<xref:System.IFormatProvider>和<xref:System.ICustomFormatter>接口。</span><span class="sxs-lookup"><span data-stu-id="b0200-1704">To perform custom formatting, your `provider` argument must implement both the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.</span></span> <span data-ttu-id="b0200-1705">当<xref:System.String.Format%2A>方法传递<xref:System.ICustomFormatter>实现作为`provider`自变量，<xref:System.String.Format%2A>方法调用其<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>实现，并请求类型的对象<xref:System.ICustomFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1705">When the <xref:System.String.Format%2A> method is passed an <xref:System.ICustomFormatter> implementation as the `provider` argument, the <xref:System.String.Format%2A> method calls its   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation and requests an object of type <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="b0200-1706">然后，它调用返回<xref:System.ICustomFormatter>对象的<xref:System.ICustomFormatter.Format%2A>方法来设置格式的复合字符串中每个格式项传递给它。</span><span class="sxs-lookup"><span data-stu-id="b0200-1706">It then calls the returned <xref:System.ICustomFormatter> object's <xref:System.ICustomFormatter.Format%2A> method to format each format item in the composite string passed to it.</span></span>  
  
 <span data-ttu-id="b0200-1707">提供自定义格式设置解决方案的详细信息，请参阅[如何：定义和使用自定义数值格式提供程序](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md)和<xref:System.ICustomFormatter>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1707">For more information about providing custom formatting solutions, see [How to: Define and Use Custom Numeric Format Providers](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md) and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="b0200-1708">将整数转换为带格式的自定义数字示例，请参阅[示例：自定义格式设置操作](#Format6_Example)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1708">For an example that converts integers to formatted custom numbers, see [Example: A custom formatting operation](#Format6_Example).</span></span> <span data-ttu-id="b0200-1709">将无符号的字节转换为罗马数字示例，请参阅[示例：截距提供程序和罗马数字格式化程序](#Format7_Example)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1709">For an example that converts unsigned bytes to Roman numerals, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  
  
<a name="Format6_Example"></a>   
### <a name="example-a-custom-formatting-operation"></a><span data-ttu-id="b0200-1710">示例:自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="b0200-1710">Example: A custom formatting operation</span></span>  
 <span data-ttu-id="b0200-1711">此示例中定义格式设置为在窗体 x xxxxx xx 客户帐户编号的整数值的格式提供程序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1711">This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</span></span>  
  
 [!code-cpp[System.String.Format#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample2.cpp#2)]
 [!code-csharp[System.String.Format#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/FormatExample2.cs#2)]
 [!code-vb[System.String.Format#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/FormatExample2.vb#2)]  
  
<a name="Format7_Example"></a>   
### <a name="example-an-intercept-provider-and-roman-numeral-formatter"></a><span data-ttu-id="b0200-1712">示例:截距提供程序和罗马数字格式化程序</span><span class="sxs-lookup"><span data-stu-id="b0200-1712">Example: An intercept provider and Roman numeral formatter</span></span>  
 <span data-ttu-id="b0200-1713">此示例中定义的自定义格式提供程序实现<xref:System.ICustomFormatter>和<xref:System.IFormatProvider>接口做两件事：</span><span class="sxs-lookup"><span data-stu-id="b0200-1713">This example defines a custom format provider that implements the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces to do two things:</span></span>  
  
-   <span data-ttu-id="b0200-1714">它显示的参数传递给其<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1714">It displays the parameters passed to its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="b0200-1715">这使我们能够看到哪些参数<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>方法将传递到每个对象，它会尝试设置格式的自定义格式设置实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1715">This enables us to see what parameters the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is passing to the custom formatting implementation for each object that it tries to format.</span></span> <span data-ttu-id="b0200-1716">在调试应用程序时，这很有用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1716">This can be useful when you're debugging your application.</span></span>  
  
-   <span data-ttu-id="b0200-1717">如果要设置格式的对象是一个无符号的字节值，是要通过使用"R"标准格式字符串设置格式，自定义格式化程序设置为罗马数字格式的数字值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1717">If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</span></span>  
  
 [!code-cpp[System.String.Format#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/interceptor2.cpp#11)]
 [!code-csharp[System.String.Format#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/interceptor2.cs#11)]
 [!code-vb[System.String.Format#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/interceptor2.vb#11)]  
  
<a name="QA"></a>   
## <a name="stringformat-q--a"></a><span data-ttu-id="b0200-1718">String.Format 问答</span><span class="sxs-lookup"><span data-stu-id="b0200-1718">String.Format Q & A</span></span>  
  
### <a name="why-do-you-recommend-string-interpolation-over-calls-to-the-stringformat-method"></a><span data-ttu-id="b0200-1719">为什么推荐字符串内插通过对调用`String.Format`方法？</span><span class="sxs-lookup"><span data-stu-id="b0200-1719">Why do you recommend string interpolation over calls to the `String.Format` method?</span></span>

<span data-ttu-id="b0200-1720">字符串内插是：</span><span class="sxs-lookup"><span data-stu-id="b0200-1720">String interpolation is:</span></span>

- <span data-ttu-id="b0200-1721">更灵活。</span><span class="sxs-lookup"><span data-stu-id="b0200-1721">More flexible.</span></span> <span data-ttu-id="b0200-1722">它可在任何字符串而无需对支持复合格式设置方法的调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-1722">It can be used in any string without requiring a call to a method that supports composite formatting.</span></span> <span data-ttu-id="b0200-1723">否则，您必须调用<xref:System.String.Format%2A>方法或支持复合格式设置，例如的另一种方法<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1723">Otherwise, you have to call the <xref:System.String.Format%2A> method or another method that supports composite formatting, such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>.</span></span> 

- <span data-ttu-id="b0200-1724">更具可读性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1724">More readable.</span></span> <span data-ttu-id="b0200-1725">因为内插表达式中，而不是参数列表中，将显示要插入到字符串的表达式内, 插的字符串是代码并读取容易得多。</span><span class="sxs-lookup"><span data-stu-id="b0200-1725">Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</span></span> <span data-ttu-id="b0200-1726">由于其更好的可读性内, 插的字符串可替换不仅对复合格式方法的调用，但它们还可在字符串串联操作中以生成更简洁、 更清晰的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1726">Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</span></span> 

<span data-ttu-id="b0200-1727">比较以下两个代码示例说明了通过字符串串联和对复合格式设置方法的调用的内插字符串的优越性。</span><span class="sxs-lookup"><span data-stu-id="b0200-1727">A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</span></span> <span data-ttu-id="b0200-1728">使用多个字符串串联操作中在下面的示例生成详细和硬读取代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1728">The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</span></span>

[!code-csharp[non-interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated1.cs#QAInterpolated)]
[!code-vb[non-interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated1.vb)]  

<span data-ttu-id="b0200-1729">在下面的示例中的内插字符串使用与此相反，生成更清晰、 更简洁的代码，比字符串串联语句和对调用<xref:System.String.Format%2A>上一示例中的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1729">In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <xref:System.String.Format%2A> method in the previous example.</span></span>

[!code-csharp[interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated2.cs#QAInterpolated2)]
[!code-vb[interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated2.vb)]  

### <a name="where-can-i-find-a-list-of-the-predefined-format-strings-that-can-be-used-with-format-items"></a><span data-ttu-id="b0200-1730">在哪里可以找到可以在格式项的预定义的格式字符串的列表？</span><span class="sxs-lookup"><span data-stu-id="b0200-1730">Where can I find a list of the predefined format strings that can be used with format items?</span></span>  
  
-   <span data-ttu-id="b0200-1731">对于所有整型和浮点类型，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)并[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1731">For all integral and floating-point types, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b0200-1732">日期和时间值，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)并[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1732">For date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b0200-1733">枚举值，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1733">For enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b0200-1734">有关<xref:System.TimeSpan>值，请参阅[标准 TimeSpan 格式字符串](~/docs/standard/base-types/standard-timespan-format-strings.md)并[自定义 TimeSpan 格式字符串](~/docs/standard/base-types/custom-timespan-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1734">For <xref:System.TimeSpan> values, see  [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).</span></span>  
  
-   <span data-ttu-id="b0200-1735">有关<xref:System.Guid>值，请参阅备注部分的<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>参考页。</span><span class="sxs-lookup"><span data-stu-id="b0200-1735">For <xref:System.Guid> values, see the Remarks section of the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> reference page.</span></span>  
  
### <a name="how-do-i-control-the-alignment-of-the-result-strings-that-replace-format-items"></a><span data-ttu-id="b0200-1736">如何控制结果字符串的替换为格式项的对齐方式？</span><span class="sxs-lookup"><span data-stu-id="b0200-1736">How do I control the alignment of the result strings that replace format items?</span></span>  
 <span data-ttu-id="b0200-1737">格式项的常规语法是：</span><span class="sxs-lookup"><span data-stu-id="b0200-1737">The general syntax of a format item is:</span></span>  
  
```  
{index[,alignment][: formatString]}  
```  
  
 <span data-ttu-id="b0200-1738">其中*对齐*是一个有符号的整数，它定义的字段宽度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1738">where *alignment* is a signed integer that defines the field width.</span></span> <span data-ttu-id="b0200-1739">如果此值为负，则它是文本字段中的，左对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-1739">If this value is negative, text in the field is left-aligned.</span></span> <span data-ttu-id="b0200-1740">如果为正数，文本是右对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-1740">If it is positive, text is right-aligned.</span></span>  
  
### <a name="how-do-i-control-the-number-of-digits-after-the-decimal-separator"></a><span data-ttu-id="b0200-1741">如何小数分隔符后的控制的位数</span><span class="sxs-lookup"><span data-stu-id="b0200-1741">How do I control the number of digits after the decimal separator?</span></span>  
 <span data-ttu-id="b0200-1742">所有[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)除外 （这用于仅包含整数） 的"D"、"G"、"R"和"X"允许定义结果字符串中的十进制数字的精度说明符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1742">All [standard numeric format strings](~/docs/standard/base-types/standard-numeric-format-strings.md) except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</span></span> <span data-ttu-id="b0200-1743">以下示例使用标准数字格式字符串来控制结果字符串中的十进制数字个数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1743">The following example uses standard numeric format strings to control the number of decimal digits in the result string.</span></span>  
  
 [!code-csharp[System.String.Format#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa26.cs#26)]
 [!code-vb[System.String.Format#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa26.vb#26)]  
  
 <span data-ttu-id="b0200-1744">如果您使用的[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)，使用"0"格式说明符来控制结果字符串中的十进制数字，如以下示例所示的编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-1744">If you're using a [custom numeric format string](~/docs/standard/base-types/custom-numeric-format-strings.md), use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa27.cs#27)]
 [!code-vb[System.String.Format#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa27.vb#27)]  
  
### <a name="how-do-i-control-the-number-of-integral-digits"></a><span data-ttu-id="b0200-1745">如何控制整数位的数？</span><span class="sxs-lookup"><span data-stu-id="b0200-1745">How do I control the number of integral digits?</span></span>  
 <span data-ttu-id="b0200-1746">默认情况下，格式设置操作仅显示非零整数位。</span><span class="sxs-lookup"><span data-stu-id="b0200-1746">By default, formatting operations only display non-zero integral digits.</span></span> <span data-ttu-id="b0200-1747">如果要进行格式设置整数，可以使用精度说明符"D"和"X"标准格式字符串来控制的数字位数。</span><span class="sxs-lookup"><span data-stu-id="b0200-1747">If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa29.cs#29)]
 [!code-vb[System.String.Format#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa29.vb#29)]  
  
 <span data-ttu-id="b0200-1748">若要通过使用"0"来生成具有指定数目的整数位的结果字符串的整数或带前导零的浮点数字，可以填充[自定义数字格式说明符](~/docs/standard/base-types/custom-numeric-format-strings.md)，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1748">You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" [custom numeric format specifier](~/docs/standard/base-types/custom-numeric-format-strings.md), as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa28.cs#28)]
 [!code-vb[System.String.Format#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa28.vb#28)]  
  
### <a name="how-many-items-can-i-include-in-the-format-list"></a><span data-ttu-id="b0200-1749">在格式列表中可以包括多少个项？</span><span class="sxs-lookup"><span data-stu-id="b0200-1749">How many items can I include in the format list?</span></span>  
 <span data-ttu-id="b0200-1750">没有任何实际的限制。</span><span class="sxs-lookup"><span data-stu-id="b0200-1750">There is no practical limit.</span></span> <span data-ttu-id="b0200-1751">第二个参数<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>方法的标记为<xref:System.ParamArrayAttribute>特性，这使您可以包含一个分隔的列表或对象数组作为格式列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-1751">The second parameter of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is tagged with the <xref:System.ParamArrayAttribute> attribute, which allows you to include either a delimited list or an object array as your format list.</span></span>  
  
<a name="braces"></a>
### <a name="how-do-i-include-literal-braces--and--in-the-result-string"></a><span data-ttu-id="b0200-1752">如何添加文本的大括号 ("{"和"}") 在结果字符串中？</span><span class="sxs-lookup"><span data-stu-id="b0200-1752">How do I include literal braces ("{" and "}") in the result string?</span></span>  
 <span data-ttu-id="b0200-1753">例如，如何防止不能引发下面的方法调用<xref:System.FormatException>异常？</span><span class="sxs-lookup"><span data-stu-id="b0200-1753">For example, how do you prevent the following method call from throwing a <xref:System.FormatException> exception?</span></span>  
  
 [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
 [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
 <span data-ttu-id="b0200-1754">单个左或右大括号始终解释为开头或末尾的格式项。</span><span class="sxs-lookup"><span data-stu-id="b0200-1754">A single opening or closing brace is always interpreted as the beginning or end of a format item.</span></span> <span data-ttu-id="b0200-1755">若要按原义解释，它必须进行转义。</span><span class="sxs-lookup"><span data-stu-id="b0200-1755">To be interpreted literally, it must be escaped.</span></span> <span data-ttu-id="b0200-1756">通过添加另一个大括号转义大括号 ("{{"和"}}"而不是"{"和"}")，如下面的方法调用：</span><span class="sxs-lookup"><span data-stu-id="b0200-1756">You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</span></span>  
  
 [!code-csharp-interactive[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
 [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
 <span data-ttu-id="b0200-1757">但是，即使转义大括号是轻松地误解。</span><span class="sxs-lookup"><span data-stu-id="b0200-1757">However, even escaped braces are easily misinterpreted.</span></span> <span data-ttu-id="b0200-1758">我们建议你在格式列表中包含大括号和格式项用于将它们插入在结果字符串中，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-1758">We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#25)]
 [!code-vb[System.String.Format#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#25)]  
  
### <a name="why-does-my-call-to-the-stringformat-method-throw-a-formatexception"></a><span data-ttu-id="b0200-1759">为什么我调用 String.Format 方法会引发 FormatException</span><span class="sxs-lookup"><span data-stu-id="b0200-1759">Why does my call to the String.Format method throw a FormatException?</span></span>  
 <span data-ttu-id="b0200-1760">异常的最常见原因是格式项的索引不对应于格式列表中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1760">The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</span></span> <span data-ttu-id="b0200-1761">通常，这表示已 misnumbered 格式项的索引或忘记了要包含在格式列表中的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1761">Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</span></span> <span data-ttu-id="b0200-1762">试图包含非转义左或向右大括号字符也会引发<xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1762">Attempting to include an unescaped left or right brace character also throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="b0200-1763">有时，例外情况是拼写错误; 结果例如，一个典型的错误是错"["（左的括号） 而不是"{"（的左大括号）。</span><span class="sxs-lookup"><span data-stu-id="b0200-1763">Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</span></span>  
  
### <a name="if-the-formatsystemiformatprovidersystemstringsystemobject-method-supports-parameter-arrays-why-does-my-code-throw-an-exception-when-i-use-an-array"></a><span data-ttu-id="b0200-1764">如果 Format(System.IFormatProvider,System.String,System.Object[]) 方法支持参数数组，为什么会我的代码引发异常时我使用一个数组？</span><span class="sxs-lookup"><span data-stu-id="b0200-1764">If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</span></span>  
 <span data-ttu-id="b0200-1765">例如，下面的代码引发<xref:System.FormatException>异常：</span><span class="sxs-lookup"><span data-stu-id="b0200-1765">For example, the following code throws a <xref:System.FormatException> exception:</span></span>  
  
 [!code-csharp[System.String.Format#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa1.cs#21)]
 [!code-vb[System.String.Format#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa1.vb#21)]  
  
 <span data-ttu-id="b0200-1766">这是编译器重载解析出现问题。</span><span class="sxs-lookup"><span data-stu-id="b0200-1766">This is a problem of compiler overload resolution.</span></span> <span data-ttu-id="b0200-1767">因为编译器不能将整数数组转换为对象数组，它将整数的数组视为单个参数，这样它便可以调用<xref:System.String.Format%28System.String%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1767">Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <xref:System.String.Format%28System.String%2CSystem.Object%29> method.</span></span> <span data-ttu-id="b0200-1768">将引发异常，因为有四个格式项，但仅格式列表中的单个项。</span><span class="sxs-lookup"><span data-stu-id="b0200-1768">The exception is thrown because there are four format items but only a single item in the format list.</span></span>  
  
 <span data-ttu-id="b0200-1769">因为 Visual Basic 既不 C# 可以将一个整数数组转换为对象数组，必须在调用之前自行执行此转换<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1769">Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span> <span data-ttu-id="b0200-1770">下面的示例提供了一种实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-1770">The following example provides one implementation.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa2.cs#22)]
 [!code-vb[System.String.Format#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa2.vb#22)]  

## Examples

<span data-ttu-id="b0200-1771">调用的大量示例<xref:System.String.Format%2A>方法通过混杂[备注](#remarks-top)本文的部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-1771">Numerous examples that call the <xref:System.String.Format%2A> method are interspersed through the [Remarks](#remarks-top) section of this article.</span></span>  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

<span data-ttu-id="b0200-1772">此外可以下载一组完整的`String.Format`示例，包括[适用于 C#.NET Core 2.0 项目](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip)和一个[适用于 Visual Basic.NET Core 2.0 项目](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip)，从[dotnet /示例 GitHub 存储库](https://github.com/dotnet/samples)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1772">You can also download a complete set of `String.Format` examples, which are included a [.NET Core 2.0 project for C#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip) and a [.NET Core 2.0 project for Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip), from the [dotnet/samples GitHub repository](https://github.com/dotnet/samples).</span></span>

<span data-ttu-id="b0200-1773">以下是一些项目中所包含的示例：</span><span class="sxs-lookup"><span data-stu-id="b0200-1773">The following are some of the examples included in the article:</span></span>

### <a name="create-a-format-string"></a><span data-ttu-id="b0200-1774">创建一个格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1774">Create a format string</span></span>

[<span data-ttu-id="b0200-1775">将字符串插入</span><span class="sxs-lookup"><span data-stu-id="b0200-1775">Inserting a string</span></span>](#inserting-a-string)  
[<span data-ttu-id="b0200-1776">格式项</span><span class="sxs-lookup"><span data-stu-id="b0200-1776">The format item</span></span>](#the-format-item)  
[<span data-ttu-id="b0200-1777">格式项具有相同的索引</span><span class="sxs-lookup"><span data-stu-id="b0200-1777">Format items that have the same index</span></span>](#format-items-that-have-the-same-index)

### <a name="control-formatted-output"></a><span data-ttu-id="b0200-1778">控制格式化的输出</span><span class="sxs-lookup"><span data-stu-id="b0200-1778">Control formatted output</span></span>

[<span data-ttu-id="b0200-1779">控制格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1779">Controlling formatting</span></span>](#controlling-formatting)  
[<span data-ttu-id="b0200-1780">控制间距</span><span class="sxs-lookup"><span data-stu-id="b0200-1780">Controlling spacing</span></span>](#controlling-spacing)  
[<span data-ttu-id="b0200-1781">控制对齐方式</span><span class="sxs-lookup"><span data-stu-id="b0200-1781">Controlling alignment</span></span>](#controlling-alignment)  
[<span data-ttu-id="b0200-1782">控制整数位的数</span><span class="sxs-lookup"><span data-stu-id="b0200-1782">Controlling the number of integral digits</span></span>](#how-do-i-control-the-number-of-integral-digits)  
[<span data-ttu-id="b0200-1783">控制小数分隔符后的位数</span><span class="sxs-lookup"><span data-stu-id="b0200-1783">Controlling the number of digits after the decimal separator</span></span>](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)  
[<span data-ttu-id="b0200-1784">在结果字符串中包括文本大括号</span><span class="sxs-lookup"><span data-stu-id="b0200-1784">Including literal braces in a result string</span></span>](#braces)  

### <a name="make-format-strings-culture-sensitive"></a><span data-ttu-id="b0200-1785">进行区分区域性的格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1785">Make format strings culture-sensitive</span></span>

[<span data-ttu-id="b0200-1786">区分区域性的格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1786">Culture-sensitive formatting</span></span>](#culture-sensitive-formatting)  

### <a name="customize-the-formatting-operation"></a><span data-ttu-id="b0200-1787">自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="b0200-1787">Customize the formatting operation</span></span>

[<span data-ttu-id="b0200-1788">自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="b0200-1788">A custom formatting operation</span></span>](#example-a-custom-formatting-operation)  
[<span data-ttu-id="b0200-1789">截距提供程序和罗马数字格式化程序</span><span class="sxs-lookup"><span data-stu-id="b0200-1789">An intercept provider and Roman numeral formatter</span></span>](#example-an-intercept-provider-and-roman-numeral-formatter)  

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1790">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1790">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1791">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1791">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="b0200-1792">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1792">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="b0200-1793">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1793">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b0200-1794">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1794">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b0200-1795">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1795">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="b0200-1796">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1796">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="b0200-1797">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1797">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="b0200-1798">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1798">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj -&gt; string" Usage="System.string.Format (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b0200-1799">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1799">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1800">要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1800">The object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1801">将字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1801">Replaces one or more format items in a string with the string representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="b0200-1802"><paramref name="format" /> 的副本，其中的任何格式项均替换为 <paramref name="arg0" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1802">A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1803">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将表达式的值转换为其字符串表示形式，并将字符串中嵌入该表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1803">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-a-single-argument"></a><span data-ttu-id="b0200-1804">示例:格式设置的单个自变量</span><span class="sxs-lookup"><span data-stu-id="b0200-1804">Example: Formatting a single argument</span></span>  
 
 <span data-ttu-id="b0200-1805">下面的示例使用<xref:System.String.Format%28System.String%2CSystem.Object%29>方法嵌入字符串中间的一个人的年龄。</span><span class="sxs-lookup"><span data-stu-id="b0200-1805">The following example uses the <xref:System.String.Format%28System.String%2CSystem.Object%29> method to embed an individual's age in the middle of a string.</span></span>  
  
 [!code-cpp[System.String.Format#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format7.cpp#7)]
 [!code-csharp-interactive[System.String.Format#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format7.cs#7)]
 [!code-vb[System.String.Format#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format7.vb#7)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1806"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1806"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1807"><paramref name="format" /> 中的格式项无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1807">The format item in <paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1808">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1808">-or-</span></span> 
<span data-ttu-id="b0200-1809">格式项的索引不为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1809">The index of a format item is not zero.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1810">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1810">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1811">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1811">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="b0200-1812">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1812">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="b0200-1813">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1813">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b0200-1814">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1814">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b0200-1815">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1815">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="b0200-1816">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1816">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="b0200-1817">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1817">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="b0200-1818">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1818">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj[] -&gt; string" Usage="System.string.Format (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b0200-1819">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1819">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="b0200-1820">一个对象数组，其中包含零个或多个要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1820">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1821">将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1821">Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</span></span></summary>
        <returns><span data-ttu-id="b0200-1822"><paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1822">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1823">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将四个或多个表达式的值转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1823">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="b0200-1824">由于`args`参数将标有<xref:System.ParamArrayAttribute?displayProperty=nameWithType>属性中，您可以将对象传递给该方法为各个自变量或<xref:System.Object>数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-1824">Since the `args` parameter is marked with the <xref:System.ParamArrayAttribute?displayProperty=nameWithType> attribute, you can pass the objects to the method as individual arguments or as an <xref:System.Object> array.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-more-than-three-arguments"></a><span data-ttu-id="b0200-1825">示例:格式设置三个以上参数</span><span class="sxs-lookup"><span data-stu-id="b0200-1825">Example: Formatting more than three arguments</span></span>  
 
 <span data-ttu-id="b0200-1826">此示例创建一个字符串，包含在特定日期上高和低温度数据。</span><span class="sxs-lookup"><span data-stu-id="b0200-1826">This example creates a string that contains data on the high and low temperature on a particular date.</span></span> <span data-ttu-id="b0200-1827">复合格式字符串具有五个格式项中的 C# 示例和六个 in Visual Basic 示例。</span><span class="sxs-lookup"><span data-stu-id="b0200-1827">The composite format string has five format items in the C# example and six in the Visual Basic example.</span></span> <span data-ttu-id="b0200-1828">两个格式项定义其相应的值的字符串表示形式的宽度，第一个格式项还包括标准日期和时间格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1828">Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</span></span>  
  
 [!code-cpp[System.String.Format#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format5.cpp#5)]
 [!code-csharp[System.String.Format#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format5.cs#5)]
 [!code-vb[System.String.Format#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format5.vb#5)]  
  
 <span data-ttu-id="b0200-1829">你还可以传递要进行格式化为一个数组，而不是参数列表的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1829">You can also pass the objects to be formatted as an array rather than as an argument list.</span></span>  
  
 [!code-cpp[System.String.Format#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format_paramarray1.cpp#10)]
 [!code-csharp[System.String.Format#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format_paramarray1.cs#10)]
 [!code-vb[System.String.Format#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format_paramarray1.vb#10)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1830"><paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1830"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1831"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1831"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1832">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1832">-or-</span></span> 
<span data-ttu-id="b0200-1833">格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1833">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1834">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1834">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1835">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1835">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="b0200-1836">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1836">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="b0200-1837">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1837">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b0200-1838">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1838">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b0200-1839">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1839">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="b0200-1840">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1840">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="b0200-1841">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1841">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="b0200-1842">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1842">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj -&gt; string" Usage="System.string.Format (provider, format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-1843">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1843">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="b0200-1844">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1844">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1845">要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1845">The object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1846">将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1846">Replaces the format item or items in a specified string with the string representation of the corresponding object.</span></span> <span data-ttu-id="b0200-1847">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1847">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="b0200-1848"><paramref name="format" /> 的副本，其中的一个或多个格式项已替换为 <paramref name="arg0" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1848">A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1849">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将表达式的值转换为其字符串表示形式，并将字符串中嵌入该表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1849">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> <span data-ttu-id="b0200-1850">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1850">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="b0200-1851">该方法将`arg0`为其字符串表示形式通过调用其**ToString(IFormatProvider)** 方法，或者，如果该对象的相应格式项包含一个格式字符串，通过调用其**ToString (String，IFormatProvider）** 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1851">The method converts `arg0` to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="b0200-1852">如果这些方法不存在，则会调用该对象的无参数**ToString**方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1852">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1853"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1853"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1854"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1854"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1855">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1855">-or-</span></span> 
<span data-ttu-id="b0200-1856">格式项的索引不为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-1856">The index of a format item is not zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj[] -&gt; string" Usage="System.string.Format (provider, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-1857">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1857">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="b0200-1858">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1858">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="b0200-1859">一个对象数组，其中包含零个或多个要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1859">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1860">将字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1860">Replaces the format items in a string with the string representations of corresponding objects in a specified array.</span></span> <span data-ttu-id="b0200-1861">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1861">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="b0200-1862"><paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1862">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1863">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将四个或多个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1863">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="b0200-1864">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1864">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="b0200-1865">该方法将每个<xref:System.Object>参数为其字符串表示形式通过调用其**ToString(IFormatProvider)** 方法，或者，如果该对象的相应格式项包含一个格式字符串，通过调用其**ToString(String,IFormatProvider)** 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1865">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="b0200-1866">如果这些方法不存在，则会调用该对象的无参数**ToString**方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1866">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

<a name="culture-sensitive-formatting" /> 
## <a name="example-culture-sensitive-formatting"></a><span data-ttu-id="b0200-1867">示例:区分区域性的格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1867">Example: Culture-sensitive formatting</span></span>  
 <span data-ttu-id="b0200-1868">此示例使用<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29>方法以使用多个不同的区域性显示某些日期和时间值和数值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1868">This example uses the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method to display the string representation of some date and time values and numeric values by using several different cultures.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example2.cs#2)]
 [!code-vb[System.String.Format2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example2.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1869"><paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1869"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1870"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1870"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1871">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1871">-or-</span></span> 
<span data-ttu-id="b0200-1872">格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-1872">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.ICustomFormatter" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1873">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1873">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1874">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1874">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="b0200-1875">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1875">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="b0200-1876">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1876">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b0200-1877">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1877">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b0200-1878">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1878">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="b0200-1879">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1879">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="b0200-1880">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1880">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="b0200-1881">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1881">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b0200-1882">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1882">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1883">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1883">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1884">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1884">The second object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1885">将字符串中的格式项替换为两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1885">Replaces the format items in a string with the string representation of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="b0200-1886"><paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1886">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1887">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将两个表达式的值转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1887">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of two expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-two-arguments"></a><span data-ttu-id="b0200-1888">示例:格式设置的两个参数</span><span class="sxs-lookup"><span data-stu-id="b0200-1888">Example: Formatting two arguments</span></span>  
 
 <span data-ttu-id="b0200-1889">此示例使用<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29>方法来显示时间和温度数据存储在一个泛型<xref:System.Collections.Generic.Dictionary%602>对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1889">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object.</span></span> <span data-ttu-id="b0200-1890">请注意格式字符串具有三个格式项，尽管只有两个要格式化的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1890">Note that the format string has three format items, although there are only two objects to format.</span></span> <span data-ttu-id="b0200-1891">这是因为在使用两个格式项列表 （日期和时间值） 中的第一个对象：第一个格式项的显示时，第二个显示的日期。</span><span class="sxs-lookup"><span data-stu-id="b0200-1891">This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</span></span>  
  
 [!code-cpp[System.String.Format#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample4.cpp#6)]
 [!code-csharp[System.String.Format#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatexample4.cs#6)]
 [!code-vb[System.String.Format#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatexample4.vb#6)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1892"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1892"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1893"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1893"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1894">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1894">-or-</span></span> 
<span data-ttu-id="b0200-1895">格式项的索引不为零或一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1895">The index of a format item is not zero or one.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1896">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1896">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1897">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1897">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="b0200-1898">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1898">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="b0200-1899">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1899">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="b0200-1900">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1900">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="b0200-1901">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1901">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="b0200-1902">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1902">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="b0200-1903">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1903">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="b0200-1904">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="b0200-1904">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-1905">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1905">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="b0200-1906">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1906">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1907">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1907">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1908">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1908">The second object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1909">将字符串中的格式项替换为两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1909">Replaces the format items in a string with the string representation of two specified objects.</span></span> <span data-ttu-id="b0200-1910">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1910">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="b0200-1911"><paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1911">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1912">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将两个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1912">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert two expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="b0200-1913">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1913">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="b0200-1914">该方法将每个<xref:System.Object>参数为其字符串表示形式通过调用其**ToString(IFormatProvider)** 方法，或者，如果该对象的相应格式项包含一个格式字符串，通过调用其**ToString(String,IFormatProvider)** 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1914">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="b0200-1915">如果这些方法不存在，则会调用该对象的无参数**ToString**方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1915">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1916"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1916"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1917"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1917"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1918">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1918">-or-</span></span> 
<span data-ttu-id="b0200-1919">格式项的索引不为零或一。</span><span class="sxs-lookup"><span data-stu-id="b0200-1919">The index of a format item is not zero or one.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b0200-1920">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1920">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1921">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1921">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1922">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1922">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="b0200-1923">要设置格式的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1923">The third object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1924">将字符串中的格式项替换为三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1924">Replaces the format items in a string with the string representation of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="b0200-1925"><paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1925">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1926">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将三个表达式的值转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1926">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of three expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-three-arguments"></a><span data-ttu-id="b0200-1927">示例:格式设置的三个参数</span><span class="sxs-lookup"><span data-stu-id="b0200-1927">Example: Formatting three arguments</span></span>  
 
 <span data-ttu-id="b0200-1928">此示例使用<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法来创建一个字符串，说明了一个布尔值结果`And`具有两个整数值的操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-1928">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to create a string that illustrates the result of a Boolean `And` operation with two integer values.</span></span> <span data-ttu-id="b0200-1929">请注意，格式字符串包括六个格式项，但该方法具有在其参数列表中，只有三个项，因为每个项格式化两个不同的方式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1929">Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</span></span>  
  
 [!code-cpp[System.String.Format#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format4.cpp#4)]
 [!code-csharp-interactive[System.String.Format#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format4.cs#4)]
 [!code-vb[System.String.Format#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format4.vb#4)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1930"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1930"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1931"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1931"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1932">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1932">-or-</span></span> 
<span data-ttu-id="b0200-1933">格式项的索引小于零，或者大于二。</span><span class="sxs-lookup"><span data-stu-id="b0200-1933">The index of a format item is less than zero, or greater than two.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="b0200-1934">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b0200-1934">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="b0200-1935">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="b0200-1935">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-1936">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1936">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="b0200-1937">[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1937">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="b0200-1938">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1938">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="b0200-1939">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1939">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="b0200-1940">要设置格式的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1940">The third object to format.</span></span></param>
        <summary><span data-ttu-id="b0200-1941">将字符串中的格式项替换为三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1941">Replaces the format items in a string with the string representation of three specified objects.</span></span> <span data-ttu-id="b0200-1942">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1942">An parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="b0200-1943"><paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1943">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="b0200-1944">此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)将三个表达式转换为其字符串表示形式，并将字符串中嵌入这些表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-1944">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert three expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="b0200-1945">在执行转换，该方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="b0200-1945">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="b0200-1946">该方法将每个<xref:System.Object>参数为其字符串表示形式通过调用其**ToString(IFormatProvider)** 方法，或者，如果该对象的相应格式项包含一个格式字符串，通过调用其**ToString(String,IFormatProvider)** 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1946">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="b0200-1947">如果这些方法不存在，则会调用该对象的无参数**ToString**方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1947">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-1948"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1948"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-1949"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b0200-1949"><paramref name="format" /> is invalid.</span></span>  
  
<span data-ttu-id="b0200-1950">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-1950">-or-</span></span> 
<span data-ttu-id="b0200-1951">格式项的索引小于零，或者大于二。</span><span class="sxs-lookup"><span data-stu-id="b0200-1951">The index of a format item is less than zero, or greater than two.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CharEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CharEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As CharEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CharEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CharEnumerator" Usage="string.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CharEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-1952">检索一个可以循环访问此字符串中的每个字符的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1952">Retrieves an object that can iterate through the individual characters in this string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1953">枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1953">An enumerator object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
> <span data-ttu-id="b0200-1954">而不是调用<xref:System.String.GetEnumerator%2A>方法来检索<xref:System.CharEnumerator>对象，然后用于枚举字符串，应改为使用你的语言的迭代构造 (在C#中C++/CLR，并在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1954">Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct (in C#, in C++/CLR, and in Visual Basic).</span></span> <span data-ttu-id="b0200-1955">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md)在C#，[每个](/cpp/dotnet/for-each-in)在C++/CLR，和[为每个](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1955">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#, [for each](/cpp/dotnet/for-each-in) in C++/CLR, and [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).</span></span>
  
 <span data-ttu-id="b0200-1956">此方法可以循环访问字符串中的单个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-1956">This method enables you to iterate the individual characters in a string.</span></span> <span data-ttu-id="b0200-1957">例如，Visual Basic`For Each`和 C#`foreach`语句调用此方法以返回<xref:System.CharEnumerator>可以提供对此字符串实例中字符的只读访问权限的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1957">For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1958">下面的示例循环访问中的多个字符串的字符，并显示其各个字符有关的信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-1958">The following example iterates the characters in several strings and displays information about their individual characters.</span></span> <span data-ttu-id="b0200-1959">它使用的语言迭代构造而不是调用<xref:System.String.GetEnumerator%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-1959">It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.</span></span>  
  
 [!code-cpp[system.string.getenumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[system.string.getenumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[system.string.getenumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="P:System.String.Chars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="string.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-1960">返回该字符串的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1960">Returns the hash code for this string.</span></span></summary>
        <returns><span data-ttu-id="b0200-1961">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1961">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-1962">行为<xref:System.String.GetHashCode%2A>取决于其实现中，从公共语言运行时的一个版本到另一个可能会变化。</span><span class="sxs-lookup"><span data-stu-id="b0200-1962">The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another.</span></span> <span data-ttu-id="b0200-1963">此错误的原因是为了提高性能的<xref:System.String.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1963">A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0200-1964">如果两个字符串对象是否相等，<xref:System.String.GetHashCode%2A>方法返回完全相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1964">If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values.</span></span> <span data-ttu-id="b0200-1965">但是，没有每个唯一字符串值的唯一哈希代码值。</span><span class="sxs-lookup"><span data-stu-id="b0200-1965">However, there is not a unique hash code value for each unique string value.</span></span> <span data-ttu-id="b0200-1966">不同的字符串可能会返回相同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1966">Different strings can return the same hash code.</span></span>  
>   
>  <span data-ttu-id="b0200-1967">不保证本身的哈希代码以保持不变。</span><span class="sxs-lookup"><span data-stu-id="b0200-1967">The hash code itself is not guaranteed to be stable.</span></span> <span data-ttu-id="b0200-1968">跨.NET 实现，各种.NET 版本和单个.NET 版本的.NET 平台 （例如 32 位和 64 位），相同字符串的哈希代码可能不同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1968">Hash codes for identical strings can differ across .NET implementations, across .NET versions, and across .NET platforms (such as 32-bit and 64-bit) for a single version of .NET.</span></span> <span data-ttu-id="b0200-1969">在某些情况下，它们可能甚至不同的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="b0200-1969">In some cases, they can even differ by application domain.</span></span> <span data-ttu-id="b0200-1970">这意味着两个后续运行的同一个程序可能会返回不同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1970">This implies that two subsequent runs of the same program may return different hash codes.</span></span>  
>   
>  <span data-ttu-id="b0200-1971">因此，哈希代码应永远不会在其中创建了它们，应用程序域之外使用它们永远不应使用的键域中的一个集合，并应永远不会保留它们。</span><span class="sxs-lookup"><span data-stu-id="b0200-1971">As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</span></span>  
>   
>  <span data-ttu-id="b0200-1972">最后，不要将使用而不是返回的加密哈希函数，如果需要加密型强哈希值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-1972">Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="b0200-1973">对于加密哈希，请使用派生自的类<xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType>或<xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-1973">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
>   
>  <span data-ttu-id="b0200-1974">有关哈希代码的详细信息，请参阅<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1974">For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b0200-1975">在桌面应用程序，你可以使用[ \<userandomizedstringhashalgorithm，那么 > 元素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)生成唯一的哈希代码对每个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="b0200-1975">In desktop apps, you can use the [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="b0200-1976">这可以减少冲突数量，并提高插入和使用哈希表查找的整体性能。</span><span class="sxs-lookup"><span data-stu-id="b0200-1976">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="b0200-1977">下面的示例演示如何使用[ \<userandomizedstringhashalgorithm，那么 > 元素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-1977">The following example shows how to use the [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span> <span data-ttu-id="b0200-1978">它定义`DisplayString`类，其中包含私有字符串常量， `s`，其值是"这是一个字符串"。</span><span class="sxs-lookup"><span data-stu-id="b0200-1978">It defines a `DisplayString` class that includes a private string constant, `s`, whose value is "This is a string."</span></span> <span data-ttu-id="b0200-1979">它还包括显示字符串值及其哈希代码的 `ShowStringHashCode` 方法以及该方法在其中执行的应用程序域的名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-1979">It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</span></span>
  
 [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]
 [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]  
  
 <span data-ttu-id="b0200-1980">当您在未提供配置文件的情况下运行该示例时，它会显示类似下面的输出。</span><span class="sxs-lookup"><span data-stu-id="b0200-1980">When you run the example without supplying a configuration file, it displays output similar to the following.</span></span> <span data-ttu-id="b0200-1981">请注意，字符串的散列码在两个应用程序域中是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-1981">Note that the hash codes for the string are identical in the two application domains.</span></span>  
  
```
String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC  
String 'This is a string.' in domain 'NewDomain': 941BCEAC
```  
  
 <span data-ttu-id="b0200-1982">但是，如果将以下配置文件添加到示例目录，然后运行该示例，则同一个字符串的哈希代码将通过应用程序域进行区分。</span><span class="sxs-lookup"><span data-stu-id="b0200-1982">However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</span></span>  
  
```xml
<?xml version ="1.0"?>  
<configuration>  
   <runtime>  
      <UseRandomizedStringHashAlgorithm enabled="1" />  
   </runtime>  
</configuration>
```  
  
 <span data-ttu-id="b0200-1983">存在配置文件时，示例会显示以下输出：</span><span class="sxs-lookup"><span data-stu-id="b0200-1983">When the configuration file is present, the example displays the following output:</span></span>  
  
```  
String 'This is a string.' in domain 'PerDomain.exe': 5435776D
String 'This is a string.' in domain 'NewDomain': 75CC8236
```  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0200-1984">哈希代码用于插入和有效地从哈希表中检索键控的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-1984">Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</span></span> <span data-ttu-id="b0200-1985">但是，哈希代码不唯一地标识字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1985">However, hash codes don't uniquely identify strings.</span></span> <span data-ttu-id="b0200-1986">字符串具有相同哈希代码，但公共语言运行时还可以将相同的哈希代码分配给不同的字符串完全相同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1986">Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</span></span> <span data-ttu-id="b0200-1987">此外，哈希代码而异的.NET 版本、 平台中的一个版本，以及应用程序域。</span><span class="sxs-lookup"><span data-stu-id="b0200-1987">In addition, hash codes can vary by version of .NET, by platform within a single version, and by application domain.</span></span> <span data-ttu-id="b0200-1988">正因为如此，不应序列化，或保留哈希代码值，也不应使用它们作为哈希表或字典中的键。</span><span class="sxs-lookup"><span data-stu-id="b0200-1988">Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</span></span>  
  
 <span data-ttu-id="b0200-1989">有关使用哈希代码的其他信息和`GetHashCode`方法，请参阅<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-1989">For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-1990">下面的示例演示<xref:System.String.GetHashCode%2A>方法使用各种输入字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-1990">The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.</span></span>  
  
 [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]
 [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]
 [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-1991">返回的值<see cref="M:System.String.GetHashCode" />与平台相关。</span><span class="sxs-lookup"><span data-stu-id="b0200-1991">The value returned by <see cref="M:System.String.GetHashCode" /> is platform-dependent.</span></span> <span data-ttu-id="b0200-1992">它在.NET Framework 的 32 位和 64 位版本上不同。</span><span class="sxs-lookup"><span data-stu-id="b0200-1992">It differs on the 32-bit and 64-bit versions of the .NET Framework.</span></span> <span data-ttu-id="b0200-1993">它也可以不同版本的.NET Framework 和.NET Core 之间。</span><span class="sxs-lookup"><span data-stu-id="b0200-1993">It also can differ between versions of the .NET Framework and .NET Core.</span></span></para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <related type="Article" href="https://msdn.microsoft.com/library/c08125d6-56cc-4b23-b482-813ff85dc630"><span data-ttu-id="b0200-1994">&lt;Userandomizedstringhashalgorithm，那么&gt;元素</span><span class="sxs-lookup"><span data-stu-id="b0200-1994">&lt;UseRandomizedStringHashAlgorithm&gt; Element</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="System.string.GetHashCode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : StringComparison -&gt; int" Usage="string.GetHashCode comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.string.GetHashCode (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly char GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.char GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; char" Usage="string.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>System.Char</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="string.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-1995">返回类 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1995">Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-1996">枚举常数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-1996">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b0200-1997">下面的示例显示<xref:System.TypeCode>枚举的常量<xref:System.String>类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-1997">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>  
  
 [!code-cpp[string.gettypecode#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp#1)]
 [!code-csharp[string.gettypecode#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs#1)]
 [!code-vb[string.gettypecode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-1998">报告指定 Unicode 字符或字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-1998">Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="b0200-1999">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-1999">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2000">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2000">A Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2001">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2001">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2002">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2002">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2003">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2003">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2004">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2004">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2005">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2005">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2006">下面的示例演示如何搜索<xref:System.String>字符使用<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2006">The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]
 [!code-csharp[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]
 [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2007">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2007">The string to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2008">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2008">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span></summary>
        <returns><span data-ttu-id="b0200-2009">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2009">The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2010">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</span><span class="sxs-lookup"><span data-stu-id="b0200-2010">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2011">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2011">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2012">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2012">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="b0200-2013">搜索此实例的第一个字符位置开始，将继续，直到最后一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2013">The search begins at the first character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="b0200-2014">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2014">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2015">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2015">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2016">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.IndexOf%28System.String%29>方法始终返回 0 （零） 以指示当前实例的开头找到的匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2016">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span> <span data-ttu-id="b0200-2017">在以下示例中，<xref:System.String.IndexOf%28System.String%29>方法用于在两个字符串中查找三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2017">In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="b0200-2018">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2018">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="b0200-2019">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，每种情况下，因为软连字符是可忽略字符，因此结果是相同像软连字符不包含在`value`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2019">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="b0200-2020">搜索的软连字符时，该方法将返回 0 （零） 以指示它已在字符串的开头找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2020">When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</span></span>  
  
 [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]
 [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2021">下面的示例搜索"动物"中的"n"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2021">The following example searches for the "n" in "animal".</span></span> <span data-ttu-id="b0200-2022">因为字符串的索引从零而不是一个开始<xref:System.String.IndexOf%28System.String%29>方法指示"n"位于位置 1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2022">Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf%28System.String%29> method indicates that the "n" is at position 1.</span></span>  
  
 [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]
 [!code-csharp[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]
 [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]  
  
 <span data-ttu-id="b0200-2023">下面的示例使用<xref:System.String.IndexOf%2A>方法，以确定一个句子中的起始位置的动物的名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-2023">The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence.</span></span> <span data-ttu-id="b0200-2024">然后使用此位置插入一个句子介绍动物的形容词。</span><span class="sxs-lookup"><span data-stu-id="b0200-2024">It then uses this position to insert an adjective that describes the animal into the sentence.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2025"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2025"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2026">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2026">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2027">若要查找的字符串实例中的子字符串的第一个索引通过使用当前区域性的比较规则，请调用<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2027">To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2028">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2028">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2029">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2029">The search starting position.</span></span></param>
        <summary><span data-ttu-id="b0200-2030">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2030">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="b0200-2031">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-2031">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="b0200-2032">如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2032">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2033">编号从 0 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2033">Index numbering starts from 0.</span></span> <span data-ttu-id="b0200-2034">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2034">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="b0200-2035">如果`startIndex`等于字符串实例的长度，该方法将返回-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2035">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="b0200-2036">搜索范围为从`startIndex`到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2036">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="b0200-2037">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2037">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2038">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2038">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2039">下面的示例演示<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2039">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]
 [!code-csharp[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]
 [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2040"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2040"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2041">要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2041">The character to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2042">指定搜索规则的枚举值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2042">An enumeration value that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2043">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2043">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="b0200-2044">一个参数指定要用于指定字符的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2044">A parameter specifies the type of search to use for the specified character.</span></span></summary>
        <returns><span data-ttu-id="b0200-2045">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2045">The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="b0200-2046">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2046">Index numbering starts from zero.</span></span>  
  
<span data-ttu-id="b0200-2047">`comparisonType`参数是<xref:System.StringComparison>枚举成员，指定是否搜索`value`参数使用当前或固定区域性，是区分大小写或不区分大小写，或者使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2047">The `comparisonType` parameter is a <xref:System.StringComparison> enumeration member that specifies whether the search for the `value` argument uses the current or invariant culture, is case-sensitive or case-insensitive, or uses word or ordinal comparison rules.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2048"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2048"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2049">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2049">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2050">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2050">The search starting position.</span></span></param>
        <summary><span data-ttu-id="b0200-2051">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2051">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="b0200-2052">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-2052">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="b0200-2053">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2053">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2054">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2054">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2055">编号从 0 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2055">Index numbering starts from 0.</span></span> <span data-ttu-id="b0200-2056">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2056">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="b0200-2057">如果`startIndex`等于字符串实例的长度，该方法将返回-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2057">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="b0200-2058">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2058">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="b0200-2059">在开始执行搜索`startIndex`字符的此实例的位置，并将继续，直到最后一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2059">The search begins at the `startIndex` character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="b0200-2060">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2060">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2061">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2061">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2062">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29>方法始终返回`startIndex`，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2062">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="b0200-2063">在以下示例中，<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29>方法用于查找的软连字符 (U + 00AD) 后, 跟"m"两个字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2063">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</span></span> <span data-ttu-id="b0200-2064">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2064">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2065">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2065">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</span></span> <span data-ttu-id="b0200-2066">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2066">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]
 [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2067">下面的示例搜索目标字符串中指定的字符串的所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2067">The following example searches for all occurrences of a specified string within a target string.</span></span>  
  
 [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]
 [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]
 [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2068"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2068"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2069"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2069"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2070">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2070">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2071">若要使用当前区域性的比较规则后的特定字符位置查找发生的子字符串的第一个索引，请调用<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2071">To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2072">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2072">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2073">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2073">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2074">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2074">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="b0200-2075">一个参数指定要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2075">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2076">如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2076">The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2077">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</span><span class="sxs-lookup"><span data-stu-id="b0200-2077">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2078">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2078">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2079">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2079">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2080">下面的示例演示的三个重载<xref:System.String.IndexOf%2A>查找在字符串中使用的不同值的另一个字符串的第一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2080">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2081"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2081"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2082"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2082"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2083">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2083">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2084">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2084">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2085">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />方法始终返回 0 （零） 以指示当前实例的开头找到的匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2085">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span>  
  
<span data-ttu-id="b0200-2086">在以下示例中，<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" />方法用于在两个字符串中查找三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2086">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="b0200-2087">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2087">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="b0200-2088">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，因为软连字符是一个可忽略字符，区分区域性的搜索将返回相同的值，它将返回如果搜索字符串中未包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2088">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="b0200-2089">序号搜索，但是，成功地在一个字符串中查找软连字符，并报告它不存在从第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2089">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>  
  
<span data-ttu-id="b0200-2090">[!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)] [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2090">[!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)] [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2091">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2091">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2092">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2092">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2093">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2093">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2094">报告指定字符在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2094">Reports the zero-based index of the first occurrence of the specified character in this instance.</span></span> <span data-ttu-id="b0200-2095">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2095">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2096">如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2096">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2097">在开始执行搜索`startIndex`，而且以后继续`startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2097">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="b0200-2098">处的字符`startIndex`  +  `count`不包括在搜索中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2098">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="b0200-2099">编号从 0 （零） 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2099">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="b0200-2100">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2100">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="b0200-2101">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2101">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2102">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2102">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2103">下面的示例演示<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2103">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[system.string.indexof#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp#1)]
 [!code-csharp[system.string.indexof#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs#1)]
 [!code-vb[system.string.indexof#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2104"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2104"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2105">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2105">-or-</span></span> 
 <span data-ttu-id="b0200-2106"><paramref name="startIndex" /> 大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2106"><paramref name="startIndex" /> is greater than the length of this string.</span></span>  
  
<span data-ttu-id="b0200-2107">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2107">-or-</span></span> 
 <span data-ttu-id="b0200-2108"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2108"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2109">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2109">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2110">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2110">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2111">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2111">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2112">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2112">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="b0200-2113">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2113">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2114">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2114">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2115">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2115">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2116">编号从 0 （零） 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2116">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="b0200-2117">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2117">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="b0200-2118">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2118">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="b0200-2119">在开始执行搜索`startIndex`，而且以后继续`startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2119">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="b0200-2120">处的字符`startIndex`  +  `count`不包括在搜索中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2120">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="b0200-2121">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2121">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2122">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2122">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2123">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法始终返回`startIndex`，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2123">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="b0200-2124">在以下示例中，<xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29>方法用于查找的软连字符 (U + 00AD) 后, 跟"m"中第三到两个字符串中的第六个字符位置开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2124">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="b0200-2125">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2125">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2126">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2126">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2127">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2127">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]
 [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2128">下面的示例查找字符串的所有匹配项的索引"he"另一个字符串的子字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2128">The following example finds the index of all occurrences of the string "he" within a substring of another string.</span></span> <span data-ttu-id="b0200-2129">请注意要搜索的字符数必须针对每个搜索迭代重新计算。</span><span class="sxs-lookup"><span data-stu-id="b0200-2129">Note that the number of characters to be searched must be recalculated for each search iteration.</span></span>  
  
 [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]
 [!code-csharp[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]
 [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2130"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2130"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2131"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2131"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2132">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2132">-or-</span></span> 
 <span data-ttu-id="b0200-2133"><paramref name="startIndex" /> 大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2133"><paramref name="startIndex" /> is greater than the length of this string.</span></span>  
  
<span data-ttu-id="b0200-2134">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2134">-or-</span></span> 
 <span data-ttu-id="b0200-2135"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2135"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2136">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2136">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2137">若要使用当前区域性的比较规则执行此操作，调用<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2137">To use the comparison rules of the current culture to perform this operation, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2138">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2138">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2139">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2139">The search starting position.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2140">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2140">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2141">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2141">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="b0200-2142">参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2142">Parameters specify the starting search position in the current string and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2143">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2143">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2144">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2144">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2145">编号从 0 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2145">Index numbering starts from 0.</span></span> <span data-ttu-id="b0200-2146">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2146">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="b0200-2147">如果`startIndex`等于字符串实例的长度，该方法将返回-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2147">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="b0200-2148">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2148">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2149">下面的示例演示的三个重载<xref:System.String.IndexOf%2A>查找在字符串中使用的不同值的另一个字符串的第一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2149">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2150"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2150"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2151"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2151"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2152"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2152"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2153">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2153">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2154">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2154">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2155">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />方法始终返回<paramref name="startIndex" />，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2155">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
<span data-ttu-id="b0200-2156">在以下示例中，<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />方法用于查找的软连字符 (U + 00AD) 后, 跟"m"从两个字符串中的第三个字符位置开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2156">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings.</span></span> <span data-ttu-id="b0200-2157">只有一个字符串包含必需的子字符串。如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2157">Only one of the strings contains the required substring.If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2158">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2158">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="b0200-2159">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2159">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
<span data-ttu-id="b0200-2160">[!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)] [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2160">[!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)] [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2161">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2161">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2162">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2162">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2163">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2163">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2164">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2164">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2165">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2165">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="b0200-2166">参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2166">Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2167">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2167">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2168">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2168">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2169">编号从 0 （零） 开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2169">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="b0200-2170">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2170">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="b0200-2171">在开始执行搜索`startIndex`，而且以后继续`startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2171">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="b0200-2172">处的字符`startIndex`  +  `count`不包括在搜索中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2172">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="b0200-2173">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2173">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2174">下面的示例演示的三个重载<xref:System.String.IndexOf%2A>查找在字符串中使用的不同值的另一个字符串的第一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2174">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2175"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2175"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2176"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2176"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2177">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2177">-or-</span></span> 
 <span data-ttu-id="b0200-2178"><paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2178"><paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
<span data-ttu-id="b0200-2179">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2179">-or-</span></span> 
 <span data-ttu-id="b0200-2180"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2180"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2181"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2181"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2182">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2182">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2183">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2183">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2184">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法始终返回<paramref name="startIndex" />，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2184">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
<span data-ttu-id="b0200-2185">在以下示例中，<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法用于查找的软连字符 (U + 00AD) 后, 跟"m"中第三到两个字符串中的第六个字符位置开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2185">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="b0200-2186">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2186">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2187">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2187">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2188">当它执行序号比较时，但是，它找到的子字符串仅在第一个字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2188">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="b0200-2189">请注意，对于第一个字符串，包含软连字符后跟"m"，该方法无法返回软连字符的索引而是返回"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2189">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2190">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2190">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
<span data-ttu-id="b0200-2191">[!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)] [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2191">[!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)] [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2192">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2192">Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="b0200-2193">如果未在此实例中找到数组中的字符，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2193">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] -&gt; int" Usage="string.IndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2194">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2194">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2195">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2195">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="b0200-2196">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2196">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2197">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2197">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2198">搜索`anyOf`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2198">The search for `anyOf` is case-sensitive.</span></span> <span data-ttu-id="b0200-2199">如果`anyOf`是一个空数组，方法找到匹配的字符串开头 （即，位于索引零）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2199">If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</span></span>  
  
 <span data-ttu-id="b0200-2200">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2200">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2201">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2201">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2202">下面的示例查找字符串中第一个元音。</span><span class="sxs-lookup"><span data-stu-id="b0200-2202">The following example finds the first vowel in a string.</span></span>  
  
 [!code-csharp[System.String.IndexOfAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs#1)]
 [!code-vb[System.String.IndexOfAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2203"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2203"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2204">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2204">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2205">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2205">The search starting position.</span></span></param>
        <summary><span data-ttu-id="b0200-2206">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2206">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="b0200-2207">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-2207">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="b0200-2208">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2208">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2209">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2209">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2210">`startIndex`参数的范围可以介于 0 到字符串实例的长度减一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2210">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="b0200-2211">搜索范围为从`startIndex`到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2211">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="b0200-2212">搜索`anyOf`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2212">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2213">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当它们的 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2213">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="b0200-2214">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2214">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2215">以下示例查找字符串的任何字符的匹配项的索引"是"另一个字符串的子字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2215">The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp#1)]
 [!code-csharp[string.indexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs#1)]
 [!code-vb[string.indexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2216"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2216"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2217"><paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2217"><paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2218">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2218">-or-</span></span> 
 <span data-ttu-id="b0200-2219"><paramref name="startIndex" /> 大于此实例中的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2219"><paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2220">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2220">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2221">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2221">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2222">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2222">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2223">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2223">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="b0200-2224">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2224">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2225">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2225">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2226">在开始执行搜索`startIndex`，而且以后继续`startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2226">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="b0200-2227">处的字符`startIndex`  +  `count`不包括在搜索中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2227">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="b0200-2228">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2228">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2229">`startIndex`参数的范围可以介于 0 到字符串实例的长度减一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2229">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="b0200-2230">搜索`anyOf`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2230">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2231">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当它们的 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2231">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="b0200-2232">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2232">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2233">下面的示例查找子字符串的另一个字符串中的任何字符的字符串"帮助"的匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2233">The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp#1)]
 [!code-csharp[string.indexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs#1)]
 [!code-vb[string.indexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2234"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2234"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2235"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2235"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2236">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2236">-or-</span></span> 
 <span data-ttu-id="b0200-2237"><paramref name="count" /> + <paramref name="startIndex" /> 大于此实例中的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2237"><paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public string Insert (int startIndex, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Insert(int32 startIndex, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (startIndex As Integer, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Insert(int startIndex, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; string" Usage="string.Insert (startIndex, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-2238">插入的从零开始的索引位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2238">The zero-based index position of the insertion.</span></span></param>
        <param name="value"><span data-ttu-id="b0200-2239">要插入的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2239">The string to insert.</span></span></param>
        <summary><span data-ttu-id="b0200-2240">返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2240">Returns a new string in which a specified string is inserted at a specified index position in this instance.</span></span></summary>
        <returns><span data-ttu-id="b0200-2241">与此实例等效的一个新字符串，但在该字符串的 <paramref name="value" /> 位置处插入了 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2241">A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2242">如果`startIndex`等于此实例的长度`value`追加到此实例的结尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2242">If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2243">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2243">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2244">相反，它返回一个新字符串，在其中`value`插入到当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-2244">Instead, it returns a new string in which `value` is inserted into the current instance.</span></span>  
  
 <span data-ttu-id="b0200-2245">例如，返回值的`"abc".Insert(2, "XYZ")`是"abXYZc"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2245">For example, the return value of `"abc".Insert(2, "XYZ")` is "abXYZc".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2246">下面的示例在一个字符串的第四个字符位置 （索引 3 处的字符） 中插入空格字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2246">The following example inserts a space character in the fourth character position (the character at index 3) of a string.</span></span>  
  
 [!code-csharp[System.String.Insert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs#1)]
 [!code-vb[System.String.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb#1)]  
  
 <span data-ttu-id="b0200-2247">以下控制台应用程序会提示用户输入一个或多个用于描述两个动物的形容词。</span><span class="sxs-lookup"><span data-stu-id="b0200-2247">The following console application prompts the users to enter one or more adjectives to describe two animals.</span></span> <span data-ttu-id="b0200-2248">然后，它调用<xref:System.String.Insert%2A>方法插入到一个字符串，由用户输入的文本。</span><span class="sxs-lookup"><span data-stu-id="b0200-2248">It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2249"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2249"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2250"><paramref name="startIndex" /> 为负数或大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2250"><paramref name="startIndex" /> is negative or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Intern">
      <MemberSignature Language="C#" Value="public static string Intern (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Intern(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Intern(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intern (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Intern(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Intern : string -&gt; string" Usage="System.string.Intern str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="b0200-2251">要在暂存池中搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2251">A string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="b0200-2252">检索系统对指定 <see cref="T:System.String" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2252">Retrieves the system's reference to the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-2253">如果暂存了 <paramref name="str" />，则返回系统对其的引用；否则返回对值为 <paramref name="str" /> 的字符串的新引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2253">The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2254">公共语言运行时维护一个名为暂存池中，包含对每个声明或在程序中以编程方式创建的唯一字符串的单个引用的表，从而节约的字符串存储空间。</span><span class="sxs-lookup"><span data-stu-id="b0200-2254">The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</span></span> <span data-ttu-id="b0200-2255">因此，文本字符串的特定值的实例只能一次系统中存在。</span><span class="sxs-lookup"><span data-stu-id="b0200-2255">Consequently, an instance of a literal string with a particular value only exists once in the system.</span></span>  
  
 <span data-ttu-id="b0200-2256">例如，如果将相同的文本字符串分配给多个变量，请在运行时检索对文字字符串的相同引用从暂存池中，并将其分配给每个变量。</span><span class="sxs-lookup"><span data-stu-id="b0200-2256">For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</span></span>  
  
 <span data-ttu-id="b0200-2257"><xref:System.String.Intern%2A>方法使用暂存池中搜索的值相等的字符串`str`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2257">The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`.</span></span> <span data-ttu-id="b0200-2258">如果存在这样的字符串，则返回它在暂存池中的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2258">If such a string exists, its reference in the intern pool is returned.</span></span> <span data-ttu-id="b0200-2259">如果字符串不存在，对引用`str`添加到暂存池中，则返回该引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2259">If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.</span></span>  
  
 <span data-ttu-id="b0200-2260">在以下示例中，因为它是在程序中的文本已暂存的值为"MyTest"，字符串 s1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2260">In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</span></span> <span data-ttu-id="b0200-2261"><xref:System.Text.StringBuilder?displayProperty=nameWithType>类生成一个新的字符串对象具有与 s1 相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2261">The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class generates a new string object that has the same value as s1.</span></span> <span data-ttu-id="b0200-2262">该字符串的引用分配到 s2。</span><span class="sxs-lookup"><span data-stu-id="b0200-2262">A reference to that string is assigned to s2.</span></span> <span data-ttu-id="b0200-2263"><xref:System.String.Intern%2A>具有相同的值为 s2 的字符串方法搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2263">The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2.</span></span> <span data-ttu-id="b0200-2264">由于存在这样的字符串，该方法将返回分配给 s1 相同的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2264">Because such a string exists, the method returns the same reference that is assigned to s1.</span></span> <span data-ttu-id="b0200-2265">然后，该引用被分配到 s3。</span><span class="sxs-lookup"><span data-stu-id="b0200-2265">That reference is then assigned to s3.</span></span> <span data-ttu-id="b0200-2266">由于它们是指不同的对象; 因此，引用 s1 和 s2 比较不相等引用 s1 和 s3，比较结果相等，这是因为它们引用相同的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2266">References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</span></span>  
  
 [!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]
 [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]  
  
 <span data-ttu-id="b0200-2267">将此方法<xref:System.String.IsInterned%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2267">Compare this method to the <xref:System.String.IsInterned%2A> method.</span></span>  
  
## <a name="version-considerations"></a><span data-ttu-id="b0200-2268">版本的注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-2268">Version Considerations</span></span>  
 <span data-ttu-id="b0200-2269">在中[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]，则<xref:System.String.Intern%2A>方法恢复到其行为在.NET Framework 1.0 和 1.1 对于暂留空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2269">In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.</span></span> <span data-ttu-id="b0200-2270">在下面的示例中，变量`str1`分配到的引用<xref:System.String.Empty>，和变量`str2`分配对引用<xref:System.String.Empty>返回通过调用<xref:System.String.Intern%2A>方法之后转换<xref:System.Text.StringBuilder>对象，其值为<xref:System.String.Empty>为字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2270">In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string.</span></span> <span data-ttu-id="b0200-2271">然后在包含的引用`str1`和`str2`比较是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-2271">Then the references contained in `str1` and `str2` are compared for equality.</span></span>  
  
 [!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]
 [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]  
  
 <span data-ttu-id="b0200-2272">在中[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]， [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]，并[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]，`str1`和`str2`是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-2272">In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal.</span></span> <span data-ttu-id="b0200-2273">在中[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]并[!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]，`str1`和`str2`是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-2273">In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="b0200-2274">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-2274">Performance Considerations</span></span>  
 <span data-ttu-id="b0200-2275">如果想要减少的总内存量分配你的应用程序，请注意，暂留一个字符串，具有两个不需要的副作用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2275">If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</span></span> <span data-ttu-id="b0200-2276">首先，内存分配的暂留<xref:System.String>对象不太可能，公共语言运行时 (CLR) 操作终止事务之前释放。</span><span class="sxs-lookup"><span data-stu-id="b0200-2276">First, the memory allocated for interned <xref:System.String> objects is not likely to be released until the common language runtime (CLR) terminates.</span></span> <span data-ttu-id="b0200-2277">其原因在于对暂存的 CLR 的引用<xref:System.String>对象可以保存您的应用程序或甚至在应用程序域后，将终止。</span><span class="sxs-lookup"><span data-stu-id="b0200-2277">The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates.</span></span> <span data-ttu-id="b0200-2278">其次，要留用字符串，必须先创建字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2278">Second, to intern a string, you must first create the string.</span></span> <span data-ttu-id="b0200-2279">使用的内存<xref:System.String>对象必须仍然分配，即使内存最终将进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="b0200-2279">The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.</span></span>  
  
 <span data-ttu-id="b0200-2280">.NET Framework 2.0 版引入了<xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType>枚举成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-2280">The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> enumeration member.</span></span> <span data-ttu-id="b0200-2281"><xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning>成员标记为不需要字符串暂留的程序集。</span><span class="sxs-lookup"><span data-stu-id="b0200-2281">The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning.</span></span> <span data-ttu-id="b0200-2282">您可以将应用<xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning>使用的程序集<xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2282">You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute.</span></span> <span data-ttu-id="b0200-2283">此外，使用[Ngen.exe （本机映像生成器）](~/docs/framework/tools/ngen-exe-native-image-generator.md)若要编译的程序集之前运行时，会不暂留字符串多个模块。</span><span class="sxs-lookup"><span data-stu-id="b0200-2283">Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2284">下面的示例使用三个值以确定是否有新创建的字符串相等的字符串和留用的字符串相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-2284">The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</span></span>  
  
 [!code-cpp[string.intern#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp#1)]
 [!code-csharp[string.intern#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs#1)]
 [!code-vb[string.intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2285"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2285"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IsInterned(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsInterned">
      <MemberSignature Language="C#" Value="public static string IsInterned (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IsInterned(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsInterned(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInterned (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ IsInterned(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsInterned : string -&gt; string" Usage="System.string.IsInterned str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="b0200-2286">要在暂存池中搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2286">The string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="b0200-2287">检索对指定 <see cref="T:System.String" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2287">Retrieves a reference to a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-2288">如果 <paramref name="str" /> 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2288">A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2289">公共语言运行时自动维护一个名为暂存池中，它包含在一个程序，以及任何唯一的实例中声明每个唯一文本字符串常量的单个实例的表<xref:System.String>以编程方式添加通过调用<xref:System.String.Intern%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2289">The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-2290">暂存池中，从而节约的字符串存储空间。</span><span class="sxs-lookup"><span data-stu-id="b0200-2290">The intern pool conserves string storage.</span></span> <span data-ttu-id="b0200-2291">如果将一个文本字符串常量分配给多个变量，请设置每个变量为引用在暂存池中，而不是引用的几个不同实例中的相同常量<xref:System.String>具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2291">If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.</span></span>  
  
 <span data-ttu-id="b0200-2292">此方法查找`str`在暂存池中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2292">This method looks up `str` in the intern pool.</span></span> <span data-ttu-id="b0200-2293">如果`str`已经过暂留，对该实例的引用是返回; 否则为`null`返回。</span><span class="sxs-lookup"><span data-stu-id="b0200-2293">If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.</span></span>  
  
 <span data-ttu-id="b0200-2294">将此方法<xref:System.String.Intern%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2294">Compare this method to the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-2295">此方法不返回布尔值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2295">This method does not return a Boolean value.</span></span> <span data-ttu-id="b0200-2296">如果您调用该方法，因为需要一个布尔值，该值指示是否暂留的特定字符串，可以使用类似以下的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-2296">If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</span></span>  
  
 [!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]
 [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2297">从.NET Framework 2.0 版开始，你可以重写的暂存池中使用当你使用[Ngen.exe （本机映像生成器）](~/docs/framework/tools/ngen-exe-native-image-generator.md)将程序集安装到本地计算机上的本机映像缓存。</span><span class="sxs-lookup"><span data-stu-id="b0200-2297">Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer.</span></span> <span data-ttu-id="b0200-2298">有关详细信息，请参阅备注部分中的性能注意事项<xref:System.String.Intern%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2298">For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2299">下面的示例演示由编译器自动暂存是文本字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2299">The following example demonstrates that literal strings are interned automatically by the compiler.</span></span>  
  
 [!code-cpp[string.isinterned#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp#1)]
 [!code-csharp[string.isinterned#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs#1)]
 [!code-vb[string.isinterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2300"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2300"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Intern(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2301">指示此字符串是否符合特定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2301">Indicates whether this string is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : unit -&gt; bool" Usage="string.IsNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-2302">指示此字符串是否符合 Unicode 范式 C。</span><span class="sxs-lookup"><span data-stu-id="b0200-2302">Indicates whether this string is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="b0200-2303">如果此字符串符合范式 C，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2303"><see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2304">某些 Unicode 字符具有多个等效的二进制表示形式包含的组合集和/或组合的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2304">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="b0200-2305">搜索、 排序、 匹配和其他操作，会增加复杂性存在单个字符的多个表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2305">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="b0200-2306">Unicode 标准定义了名为返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化的过程。</span><span class="sxs-lookup"><span data-stu-id="b0200-2306">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="b0200-2307">可以使用多种算法，名为规范化形式的不同的规则执行规范化。</span><span class="sxs-lookup"><span data-stu-id="b0200-2307">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="b0200-2308">.NET 目前支持 C、 D、 KC 和 KD 正常化窗体。</span><span class="sxs-lookup"><span data-stu-id="b0200-2308">.NET currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="b0200-2309">有关受支持的 Unicode 范式的说明，请参阅<xref:System.Text.NormalizationForm?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2309">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2310">下面的示例确定是否已成功为各种范式规范化字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2310">The following example determines whether a string is successfully normalized to various normalization forms.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2311">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2311">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2312"><see cref="Overload:System.String.IsNormalized" />方法将返回<see langword="false" />一旦遇到第一个非规范化字符在字符串中的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2312">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="b0200-2313">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<see cref="Overload:System.String.Normalize" />方法将引发<see cref="T:System.ArgumentException" />虽然<see cref="Overload:System.String.IsNormalized" />返回<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2313">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : System.Text.NormalizationForm -&gt; bool" Usage="string.IsNormalized normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="b0200-2314">一个 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2314">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="b0200-2315">指示此字符串是否符合指定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2315">Indicates whether this string is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="b0200-2316">如果此字符串符合由 <see langword="true" /> 参数指定的范式，则为 <paramref name="normalizationForm" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2316"><see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2317">某些 Unicode 字符具有多个等效的二进制表示形式包含的组合集和/或组合的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2317">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="b0200-2318">搜索、 排序、 匹配和其他操作，会增加复杂性存在单个字符的多个表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2318">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="b0200-2319">Unicode 标准定义了名为返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化的过程。</span><span class="sxs-lookup"><span data-stu-id="b0200-2319">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="b0200-2320">可以使用多种算法，名为规范化形式的不同的规则执行规范化。</span><span class="sxs-lookup"><span data-stu-id="b0200-2320">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="b0200-2321">.NET 目前支持 C、 D、 KC 和 KD 正常化窗体。</span><span class="sxs-lookup"><span data-stu-id="b0200-2321">.NET currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="b0200-2322">有关受支持的 Unicode 范式的说明，请参阅<xref:System.Text.NormalizationForm?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2322">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2323">下面的示例演示<xref:System.String.IsNormalized%2A>和<xref:System.String.Normalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2323">The following example demonstrates the <xref:System.String.IsNormalized%2A> and <xref:System.String.Normalize%2A> methods.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2324">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2324">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2325"><see cref="Overload:System.String.IsNormalized" />方法将返回<see langword="false" />一旦遇到第一个非规范化字符在字符串中的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2325">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="b0200-2326">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<see cref="Overload:System.String.Normalize" />方法将引发<see cref="T:System.ArgumentException" />虽然<see cref="Overload:System.String.IsNormalized" />返回<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2326">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrEmpty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrEmpty (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrEmpty(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrEmpty : string -&gt; bool" Usage="System.string.IsNullOrEmpty value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2327">要测试的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2327">The string to test.</span></span></param>
        <summary><span data-ttu-id="b0200-2328">指示指定的字符串是 <see langword="null" /> 还是空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="b0200-2328">Indicates whether the specified string is <see langword="null" /> or an empty string ("").</span></span></summary>
        <returns><span data-ttu-id="b0200-2329">如果 <see langword="true" /> 参数为 <paramref name="value" /> 或空字符串 ("")，则为 <see langword="null" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2329"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2330"><xref:System.String.IsNullOrEmpty%2A> 是，您可以同时测试的便捷方法是否<xref:System.String>是`null`或其值为<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2330"><xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-2331">它等效于以下代码：</span><span class="sxs-lookup"><span data-stu-id="b0200-2331">It is equivalent to the following code:</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]
 [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]
 [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]  
  
 <span data-ttu-id="b0200-2332">可以使用<xref:System.String.IsNullOrWhiteSpace%2A>方法来测试字符串是否为`null`，其值是<xref:System.String.Empty?displayProperty=nameWithType>，或它仅包含空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2332">You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=nameWithType>,  or it consists only of white-space characters.</span></span>  
  
## <a name="what-is-a-null-string"></a><span data-ttu-id="b0200-2333">什么是一个 null 字符串？</span><span class="sxs-lookup"><span data-stu-id="b0200-2333">What is a null string?</span></span>

<span data-ttu-id="b0200-2334">字符串是`null`如果它尚未分配一个值 (在C++和 Visual Basic) 或如果它显式分配的值`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2334">A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if it has explicitly been assigned a value of `null`.</span></span> <span data-ttu-id="b0200-2335">尽管[复合格式设置](~/docs/standard/base-types/composite-formatting.md)功能可以正常处理 null 的字符串，如以下示例所示，如果其成员引发尝试调用一个<xref:System.NullReferenceException>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2335">Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.</span></span>  
  
[!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]
[!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]
[!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]  
  
## <a name="what-is-an-empty-string"></a><span data-ttu-id="b0200-2336">什么是空字符串？</span><span class="sxs-lookup"><span data-stu-id="b0200-2336">What is an empty string?</span></span>  

<span data-ttu-id="b0200-2337">一个字符串为空，如果它显式分配空字符串 ("") 或<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2337">A string is empty if it  is explicitly assigned an empty string ("") or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-2338">空字符串具有<xref:System.String.Length%2A>为 0。</span><span class="sxs-lookup"><span data-stu-id="b0200-2338">An empty string has a <xref:System.String.Length%2A> of 0.</span></span>  <span data-ttu-id="b0200-2339">下面的示例创建一个空字符串，并显示其值，其长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2339">The following example creates an empty string and displays its value and its length.</span></span>  
  
[!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]
[!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]
[!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]  
  
## Examples  
 <span data-ttu-id="b0200-2340">以下示例检查三个字符串并确定每个字符串具有一个值、 为空字符串，或未`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2340">The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.</span></span>  
  
 [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]
 [!code-csharp[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]
 [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrWhiteSpace(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrWhiteSpace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrWhiteSpace (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrWhiteSpace(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhiteSpace : string -&gt; bool" Usage="System.string.IsNullOrWhiteSpace value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2341">要测试的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2341">The string to test.</span></span></param>
        <summary><span data-ttu-id="b0200-2342">指示指定的字符串是 <see langword="null" />、空还是仅由空白字符组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-2342">Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</span></span></summary>
        <returns><span data-ttu-id="b0200-2343">如果 <see langword="true" /> 参数为 <paramref name="value" /> 或 <see langword="null" />，或者如果 <see cref="F:System.String.Empty" /> 仅由空白字符组成，则为 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2343"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2344"><xref:System.String.IsNullOrWhiteSpace%2A> 是类似于下面的代码，只是它提供优异的性能的便捷方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-2344"><xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]
 [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]  
  
 <span data-ttu-id="b0200-2345">由 Unicode 标准定义的空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2345">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="b0200-2346"><xref:System.String.IsNullOrWhiteSpace%2A>方法将返回的值的任何字符解释`true`传递给时<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法作为空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2346">The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method as a white-space character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2347">以下示例创建一个字符串数组，并随后将传递到的数组的每个元素<xref:System.String.IsNullOrWhiteSpace%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2347">The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs#1)]
 [!code-vb[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2348">连接指定数组的元素或集合的成员，在每个元素或成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2348">Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</span></span></summary>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;string&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2349">要用作分隔符的字符串。<paramref name="separator" /></span><span class="sxs-lookup"><span data-stu-id="b0200-2349">The string to use as a separator.<paramref name="separator" /></span></span> <span data-ttu-id="b0200-2350">包括在返回的字符串中（只有在 <paramref name="values" /> 具有多个元素时）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2350">is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="b0200-2351">一个包含要串联的字符串的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-2351">A collection that contains the strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-2352">串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2352">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="b0200-2353">一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2353">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="b0200-2354">如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2354">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2355">如果`separator`是`null`，为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 改为使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2355">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="b0200-2356">如果的任何成员`values`是`null`，改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2356">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="b0200-2357"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 是可以串联的每个元素的便捷方法`IEnumerable(Of String)`不必先转换为字符串数组元素的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-2357"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="b0200-2358">它是语言集成查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2358">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="b0200-2359">下面的示例传入`List(Of String)`对象，其中包含为 lambda 表达式的选择是等于或大于特定字母 （即，在示例中，"M"） 的字母字母表中的大写或小写字母。</span><span class="sxs-lookup"><span data-stu-id="b0200-2359">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="b0200-2360">`IEnumerable(Of String)`返回的集合<xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>方法将传递给<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法以将结果显示为单个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2360">The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]
 [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2361">以下示例使用埃拉托色的尼斯筛法算法来计算小于或等于 100 的质数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2361">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="b0200-2362">它会将结果发送到将分配<xref:System.Collections.Generic.List%601>类型的对象<xref:System.String>，然后将其传递到<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2362">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs#3)]
 [!code-vb[System.String.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2363"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2363"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2364">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2364">The string to use as a separator.</span></span> <span data-ttu-id="b0200-2365">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2365"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="b0200-2366">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2366">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-2367">串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2367">Concatenates the elements of an object array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="b0200-2368">一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2368">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="b0200-2369">如果 <paramref name="values" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2369">If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2370">如果`separator`是`null`或者如果的任何元素`values`的第一个元素而不是`null`，为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 改为使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2370">If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="b0200-2371">如果看到的调用方部分的说明的第一个元素`values`是`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2371">See the Notes for Callers section if the first element of `values` is `null`.</span></span>  
  
 <span data-ttu-id="b0200-2372"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> 是可以无需显式将它的元素转换为字符串串联对象数组中的每个元素的便捷方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2372"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</span></span> <span data-ttu-id="b0200-2373">数组中的每个对象的字符串表示形式通过调用该对象的派生`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2373">The string representation of each object in the array is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2374">以下示例使用埃拉托色的尼斯筛法算法来计算小于或等于 100 的质数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2374">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="b0200-2375">它将结果分配给整数数组，然后将其传递到<xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2375">It assigns the result to a integer array, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs#1)]
 [!code-vb[System.String.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2376"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2376"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2377">如果第一个元素的<paramref name="values" />是<see langword="null" />，则<see cref="M:System.String.Join(System.String,System.Object[])" />方法不串联中的元素<paramref name="values" />而是返回<see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2377">If the first element of <paramref name="values" /> is <see langword="null" />, the <see cref="M:System.String.Join(System.String,System.Object[])" /> method does not concatenate the elements in <paramref name="values" /> but instead returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b0200-2378">提供了大量有关此问题的解决方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2378">A number of workarounds for this issue are available.</span></span> <span data-ttu-id="b0200-2379">最简单的方法是将分配的值为<see cref="F:System.String.Empty" />数组的第一个元素，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-2379">The easiest is to assign a value of <see cref="F:System.String.Empty" /> to the first element of the array, as the following example shows.</span></span>  
  
<span data-ttu-id="b0200-2380">[!code-csharp[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2380">[!code-csharp[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span></span></para></block>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2381">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2381">The string to use as a separator.</span></span> <span data-ttu-id="b0200-2382">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2382"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="b0200-2383">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2383">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-2384">串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2384">Concatenates all the elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="b0200-2385">一个由 <paramref name="value" /> 中的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2385">A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="b0200-2386">如果 <paramref name="value" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2386">If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2387">例如，如果`separator`是"，"和的元素`value`"apple"、"橙色"、"grape"和"pear"`Join(separator, value)`返回"apple、 橙色、 grape 负责，pear"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2387">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value)` returns "apple, orange, grape, pear".</span></span>  
  
 <span data-ttu-id="b0200-2388">如果`separator`是`null`，为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 改为使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2388">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="b0200-2389">如果中的任何元素`value`是`null`，改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2389">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2390">下面的示例演示<xref:System.String.Join%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2390">The following example demonstrates the <xref:System.String.Join%2A> method.</span></span>  
  
 [!code-cpp[stringjoin#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp#1)]
 [!code-csharp[stringjoin#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs#1)]
 [!code-vb[stringjoin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2391"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2391"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2392">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2392">The string to use as a separator.</span></span> <span data-ttu-id="b0200-2393">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2393"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="b0200-2394">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2394">An array that contains the elements to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2395"><paramref name="value" /> 中要使用的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2395">The first element in <paramref name="value" /> to use.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2396">要使用的 <paramref name="value" /> 的元素数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2396">The number of elements of <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="b0200-2397">串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2397">Concatenates the specified elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="b0200-2398">由 <paramref name="value" /> 中的字符串组成的字符串，这些字符串以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2398">A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span>  
  
<span data-ttu-id="b0200-2399">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2399">-or-</span></span> 
 <span data-ttu-id="b0200-2400">如果 <see cref="F:System.String.Empty" /> 为零，<paramref name="count" /> 没有元素，或 <paramref name="value" /> 以及 <paramref name="separator" /> 的全部元素均为 <paramref name="value" />，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2400"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2401">例如，如果`separator`是"，"和的元素`value`"apple"、"橙色"、"grape"和"pear"`Join(separator, value, 1, 2)`返回"橙色，grape"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2401">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value, 1, 2)` returns "orange, grape".</span></span>  
  
 <span data-ttu-id="b0200-2402">如果`separator`是`null`，为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 改为使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2402">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="b0200-2403">如果中的任何元素`value`是`null`，改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2403">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2404">下面的示例连接中的水果名称的数组的两个元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2404">The following example concatenates two elements from an array of names of fruit.</span></span>  
  
 [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]
 [!code-csharp[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]
 [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2405"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2405"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2406"><paramref name="startIndex" /> 或 <paramref name="count" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="b0200-2406"><paramref name="startIndex" /> or <paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="b0200-2407">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2407">-or-</span></span> 
 <span data-ttu-id="b0200-2408"><paramref name="startIndex" /> 加上 <paramref name="count" /> 大于 <paramref name="value" /> 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2408"><paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="b0200-2409">内存不足。</span><span class="sxs-lookup"><span data-stu-id="b0200-2409">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As Char, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As String, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0200-2410"><paramref name="values" /> 成员的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2410">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="b0200-2411">要用作分隔符的字符串。<paramref name="separator" /></span><span class="sxs-lookup"><span data-stu-id="b0200-2411">The string to use as a separator.<paramref name="separator" /></span></span> <span data-ttu-id="b0200-2412">包括在返回的字符串中（只有在 <paramref name="values" /> 具有多个元素时）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2412">is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="b0200-2413">一个包含要串联的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-2413">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="b0200-2414">串联集合的成员，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2414">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="b0200-2415">一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2415">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="b0200-2416">如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2416">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2417">如果`separator`是`null`，为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 改为使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2417">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="b0200-2418">如果的任何成员`values`是`null`，改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2418">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="b0200-2419"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 是可以串联的每个成员的便捷方法<xref:System.Collections.Generic.IEnumerable%601>而无需首先将它们转换为字符串的集合。</span><span class="sxs-lookup"><span data-stu-id="b0200-2419"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings.</span></span> <span data-ttu-id="b0200-2420">在每个对象的字符串表示形式<xref:System.Collections.Generic.IEnumerable%601>通过调用该对象的派生集合`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2420">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
 <span data-ttu-id="b0200-2421">此方法为特定语言集成查询 (LINQ) 查询表达式有用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2421">This method is particular useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="b0200-2422">例如，下面的代码定义一个非常简单`Animal`类，该类包含动物和它所属的顺序的名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-2422">For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="b0200-2423">然后，它定义<xref:System.Collections.Generic.List%601>对象，其中包含许多`Animal`对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-2423">It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects.</span></span> <span data-ttu-id="b0200-2424"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>调用扩展方法来提取`Animal`对象的`Order`属性等于"老鼠"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2424">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="b0200-2425">将结果传递给<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2425">The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]
 [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2426">以下示例使用埃拉托色的尼斯筛法算法来计算小于或等于 100 的质数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2426">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="b0200-2427">它会将结果发送到将分配<xref:System.Collections.Generic.List%601>对象的整数类型，然后将其传递到<xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2427">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs#2)]
 [!code-vb[System.String.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2428"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2428"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2429">报告指定 Unicode 字符或字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2429">Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="b0200-2430">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2430">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2431">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2431">The Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2432">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2432">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span></summary>
        <returns><span data-ttu-id="b0200-2433">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2433">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2434">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2434">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2435">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2435">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2436">此方法开始搜索此实例的最后一个字符位置和后面开始直至`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2436">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2437">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2437">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2438">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2438">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2439">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2439">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2440">下面的示例定义`ExtractFilename`方法，它使用<xref:System.String.LastIndexOf%28System.Char%29>方法以查找字符串中最后一个目录分隔符字符并将提取字符串的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-2440">The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf%28System.Char%29> method to find the last directory separator character in a string and to extract the string's file name.</span></span> <span data-ttu-id="b0200-2441">如果该文件存在，该方法将返回不包含路径的文件名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-2441">If the file exists, the method returns the file name without its path.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]
 [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2442">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2442">The string to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2443">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2443">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span></summary>
        <returns><span data-ttu-id="b0200-2444">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2444">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2445">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2445">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2446">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2446">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2447">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2447">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2448">搜索此实例的最后一个字符位置开始，后面开始直至`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2448">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
 <span data-ttu-id="b0200-2449">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2449">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="b0200-2450">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2450">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2451">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2451">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2452">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.LastIndexOf%28System.String%29>方法始终返回<xref:System.String.Length%2A?displayProperty=nameWithType>-1，表示当前实例中的最后一个索引位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2452">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=nameWithType> - 1, which represents the last index position in the current instance.</span></span> <span data-ttu-id="b0200-2453">在以下示例中，<xref:System.String.LastIndexOf%28System.String%29>方法用于在两个字符串中查找三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2453">In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="b0200-2454">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2454">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="b0200-2455">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，每种情况下，因为软连字符是可忽略字符，因此结果是相同像软连字符不包含在`value`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2455">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="b0200-2456">搜索的软连字符时，该方法将返回 6 和 5。</span><span class="sxs-lookup"><span data-stu-id="b0200-2456">When searching for a soft hyphen only, the method returns 6 and 5.</span></span> <span data-ttu-id="b0200-2457">这些值对应于两个字符串中的最后一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2457">These values correspond to the index of the last character in the two strings.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]
 [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2458">下面的示例移除打开和关闭从一个字符串，如果标记开始和结束字符串的 HTML 标记。</span><span class="sxs-lookup"><span data-stu-id="b0200-2458">The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</span></span> <span data-ttu-id="b0200-2459">如果某个字符串结尾右方括号字符 (">")，该示例使用<xref:System.String.LastIndexOf%2A>方法查找结束标记的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2459">If a string ends with a closing bracket character (">"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]
 [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2460"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2460"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2461">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2461">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2462">若要查找的字符串实例中的子字符串的最后一个索引通过使用当前区域性的比较规则，请调用<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2462">To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2463">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2463">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2464">搜索的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2464">The starting position of the search.</span></span> <span data-ttu-id="b0200-2465">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2465">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-2466">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2466">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span> <span data-ttu-id="b0200-2467">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2467">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2468">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2468">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2469">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2469">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2470">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1.此方法开始搜索，在`startIndex`字符位置的此实例和将继续向后直至当前实例的开头`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2470">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2471">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会从最后一个字符的每个字符搜索到开头的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2471">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span> <span data-ttu-id="b0200-2472">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2472">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2473">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2473">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2474">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2474">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2475">下面的示例查找在字符串中，从字符串的末尾使用到字符串的开头的所有出现的字符索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2475">The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</span></span>  
  
 [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]
 [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]
 [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2476">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2476">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2477">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2477">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2478">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2478">The search starting position.</span></span> <span data-ttu-id="b0200-2479">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2479">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-2480">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2480">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="b0200-2481">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2481">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2482">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2482">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b0200-2483">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</span><span class="sxs-lookup"><span data-stu-id="b0200-2483">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2484">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2484">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2485">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2485">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2486">在开始执行搜索`startIndex`字符位置的此实例和将继续直至开头向后`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2486">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2487">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会从最后一个字符的每个字符搜索到开头的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2487">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="b0200-2488">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2488">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="b0200-2489">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2489">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2490">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2490">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2491">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29>方法始终返回`startIndex`，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2491">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="b0200-2492">在以下示例中，<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29>方法用于查找子字符串，其中包含软连字符 (U + 00AD) 并且之前或在字符串中包含的最后一个"m"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2492">In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</span></span> <span data-ttu-id="b0200-2493">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，搜索字符串中的软连字符将被忽略，因为调用要查找的子字符串，包含软连字符和"m"在字符串中，返回"m"的位置而调用它以查找 substrin 的方法g 包含软连字符和"n"返回"n"的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2493">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</span></span> <span data-ttu-id="b0200-2494">当搜索字符串中包含仅软连字符时，方法会返回"m"，它表示的值的索引`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2494">When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of `startIndex`.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]
 [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2495">下面的示例在目标字符串中，从目标字符串的末尾使用到的目标字符串起始位置查找字符串的所有匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2495">The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</span></span>  
  
 [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]
 [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]
 [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2496"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2496"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2497">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2497">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>  
  
<span data-ttu-id="b0200-2498">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2498">-or-</span></span> 
<span data-ttu-id="b0200-2499">当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2499">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2500">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2500">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2501">若要查找特定的字符位置之前通过使用当前区域性的比较规则的子字符串的索引，请调用<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2501">To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * StringComparison -&gt; int" Usage="string.LastIndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2502">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2502">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2503">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2503">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2504">报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2504">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="b0200-2505">一个参数指定要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2505">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2506">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2506">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="b0200-2507">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2507">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2508">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2508">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2509">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2509">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2510">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2510">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
 <span data-ttu-id="b0200-2511">搜索此实例的最后一个字符位置开始，后面开始直至`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2511">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2512">下面的示例演示的三个重载<xref:System.String.LastIndexOf%2A>查找在字符串中使用的不同值的另一个字符串的最后一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2512">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2513"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2513"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2514"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2514"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2515">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2515">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2516">在区分区域性的搜索 (即，如果 <paramref name="options" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2516">In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2517">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />方法始终返回<see cref="P:System.String.Length" />-1，表示当前实例中的最后一个索引位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2517">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method always returns <see cref="P:System.String.Length" /> - 1, which represents the last index position in the current instance.</span></span>  
  
<span data-ttu-id="b0200-2518">在以下示例中，<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" />方法用于在两个字符串中查找三个子字符串 （软连字符 (U + 00AD)、 软连字符后跟"n"和软连字符后跟"m"）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2518">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="b0200-2519">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2519">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="b0200-2520">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，因为软连字符是一个可忽略字符，区分区域性的搜索将返回相同的值，它将返回如果搜索字符串中未包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2520">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="b0200-2521">序号搜索，但是，成功地在一个字符串中查找软连字符，并报告它不存在从第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2521">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>  
  
<span data-ttu-id="b0200-2522">[!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)] [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2522">[!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)] [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2523">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2523">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2524">搜索的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2524">The starting position of the search.</span></span> <span data-ttu-id="b0200-2525">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2525">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2526">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2526">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2527">报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2527">Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</span></span> <span data-ttu-id="b0200-2528">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2528">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2529">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2529">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2530">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2530">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2531">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2531">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2532">此方法开始搜索，在`startIndex`字符位置，沿反向向前直至此实例的开头`value`找到或`count`检查了字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2532">This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="b0200-2533">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会向后搜索`count`从字符串中的最后一个字符的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2533">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span> <span data-ttu-id="b0200-2534">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2534">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2535">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当它们的 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2535">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="b0200-2536">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2536">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2537">下面的示例查找子字符串，到起始位置的子字符串的从字符串末尾工作中出现的所有字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2537">The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]
 [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]
 [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2538">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2538">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span>  
  
<span data-ttu-id="b0200-2539">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2539">-or-</span></span> 
<span data-ttu-id="b0200-2540">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2540">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2541">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2541">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2542">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2542">The search starting position.</span></span> <span data-ttu-id="b0200-2543">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2543">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2544">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2544">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2545">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2545">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="b0200-2546">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2546">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2547">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2547">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b0200-2548">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</span><span class="sxs-lookup"><span data-stu-id="b0200-2548">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2549">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2549">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2550">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2550">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2551">在开始执行搜索`startIndex`字符位置的此实例，沿反向直至开头`value`找到或`count`检查了字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2551">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="b0200-2552">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会向后搜索`count`从字符串中的最后一个字符的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2552">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="b0200-2553">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2553">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="b0200-2554">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2554">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2555">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2555">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2556">如果`value`仅包含一个或多个可忽略字符，<xref:System.String.LastIndexOf%2A>方法始终返回`startIndex`，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2556">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="b0200-2557">在以下示例中，<xref:System.String.LastIndexOf%2A>方法用于查找在前两个字符串的最后一个"m"的两个字符软连字符 (U + 00AD) 的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2557">In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final "m" of two strings.</span></span> <span data-ttu-id="b0200-2558">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2558">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2559">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2559">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2560">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2560">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]
 [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2561">下面的示例查找该子字符串中从子字符串的末尾到开头的子字符串的字符串的所有匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2561">The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]
 [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]
 [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2562"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2562"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2563"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2563"><paramref name="count" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2564">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2564">-or-</span></span> 
<span data-ttu-id="b0200-2565">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2565">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2566">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2566">-or-</span></span> 
<span data-ttu-id="b0200-2567">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2567">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
<span data-ttu-id="b0200-2568">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2568">-or-</span></span> 
<span data-ttu-id="b0200-2569">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2569">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.</span></span>  
  
<span data-ttu-id="b0200-2570">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2570">-or-</span></span> 
<span data-ttu-id="b0200-2571">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2571">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>  
  
<span data-ttu-id="b0200-2572">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2572">-or-</span></span> 
<span data-ttu-id="b0200-2573">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2573">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2574">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2574">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-2575">若要使用当前区域性的比较规则执行此操作，调用<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2575">To perform this operation by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2576">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2576">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2577">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2577">The search starting position.</span></span> <span data-ttu-id="b0200-2578">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2578">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2579">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2579">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2580">报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2580">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="b0200-2581">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2581">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span> <span data-ttu-id="b0200-2582">一个参数指定要执行搜索指定字符串的比较类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2582">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2583">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2583">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b0200-2584">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</span><span class="sxs-lookup"><span data-stu-id="b0200-2584">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2585">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2585">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2586">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2586">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2587">在开始执行搜索`startIndex`字符位置，沿反向直至`value`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2587">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2588">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会从最后一个字符的每个字符搜索到开头的字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2588">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="b0200-2589">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2589">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2590">下面的示例演示的三个重载<xref:System.String.LastIndexOf%2A>查找在字符串中使用的不同值的另一个字符串的最后一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2590">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2591"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2591"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2592">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2592">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>  
  
<span data-ttu-id="b0200-2593">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2593">-or-</span></span> 
<span data-ttu-id="b0200-2594">当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2594">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2595"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2595"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2596">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2596">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2597">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2597">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2598">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />方法始终返回<paramref name="startIndex" />，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2598">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
<span data-ttu-id="b0200-2599">在以下示例中，<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />方法用于查找的软连字符 (U + 00AD) 后, 跟"m"，从最后一个"m"两个字符串中开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2599">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings.</span></span> <span data-ttu-id="b0200-2600">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2600">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2601">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2601">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2602">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2602">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="b0200-2603">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2603">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
<span data-ttu-id="b0200-2604">[!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)] [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2604">[!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)] [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-2605">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2605">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2606">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2606">The search starting position.</span></span> <span data-ttu-id="b0200-2607">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2607">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2608">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2608">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-2609">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2609">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="b0200-2610">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2610">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="b0200-2611">搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2611">The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</span></span> <span data-ttu-id="b0200-2612">一个参数指定要执行搜索指定字符串的比较类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-2612">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2613">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2613">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="b0200-2614">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</span><span class="sxs-lookup"><span data-stu-id="b0200-2614">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2615">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2615">Index numbering starts from zero.</span></span> <span data-ttu-id="b0200-2616">也就是说，在字符串中的第一个字符位于索引零和最后一个是在<xref:System.String.Length%2A>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2616">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="b0200-2617">在开始执行搜索`startIndex`字符位置，沿直至反向`value`找到或`count`检查了字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2617">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="b0200-2618">例如，如果`startIndex`是<xref:System.String.Length%2A>-1，则方法会向后搜索`count`从字符串中的最后一个字符的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2618">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="b0200-2619">`comparisonType`参数指定要搜索`value`参数使用当前或固定区域性，使用区分大小写或不区分大小写搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-2619">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2620">下面的示例演示的三个重载<xref:System.String.LastIndexOf%2A>查找在字符串中使用的不同值的另一个字符串的最后一个匹配项的方法<xref:System.StringComparison>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2620">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2621"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2621"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2622"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2622"><paramref name="count" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2623">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2623">-or-</span></span> 
<span data-ttu-id="b0200-2624">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2624">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2625">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2625">-or-</span></span> 
<span data-ttu-id="b0200-2626">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2626">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>  
  
<span data-ttu-id="b0200-2627">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2627">-or-</span></span> 
<span data-ttu-id="b0200-2628">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2628">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.</span></span>  
  
<span data-ttu-id="b0200-2629">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2629">-or-</span></span> 
<span data-ttu-id="b0200-2630">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2630">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>  
  
<span data-ttu-id="b0200-2631">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2631">-or-</span></span> 
<span data-ttu-id="b0200-2632">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2632">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2633"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2633"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2634">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="b0200-2634">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2635">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2635">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="b0200-2636">如果<paramref name="value" />仅包含一个或多个可忽略字符，<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法始终返回<paramref name="startIndex" />，即搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2636">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>  
  
<span data-ttu-id="b0200-2637">在以下示例中，<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />方法用于在两个字符串中查找所有中后, 跟"m"的软连字符 (U + 00AD) 位置，但之前最后一个"m"的第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2637">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings.</span></span> <span data-ttu-id="b0200-2638">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2638">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="b0200-2639">如果运行该示例[!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)]或更高版本，这两种情况下，因为软连字符是可忽略字符，则此方法返回的字符串中的"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2639">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2640">当它执行序号比较时，但是，它找到的子字符串仅在第一个字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2640">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="b0200-2641">请注意，对于第一个字符串，包含软连字符后跟"m"，该方法无法返回软连字符的索引而是返回"m"的索引执行区分区域性的比较时。</span><span class="sxs-lookup"><span data-stu-id="b0200-2641">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="b0200-2642">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2642">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>  
  
<span data-ttu-id="b0200-2643">[!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)] [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="b0200-2643">[!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)] [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2644">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2644">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="b0200-2645">如果未在此实例中找到数组中的字符，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2645">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] -&gt; int" Usage="string.LastIndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2646">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2646">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="b0200-2647">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2647">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span></summary>
        <returns><span data-ttu-id="b0200-2648">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2648">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2649">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2649">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2650">此方法开始搜索此实例的最后一个字符位置和后面直到中的字符开始`anyOf`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2650">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2651">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2651">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2652">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2652">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2653">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2653">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2654">以下示例查找字符串中的任何字符的最后一个匹配项的索引"是"另一个字符串内。</span><span class="sxs-lookup"><span data-stu-id="b0200-2654">The following example finds the index of the last occurrence of any character in the string "is" within another string.</span></span>  
  
 [!code-cpp[string.lastindexofany1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp#1)]
 [!code-csharp[string.lastindexofany1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs#1)]
 [!code-vb[string.lastindexofany1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2655"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2655"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2656">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2656">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2657">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2657">The search starting position.</span></span> <span data-ttu-id="b0200-2658">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2658">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-2659">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2659">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="b0200-2660">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2660">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2661">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2661">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2662">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2662">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2663">此方法开始搜索，在`startIndex`字符位置的此实例和继续执行直到中的字符开头向后`anyOf`找到或已检查完第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2663">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="b0200-2664">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2664">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2665">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2665">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2666">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2666">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2667">以下示例查找字符串中的任何字符的最后一个匹配项的索引"是"另一个字符串的子字符串中。</span><span class="sxs-lookup"><span data-stu-id="b0200-2667">The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp#1)]
 [!code-csharp[string.lastindexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs#1)]
 [!code-vb[string.lastindexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2668"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2668"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2669">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2669">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="b0200-2670">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2670">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="b0200-2671">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2671">The search starting position.</span></span> <span data-ttu-id="b0200-2672">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="b0200-2672">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2673">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2673">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="b0200-2674">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2674">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="b0200-2675">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2675">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="b0200-2676">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-2676">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2677">从零开始的索引编号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2677">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="b0200-2678">此方法开始搜索，在`startIndex`字符位置的此实例和将继续向后直到中的字符开头`anyOf`找到或`count`检查了字符位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2678">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="b0200-2679">搜索是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-2679">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="b0200-2680">此方法执行序号 （不区分区域性） 搜索，其中一个字符被视为等效于另一个字符，仅当其 Unicode 标量值是相同的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2680">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="b0200-2681">若要执行区分区域性的搜索，请使用<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType>方法，其中一个预构成的字符，例如连字"存储"(U + 00 C 6)，它表示一个 Unicode 标量值可能被视为等效于任何形式的字符中的组件更正序列，如 AE (u+0041，U + 0045)，则根据区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2681">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2682">下面的示例查找另一个字符串的一个子字符串的字符串"帮助"中的任何字符的最后一个匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2682">The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp#1)]
 [!code-csharp[string.lastindexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs#1)]
 [!code-vb[string.lastindexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2683"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2683"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2684">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2684">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>  
  
<span data-ttu-id="b0200-2685">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2685">-or-</span></span> 
<span data-ttu-id="b0200-2686">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 减去 <paramref name="count" /> 再加 1 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2686">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.String.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.string.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0200-2687">获取当前 <see cref="T:System.String" /> 对象中的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2687">Gets the number of characters in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="b0200-2688">当前字符串中字符的数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-2688">The number of characters in the current string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2689"><xref:System.String.Length%2A>属性返回的数<xref:System.Char>此实例中的对象，不是 Unicode 字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2689">The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="b0200-2690">原因是可能由多个表示 Unicode 字符<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2690">The reason is that a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="b0200-2691">使用<xref:System.Globalization.StringInfo?displayProperty=nameWithType>类，以便每个 Unicode 字符而不是每个<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2691">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with each Unicode character instead of each <xref:System.Char>.</span></span>  
  
 <span data-ttu-id="b0200-2692">在某些语言中，如 C 和C++，null 字符指示字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2692">In some languages, such as C and C++, a null character indicates the end of a string.</span></span> <span data-ttu-id="b0200-2693">在.NET 中，可以在字符串中嵌入 null 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2693">In .NET, a null character can be embedded in a string.</span></span> <span data-ttu-id="b0200-2694">当字符串包含一个或多个 null 字符时，它们包含在字符串的总长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-2694">When a string includes one or more null characters, they are included in the length of the total string.</span></span> <span data-ttu-id="b0200-2695">例如，在以下字符串"abc"和"def"由 null 字符分隔的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2695">For example, in the following string, the substrings "abc" and "def" are separated by a null character.</span></span> <span data-ttu-id="b0200-2696"><xref:System.String.Length%2A>属性将返回 7，这表示它包含六个字母字符以及 null 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2696">The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</span></span>  
  
 [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]
 [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]
 [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2697">下面的示例演示<xref:System.String.Length%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-2697">The following example demonstrates the <xref:System.String.Length%2A> property.</span></span>  
  
 [!code-cpp[string.length#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp#1)]
 [!code-csharp[string.length#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs#1)]
 [!code-vb[string.length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Normalize">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2698">返回一个新字符串，其二进制表示形式符合特定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2698">Returns a new string whose binary representation is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; string" Usage="string.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-2699">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合 Unicode 范式 C。</span><span class="sxs-lookup"><span data-stu-id="b0200-2699">Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="b0200-2700">一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式 C。</span><span class="sxs-lookup"><span data-stu-id="b0200-2700">A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2701">某些 Unicode 字符具有多个等效的二进制表示形式包含的组合集和/或组合的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2701">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="b0200-2702">例如，下面的代码点的任何可表示字母"ắ":</span><span class="sxs-lookup"><span data-stu-id="b0200-2702">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="b0200-2703">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="b0200-2703">U+1EAF</span></span>  
  
-   <span data-ttu-id="b0200-2704">U+0103 U+0301</span><span class="sxs-lookup"><span data-stu-id="b0200-2704">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="b0200-2705">U+0061 U+0306 U+0301</span><span class="sxs-lookup"><span data-stu-id="b0200-2705">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="b0200-2706">搜索、 排序、 匹配和其他操作，会增加复杂性存在单个字符的多个表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2706">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="b0200-2707">Unicode 标准定义了名为返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化的过程。</span><span class="sxs-lookup"><span data-stu-id="b0200-2707">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="b0200-2708">可以使用多种算法，名为规范化形式的不同的规则执行规范化。</span><span class="sxs-lookup"><span data-stu-id="b0200-2708">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="b0200-2709">.NET 支持的四个规范化窗体 （C、 D、 KC 和 KD） 由 Unicode 标准定义。</span><span class="sxs-lookup"><span data-stu-id="b0200-2709">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="b0200-2710">当两个字符串都包含在相同的范式时，它们可以通过使用序号比较进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-2710">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="b0200-2711">若要将规范化和比较两个字符串，执行以下步骤：</span><span class="sxs-lookup"><span data-stu-id="b0200-2711">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="b0200-2712">获取要从输入源，如文件或用户输入的设备进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2712">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="b0200-2713">调用<xref:System.String.Normalize>方法以将字符串规范化为范式 c。</span><span class="sxs-lookup"><span data-stu-id="b0200-2713">Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.</span></span>  
  
3.  <span data-ttu-id="b0200-2714">若要比较两个字符串，调用如支持的序号字符串比较的方法<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法，并提供的值<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>或<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>作为<xref:System.StringComparison>参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2714">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="b0200-2715">若要排序的规范化字符串数组，请将传递`comparer`的值<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType>或<xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType>的适当重载<xref:System.Array.Sort%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2715">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="b0200-2716">发出基于上一步所述的顺序排序的输出中的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2716">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="b0200-2717">有关受支持的 Unicode 范式的说明，请参阅<xref:System.Text.NormalizationForm?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2717">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2718">下面的示例将每个四个规范化窗体的字符串，确认字符串已规范化为指定的范式，然后列出正常化的字符串中的码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-2718">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2719">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2719">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2720"><see cref="Overload:System.String.IsNormalized" />方法将返回<see langword="false" />一旦遇到第一个非规范化字符在字符串中的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2720">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="b0200-2721">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<see cref="Overload:System.String.Normalize" />方法将引发<see cref="T:System.ArgumentException" />虽然<see cref="Overload:System.String.IsNormalized" />返回<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2721">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.Normalize : System.Text.NormalizationForm -&gt; string" Usage="string.Normalize normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="b0200-2722">一个 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2722">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="b0200-2723">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合指定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2723">Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="b0200-2724">一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合由 <paramref name="normalizationForm" /> 参数指定的范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2724">A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2725">某些 Unicode 字符具有多个等效的二进制表示形式包含的组合集和/或组合的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2725">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="b0200-2726">搜索、 排序、 匹配和其他操作，会增加复杂性存在单个字符的多个表示形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2726">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="b0200-2727">Unicode 标准定义了名为返回在给定的任何字符的等效的二进制表示的一种二进制表示形式的规范化的过程。</span><span class="sxs-lookup"><span data-stu-id="b0200-2727">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="b0200-2728">可以使用多种算法，名为规范化形式的不同的规则执行规范化。</span><span class="sxs-lookup"><span data-stu-id="b0200-2728">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="b0200-2729">.NET 支持的四个规范化窗体 （C、 D、 KC 和 KD） 由 Unicode 标准定义。</span><span class="sxs-lookup"><span data-stu-id="b0200-2729">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="b0200-2730">当两个字符串都包含在相同的范式时，它们可以通过使用序号比较进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-2730">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="b0200-2731">若要将规范化和比较两个字符串，执行以下步骤：</span><span class="sxs-lookup"><span data-stu-id="b0200-2731">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="b0200-2732">获取要从输入源，如文件或用户输入的设备进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2732">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="b0200-2733">调用<xref:System.String.Normalize%28System.Text.NormalizationForm%29>方法以将字符串规范化为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2733">Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.</span></span>  
  
3.  <span data-ttu-id="b0200-2734">若要比较两个字符串，调用如支持的序号字符串比较的方法<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29>方法，并提供的值<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>或<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>作为<xref:System.StringComparison>参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2734">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="b0200-2735">若要排序的规范化字符串数组，请将传递`comparer`的值<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType>或<xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType>的适当重载<xref:System.Array.Sort%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2735">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="b0200-2736">发出基于上一步所述的顺序排序的输出中的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2736">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="b0200-2737">有关受支持的 Unicode 范式的说明，请参阅<xref:System.Text.NormalizationForm?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2737">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2738">下面的示例将每个四个规范化窗体的字符串，确认字符串已规范化为指定的范式，然后列出正常化的字符串中的码位。</span><span class="sxs-lookup"><span data-stu-id="b0200-2738">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2739">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2739">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2740"><see cref="Overload:System.String.IsNormalized" />方法将返回<see langword="false" />一旦遇到第一个非规范化字符在字符串中的。</span><span class="sxs-lookup"><span data-stu-id="b0200-2740">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="b0200-2741">因此，如果字符串包含无效的 Unicode 字符后, 跟非规范化字符<see cref="Overload:System.String.Normalize" />方法可能会引发<see cref="T:System.ArgumentException" />虽然<see cref="Overload:System.String.IsNormalized" />返回<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2741">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method may throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Equality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member ( = ) : string * string -&gt; bool" Usage="a = b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b0200-2742">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2742">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="b0200-2743">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2743">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-2744">确定两个指定的字符串是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2744">Determines whether two specified strings have the same value.</span></span></summary>
        <returns><span data-ttu-id="b0200-2745">如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2745"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2746"><xref:System.String.op_Equality%2A>方法定义的相等运算符的运算<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-2746">The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class.</span></span> <span data-ttu-id="b0200-2747">这样，如示例部分中所示的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-2747">It enables code such as that shown in the Example section.</span></span> <span data-ttu-id="b0200-2748">运算符，又调用静态<xref:System.String.Equals%28System.String%2CSystem.String%29>方法，用于执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-2748">The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2749">Visual Basic 编译器不能解决与调用的相等运算符<xref:System.String.op_Equality%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2749">The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method.</span></span> <span data-ttu-id="b0200-2750">相反，相等运算符包装对的调用<xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2750">Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2751">下面的示例演示了相等运算符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2751">The following example demonstrates the equality operator.</span></span>  
  
 [!code-cpp[system.string.equality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp#1)]
 [!code-csharp[system.string.equality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;char&gt; op_Implicit(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;char&gt;(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.string.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Inequality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : string * string -&gt; bool" Usage="System.string.op_Inequality (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b0200-2752">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2752">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="b0200-2753">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2753">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-2754">确定两个指定的字符串是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2754">Determines whether two specified strings have different values.</span></span></summary>
        <returns><span data-ttu-id="b0200-2755">如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值不同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2755"><see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2756"><xref:System.String.op_Inequality%2A>方法定义为不等运算符的运算<xref:System.String>类。</span><span class="sxs-lookup"><span data-stu-id="b0200-2756">The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.</span></span>   <span data-ttu-id="b0200-2757">这样，如示例部分中所示的代码。</span><span class="sxs-lookup"><span data-stu-id="b0200-2757">It enables code such as that shown in the Examples section.</span></span>  
  
 <span data-ttu-id="b0200-2758"><xref:System.String.op_Inequality%2A>运算符反过来调用静态<xref:System.String.Equals%28System.String%2CSystem.String%29>方法，用于执行序号 （区分大小写和不区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-2758">The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2759">Visual Basic 编译器不能解决不等运算符与调用<xref:System.String.op_Inequality%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2759">The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method.</span></span> <span data-ttu-id="b0200-2760">而是，是否不相等运算符会包装调用<xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2760">Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2761">下面的示例演示不等运算符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2761">The following example demonstrates the inequality operator.</span></span>  
  
 [!code-cpp[system.string.inequality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp#1)]
 [!code-csharp[system.string.inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PadLeft">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2762">返回一个指定长度的新字符串，其中在当前字符串的开头填充空格或指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2762">Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int -&gt; string" Usage="string.PadLeft totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="b0200-2763">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2763">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="b0200-2764">返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-2764">Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="b0200-2765">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2765">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="b0200-2766">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2766">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="b0200-2767">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2767">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2768">Unicode 空间被定义为十六进制 0x0020。</span><span class="sxs-lookup"><span data-stu-id="b0200-2768">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="b0200-2769"><xref:System.String.PadLeft%28System.Int32%29>方法来填充返回的字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-2769">The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="b0200-2770">这意味着，对从右到左的语言使用时，它将填充字符串的右侧部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2770">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2771">如果<xref:System.String.PadLeft%2A>方法填补空白字符与当前实例，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2771">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2772">相反，它返回一个新字符串，则用前导空白字符填充，以便其总长度`totalWidth`字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2772">Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2773">下面的示例演示<xref:System.String.PadLeft%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2773">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2774"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2774"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int * char -&gt; string" Usage="string.PadLeft (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="b0200-2775">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2775">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="b0200-2776">Unicode 填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2776">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="b0200-2777">返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-2777">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="b0200-2778">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2778">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="b0200-2779">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2779">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="b0200-2780">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2780">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2781"><xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29>方法来填充返回的字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-2781">The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="b0200-2782">这意味着，对从右到左的语言使用时，它将填充字符串的右侧部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2782">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2783">如果<xref:System.String.PadLeft%2A>方法填补空白字符与当前实例，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2783">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2784">相反，它返回一个新字符串，则用前导填充`paddingChar`个字符，因此使其总长度`totalWidth`字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2784">Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2785">下面的示例演示<xref:System.String.PadLeft%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2785">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2786"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2786"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PadRight">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2787">返回一个指定长度的新字符串，其中在当前字符串的结尾填充空格或指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2787">Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int -&gt; string" Usage="string.PadRight totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="b0200-2788">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2788">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="b0200-2789">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-2789">Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="b0200-2790">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2790">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="b0200-2791">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2791">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="b0200-2792">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2792">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2793">Unicode 空间被定义为十六进制 0x0020。</span><span class="sxs-lookup"><span data-stu-id="b0200-2793">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="b0200-2794"><xref:System.String.PadRight%28System.Int32%29>方法来填充返回的字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2794">The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string.</span></span> <span data-ttu-id="b0200-2795">这意味着，对从右到左的语言使用时，它将填充字符串的左侧的部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2795">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2796">如果<xref:System.String.PadRight%2A>方法填补空白字符与当前实例，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2796">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2797">相反，它返回一个新字符串，以便其总长度是用尾随空格填充`totalWidth`字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2797">Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2798">下面的示例演示<xref:System.String.PadRight%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2798">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2799"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2799"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int * char -&gt; string" Usage="string.PadRight (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="b0200-2800">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2800">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="b0200-2801">Unicode 填充字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2801">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="b0200-2802">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</span><span class="sxs-lookup"><span data-stu-id="b0200-2802">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="b0200-2803">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2803">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="b0200-2804">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2804">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="b0200-2805">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2805">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2806"><xref:System.String.PadRight%28System.Int32%2CSystem.Char%29>方法来填充返回的字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-2806">The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string.</span></span> <span data-ttu-id="b0200-2807">这意味着，对从右到左的语言使用时，它将填充字符串的左侧的部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2807">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2808">如果<xref:System.String.PadRight%2A>方法填补空白字符与当前实例，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2808">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2809">相反，它返回一个新字符串，则用尾随填充`paddingChar`个字符，因此使其总长度`totalWidth`字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2809">Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2810">下面的示例演示<xref:System.String.PadRight%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2810">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2811"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2811"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2812">返回一个新字符串，它相当于从当前字符串删除了指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2812">Returns a new string in which a specified number of characters from the current string are deleted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; string" Usage="string.Remove startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-2813">开始删除字符的从零开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2813">The zero-based position to begin deleting characters.</span></span></param>
        <summary><span data-ttu-id="b0200-2814">返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2814">Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</span></span></summary>
        <returns><span data-ttu-id="b0200-2815">一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2815">A new string that is equivalent to this string except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2816">在[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，字符串是从零开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-2816">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="b0200-2817">值`startIndex`参数可以介于 0 到字符串实例的长度减去一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2817">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2818">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2818">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2819">相反，它返回一个新的字符串中的所有字符从位置`startIndex`到原始字符串的末尾已被删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-2819">Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2820">下面的示例演示<xref:System.String.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2820">The following example demonstrates the <xref:System.String.Remove%2A> method.</span></span> <span data-ttu-id="b0200-2821">下一步至最后一种情况下删除从通过字符串末尾的指定索引开始的所有文本。</span><span class="sxs-lookup"><span data-stu-id="b0200-2821">The next-to-last case removes all text starting from the specified index through the end of the string.</span></span> <span data-ttu-id="b0200-2822">最后一种情况中删除从指定索引开始的三个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2822">The last case removes three characters starting from the specified index.</span></span>  
  
 [!code-cpp[string.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp#1)]
 [!code-csharp[string.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs#1)]
 [!code-vb[string.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2823"><paramref name="startIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2823"><paramref name="startIndex" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-2824">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2824">-or-</span></span> 
 <span data-ttu-id="b0200-2825"><paramref name="startIndex" /> 指定不在此字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2825"><paramref name="startIndex" /> specifies a position that is not within this string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Remove : int * int -&gt; string" Usage="string.Remove (startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-2826">开始删除字符的从零开始的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2826">The zero-based position to begin deleting characters.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2827">要删除的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2827">The number of characters to delete.</span></span></param>
        <summary><span data-ttu-id="b0200-2828">返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2828">Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</span></span></summary>
        <returns><span data-ttu-id="b0200-2829">一个新字符串，除所删除的字符之外，该字符串与此实例等效。</span><span class="sxs-lookup"><span data-stu-id="b0200-2829">A new string that is equivalent to this instance except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2830">在[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]，字符串是从零开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-2830">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="b0200-2831">值`startIndex`参数可以介于 0 到字符串实例的长度减去一。</span><span class="sxs-lookup"><span data-stu-id="b0200-2831">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2832">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2832">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2833">相反，它返回一个新字符串，其中由指定的字符数`count`参数已被删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-2833">Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed.</span></span> <span data-ttu-id="b0200-2834">在指定的位置删除的字符`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2834">The characters are removed at the position specified by `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2835">下面的示例演示如何从完整名称中删除中间名。</span><span class="sxs-lookup"><span data-stu-id="b0200-2835">The following example demonstrates how you can remove the middle name from a complete name.</span></span>  
  
 [!code-cpp[stringremove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp#1)]
 [!code-csharp[stringremove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs#1)]
 [!code-vb[stringremove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-2836"><paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-2836">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-2837">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-2837">-or-</span></span> 
 <span data-ttu-id="b0200-2838"><paramref name="startIndex" /> 加 <paramref name="count" /> 指定此实例之外的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-2838"><paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2839">返回一个新字符串，其中已将当前字符串中的指定 Unicode 字符或 <see cref="T:System.String" /> 的所有匹配项替换为其他指定的 Unicode 字符或 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2839">Returns a new string in which all occurrences of a specified Unicode character or <see cref="T:System.String" /> in the current string are replaced with another specified Unicode character or <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(char oldChar, char newChar);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char -&gt; string" Usage="string.Replace (oldChar, newChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar"><span data-ttu-id="b0200-2840">要替换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2840">The Unicode character to be replaced.</span></span></param>
        <param name="newChar"><span data-ttu-id="b0200-2841">要替换出现的所有 <paramref name="oldChar" /> 的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2841">The Unicode character to replace all occurrences of <paramref name="oldChar" />.</span></span></param>
        <summary><span data-ttu-id="b0200-2842">返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2842">Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</span></span></summary>
        <returns><span data-ttu-id="b0200-2843">等效于此实例（除了 <paramref name="oldChar" /> 的所有实例都已替换为 <paramref name="newChar" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2843">A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</span></span> <span data-ttu-id="b0200-2844">如果在当前实例中找不到 <paramref name="oldChar" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-2844">If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2845">此方法执行序号 （区分大小写和不区分区域性的） 搜索以查找`oldChar`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2845">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2846">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2846">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2847">相反，它返回一个新的字符串中出现的所有`oldChar`替换为`newChar`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2847">Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.</span></span>  
  
 <span data-ttu-id="b0200-2848">由于此方法返回修改后的字符串，你可以链接在一起对连续调用<xref:System.String.Replace%2A>方法来对原始字符串执行多个替换项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2848">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="b0200-2849">从左向右执行方法调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2849">Method calls are executed from left to right.</span></span> <span data-ttu-id="b0200-2850">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b0200-2850">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]
 [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2851">下面的示例创建的以逗号分隔值列表，只需替换一系列数字之间的空白的逗号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2851">The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</span></span>  
  
 [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]
 [!code-csharp[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]
 [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="string.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="b0200-2852">要替换的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2852">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="b0200-2853">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2853">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="b0200-2854">返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2854">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-2855">等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2855">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="b0200-2856">如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-2856">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2857">如果`newValue`是`null`，出现的所有`oldValue`删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-2857">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-2858">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-2858">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-2859">相反，它返回一个新的字符串中出现的所有`oldValue`替换为`newValue`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2859">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>  
  
 <span data-ttu-id="b0200-2860">此方法执行序号 （区分大小写和不区分区域性的） 搜索以查找`oldValue`。</span><span class="sxs-lookup"><span data-stu-id="b0200-2860">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.</span></span>  
  
 <span data-ttu-id="b0200-2861">由于此方法返回修改后的字符串，你可以链接在一起对连续调用<xref:System.String.Replace%2A>方法来对原始字符串执行多个替换项。</span><span class="sxs-lookup"><span data-stu-id="b0200-2861">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="b0200-2862">从左向右执行方法调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-2862">Method calls are executed from left to right.</span></span> <span data-ttu-id="b0200-2863">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b0200-2863">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
 [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="b0200-2864">下面的示例演示如何使用<xref:System.String.Replace%2A>方法更正拼写错误。</span><span class="sxs-lookup"><span data-stu-id="b0200-2864">The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.</span></span>  
  
 [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]
 [!code-csharp[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]
 [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-2865"><paramref name="oldValue" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2865"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-2866"><paramref name="oldValue" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="b0200-2866"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, comparisonType As StringComparison) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * StringComparison -&gt; string" Usage="string.Replace (oldValue, newValue, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, ignoreCase As Boolean, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * bool * System.Globalization.CultureInfo -&gt; string" Usage="string.Replace (oldValue, newValue, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-2867">返回的字符串数组包含此实例中的子字符串（由指定字符串或 Unicode 字符数组的元素分隔）。</span><span class="sxs-lookup"><span data-stu-id="b0200-2867">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2868"><xref:System.String.Split%2A> 用于分解成子字符串的带分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2868"><xref:System.String.Split%2A> is used to break a delimited string into substrings.</span></span> <span data-ttu-id="b0200-2869">可以使用字符数组来指定零行、 一行或多个分隔字符 (<xref:System.String.Split%28System.Char%5B%5D%29>方法)，或者可以使用的字符数组来指定零行、 一行或多个分隔字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2869">You can use either a character array to specify zero, one, or multiple delimiting characters (the <xref:System.String.Split%28System.Char%5B%5D%29> method), or you can use a character array to specify zero, one, or multiple delimiting strings.</span></span> <span data-ttu-id="b0200-2870">重载<xref:System.String.Split%2A>方法允许你限制数量的方法返回的子字符串 (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29>方法)，以确定是否返回子字符串中包含空字符串 (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29>和<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29>方法，或上述两个 (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29>和<xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29>方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-2870">Overloads of the <xref:System.String.Split%2A> method allow you to limit the number of substrings returned by the method (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> method), to determine whether empty strings are included in the returned substrings (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> methods, or to do both (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> methods).</span></span>  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

### <a name="alternatives-to-stringsplit"></a><span data-ttu-id="b0200-2871">String.Split 的替代方法</span><span class="sxs-lookup"><span data-stu-id="b0200-2871">Alternatives to String.Split</span></span>

 <span data-ttu-id="b0200-2872"><xref:System.String.Split%2A>方法始终不是分解成子字符串的带分隔符的字符串的最佳方式。</span><span class="sxs-lookup"><span data-stu-id="b0200-2872">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="b0200-2873">如果不想要提取所有带分隔符的字符串的子字符串，或者如果你想要分析字符串而不是一组分隔符字符的模式，请考虑以下替代方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2873">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>  
  
### <a name="regular-expressions"></a><span data-ttu-id="b0200-2874">正则表达式</span><span class="sxs-lookup"><span data-stu-id="b0200-2874">Regular expressions</span></span>  
 <span data-ttu-id="b0200-2875">如果您的字符串遵循固定模式，可以使用正则表达式以提取并处理其元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2875">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="b0200-2876">例如，如果字符串采用以下形式"*数量**操作数**数*"可以使用[正则表达式](~/docs/standard/base-types/regular-expressions.md)提取和处理字符串的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2876">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="b0200-2877">以下是一个示例：</span><span class="sxs-lookup"><span data-stu-id="b0200-2877">Here's an example:</span></span>  
  
 [!code-csharp-interactive[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  
  
 <span data-ttu-id="b0200-2878">正则表达式模式`(\d+)\s+([-+*/])\s+(\d+)`定义如下：</span><span class="sxs-lookup"><span data-stu-id="b0200-2878">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>  
  
|<span data-ttu-id="b0200-2879">模式</span><span class="sxs-lookup"><span data-stu-id="b0200-2879">Pattern</span></span>|<span data-ttu-id="b0200-2880">描述</span><span class="sxs-lookup"><span data-stu-id="b0200-2880">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)`|<span data-ttu-id="b0200-2881">匹配一个或多个十进制数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-2881">Match one or more decimal digits.</span></span> <span data-ttu-id="b0200-2882">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="b0200-2882">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="b0200-2883">匹配一个或多个空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2883">Match one or more white-space characters.</span></span>|  
|`([-+*/])`|<span data-ttu-id="b0200-2884">匹配一个算术运算符号 (+、-、 \*，或 /)。</span><span class="sxs-lookup"><span data-stu-id="b0200-2884">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="b0200-2885">这是第二个捕获组。</span><span class="sxs-lookup"><span data-stu-id="b0200-2885">This is the second capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="b0200-2886">匹配一个或多个空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2886">Match one or more white-space characters.</span></span>|  
|`(\d+)`|<span data-ttu-id="b0200-2887">匹配一个或多个十进制数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-2887">Match one or more decimal digits.</span></span> <span data-ttu-id="b0200-2888">这是第三个捕获组。</span><span class="sxs-lookup"><span data-stu-id="b0200-2888">This is the third capturing group.</span></span>|  
  
 <span data-ttu-id="b0200-2889">正则表达式还可用于从基于一种模式而不是一组固定的字符的字符串中提取子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2889">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="b0200-2890">其中一项条件发生时，这是一种常见方案：</span><span class="sxs-lookup"><span data-stu-id="b0200-2890">This is a common scenario when either of these conditions occurs:</span></span>  
  
-   <span data-ttu-id="b0200-2891">一个或多个分隔符字符不会始终处理中的分隔符<xref:System.String>实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-2891">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="b0200-2892">顺序和分隔符的字符数是变量或未知。</span><span class="sxs-lookup"><span data-stu-id="b0200-2892">The sequence and number of delimiter characters is variable or unknown.</span></span>  
  
 <span data-ttu-id="b0200-2893">例如，<xref:System.String.Split%2A>方法不能用于拆分以下字符串，因为数`\n`（在 C# 中) 或`vbCrLf`（在 Visual Basic) 字符是变量，因此它们始终不用作分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2893">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>  
  
```text
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]  
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]  
```  
  
 <span data-ttu-id="b0200-2894">正则表达式可以轻松地，如以下示例所示拆分此字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2894">A regular expression can split this string easily, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  
  
 <span data-ttu-id="b0200-2895">正则表达式模式`\[([^\[\]]+)\]`定义如下：</span><span class="sxs-lookup"><span data-stu-id="b0200-2895">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>  
  
|<span data-ttu-id="b0200-2896">模式</span><span class="sxs-lookup"><span data-stu-id="b0200-2896">Pattern</span></span>|<span data-ttu-id="b0200-2897">描述</span><span class="sxs-lookup"><span data-stu-id="b0200-2897">Description</span></span>|  
|-------------|-----------------|  
|`\[`|<span data-ttu-id="b0200-2898">匹配左括号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2898">Match an opening bracket.</span></span>|  
|`([^\[\]]+)`|<span data-ttu-id="b0200-2899">匹配任何字符不是一个左或右括号之间的一个或多个时间。</span><span class="sxs-lookup"><span data-stu-id="b0200-2899">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="b0200-2900">这是第一个捕获组。</span><span class="sxs-lookup"><span data-stu-id="b0200-2900">This is the first capturing group.</span></span>|  
|`\]`|<span data-ttu-id="b0200-2901">匹配右括号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2901">Match a closing bracket.</span></span>|  
  
 <span data-ttu-id="b0200-2902"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>方法在几乎等同于<xref:System.String.Split%2A?displayProperty=nameWithType>，只不过它将拆分而不是固定的字符集的正则表达式模式的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2902">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="b0200-2903">例如，下面的示例使用<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>方法拆分包含子字符串由连字符和其他字符的各种组合分隔的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2903">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  
  
 <span data-ttu-id="b0200-2904">正则表达式模式`\s-\s?[+*]?\s?-\s`定义如下：</span><span class="sxs-lookup"><span data-stu-id="b0200-2904">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>  
  
|<span data-ttu-id="b0200-2905">模式</span><span class="sxs-lookup"><span data-stu-id="b0200-2905">Pattern</span></span>|<span data-ttu-id="b0200-2906">描述</span><span class="sxs-lookup"><span data-stu-id="b0200-2906">Description</span></span>|  
|-------------|-----------------|  
|`\s-`|<span data-ttu-id="b0200-2907">匹配空白字符后跟一个连字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2907">Match a white-space character followed by a hyphen.</span></span>|  
|`\s?`|<span data-ttu-id="b0200-2908">匹配零个或一个空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2908">Match zero or one white-space character.</span></span>|  
|`[+*]?`|<span data-ttu-id="b0200-2909">匹配零个或一个匹配项的 + 或 \* 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2909">Match zero or one occurrence of either the + or \* character.</span></span>|  
|`\s?`|<span data-ttu-id="b0200-2910">匹配零个或一个空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2910">Match zero or one white-space character.</span></span>|  
|`-\s`|<span data-ttu-id="b0200-2911">匹配连字符后跟空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2911">Match a hyphen followed by a white-space character.</span></span>|  
  
### <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="b0200-2912">搜索方法和 Substring 方法</span><span class="sxs-lookup"><span data-stu-id="b0200-2912">Search methods and the Substring method</span></span>  
 <span data-ttu-id="b0200-2913">如果您不感兴趣所有字符串中子字符串，可能希望使用一个返回匹配的开始的索引的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2913">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="b0200-2914">然后，可以调用<xref:System.String.Substring%2A>方法提取所需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2914">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="b0200-2915">字符串比较方法包括：</span><span class="sxs-lookup"><span data-stu-id="b0200-2915">The string comparison methods include:</span></span>  
  
-   <span data-ttu-id="b0200-2916"><xref:System.String.IndexOf%2A>它返回字符串实例中的字符或字符串的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2916"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="b0200-2917"><xref:System.String.IndexOfAny%2A>它返回的字符数组中的任何字符的第一个匹配项的当前字符串实例中的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2917"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>  
  
-   <span data-ttu-id="b0200-2918"><xref:System.String.LastIndexOf%2A>它返回字符串实例中的字符或字符串的最后一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-2918"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="b0200-2919"><xref:System.String.LastIndexOfAny%2A>它返回从零开始的索引中的字符数组中的任何字符的最后一个匹配项的当前字符串实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-2919"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>  
  
 <span data-ttu-id="b0200-2920">下面的示例使用<xref:System.String.IndexOf%2A>方法来查找字符串中的段。</span><span class="sxs-lookup"><span data-stu-id="b0200-2920">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="b0200-2921">然后，它使用<xref:System.String.Substring%2A>方法以返回完整的句子。</span><span class="sxs-lookup"><span data-stu-id="b0200-2921">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (params char[] separator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (ParamArray separator As Char()) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(... cli::array &lt;char&gt; ^ separator);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] -&gt; string[]" Usage="string.Split separator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2922">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2922">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-2923">基于数组中的字符将字符串拆分为多个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2923">Splits a string into substrings that are based on the characters in an array.</span></span></summary>
        <returns><span data-ttu-id="b0200-2924">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2924">An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-2925">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2925">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2926">当由一组已知的字符分隔字符串时，可以使用<xref:System.String.Split%28System.Char%5B%5D%29>方法分隔为若干子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2926">When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings.</span></span>   
  
### <a name="return-value-details"></a><span data-ttu-id="b0200-2927">返回值的详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-2927">Return value details</span></span>  
 <span data-ttu-id="b0200-2928">返回数组的元素中不包括分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2928">Delimiter characters are not included in the elements of the returned array.</span></span> <span data-ttu-id="b0200-2929">例如，如果分隔符数组包含字符"-"和当前字符串实例的值为"aa bb cc"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"cc"。</span><span class="sxs-lookup"><span data-stu-id="b0200-2929">For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="b0200-2930">如果此实例不包含任何中的字符`separator`，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-2930">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="b0200-2931">每个元素`separator`定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2931">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="b0200-2932">如果两个分隔符是相邻，或分隔符位于开头或末尾此实例，则返回的数组中的相应元素包含<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2932">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>.</span></span> <span data-ttu-id="b0200-2933">下面是一些可能的恶意活动：</span><span class="sxs-lookup"><span data-stu-id="b0200-2933">Here are some examples:</span></span>  
  
|<span data-ttu-id="b0200-2934">字符串值</span><span class="sxs-lookup"><span data-stu-id="b0200-2934">String value</span></span>|<span data-ttu-id="b0200-2935">Separator</span><span class="sxs-lookup"><span data-stu-id="b0200-2935">Separator</span></span>|<span data-ttu-id="b0200-2936">返回的数组</span><span class="sxs-lookup"><span data-stu-id="b0200-2936">Returned array</span></span>|  
|------------------|---------------|--------------------|  
|<span data-ttu-id="b0200-2937">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="b0200-2937">"42, 12, 19"</span></span>|<span data-ttu-id="b0200-2938">new Char[] {',', ' '} (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2938">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="b0200-2939">Char() = {","c, " "c}) (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2939">Char() = {","c, " "c}) (Visual Basic)</span></span>|<span data-ttu-id="b0200-2940">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="b0200-2940">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="b0200-2941">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="b0200-2941">"42..12..19"</span></span>|<span data-ttu-id="b0200-2942">新 Char [] {'。}</span><span class="sxs-lookup"><span data-stu-id="b0200-2942">new Char[] {'.'}</span></span> <span data-ttu-id="b0200-2943">(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2943">(C#)</span></span><br /><br /> <span data-ttu-id="b0200-2944">Char （) = {"。"c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2944">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="b0200-2945">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="b0200-2945">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="b0200-2946">"Banana"</span><span class="sxs-lookup"><span data-stu-id="b0200-2946">"Banana"</span></span>|<span data-ttu-id="b0200-2947">新 Char [] {'。}</span><span class="sxs-lookup"><span data-stu-id="b0200-2947">new Char[] {'.'}</span></span> <span data-ttu-id="b0200-2948">(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2948">(C#)</span></span><br /><br /> <span data-ttu-id="b0200-2949">Char （) = {"。"c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2949">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="b0200-2950">{"Banana"}</span><span class="sxs-lookup"><span data-stu-id="b0200-2950">{"Banana"}</span></span>|  
|<span data-ttu-id="b0200-2951">"Darb\nSmarba"(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2951">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="b0200-2952">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2952">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="b0200-2953">新 Char [] {} (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2953">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="b0200-2954">Char （) = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2954">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="b0200-2955">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="b0200-2955">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="b0200-2956">"Darb\nSmarba"(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2956">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="b0200-2957">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2957">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="b0200-2958">null (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-2958">null (C#)</span></span><br /><br /> <span data-ttu-id="b0200-2959">Nothing (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-2959">Nothing (Visual Basic)</span></span>|<span data-ttu-id="b0200-2960">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="b0200-2960">{"Darb", "Smarba"}</span></span>|  
  
### <a name="the-separator-array"></a><span data-ttu-id="b0200-2961">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-2961">The separator array</span></span>  
 <span data-ttu-id="b0200-2962">分隔符的每个元素定义包含的单个字符的不同分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2962">Each element of separator defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="b0200-2963">如果`separator`自变量是`null`或不包含任何字符，该方法将空格字符视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2963">If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters.</span></span> <span data-ttu-id="b0200-2964">由 Unicode 标准; 定义的空白字符它们将返回`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2964">White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
### <a name="stringsplitchar-and-compiler-overload-resolution"></a><span data-ttu-id="b0200-2965">String.Split(Char[]) 和编译器重载解析</span><span class="sxs-lookup"><span data-stu-id="b0200-2965">String.Split(Char[]) and compiler overload resolution</span></span>  
 <span data-ttu-id="b0200-2966">尽管的此重载的单个参数<xref:System.String.Split%2A?displayProperty=nameWithType>是字符数组中，可以调用它用单个字符，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-2966">Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=nameWithType> is a character array, you can call it with a single character, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]
 [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]  
  
 <span data-ttu-id="b0200-2967">因为`separator`参数用修饰<xref:System.ParamArrayAttribute>特性，编译器会将解释为单元素字符数组的单个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2967">Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array.</span></span> <span data-ttu-id="b0200-2968">这不是适用于其他用例<xref:System.String.Split%2A?displayProperty=nameWithType>包括的重载`separator`参数，则必须显式传递这些重载将字符数组作为`separator`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-2968">This is not the case for other <xref:System.String.Split%2A?displayProperty=nameWithType> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.</span></span>  
  
### <a name="comparison-details"></a><span data-ttu-id="b0200-2969">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-2969">Comparison details</span></span>  
 <span data-ttu-id="b0200-2970"><xref:System.String.Split%28System.Char%5B%5D%29>方法将提取由一个或多个中的字符分隔此字符串中子字符串`separator`数组，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="b0200-2970">The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="b0200-2971"><xref:System.String.Split%28System.Char%5B%5D%29>方法执行比较使用区分大小写的序号排序规则查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2971">The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="b0200-2972">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-2972">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-2973">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-2973">Performance Considerations</span></span>  
 <span data-ttu-id="b0200-2974"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-2974">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-2975">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2975">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method.</span></span> <span data-ttu-id="b0200-2976">此外可以选择使用<xref:System.String.Compare%2A>方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2976">You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-2977">若要拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2977">To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-2978">若要在分隔符字符串将字符串拆分，请使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2978">To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-2979">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-2979">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-2980">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-2980">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-2981">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-2981">This significantly reduces the additional overhead of each method call.</span></span>  
  
## Examples  
 <span data-ttu-id="b0200-2982">下面的示例演示如何通过将空格和标点符号作为分隔符的文本块从提取各个单词。</span><span class="sxs-lookup"><span data-stu-id="b0200-2982">The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters.</span></span> <span data-ttu-id="b0200-2983">字符数组传递给`separator`参数的<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>方法组成一个空格字符和制表符，以及一些常用标点符号。</span><span class="sxs-lookup"><span data-stu-id="b0200-2983">The character array passed to the `separator` parameter of the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method consists of a space character and a tab character, together with some common punctuation symbols.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split2.cs#2)]
 [!code-vb[System.String.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-2984">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2984">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-2985">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2985">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int -&gt; string[]" Usage="string.Split (separator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-2986">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-2986">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-2987">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-2987">The maximum number of substrings to return.</span></span></param>
        <summary><span data-ttu-id="b0200-2988">基于数组中的字符将一个字符串拆分成最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-2988">Splits a string into a maximum number of substrings based on the characters in an array.</span></span> <span data-ttu-id="b0200-2989">也可指定要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-2989">You also specify the maximum number of substrings to return.</span></span></summary>
        <returns><span data-ttu-id="b0200-2990">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-2990">An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-2991">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-2991">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-2992">返回数组的元素中不包括分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2992">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="b0200-2993">如果此实例不包含任何中的字符`separator`，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-2993">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="b0200-2994">如果`count`为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-2994">If `count` is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="b0200-2995">如果`separator`参数是`null`不包含任何字符或空格字符被假定为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2995">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="b0200-2996">由 Unicode 标准和返回定义的空白字符`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-2996">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b0200-2997">每个元素`separator`定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-2997">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="b0200-2998">如果两个分隔符是相邻，或分隔符位于开头或末尾此实例，则相应的数组元素包含<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-2998">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="b0200-2999">如果有多个`count`此实例中的子字符串第一个`count`减 1 的子字符串中返回第一个`count`减 1 个元素的返回值和此实例中的剩余字符返回的最后一个返回值的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-2999">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="b0200-3000">如果`count`大于数量的子字符串，则返回可用的子字符串并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-3000">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
 <span data-ttu-id="b0200-3001">下表提供了示例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3001">The following table provides examples.</span></span>  
  
|<span data-ttu-id="b0200-3002">字符串值</span><span class="sxs-lookup"><span data-stu-id="b0200-3002">String value</span></span>|<span data-ttu-id="b0200-3003">Separator</span><span class="sxs-lookup"><span data-stu-id="b0200-3003">Separator</span></span>|<span data-ttu-id="b0200-3004">计数</span><span class="sxs-lookup"><span data-stu-id="b0200-3004">Count</span></span>|<span data-ttu-id="b0200-3005">返回的数组</span><span class="sxs-lookup"><span data-stu-id="b0200-3005">Returned array</span></span>|  
|------------------|---------------|-----------|--------------------|  
|<span data-ttu-id="b0200-3006">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="b0200-3006">"42, 12, 19"</span></span>|<span data-ttu-id="b0200-3007">new Char[] {',', ' '} (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3007">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3008">Char() = {","c, " "c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3008">Char() = {","c, " "c} (Visual Basic)</span></span>|<span data-ttu-id="b0200-3009">2</span><span class="sxs-lookup"><span data-stu-id="b0200-3009">2</span></span>|<span data-ttu-id="b0200-3010">{"42", " 12, 19"}</span><span class="sxs-lookup"><span data-stu-id="b0200-3010">{"42", " 12, 19"}</span></span>|  
|<span data-ttu-id="b0200-3011">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="b0200-3011">"42..12..19"</span></span>|<span data-ttu-id="b0200-3012">新 Char [] {'。}</span><span class="sxs-lookup"><span data-stu-id="b0200-3012">new Char[] {'.'}</span></span> <span data-ttu-id="b0200-3013">(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3013">(C#)</span></span><br /><br /> <span data-ttu-id="b0200-3014">Char （) = {"。"c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3014">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="b0200-3015">4</span><span class="sxs-lookup"><span data-stu-id="b0200-3015">4</span></span>|<span data-ttu-id="b0200-3016">{"42", "", "12", ".19"}</span><span class="sxs-lookup"><span data-stu-id="b0200-3016">{"42", "", "12", ".19"}</span></span>|  
|<span data-ttu-id="b0200-3017">"Banana"</span><span class="sxs-lookup"><span data-stu-id="b0200-3017">"Banana"</span></span>|<span data-ttu-id="b0200-3018">新 Char [] {'。}</span><span class="sxs-lookup"><span data-stu-id="b0200-3018">new Char[] {'.'}</span></span> <span data-ttu-id="b0200-3019">(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3019">(C#)</span></span><br /><br /> <span data-ttu-id="b0200-3020">Char （) = {"。"c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3020">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="b0200-3021">2</span><span class="sxs-lookup"><span data-stu-id="b0200-3021">2</span></span>|<span data-ttu-id="b0200-3022">{"Banana"}</span><span class="sxs-lookup"><span data-stu-id="b0200-3022">{"Banana"}</span></span>|  
|<span data-ttu-id="b0200-3023">"Darb\nSmarba"(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3023">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3024">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3024">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="b0200-3025">新 Char [] {} (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3025">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3026">Char （) = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3026">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="b0200-3027">1</span><span class="sxs-lookup"><span data-stu-id="b0200-3027">1</span></span>|<span data-ttu-id="b0200-3028">{"Darb\nSmarba"} (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3028">{"Darb\nSmarba"} (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3029">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3029">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|  
|<span data-ttu-id="b0200-3030">"Darb\nSmarba"(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3030">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3031">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3031">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="b0200-3032">新 Char [] null (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3032">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3033">Char() = Nothing</span><span class="sxs-lookup"><span data-stu-id="b0200-3033">Char() = Nothing</span></span>|<span data-ttu-id="b0200-3034">2</span><span class="sxs-lookup"><span data-stu-id="b0200-3034">2</span></span>|<span data-ttu-id="b0200-3035">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="b0200-3035">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="b0200-3036">"Darb\nSmarba"(C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3036">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3037">"Darb"vbLf &"Smarba"(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b0200-3037">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="b0200-3038">新 Char [] null (C#)</span><span class="sxs-lookup"><span data-stu-id="b0200-3038">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="b0200-3039">Char() = Nothing</span><span class="sxs-lookup"><span data-stu-id="b0200-3039">Char() = Nothing</span></span>|<span data-ttu-id="b0200-3040">100</span><span class="sxs-lookup"><span data-stu-id="b0200-3040">100</span></span>|<span data-ttu-id="b0200-3041">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="b0200-3041">{"Darb", "Smarba"}</span></span>|  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-3042">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3042">Performance Considerations</span></span>  
 <span data-ttu-id="b0200-3043"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3043">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-3044">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法，并选择性地<xref:System.String.Compare%2A>方法，以查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3044">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-3045">如果你拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3045">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-3046">如果你拆分处分隔符字符串的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3046">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-3047">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3047">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-3048">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3048">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-3049">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-3049">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3050">下面的示例演示如何`count`影响返回的字符串数<xref:System.String.Split%2A>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3050">The following example demonstrates how `count` affects the number of strings returned by <xref:System.String.Split%2A>.</span></span>  
  
 [!code-csharp-interactive[StringSplit2#10](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/StringSplit10.cs#10)]
 [!code-vb[StringSplit2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit10.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3051"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3051"><paramref name="count" /> is negative.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3052">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3052">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-3053">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3053">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-3054">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3054">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-3055">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3055"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="b0200-3056">基于数组中的字符将字符串拆分为多个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3056">Splits a string into substrings based on the characters in an array.</span></span> <span data-ttu-id="b0200-3057">可以指定子字符串是否包含空数组元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3057">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="b0200-3058">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-3058">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-3059">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-3059">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
### <a name="return-value-details"></a><span data-ttu-id="b0200-3060">返回值的详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3060">Return value details</span></span>  
 <span data-ttu-id="b0200-3061">分隔符字符 (中的字符`separator`数组) 不包括在返回数组的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3061">Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array.</span></span> <span data-ttu-id="b0200-3062">例如，如果`separator`数组包含字符"-"和当前字符串实例的值为"aa bb cc"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"cc"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3062">For example, if the `separator` array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="b0200-3063">如果此实例不包含任何中的字符`separator`，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-3063">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="b0200-3064">如果`options`参数是<xref:System.StringSplitOptions.RemoveEmptyEntries>和此实例的长度为零，则该方法返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3064">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="b0200-3065">每个元素`separator`定义包含的单个字符的不同分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3065">Each element of `separator` defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="b0200-3066">如果`options`自变量是<xref:System.StringSplitOptions.None>，且它是相邻的两个分隔符或分隔符找到开头或结尾的此实例相对应的数组元素包含<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3066">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-3067">例如，如果`separator`包括两个元素，"-"和"\_"，字符串实例的值是"-\_aa-\_"，和的值`options`自变量是<xref:System.StringSplitOptions.None>，该方法返回的字符串数组以下五个元素：</span><span class="sxs-lookup"><span data-stu-id="b0200-3067">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="b0200-3068"><xref:System.String.Empty?displayProperty=nameWithType>它表示之前的空字符串"-"字符位于索引 0 处。</span><span class="sxs-lookup"><span data-stu-id="b0200-3068"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" character at index 0.</span></span>  
  
2.  <span data-ttu-id="b0200-3069"><xref:System.String.Empty?displayProperty=nameWithType>它表示之间的空字符串"-"字符在索引 0 和位于索引 1 处的"_"字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3069"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</span></span>  
  
3.  <span data-ttu-id="b0200-3070">"aa"，</span><span class="sxs-lookup"><span data-stu-id="b0200-3070">"aa",</span></span>  
  
4.  <span data-ttu-id="b0200-3071"><xref:System.String.Empty?displayProperty=nameWithType>它表示索引 4"_"字符后面的空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3071"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" character at index 4.</span></span>  
  
5.  <span data-ttu-id="b0200-3072"><xref:System.String.Empty?displayProperty=nameWithType>它表示后面的空字符串"-"字符索引 5 处。</span><span class="sxs-lookup"><span data-stu-id="b0200-3072"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" character at index 5.</span></span>  
  
### <a name="the-separator-array"></a><span data-ttu-id="b0200-3073">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-3073">The separator array</span></span>  
 <span data-ttu-id="b0200-3074">如果`separator`参数是`null`不包含任何字符或空格字符被假定为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3074">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="b0200-3075">由 Unicode 标准和返回定义的空白字符`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3075">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b0200-3076">如果`separator`对此方法的重载的调用中的参数是`null`，编译器重载解析失败。</span><span class="sxs-lookup"><span data-stu-id="b0200-3076">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="b0200-3077">若要明确地标识所调用的方法，您的代码必须指示的类型`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3077">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="b0200-3078">下面的示例显示了几种方法都会明确标识此重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-3078">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]
 [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]  
  
### <a name="comparison-details"></a><span data-ttu-id="b0200-3079">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3079">Comparison details</span></span>  
 <span data-ttu-id="b0200-3080"><xref:System.String.Split%2A>方法将提取由一个或多个中的字符分隔此字符串中子字符串`separator`参数，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="b0200-3080">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="b0200-3081"><xref:System.String.Split%2A>方法执行比较使用区分大小写的序号排序规则查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3081">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="b0200-3082">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-3082">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-3083">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3083">Performance Considerations</span></span>  
 <span data-ttu-id="b0200-3084"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3084">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-3085">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法，并选择性地<xref:System.String.Compare%2A>方法，以查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3085">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-3086">如果你拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3086">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-3087">如果你拆分处分隔符字符串的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3087">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-3088">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3088">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-3089">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3089">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-3090">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-3090">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3091">下面的示例使用<xref:System.StringSplitOptions>枚举来包括或排除子字符串由生成<xref:System.String.Split%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3091">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-3092"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-3092"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3093">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3093">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-3094">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3094">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-3095">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3095">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-3096">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3096"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="b0200-3097">基于数组中的字符串将字符串拆分为多个子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3097">Splits a string into substrings based on the strings in an array.</span></span> <span data-ttu-id="b0200-3098">可以指定子字符串是否包含空数组元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3098">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="b0200-3099">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-3099">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-3100">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-3100">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3101">当一组已知的字符串由分隔字符串时，可以使用<xref:System.String.Split%2A>方法分隔为若干子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3101">When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.</span></span>  
  
### <a name="return-value-details"></a><span data-ttu-id="b0200-3102">返回值的详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3102">Return value details</span></span>  
 <span data-ttu-id="b0200-3103">返回数组的元素中不包括分隔符字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3103">Delimiter strings are not included in the elements of the returned array.</span></span> <span data-ttu-id="b0200-3104">例如，如果`separator`数组包含字符串"-"和当前字符串实例的值为"aa-bb cc"，该方法返回一个数组，包含三个元素:"aa"、"bb"和"cc"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3104">For example, if the `separator` array includes the string "--" and the value of the current string instance is "aa--bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="b0200-3105">如果此实例不包含任何中的字符串`separator`，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-3105">If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="b0200-3106">如果`options`参数是<xref:System.StringSplitOptions.RemoveEmptyEntries>和此实例的长度为零，则该方法返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3106">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="b0200-3107">每个元素`separator`定义一个或多个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3107">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="b0200-3108">如果`options`自变量是<xref:System.StringSplitOptions.None>，且它是相邻的两个分隔符或分隔符找到开头或结尾的此实例相对应的数组元素包含<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3108">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-3109">例如，如果`separator`包括两个元素，"-"和"\_"，字符串实例的值是"-\_aa-\_"，和的值`options`自变量是<xref:System.StringSplitOptions.None>，该方法返回的字符串数组以下五个元素：</span><span class="sxs-lookup"><span data-stu-id="b0200-3109">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="b0200-3110"><xref:System.String.Empty?displayProperty=nameWithType>它表示之前的空字符串"-"索引 0 处的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3110"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" substring at index 0.</span></span>  
  
2.  <span data-ttu-id="b0200-3111"><xref:System.String.Empty?displayProperty=nameWithType>它表示之间的空字符串"-"在索引 0 和位于索引 1 处的"_"子字符串的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3111"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</span></span>  
  
3.  <span data-ttu-id="b0200-3112">"aa"，</span><span class="sxs-lookup"><span data-stu-id="b0200-3112">"aa",</span></span>  
  
4.  <span data-ttu-id="b0200-3113"><xref:System.String.Empty?displayProperty=nameWithType>它表示索引 4 处的"_"子字符串之后的空字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3113"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" substring at index 4.</span></span>  
  
5.  <span data-ttu-id="b0200-3114"><xref:System.String.Empty?displayProperty=nameWithType>它表示后面的空字符串"-"索引 5 处的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3114"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" substring at index 5.</span></span>  
  
### <a name="the-separator-array"></a><span data-ttu-id="b0200-3115">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-3115">The separator array</span></span>  
 <span data-ttu-id="b0200-3116">如果中的元素的任何`separator`包含多个字符，将整个子字符串被视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3116">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="b0200-3117">例如，如果一个中的元素的`separator`为"10"，尝试进行拆分的字符串"This10is10a10string。"</span><span class="sxs-lookup"><span data-stu-id="b0200-3117">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="b0200-3118">返回以下四个元素数组: {"This"，"is"，"a"、"字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3118">returns the following four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="b0200-3119">}.</span><span class="sxs-lookup"><span data-stu-id="b0200-3119">}.</span></span>  
  
 <span data-ttu-id="b0200-3120">如果`separator`参数是`null`不包含任何字符或空格字符被假定为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3120">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="b0200-3121">由 Unicode 标准和返回定义的空白字符`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3121">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b0200-3122">如果`separator`对此方法的重载的调用中的参数是`null`，编译器重载解析失败。</span><span class="sxs-lookup"><span data-stu-id="b0200-3122">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="b0200-3123">若要明确地标识所调用的方法，您的代码必须指示的类型`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3123">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="b0200-3124">下面的示例显示了几种方法都会明确标识此重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-3124">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]
 [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]  
  
### <a name="comparison-details"></a><span data-ttu-id="b0200-3125">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3125">Comparison details</span></span>  
 <span data-ttu-id="b0200-3126"><xref:System.String.Split%2A>方法将提取由一个或多个字符串中分隔此字符串中的子字符串`separator`参数，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="b0200-3126">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="b0200-3127"><xref:System.String.Split%2A>方法执行比较使用区分大小写的序号排序规则查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3127">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="b0200-3128">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-3128">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="b0200-3129"><xref:System.String.Split%2A>方法将忽略的任何元素`separator`其值是`null`或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="b0200-3129">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="b0200-3130">若要避免不明确的结果时中字符串`separator`具有公共，字符<xref:System.String.Split%2A>操作从开始处继续到的实例的值的末尾和匹配的第一个元素`separator`，它等于中分隔符实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3130">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="b0200-3131">在其中子字符串的实例中出现的顺序的优先级高于中元素的顺序`separator`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3131">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="b0200-3132">例如，考虑一个其值是"abcdef"的实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3132">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="b0200-3133">如果中的第一个元素`separator`是"ef"，且第二个元素为"bcde"，该拆分操作的结果将是一个字符串数组，包含两个元素，"a"和"f"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3133">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</span></span> <span data-ttu-id="b0200-3134">这是因为在实例中，"bcde"的子字符串中遇到和中的元素匹配`separator`遇到"f"的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-3134">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="b0200-3135">但是，如果第一个元素的`separator`为"bcd"和第二个元素为"bc"，该拆分操作的结果将是一个字符串数组，包含两个元素，"a"和"ef"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3135">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</span></span> <span data-ttu-id="b0200-3136">这是因为"bcd"中的第一个分隔符`separator`相匹配的实例中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3136">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="b0200-3137">如果分隔符的顺序已撤消，因此第一个元素是"bc"，并且第二个元素是"bcd"，则结果将是一个字符串数组，包含两个元素，"a"和"def"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3137">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</span></span>  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-3138">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3138">Performance considerations</span></span>  
 <span data-ttu-id="b0200-3139"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3139">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-3140">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法，并选择性地<xref:System.String.Compare%2A>方法，以查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3140">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-3141">如果你拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3141">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-3142">如果你拆分处分隔符字符串的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3142">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-3143">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3143">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-3144">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3144">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-3145">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-3145">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3146">下面的示例演示返回通过调用一个字符串数组中的差异<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType>方法替换其`options`参数等于<xref:System.StringSplitOptions.None?displayProperty=nameWithType>和<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3146">The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> method with its `options` parameter equal to <xref:System.StringSplitOptions.None?displayProperty=nameWithType> and <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split.cs#1)]
 [!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split.vb#1)]  
  
 <span data-ttu-id="b0200-3147">下面的示例定义了包含标点和空格字符的分隔符的一个数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3147">The following example defines an array of separators that include punctuation and white-space characters.</span></span> <span data-ttu-id="b0200-3148">传递的值以及此数组<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>到<xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29>方法返回一个数组，其中包含从字符串的单个单词。</span><span class="sxs-lookup"><span data-stu-id="b0200-3148">Passing this array along with a value of <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> to the <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> method returns an array that consists of the individual words from the string.</span></span>  
  
 [!code-csharp-interactive[System.String.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split7.cs#7)]
 [!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="b0200-3149">请注意，与调用方法`options`参数设置为<xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3149">Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0200-3150">这可以防止在返回的数组包括<xref:System.String.Empty?displayProperty=nameWithType>表示标点符号和空格字符之间的空的子字符串匹配项的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3150">This prevents the returned array from including <xref:System.String.Empty?displayProperty=nameWithType> values that represent empty substring matches between punctuation marks and white-space characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-3151"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-3151"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3152">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3152">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-3153">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3153">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-3154">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3154">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-3155">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-3155">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-3156">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3156"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="b0200-3157">基于数组中的字符将一个字符串拆分成最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3157">Splits a string into a maximum number of substrings based on the characters in an array.</span></span></summary>
        <returns><span data-ttu-id="b0200-3158">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-3158">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-3159">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-3159">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3160">返回数组的元素中不包括分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3160">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="b0200-3161">如果此实例不包含任何中的字符`separator`，或`count`参数为 1，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-3161">If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="b0200-3162">如果`separator`参数是`null`不包含任何字符或空格字符被假定为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3162">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="b0200-3163">由 Unicode 标准和返回定义的空白字符`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3163">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-3164">但是，如果`separator`对此方法的重载的调用中的参数是`null`，编译器重载解析失败。</span><span class="sxs-lookup"><span data-stu-id="b0200-3164">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="b0200-3165">若要明确地标识所调用的方法，您的代码必须指示为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-3165">To unambiguously identify the called method, your code must indicate the type of the null.</span></span> <span data-ttu-id="b0200-3166">下面的示例显示了几种方法都会明确标识此重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-3166">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]
 [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="b0200-3167">如果`count`参数为零，或`options`参数是<xref:System.StringSplitOptions.RemoveEmptyEntries>和此实例的长度为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3167">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="b0200-3168">每个元素`separator`定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3168">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="b0200-3169">如果`options`参数是<xref:System.StringSplitOptions.None>，且它是相邻的两个分隔符或分隔符找到开头或结尾的此实例相对应的数组元素包含<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3169">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="b0200-3170">如果有多个`count`此实例中的子字符串第一个`count`减 1 的子字符串中返回第一个`count`减 1 个元素的返回值和此实例中的剩余字符返回的最后一个返回值的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3170">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="b0200-3171">如果`count`大于数量的子字符串，则返回可用的子字符串并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-3171">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-3172">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3172">Performance Considerations</span></span>  
 <span data-ttu-id="b0200-3173"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3173">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-3174">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法，并选择性地<xref:System.String.Compare%2A>方法，以查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3174">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-3175">如果你拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3175">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-3176">如果你拆分处分隔符字符串的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3176">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-3177">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3177">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-3178">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3178">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-3179">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-3179">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3180">下面的示例使用<xref:System.StringSplitOptions>枚举来包括或排除子字符串由生成<xref:System.String.Split%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3180">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3181"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3181"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-3182"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-3182"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3183">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3183">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-3184">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3184">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="b0200-3185">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3185">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="b0200-3186">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="b0200-3186">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="b0200-3187">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3187"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="b0200-3188">基于数组中的字符串将一个字符串拆分成最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3188">Splits a string into a maximum number of substrings based on the strings in an array.</span></span> <span data-ttu-id="b0200-3189">可以指定子字符串是否包含空数组元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3189">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="b0200-3190">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="b0200-3190">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="b0200-3191">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="b0200-3191">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
### <a name="return-value-details"></a><span data-ttu-id="b0200-3192">返回值的详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3192">Return value details</span></span>  
 <span data-ttu-id="b0200-3193">返回数组的元素中不包括分隔符字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3193">Delimiter strings are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="b0200-3194">如果此实例不包含任何中的字符串`separator`，或`count`参数为 1，返回的数组以包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="b0200-3194">If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="b0200-3195">如果`separator`参数是`null`不包含任何字符或空格字符被假定为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3195">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="b0200-3196">由 Unicode 标准和返回定义的空白字符`true`如果将它们传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3196">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-3197">但是，如果`separator`对此方法的重载的调用中的参数是`null`，编译器重载解析失败。</span><span class="sxs-lookup"><span data-stu-id="b0200-3197">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="b0200-3198">若要明确地标识所调用的方法，您的代码必须指示的类型`null`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3198">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="b0200-3199">下面的示例显示了几种方法都会明确标识此重载。</span><span class="sxs-lookup"><span data-stu-id="b0200-3199">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]
 [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]  
  
 <span data-ttu-id="b0200-3200">如果`count`参数为零，或`options`参数是<xref:System.StringSplitOptions.RemoveEmptyEntries>和此实例的长度为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3200">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="b0200-3201">每个元素`separator`定义一个或多个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3201">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="b0200-3202">如果`options`参数是<xref:System.StringSplitOptions.None>，且它是相邻的两个分隔符或分隔符找到开头或结尾的此实例相对应的数组元素包含<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3202">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="b0200-3203">如果有多个`count`此实例中的子字符串第一个`count`减 1 的子字符串中返回第一个`count`减 1 个元素的返回值和此实例中的剩余字符返回的最后一个返回值的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3203">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="b0200-3204">如果`count`大于数量的子字符串，则返回可用的子字符串并不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-3204">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
### <a name="the-separator-array"></a><span data-ttu-id="b0200-3205">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="b0200-3205">The separator array</span></span>  
 <span data-ttu-id="b0200-3206">如果中的元素的任何`separator`包含多个字符，将整个子字符串被视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3206">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="b0200-3207">例如，如果一个中的元素的`separator`为"10"，尝试进行拆分的字符串"This10is10a10string。"</span><span class="sxs-lookup"><span data-stu-id="b0200-3207">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="b0200-3208">返回此四个元素的数组: {"This"，"is"，"a"、"字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3208">returns this four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="b0200-3209">}.</span><span class="sxs-lookup"><span data-stu-id="b0200-3209">}.</span></span>  
  
### <a name="comparison-details"></a><span data-ttu-id="b0200-3210">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="b0200-3210">Comparison details</span></span>  
 <span data-ttu-id="b0200-3211"><xref:System.String.Split%2A>方法将提取由一个或多个字符串中分隔此字符串中的子字符串`separator`参数，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="b0200-3211">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="b0200-3212"><xref:System.String.Split%2A>方法执行比较使用区分大小写的序号排序规则查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3212">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="b0200-3213">有关 word、 字符串和顺序排序的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="b0200-3213">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="b0200-3214"><xref:System.String.Split%2A>方法将忽略的任何元素`separator`其值是`null`或空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="b0200-3214">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="b0200-3215">若要避免不明确的结果时中字符串`separator`具有公共，字符<xref:System.String.Split%2A>方法继续从开始到的实例的值的末尾，并与匹配的第一个元素`separator`，它等于中分隔符实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3215">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="b0200-3216">在其中子字符串的实例中出现的顺序的优先级高于中元素的顺序`separator`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3216">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="b0200-3217">例如，考虑一个其值是"abcdef"的实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3217">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="b0200-3218">如果中的第一个元素`separator`是"ef"，且第二个元素为"bcde"，该拆分操作的结果将是"a"和"f"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3218">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</span></span> <span data-ttu-id="b0200-3219">这是因为在实例中，"bcde"的子字符串中遇到和中的元素匹配`separator`遇到"f"的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="b0200-3219">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="b0200-3220">但是，如果第一个元素的`separator`为"bcd"和第二个元素为"bc"，该拆分操作的结果将是"a"和"ef"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3220">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</span></span> <span data-ttu-id="b0200-3221">这是因为"bcd"中的第一个分隔符`separator`相匹配的实例中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3221">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="b0200-3222">如果分隔符的顺序已撤消，因此第一个元素是"bc"，并且第二个元素是"bcd"，则结果将是"a"和"def"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3222">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</span></span>  
  
### <a name="performance-considerations"></a><span data-ttu-id="b0200-3223">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3223">Performance considerations</span></span>  
 <span data-ttu-id="b0200-3224"><xref:System.String.Split%2A>方法返回的数组对象分配内存和<xref:System.String>每个数组元素的对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3224">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="b0200-3225">如果应用程序需要获得最佳性能，或者如果是在应用程序中关键的管理内存分配，请考虑使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法，并选择性地<xref:System.String.Compare%2A>方法，以查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3225">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="b0200-3226">如果你拆分处分隔符字符的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法以在字符串中定位的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3226">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="b0200-3227">如果你拆分处分隔符字符串的字符串，使用<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOfAny%2A>方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3227">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="b0200-3228">然后，使用<xref:System.String.Compare%2A>方法，以确定该第一个字符后的字符的分隔符字符串的剩余字符是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3228">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="b0200-3229">此外，如果一组相同的字符用于拆分字符串中存在多个<xref:System.String.Split%2A>方法调用，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3229">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="b0200-3230">这将显著减少每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="b0200-3230">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3231">下面的示例使用<xref:System.StringSplitOptions>枚举来包括或排除子字符串由生成<xref:System.String.Split%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3231">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3232"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3232"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-3233"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="b0200-3233"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3234">中[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]及更早版本，如果<see cref="M:System.String.Split(System.Char[])" />方法传递<paramref name="separator" />即<see langword="null" />或不包含任何字符，该方法使用略有不同的一组字符来拆分字符串比<see cref="M:System.String.Trim(System.Char[])" />方法执行到修整字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3234">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="b0200-3235">从.NET Framework 4 开始，这两种方法使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3235">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3236">确定此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3236">Determines whether the beginning of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : char -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-3237">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3237">The string to compare.</span></span></param>
        <summary><span data-ttu-id="b0200-3238">确定此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3238">Determines whether the beginning of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="b0200-3239">如果 <see langword="true" /> 与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3239"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3240">此方法比较`value`是相同的长度与此实例的开头处的子字符串到`value`，并返回指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3240">This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="b0200-3241">若要对等，`value`必须为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>)，必须是对此相同的实例的引用，或者必须与此实例的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3241">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="b0200-3242">此方法执行使用当前区域性的单词 （区分大小写和区分区域性） 比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-3242">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3243">下面的示例定义`StripStartTags`方法，它使用<xref:System.String.StartsWith%28System.String%29>方法中删除 HTML 开始标记从字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-3243">The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith%28System.String%29> method to remove HTML start tags from the beginning of a string.</span></span> <span data-ttu-id="b0200-3244">请注意，`StripStartTags`方法称为递归，请确保删除在行开头的多个 HTML 开始标记。</span><span class="sxs-lookup"><span data-stu-id="b0200-3244">Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</span></span> <span data-ttu-id="b0200-3245">该示例不会删除在字符串中嵌入的 HTML 标记。</span><span class="sxs-lookup"><span data-stu-id="b0200-3245">The example does not remove HTML tags embedded in a string.</span></span>  
  
 [!code-cpp[stringstartswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp#1)]
 [!code-csharp[stringstartswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs#1)]
 [!code-vb[stringstartswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3246"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3246"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3247">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用将替换默认值，而是调用需要显式指定参数的方法的字符串比较方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3247">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-3248">若要确定是否字符串开头的特定子字符串使用当前区域性的字符串比较规则，请调用<see cref="M:System.String.StartsWith(System.String,System.StringComparison)" />方法的值的重载<see cref="F:System.StringComparison.CurrentCulture" />有关其<paramref name="comparisonType" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3248">To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.EndsWith(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * StringComparison -&gt; bool" Usage="string.StartsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-3249">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3249">The string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="b0200-3250">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3250">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="b0200-3251">确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3251">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="b0200-3252">如果此实例以 <see langword="true" /> 开头，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3252"><see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3253"><xref:System.String.StartsWith%2A>方法比较`value`此字符串的开头处的子字符串的参数，并返回一个值，指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3253">The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="b0200-3254">若要对等，`value`必须为对此相同的字符串的引用，必须为空字符串 ("")，或必须与此字符串的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3254">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</span></span> <span data-ttu-id="b0200-3255">执行比较的类型<xref:System.String.StartsWith%2A>方法的值取决于`comparisonType`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3255">The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span> <span data-ttu-id="b0200-3256">比较可以使用当前区域性的约定 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>并<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) 或固定区域性 (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>并<xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>)，也可以包含的字符对字符的码位比较 (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>或<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="b0200-3256">The comparison can use the conventions of the current culture (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> and <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) or the invariant culture (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> and <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span> <span data-ttu-id="b0200-3257">此外可以区分大小写比较 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>， <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>，或<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>)，或它可以忽略大小写 (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>， <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>， <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3257">The comparison can also be case-sensitive (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, or <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), or it can ignore case (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3258">下面的示例搜索字符串"the"开头的词较长字符串的开头"The"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3258">The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</span></span> <span data-ttu-id="b0200-3259">如示例所示，对的调用中的输出<xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29>执行不区分区域性的但区分大小写比较的方法来匹配的字符串，而执行区域性-和写的 insensitive 比较的调用与字符串匹配将失败。</span><span class="sxs-lookup"><span data-stu-id="b0200-3259">As the output from the example shows, a call to the <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</span></span>  
  
 [!code-cpp[System.String.StartsWith#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp#2)]
 [!code-csharp[System.String.StartsWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs#2)]
 [!code-vb[System.String.StartsWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb#2)]  
  
 <span data-ttu-id="b0200-3260">下面的示例确定字符串是否以特定子字符串开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-3260">The following example determines whether a string starts with a particular substring.</span></span> <span data-ttu-id="b0200-3261">它将初始化二维字符串数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3261">It initializes a two-dimensional string array.</span></span> <span data-ttu-id="b0200-3262">第二个维度中的第一个元素包含一个字符串，并且第二个元素包含要搜索的第一个字符串开头的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3262">The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</span></span> <span data-ttu-id="b0200-3263">区域性，是否忽略大小写，和是否执行序号比较的选择会影响结果。</span><span class="sxs-lookup"><span data-stu-id="b0200-3263">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span> <span data-ttu-id="b0200-3264">请注意，当字符串实例中包含连字，具有连续的字符的区分区域性的比较成功匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3264">Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</span></span>  
  
 [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]
 [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]
 [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3265"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3265"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b0200-3266"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3266"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.StartsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b0200-3267">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3267">The string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b0200-3268">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3268"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="b0200-3269">确定如何对此字符串与 <paramref name="value" /> 进行比较的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3269">Cultural information that determines how this string and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="b0200-3270">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-3270">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="b0200-3271">确定在使用指定的区域性进行比较时此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3271">Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-3272">如果 <see langword="true" /> 参数与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3272"><see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3273">此方法比较`value`参数是相同的长度与此字符串的开头处的子字符串`value`，并返回一个值，指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="b0200-3273">This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="b0200-3274">若要对等，`value`必须为空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>)，必须是对此相同的实例的引用，或者必须与此实例的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="b0200-3274">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="b0200-3275">此方法执行使用指定的大小写和区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-3275">This method performs a comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3276">下面的示例确定字符串是否出现在另一个字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="b0200-3276">The following example determines whether a string occurs at the beginning of another string.</span></span> <span data-ttu-id="b0200-3277"><xref:System.String.StartsWith%2A>使用区分大小写，不区分大小写和影响搜索结果的不同区域性的多次调用方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3277">The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]
 [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3278"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3278"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Substring">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3279">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3279">Retrieves a substring from this instance.</span></span>  
  
 <span data-ttu-id="b0200-3280">重载此成员。</span><span class="sxs-lookup"><span data-stu-id="b0200-3280">This member is overloaded.</span></span> <span data-ttu-id="b0200-3281">有关此成员的完整信息（包括语法、用法和示例），请单击重载列表中的相应名称。</span><span class="sxs-lookup"><span data-stu-id="b0200-3281">For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Index) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(Index startIndex);" />
      <MemberSignature Language="F#" Value="member this.Substring : Index -&gt; string" Usage="string.Substring startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Index" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Substring : int -&gt; string" Usage="string.Substring startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-3282">此实例中子字符串的起始字符位置（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="b0200-3282">The zero-based starting character position of a substring in this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-3283">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3283">Retrieves a substring from this instance.</span></span> <span data-ttu-id="b0200-3284">子字符串在指定的字符位置开始并一直到该字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-3284">The substring starts at a specified character position and continues to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="b0200-3285">与此实例中在 <paramref name="startIndex" /> 处开头的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度，则为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3285">A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3286">在调用<xref:System.String.Substring%28System.Int32%29>方法以从指定的字符位置开始，字符串的结尾结束的字符串中提取子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3286">You call the <xref:System.String.Substring%28System.Int32%29> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</span></span> <span data-ttu-id="b0200-3287">起始字符位置是一个从零开始;换而言之，在字符串中的第一个字符位于索引 0，不索引 1。</span><span class="sxs-lookup"><span data-stu-id="b0200-3287">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="b0200-3288">若要提取的子字符串，在指定的字符位置开始和结束的字符串的结束之前，调用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3288">To extract a substring that begins at a specified character position and ends before the end of the string, call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3289">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3289">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3290">相反，它返回一个新字符串，开始于`startIndex`当前字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3290">Instead, it returns a new string that begins at the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="b0200-3291">若要提取特定的字符或字符序列开头的子字符串，请如调用方法<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOf%2A>若要获取的值`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3291">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`.</span></span> <span data-ttu-id="b0200-3292">第二个示例阐释了这一点;它将提取一个字符位置开始后的"="字符的密钥值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3292">The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</span></span>  
  
 <span data-ttu-id="b0200-3293">如果`startIndex`等于零，该方法返回的原始字符串保持不变。</span><span class="sxs-lookup"><span data-stu-id="b0200-3293">If `startIndex` is equal to zero, the method returns the original string unchanged.</span></span>  
   
  
## Examples  
 <span data-ttu-id="b0200-3294">下面的示例演示如何获取从字符串的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3294">The following example demonstrates obtaining a substring from a string.</span></span>  
  
 [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]
 [!code-csharp[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]
 [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]  
  
 <span data-ttu-id="b0200-3295">下面的示例使用<xref:System.String.Substring%2A>方法来分隔由等号分隔的键/值对 （"="） 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3295">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="b0200-3296"><xref:System.String.IndexOf%2A>方法用于获取等字符的字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3296">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="b0200-3297">在调用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>方法将提取的键的名称，从字符串中的第一个字符开始，并扩展到调用所返回的字符数为<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3297">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="b0200-3298">对调用<xref:System.String.Substring%28System.Int32%29>方法然后提取分配给键的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3298">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="b0200-3299">它等于字符之外的一个字符位置开始，并将扩展到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-3299">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3300"><paramref name="startIndex" /> 小于零或大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-3300"><paramref name="startIndex" /> is less than zero or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(Range range);" />
      <MemberSignature Language="F#" Value="member this.Substring : Range -&gt; string" Usage="string.Substring range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.Substring : int * int -&gt; string" Usage="string.Substring (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-3301">此实例中子字符串的起始字符位置（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="b0200-3301">The zero-based starting character position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-3302">子字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3302">The number of characters in the substring.</span></span></param>
        <summary><span data-ttu-id="b0200-3303">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3303">Retrieves a substring from this instance.</span></span> <span data-ttu-id="b0200-3304">子字符串从指定的字符位置开始且具有指定的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-3304">The substring starts at a specified character position and has a specified length.</span></span></summary>
        <returns><span data-ttu-id="b0200-3305">与此实例中在 <paramref name="length" /> 处开头、长度为 <paramref name="startIndex" /> 的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度且 <paramref name="startIndex" /> 为零，则为 <paramref name="length" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3305">A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3306">在调用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>方法以从在指定的字符位置开始和结束之前字符串的末尾的字符串中提取子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3306">You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</span></span> <span data-ttu-id="b0200-3307">起始字符位置是一个从零开始;换而言之，在字符串中的第一个字符位于索引 0，不索引 1。</span><span class="sxs-lookup"><span data-stu-id="b0200-3307">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="b0200-3308">若要提取的子字符串，则从指定的字符位置开始并持续到字符串的末尾，调用<xref:System.String.Substring%28System.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3308">To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3309">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3309">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3310">相反，它返回的新字符串`length`字符从开始`startIndex`当前字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3310">Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="b0200-3311">`length`参数表示要从当前字符串实例中提取的字符总数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3311">The `length` parameter represents the total number of characters to extract from the current string instance.</span></span> <span data-ttu-id="b0200-3312">这包括的起始字符索引处找到`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3312">This includes the starting character found at index  `startIndex`.</span></span>  <span data-ttu-id="b0200-3313">换而言之，<xref:System.String.Substring%2A>方法尝试从索引中提取字符`startIndex`到索引`startIndex`  +  `length` -1。</span><span class="sxs-lookup"><span data-stu-id="b0200-3313">In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.</span></span>  
  
 <span data-ttu-id="b0200-3314">若要提取特定的字符或字符序列开头的子字符串，请如调用方法<xref:System.String.IndexOf%2A>或<xref:System.String.LastIndexOf%2A>若要获取的值`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3314">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.</span></span>  
  
 <span data-ttu-id="b0200-3315">如果从子字符串延伸`startIndex`到指定的字符序列，您可以调用一个方法如<xref:System.String.IndexOf%2A>或<xref:System.String.LastIndexOf%2A>要获取的字符序列的结束字符的索引。</span><span class="sxs-lookup"><span data-stu-id="b0200-3315">If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.</span></span>  <span data-ttu-id="b0200-3316">你可以然后将该值转换到字符串中的索引位置，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b0200-3316">You can then convert that value to an index position in the string as follows:</span></span>  
  
-   <span data-ttu-id="b0200-3317">如果已搜索的单个字符的标记的子字符串的结尾`length`参数等于`endIndex`  -  `startIndex` + 1，其中`endIndex`是返回的值<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3317">If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="b0200-3318">下面的示例从字符串提取"b"字符的连续块。</span><span class="sxs-lookup"><span data-stu-id="b0200-3318">The following example extracts a continuous block of "b" characters from a string.</span></span>  
  
     [!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]
     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]  
  
-   <span data-ttu-id="b0200-3319">如果已搜索的多个字符来标记的子字符串的结尾`length`参数等于`endIndex`  +  `endMatchLength`  -  `startIndex`，其中`endIndex`的返回值<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOf%2A>方法，和`endMatchLength`标记的子字符串的末尾的字符序列的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-3319">If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method, and `endMatchLength` is the length of the character sequence that marks the end of the substring.</span></span> <span data-ttu-id="b0200-3320">下面的示例提取包含 XML 的文本块`<definition>`元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3320">The following example extracts a block of text that contains an XML `<definition>` element.</span></span>  
  
     [!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]
     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]  
  
-   <span data-ttu-id="b0200-3321">如果字符或字符序列不包含子字符串内，最后`length`参数等于`endIndex`  -  `startIndex`，其中`endIndex`是返回的值<xref:System.String.IndexOf%2A>或<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3321">If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span>  
  
 <span data-ttu-id="b0200-3322">如果`startIndex`是等于零且等于当前的字符串，该方法的长度返回未更改的原始字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3322">If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3323">下面的示例阐释如何简单调用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>方法从字符串的第六个字符位置开始提取两个字符 （即，在索引 5）。</span><span class="sxs-lookup"><span data-stu-id="b0200-3323">The following example illustrates a simple call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</span></span>  
  
 [!code-csharp[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]
 [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]  
  
 <span data-ttu-id="b0200-3324">下面的示例使用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>来隔离在字符串内的子字符串的以下三个用例中的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3324">The following example uses the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method in the following three cases to isolate substrings within a string.</span></span> <span data-ttu-id="b0200-3325">在两种情况下使用子字符串在比较中，并指定无效的参数是因为在第三种情况下引发异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-3325">In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</span></span>  
  
-   <span data-ttu-id="b0200-3326">它提取单个字符和 （索引 2） 处的字符串中的第三个位置，并将其与"c"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3326">It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</span></span> <span data-ttu-id="b0200-3327">此比较将返回`true`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3327">This comparison returns `true`.</span></span>  
  
-   <span data-ttu-id="b0200-3328">它提取零个字符 （位于索引 3） 在字符串中的第四个位置开始，并将其传递给<xref:System.String.IsNullOrEmpty%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3328">It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method.</span></span> <span data-ttu-id="b0200-3329">这返回 true，因为在调用<xref:System.String.Substring%2A>方法将返回<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3329">This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b0200-3330">它会尝试提取一个字符在字符串中的第四个位置开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-3330">It attempts to extract one character starting at the fourth position in the string.</span></span> <span data-ttu-id="b0200-3331">由于该位置没有字符，方法调用将引发<xref:System.ArgumentOutOfRangeException>异常。</span><span class="sxs-lookup"><span data-stu-id="b0200-3331">Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 [!code-csharp[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="b0200-3332">下面的示例使用<xref:System.String.Substring%2A>方法来分隔由等号分隔的键/值对 （"="） 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3332">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="b0200-3333"><xref:System.String.IndexOf%2A>方法用于获取等字符的字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3333">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="b0200-3334">在调用<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29>方法将提取的键的名称，从字符串中的第一个字符开始，并扩展到调用所返回的字符数为<xref:System.String.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3334">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="b0200-3335">对调用<xref:System.String.Substring%28System.Int32%29>方法然后提取分配给键的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3335">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="b0200-3336">它等于字符之外的一个字符位置开始，并将扩展到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-3336">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3337"><paramref name="startIndex" /> 加 <paramref name="length" /> 指示不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3337"><paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.</span></span>  
  
<span data-ttu-id="b0200-3338">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-3338">-or-</span></span> 
 <span data-ttu-id="b0200-3339"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3339"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator" ExplicitInterfaceMemberName="System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#Generic#IEnumerable&lt;char&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;char&gt; ^ System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;char&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3340">返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3340">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3341">可用于循环访问当前 <see cref="T:System.String" /> 对象的强类型化枚举器。</span><span class="sxs-lookup"><span data-stu-id="b0200-3341">A strongly-typed enumerator that can be used to iterate through the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3342">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3342">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3343">可以使用它时，才<xref:System.String>实例转换为<xref:System.Collections.Generic.IEnumerable%601>接口对象。</span><span class="sxs-lookup"><span data-stu-id="b0200-3343">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object.</span></span> <span data-ttu-id="b0200-3344">有关更多信息，请参见 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3344">For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3345">返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3345">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3346">一个枚举器，可用于循环访问当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3346">An enumerator that can be used to iterate through the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3347">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3347">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3348">它只能在 <xref:System.String> 实例强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3348">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="b0200-3349">有关更多信息，请参见 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3349">For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3350">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3350">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b0200-3351">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3351">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3352">如果当前字符串的值为 <see langword="true" />，则为 <see cref="F:System.Boolean.TrueString" />；如果当前字符串的值为 <see langword="false" />，则为 <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3352"><see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3353">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3353">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3354">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3354">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3355">建议的替代项是调用<xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3355">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3356">当前字符串的值不为 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3356">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3357">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3357">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3358">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3358">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3359">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3359">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3360">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3360">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3361">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3361">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3362">建议的替代项是调用<xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3362">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3363">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3363">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3364">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3364">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3365">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3365">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3366">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3366">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3367">当前 <see cref="T:System.String" /> 对象中索引 0 处的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3367">The character at index 0 in the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3368">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3368">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3369">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3369">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3370">建议的替代项是调用<xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3370">The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3371">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3371">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3372">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3372">For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3373">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3373">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3374">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3374">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3375">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3375">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3376">建议的替代项是调用<xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3376">The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3377">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3377">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3378">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3378">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3379">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3379">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3380">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3380">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3381">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3381">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3382">建议的替代项是调用<xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3382">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3383">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3383">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3384">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3384">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3385">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3385">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3386">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3386">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3387">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3387">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3388">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3388">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3389">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3389">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3390">建议的替代项是调用<xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3390">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3391">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3391">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3392">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3392">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3393">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3393">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3394">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3394">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3395">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3395">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3396">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3396">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3397">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3397">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3398">建议的替代项是调用<xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3398">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3399">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3399">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3400">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3400">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3401">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3401">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3402">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3402">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3403">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3403">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3404">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3404">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3405">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3405">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3406">建议的替代项是调用<xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3406">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3407">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3407">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3408">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3408">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3409">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3409">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3410">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3410">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3411">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3411">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3412">建议的替代项是调用<xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3412">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3413">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3413">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3414">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3414">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3415">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3415">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3416">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3416">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3417">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3417">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3418">建议的替代项是调用<xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3418">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3419">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3419">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3420">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3420">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3421">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3421">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3422">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3422">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3423">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3423">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3424">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3424">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3425">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3425">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3426">建议的替代项是调用<xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3426">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b0200-3427">返回对象的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-3427">The type of the returned object.</span></span></param>
        <param name="provider"><span data-ttu-id="b0200-3428">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3428">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3429">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3429">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3430">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3430">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3431">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3431">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3432">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3432">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3433">建议的替代项是调用<xref:System.Convert.ChangeType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3433">The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3434"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3434"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b0200-3435">当前 <see cref="T:System.String" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="b0200-3435">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3436">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3436">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3437">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3437">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3438">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3438">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3439">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3439">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3440">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3440">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3441">建议的替代项是调用<xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3441">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3442">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3442">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3443">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3443">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3444">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3444">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3445">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3445">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3446">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3446">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3447">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3447">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3448">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3448">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3449">建议的替代项是调用<xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3449">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b0200-3450">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3450">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b0200-3451">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt32.MaxValue" /> 或小于 <see cref="F:System.UInt32.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b0200-3451">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3452">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3452">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3453">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3453">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b0200-3454">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3454">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3455">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="b0200-3455">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b0200-3456">它只能在 <xref:System.String> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3456">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b0200-3457">建议的替代项是调用<xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3457">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToCharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3458">将此实例中的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3458">Copies the characters in this instance to a Unicode character array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray();" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : unit -&gt; char[]" Usage="string.ToCharArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3459">将此实例中的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3459">Copies the characters in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="b0200-3460">元素为此实例的各字符的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3460">A Unicode character array whose elements are the individual characters of this instance.</span></span> <span data-ttu-id="b0200-3461">如果此实例是空字符串，则返回的数组为空且长度为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3461">If this instance is an empty string, the returned array is empty and has a zero length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3462">此方法会复制每个字符 (即，每个<xref:System.Char>对象) 中的字符数组的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3462">This method copies each character (that is, each <xref:System.Char> object) in a string to a character array.</span></span> <span data-ttu-id="b0200-3463">复制的第一个字符位于索引零开始的返回的字符数组中;复制的最后一个字符位于索引<xref:System.Array.Length%2A?displayProperty=nameWithType>-1。</span><span class="sxs-lookup"><span data-stu-id="b0200-3463">The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=nameWithType> - 1.</span></span>  
  
 <span data-ttu-id="b0200-3464">若要创建从字符数组中的字符的字符串，调用<xref:System.String.%23ctor%28System.Char%5B%5D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3464">To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.</span></span>  
  
 <span data-ttu-id="b0200-3465">若要创建包含已编码的字符在字符串中的字节数组，请实例化相应<xref:System.Text.Encoding>对象，并调用其<xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3465">To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b0200-3466">在.NET 中可用的标准编码的一些因素包括：</span><span class="sxs-lookup"><span data-stu-id="b0200-3466">Some of the standard encodings available in .NET include the following:</span></span>  
  
|<span data-ttu-id="b0200-3467">编码</span><span class="sxs-lookup"><span data-stu-id="b0200-3467">Encoding</span></span>|<span data-ttu-id="b0200-3468">对象</span><span class="sxs-lookup"><span data-stu-id="b0200-3468">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="b0200-3469">ASCII</span><span class="sxs-lookup"><span data-stu-id="b0200-3469">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="b0200-3470">UTF-7</span><span class="sxs-lookup"><span data-stu-id="b0200-3470">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="b0200-3471">UTF-8</span><span class="sxs-lookup"><span data-stu-id="b0200-3471">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="b0200-3472">UTF-16</span><span class="sxs-lookup"><span data-stu-id="b0200-3472">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="b0200-3473">UTF-32</span><span class="sxs-lookup"><span data-stu-id="b0200-3473">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="b0200-3474">有关详细信息，请参阅[.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3474">For more information, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3475">下面的示例调用<xref:System.String.ToCharArray%2A>方法提取到字符数组的字符串中的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3475">The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array.</span></span> <span data-ttu-id="b0200-3476">它然后数组中显示的原始字符串和元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3476">It then displays the original string and the elements in the array.</span></span>  
  
 [!code-csharp[System.String.ToCharArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs#1)]
 [!code-vb[System.String.ToCharArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb#1)]  
  
 <span data-ttu-id="b0200-3477">下面的示例定义一个包含作为带分隔符的字符串中的分隔符的字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3477">The following example defines a string containing the characters that serve as delimiters in a delimited string.</span></span> <span data-ttu-id="b0200-3478">然后，它调用<xref:System.String.ToCharArray%2A>方法来创建字符数组，可传递给<xref:System.String.Split%28System.Char%5B%5D%29>方法要将带分隔符的字符串拆分为其单独的子字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3478">It then calls the <xref:System.String.ToCharArray%2A> method to create a character array that can be passed to the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate the delimited string into its individual substrings.</span></span>  
  
 [!code-cpp[StringSplit2#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringSplit2/CPP/stringsplit2.cpp#1)] 
 [!code-csharp[StringSplit2#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/stringsplit2.cs#1)] 
 [!code-vb[StringSplit2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit2.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray (startIndex As Integer, length As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : int * int -&gt; char[]" Usage="string.ToCharArray (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="b0200-3479">此实例内子字符串的起始位置。</span><span class="sxs-lookup"><span data-stu-id="b0200-3479">The starting position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="b0200-3480">此实例内子字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-3480">The length of the substring in this instance.</span></span></param>
        <summary><span data-ttu-id="b0200-3481">将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3481">Copies the characters in a specified substring in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="b0200-3482">元素为此实例中从字符位置 <paramref name="length" /> 开始的 <paramref name="startIndex" /> 字符数的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3482">A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3483">此方法将字符串的部分中的字符复制到字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3483">This method copies the characters in a portion of a string to a character array.</span></span> <span data-ttu-id="b0200-3484">若要创建从一系列字符数组中字符的字符串，调用<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3484">To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="b0200-3485">`startIndex`参数是从零开始。</span><span class="sxs-lookup"><span data-stu-id="b0200-3485">The `startIndex` parameter is zero-based.</span></span> <span data-ttu-id="b0200-3486">也就是说，在字符串实例中的第一个字符的索引为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3486">That is, the index of the first character in the string instance is zero.</span></span>  
  
 <span data-ttu-id="b0200-3487">如果`length`为零，则返回的数组为空并且具有长度为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3487">If `length` is zero, the returned array is empty and has a zero length.</span></span> <span data-ttu-id="b0200-3488">如果此实例是`null`或空字符串 ("")，则返回的数组为空并且具有长度为零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3488">If this instance is `null` or an empty string (""), the returned array is empty and has a zero length.</span></span>  
  
 <span data-ttu-id="b0200-3489">若要创建包含已编码的字符在字符串的一部分的字节数组，请实例化相应<xref:System.Text.Encoding>对象，并调用其<xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3489">To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="b0200-3490">在.NET 中可用的标准编码包括：</span><span class="sxs-lookup"><span data-stu-id="b0200-3490">Some of the standard encodings available in .NET include:</span></span>  
  
|<span data-ttu-id="b0200-3491">编码</span><span class="sxs-lookup"><span data-stu-id="b0200-3491">Encoding</span></span>|<span data-ttu-id="b0200-3492">对象</span><span class="sxs-lookup"><span data-stu-id="b0200-3492">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="b0200-3493">ASCII</span><span class="sxs-lookup"><span data-stu-id="b0200-3493">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="b0200-3494">UTF-7</span><span class="sxs-lookup"><span data-stu-id="b0200-3494">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="b0200-3495">UTF-8</span><span class="sxs-lookup"><span data-stu-id="b0200-3495">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="b0200-3496">UTF-16</span><span class="sxs-lookup"><span data-stu-id="b0200-3496">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="b0200-3497">UTF-32</span><span class="sxs-lookup"><span data-stu-id="b0200-3497">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="b0200-3498">有关详细信息，请参阅[.NET 中的字符编码](~/docs/standard/base-types/character-encoding.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3498">For more information, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3499">下面的示例将字符串中的子字符串转换为数组的字符，然后枚举并显示数组的元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3499">The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</span></span>  
  
 [!code-cpp[string.tochararray1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp#1)]
 [!code-csharp[string.tochararray1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs#1)]
 [!code-vb[string.tochararray1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b0200-3500"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="b0200-3500"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0200-3501">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b0200-3501">-or-</span></span> 
 <span data-ttu-id="b0200-3502"><paramref name="startIndex" /> 加 <paramref name="length" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="b0200-3502"><paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3503">返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3503">Returns a copy of this string converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower();" />
      <MemberSignature Language="F#" Value="member this.ToLower : unit -&gt; string" Usage="string.ToLower " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3504">返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3504">Returns a copy of this string converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="b0200-3505">一个小写字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3505">A string in lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3506">此方法会考虑当前区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3506">This method takes into account the casing rules of the current culture.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3507">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3507">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3508">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3508">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3509">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3509">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3510">调用结果的大小写操作<xref:System.String.ToLower>方法会考虑当前区域性的大小写约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-3510">The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="b0200-3511">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3511">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span> <span data-ttu-id="b0200-3512">这将产生在每个区域性相同的结果 (不同于<xref:System.String.ToLower>方法)，并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="b0200-3512">This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3513">下面的示例将多个混合大小写的字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3513">The following example converts several mixed case strings to lowercase.</span></span>  
  
 [!code-cpp[stringlowerupper#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp#1)]
 [!code-csharp[stringlowerupper#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs#1)]
 [!code-vb[stringlowerupper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3514">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用字符串的大小写的方法替换为默认值改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3514">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-3515">若要将字符转换为小写的通过使用当前区域性的大小写约定，调用<see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />方法的值的重载<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />有关其<paramref name="culture" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3515">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToLower : System.Globalization.CultureInfo -&gt; string" Usage="string.ToLower culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="b0200-3516">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3516">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="b0200-3517">根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3517">Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-3518">当前字符串的等效小写形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-3518">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3519">指定的区域性的大小写规则`culture`参数确定更改字符串的大小写的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3519">The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3520">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3520">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3521">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3521">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3522">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3522">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3523">如果传递<xref:System.String.ToLower%28System.Globalization.CultureInfo%29>方法<xref:System.Globalization.CultureInfo>对象而不<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>，大小写操作将考虑特定于区域性的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3523">If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="b0200-3524">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3524">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="b0200-3525">此生成中每个区域性相同的结果，并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="b0200-3525">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3526">下面的示例将转换为小写字符使用英语-美国和土耳其语-土耳其语区域性的大写字符组成的两个字符串，然后比较小写字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3526">The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</span></span> <span data-ttu-id="b0200-3527">大写的字符串完全相同，只不过 Unicode LATIN CAPITAL LETTER 我在一个字符串中每个匹配项，另一个字符串包含 LATIN CAPITAL LETTER I 使用圆点上方。</span><span class="sxs-lookup"><span data-stu-id="b0200-3527">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-cpp[string.tolower1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp#1)]
 [!code-csharp[string.tolower1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs#1)]
 [!code-vb[string.tolower1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3528"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3528"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.ToUpper" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public string ToLowerInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLowerInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLowerInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLowerInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLowerInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToLowerInvariant : unit -&gt; string" Usage="string.ToLowerInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3529">返回此 <see cref="T:System.String" /> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3529">Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-3530">当前字符串的等效小写形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-3530">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3531">固定的区域性表示是不区分区域性的区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-3531">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="b0200-3532">相关联的英语语言但不是与特定国家或地区。</span><span class="sxs-lookup"><span data-stu-id="b0200-3532">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="b0200-3533">有关更多信息，请参见 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-3533">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="b0200-3534">如果你的应用程序依赖于不受当前区域性使用的可预测方式更改字符串的大小写<xref:System.String.ToLowerInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3534">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="b0200-3535"><xref:System.String.ToLowerInvariant%2A>方法等效于`ToLower(CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3535">The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="b0200-3536">一个字符串集合必须在用户界面控件中可预测的顺序出现时，建议的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3536">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3537">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3537">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3538">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3538">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3539">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3539">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3540">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3540">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3541">下面的示例定义一个字符串数组，包含了多种语言版本中使用的单个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3541">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="b0200-3542"><xref:System.String.ToLowerInvariant%2A>方法用于填充每个单词的不区分大小写版本的并行数组元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3542">The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="b0200-3543"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>方法用于区分大小写数组基于小写的数组，以确保元素出现在与语言无关的相同顺序中的元素的顺序排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-3543">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToLowerInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs#1)]
 [!code-vb[System.String.ToLowerInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpperInvariant" />
        <altmember cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3544">将此实例的值转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3544">Converts the value of this instance to a <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="string.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3545">返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</span><span class="sxs-lookup"><span data-stu-id="b0200-3545">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="b0200-3546">当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3546">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3547">此方法仅返回未更改的当前字符串，因为没有无需直接调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3547">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span> <span data-ttu-id="b0200-3548">它通常称为隐式中的复合格式设置操作，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="b0200-3548">It is usually called implicitly in a composite formatting operation, as the example shows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3549">下面的示例演示<xref:System.String.ToString%2A>方法。请注意，该示例不显式调用<xref:System.String.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3549">The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method.</span></span> <span data-ttu-id="b0200-3550">相反，该方法会隐式调用[复合格式设置](~/docs/standard/base-types/composite-formatting.md)功能。</span><span class="sxs-lookup"><span data-stu-id="b0200-3550">Instead, the method is called implicitly by the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span>  
  
 [!code-cpp[string.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp#1)]
 [!code-csharp[string.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs#1)]
 [!code-vb[string.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Clone" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="string.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b0200-3551">（保留）一个对象，用于提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b0200-3551">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b0200-3552">返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</span><span class="sxs-lookup"><span data-stu-id="b0200-3552">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="b0200-3553">当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3553">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3554">`provider` 保留，并且当前不参与此操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-3554">`provider` is reserved, and does not currently participate in this operation.</span></span>  
  
 <span data-ttu-id="b0200-3555">此方法仅返回未更改的当前字符串，因为没有无需直接调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3555">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3556">返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3556">Returns a copy of this string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper();" />
      <MemberSignature Language="F#" Value="member this.ToUpper : unit -&gt; string" Usage="string.ToUpper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3557">返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3557">Returns a copy of this string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="b0200-3558">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-3558">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3559">此方法使用当前区域性的大小写规则以将当前实例中的每个字符转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="b0200-3559">This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</span></span> <span data-ttu-id="b0200-3560">如果字符没有大写等效项，则包含返回的字符串中保持不变。</span><span class="sxs-lookup"><span data-stu-id="b0200-3560">If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3561">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3561">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3562">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3562">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
 <span data-ttu-id="b0200-3563"><xref:System.String.ToUpper%2A>方法通常用于将字符串转换为大写形式，以便可以在不区分大小写比较中使用它。</span><span class="sxs-lookup"><span data-stu-id="b0200-3563">The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</span></span> <span data-ttu-id="b0200-3564">若要执行不区分大小写比较的更好方法是调用具有的字符串比较方法<xref:System.StringComparison>参数的值设置为<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>进行区分区域性的、 不区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-3564">A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> for a culture-sensitive, case-insensitive comparison.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3565">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3565">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3566">调用结果的大小写操作<xref:System.String.ToUpper>方法会考虑当前区域性的大小写约定。</span><span class="sxs-lookup"><span data-stu-id="b0200-3566">The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="b0200-3567">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3567">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="b0200-3568">这将产生在每个区域性相同的结果 (不同于<xref:System.String.ToUpper>方法)，并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="b0200-3568">This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3569">下面的示例调用<xref:System.String.ToUpper%2A>方法将一系列包含基本拉丁语、 拉丁语 1 补充和拉丁语扩充-A 在字符集中的每个字符的单字符字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3569">The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</span></span> <span data-ttu-id="b0200-3570">然后，显示每个字符串的大写字符为不同于它的小写字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3570">It then displays each string whose uppercase character is different from its lowercase character.</span></span>  
  
 [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]
 [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]
 [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3571">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用字符串的大小写的方法替换为默认值改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3571">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="b0200-3572">若要将转换要使用当前区域性的大小写约定大写的字符串，请调用<see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" />方法的值的重载<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />有关其<paramref name="culture" />参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3572">To convert a string to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToUpper : System.Globalization.CultureInfo -&gt; string" Usage="string.ToUpper culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="b0200-3573">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3573">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="b0200-3574">根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="b0200-3574">Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-3575">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-3575">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3576">指定的区域性的大小写规则`culture`参数确定的方式的字符串大小写更改。</span><span class="sxs-lookup"><span data-stu-id="b0200-3576">The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3577">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3577">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3578">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3578">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3579">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3579">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3580">如果传递<xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>方法<xref:System.Globalization.CultureInfo>对象而不<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>，大小写操作将考虑特定于区域性的规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3580">If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="b0200-3581">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3581">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="b0200-3582">此生成中每个区域性相同的结果，并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="b0200-3582">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3583">以下示例将小写字符的字符串转换为使用英语-美国和土耳其语-土耳其语区域性的大写字符组成的两个字符串，然后对大写的字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="b0200-3583">The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</span></span> <span data-ttu-id="b0200-3584">大写的字符串完全相同，只不过 Unicode LATIN CAPITAL LETTER 我在一个字符串中每个匹配项，另一个字符串包含 LATIN CAPITAL LETTER I 使用圆点上方。</span><span class="sxs-lookup"><span data-stu-id="b0200-3584">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]
 [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b0200-3585"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3585"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public string ToUpperInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpperInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpperInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpperInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpperInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToUpperInvariant : unit -&gt; string" Usage="string.ToUpperInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3586">返回此 <see cref="T:System.String" /> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="b0200-3586">Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="b0200-3587">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="b0200-3587">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3588">固定的区域性表示是不区分区域性的区域性。</span><span class="sxs-lookup"><span data-stu-id="b0200-3588">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="b0200-3589">相关联的英语语言但不是与特定国家或地区。</span><span class="sxs-lookup"><span data-stu-id="b0200-3589">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="b0200-3590">有关更多信息，请参见 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="b0200-3590">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="b0200-3591">如果你的应用程序依赖于不受当前区域性使用的可预测方式更改字符串的大小写<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3591">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="b0200-3592"><xref:System.String.ToUpperInvariant%2A>方法等效于`ToUpper(CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="b0200-3592">The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="b0200-3593">一个字符串集合必须在用户界面控件中可预测的顺序出现时，建议的方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3593">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3594">此方法不修改的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3594">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3595">相反，它返回一个新的字符串，其中当前实例中的所有字符都转换为大写。</span><span class="sxs-lookup"><span data-stu-id="b0200-3595">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="b0200-3596">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="b0200-3596">Security Considerations</span></span>  
 <span data-ttu-id="b0200-3597">如果需要小写或大写版本的操作系统标识符，如文件的名称、 命名管道或注册表项，请使用<xref:System.String.ToLowerInvariant%2A>或<xref:System.String.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3597">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3598">下面的示例定义一个字符串数组，包含了多种语言版本中使用的单个字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3598">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="b0200-3599"><xref:System.String.ToUpperInvariant%2A>方法用于填充每个单词的不区分大小写版本的并行数组元素。</span><span class="sxs-lookup"><span data-stu-id="b0200-3599">The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="b0200-3600"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>方法用于区分大小写数组基于大写的数组，以确保元素出现在与语言无关的相同顺序中的元素的顺序排序。</span><span class="sxs-lookup"><span data-stu-id="b0200-3600">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]
 [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Trim">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0200-3601">返回一个新字符串，它相当于从当前 <see cref="T:System.String" /> 对象中移除了一组指定字符的所有前导匹配项和尾随匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-3601">Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current <see cref="T:System.String" /> object are removed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim();" />
      <MemberSignature Language="F#" Value="member this.Trim : unit -&gt; string" Usage="string.Trim " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0200-3602">从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符和尾部空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3602">Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3603">从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3603">The string that remains after all white-space characters are removed from the start and end of the current string.</span></span> <span data-ttu-id="b0200-3604">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3604">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3605"><xref:System.String.Trim%2A>方法从字符串中移除当前所有前导和尾随空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3605">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters.</span></span> <span data-ttu-id="b0200-3606">在遇到非空白字符后停止每个前导和尾随的剪裁操作。</span><span class="sxs-lookup"><span data-stu-id="b0200-3606">Each leading and trailing trim operation stops when a non-white-space character is encountered.</span></span> <span data-ttu-id="b0200-3607">例如，如果当前字符串"abc xyz"<xref:System.String.Trim%2A>方法将返回"abc xyz"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3607">For example, if the current string is "   abc   xyz   ", the <xref:System.String.Trim%2A> method returns "abc   xyz".</span></span> <span data-ttu-id="b0200-3608">若要删除字符串中的单词之间的空白字符，请使用[.NET 正则表达式](~/docs/standard/base-types/regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3608">To remove white-space characters between words in a string, use [.NET Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3609">如果<xref:System.String.Trim%2A>方法从当前实例中删除的任何字符，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3609">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3610">相反，它返回已找到的当前实例中的所有前导和尾随空白字符的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3610">Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="b0200-3611">如果当前字符串等于<xref:System.String.Empty>或当前实例中的所有字符由空白字符都组成，该方法返回<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3611">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="b0200-3612">由 Unicode 标准定义的空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3612">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="b0200-3613"><xref:System.String.Trim>方法中删除生成返回值的任何前导和尾随字符`true`时传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b0200-3613">The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3614">下面的示例使用<xref:System.String.Trim?displayProperty=nameWithType>方法以从之前将它们连用户输入的字符串中删除任何多余的空白区域。</span><span class="sxs-lookup"><span data-stu-id="b0200-3614">The following example uses the <xref:System.String.Trim?displayProperty=nameWithType> method to remove any extra white space from strings entered by the user before concatenating them.</span></span>  
  
 [!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]
 [!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]
 [!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3615">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本维护此方法修整的空白字符的内部列表。</span><span class="sxs-lookup"><span data-stu-id="b0200-3615">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintain an internal list of white-space characters that this method trims.</span></span> <span data-ttu-id="b0200-3616">从开始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，该方法裁剪掉所有 Unicode 空白字符 (字符生成<see langword="true" />返回值时传递给<see cref="M:System.Char.IsWhiteSpace(System.Char)" />方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3616">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="b0200-3617">由于此更改，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本中删除两个字符，零宽度的空格 (U + 200B) 和零宽度无中断空格 (U + FEFF) 的<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以及更高版本不是删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-3617">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="b0200-3618">此外，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本不会修整三个 Unicode 空白字符：蒙古文元音标记分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空格 (U + 205F)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3618">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.Trim : char -&gt; string" Usage="string.Trim trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.Trim : char[] -&gt; string" Usage="string.Trim trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="b0200-3619">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3619">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-3620">从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-3620">Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3621">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3621">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string.</span></span> <span data-ttu-id="b0200-3622">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3622">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="b0200-3623">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3623">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3624"><xref:System.String.Trim%2A>方法删除从当前字符串中的所有前导和尾随字符`trimChars`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3624">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="b0200-3625">每个前导空格和尾随剪裁操作将会停止时不在的字符`trimChars`遇到。</span><span class="sxs-lookup"><span data-stu-id="b0200-3625">Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="b0200-3626">例如，如果当前字符串为"123abc456xyz789"和`trimChars`包含从"1"至"9"的数字<xref:System.String.Trim%2A>方法返回"abc456xyz"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3626">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.Trim%2A> method returns "abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3627">如果<xref:System.String.Trim%2A>方法从当前实例中删除的任何字符，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3627">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3628">相反，它返回一个新字符串，其中所有前导空格和尾随`trimChars`删除当前实例中找到的字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3628">Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="b0200-3629">如果当前字符串等于<xref:System.String.Empty>或当前实例中的所有字符中的字符都组成`trimChars`数组，该方法将返回<xref:System.String.Empty>。</span><span class="sxs-lookup"><span data-stu-id="b0200-3629">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="b0200-3630">如果`trimChars`是`null`或空数组，此方法删除导致方法返回任何前导或尾随字符`true`时传递给<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType>方法，</span><span class="sxs-lookup"><span data-stu-id="b0200-3630">If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method,</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3631">下面的示例使用<xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType>方法从字符串中删除空间、 星号 （\*） 和撇号 （'） 字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3631">The following example uses the <xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType> method to remove space, asterisk (\*), and apostrophe (') characters from a string.</span></span>  
  
 [!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]
 [!code-csharp[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]
 [!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3632">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护此方法修整如果的空白字符的内部列表<paramref name="trimChars" />是<see langword="null" />或空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3632">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="b0200-3633">从开始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，如果<paramref name="trimChars" />是<see langword="null" />或空数组，该方法将修整所有 Unicode 空白字符 (字符生成<see langword="true" />返回值时传递给<see cref="M:System.Char.IsWhiteSpace(System.Char)" />方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3633">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="b0200-3634">由于此更改，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本中删除两个字符，零宽度的空格 (U + 200B) 和零宽度无中断空格 (U + FEFF) 的<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以及更高版本不是删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-3634">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="b0200-3635">此外，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本不会修整三个 Unicode 空白字符：蒙古文元音标记分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空格 (U + 205F)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3635">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd();" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : unit -&gt; string" Usage="string.TrimEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char -&gt; string" Usage="string.TrimEnd trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char[] -&gt; string" Usage="string.TrimEnd trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="b0200-3636">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3636">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-3637">从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有尾部匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-3637">Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3638">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3638">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string.</span></span> <span data-ttu-id="b0200-3639">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为删除 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3639">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead.</span></span> <span data-ttu-id="b0200-3640">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="b0200-3640">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3641"><xref:System.String.TrimEnd%2A>方法删除从当前字符串中的所有尾随字符`trimChars`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3641">The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="b0200-3642">剪裁操作停止时的第一个字符不在`trimChars`遇到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-3642">The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string.</span></span> <span data-ttu-id="b0200-3643">例如，如果当前字符串为"123abc456xyz789"和`trimChars`包含从"1"至"9"的数字<xref:System.String.TrimEnd%2A>方法返回"123abc456xyz"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3643">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimEnd%2A> method returns "123abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3644">如果<xref:System.String.TrimEnd%2A>方法从当前实例中删除的任何字符，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3644">If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3645">相反，它返回一个新的字符串中找到的所有尾随字符中`trimChars`从当前字符串中删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-3645">Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3646">下面的示例演示如何使用<xref:System.String.TrimEnd%28System.Char%5B%5D%29>方法，以修整空格或标点符号的字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="b0200-3646">The following example demonstrates how you can use the <xref:System.String.TrimEnd%28System.Char%5B%5D%29> method to trim white space or punctuation marks from the end of a string.</span></span>  
  
 [!code-csharp[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]
 [!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3647">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护此方法修整如果的空白字符的内部列表<paramref name="trimChars" />是<see langword="null" />或空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3647">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="b0200-3648">从开始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，如果<paramref name="trimChars" />是<see langword="null" />或空数组，该方法将修整所有 Unicode 空白字符 (字符生成<see langword="true" />返回值时传递给<see cref="M:System.Char.IsWhiteSpace(System.Char)" />方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3648">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="b0200-3649">由于此更改，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本中删除两个字符，零宽度的空格 (U + 200B) 和零宽度无中断空格 (U + FEFF) 的<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以及更高版本不是删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-3649">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="b0200-3650">此外，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本不会修整三个 Unicode 空白字符：蒙古文元音标记分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空格 (U + 205F)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3650">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart();" />
      <MemberSignature Language="F#" Value="member this.TrimStart : unit -&gt; string" Usage="string.TrimStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char -&gt; string" Usage="string.TrimStart trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char[] -&gt; string" Usage="string.TrimStart trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="b0200-3651">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b0200-3651">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b0200-3652">从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项。</span><span class="sxs-lookup"><span data-stu-id="b0200-3652">Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="b0200-3653">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3653">The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string.</span></span> <span data-ttu-id="b0200-3654">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3654">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0200-3655"><xref:System.String.TrimStart%2A>方法删除从当前字符串中的所有前导字符`trimChars`参数。</span><span class="sxs-lookup"><span data-stu-id="b0200-3655">The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="b0200-3656">剪裁操作时不在一个字符停止`trimChars`遇到。</span><span class="sxs-lookup"><span data-stu-id="b0200-3656">The trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="b0200-3657">例如，如果当前字符串为"123abc456xyz789"和`trimChars`包含从"1"至"9"的数字<xref:System.String.TrimStart%2A>方法返回"abc456xyz789"。</span><span class="sxs-lookup"><span data-stu-id="b0200-3657">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimStart%2A> method returns "abc456xyz789".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0200-3658">如果<xref:System.String.TrimStart%2A>方法从当前实例中删除的任何字符，此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="b0200-3658">If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="b0200-3659">相反，它返回已找到的当前实例中的所有前导空白字符的新字符串。</span><span class="sxs-lookup"><span data-stu-id="b0200-3659">Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0200-3660">下面的示例演示基本功能的<xref:System.String.TrimStart%2A>方法：</span><span class="sxs-lookup"><span data-stu-id="b0200-3660">The following example demonstrates the basic functionality of the <xref:System.String.TrimStart%2A> method:</span></span>

 [!code-csharp[System.String.TrimStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#1)]
 [!code-vb[System.String.TrimStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#1)]

 <span data-ttu-id="b0200-3661">下面的示例使用<xref:System.String.TrimStart%2A>方法，以修整空格和行的源代码中注释字符。</span><span class="sxs-lookup"><span data-stu-id="b0200-3661">The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code.</span></span> <span data-ttu-id="b0200-3662">`StripComments`方法包装对的调用<xref:System.String.TrimStart%2A>并将其传递 Visual Basic 和 C# 中的以斜杠 （/） 中包含一个空格和撇号 （'） 的注释字符的字符数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3662">The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</span></span> <span data-ttu-id="b0200-3663"><xref:System.String.TrimStart%2A>方法也称为计算字符串是否为注释时删除前导空格。</span><span class="sxs-lookup"><span data-stu-id="b0200-3663">The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.</span></span>  
  
 [!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]
 [!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]  
  
 <span data-ttu-id="b0200-3664">下面的示例因而演示 `StripComments` 方法的调用。</span><span class="sxs-lookup"><span data-stu-id="b0200-3664">The following example then illustrates a call to the `StripComments` method.</span></span>  
  
 [!code-csharp[System.String.TrimStart#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#3)]
 [!code-vb[System.String.TrimStart#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b0200-3665">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护此方法修整如果的空白字符的内部列表<paramref name="trimChars" />是<see langword="null" />或空数组。</span><span class="sxs-lookup"><span data-stu-id="b0200-3665">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="b0200-3666">从开始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，如果<paramref name="trimChars" />是<see langword="null" />或空数组，该方法将修整所有 Unicode 空白字符 (字符生成<see langword="true" />返回值时传递给<see cref="M:System.Char.IsWhiteSpace(System.Char)" />方法)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3666">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="b0200-3667">由于此更改，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本中删除两个字符，零宽度的空格 (U + 200B) 和零宽度无中断空格 (U + FEFF) 的<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以及更高版本不是删除。</span><span class="sxs-lookup"><span data-stu-id="b0200-3667">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="b0200-3668">此外，<see cref="M:System.String.Trim" />中的方法[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本不会修整三个 Unicode 空白字符：蒙古文元音标记分隔符 (U + 180E)、 窄无中断空格 (U + 202F) 和中等数学空格 (U + 205F)。</span><span class="sxs-lookup"><span data-stu-id="b0200-3668">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
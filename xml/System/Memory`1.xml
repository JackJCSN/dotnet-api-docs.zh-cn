<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c44b0a1867432b0983de3a712bfdc1fda07f6c0" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68539065" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="4793b-101">中项的类型<see cref="T:System.Memory`1" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-101">The type of items in the <see cref="T:System.Memory`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="4793b-102">表示连续内存区域。</span><span class="sxs-lookup"><span data-stu-id="4793b-102">Represents a contiguous region of memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="4793b-103">与<xref:System.Span%601>类似`Memory<T>` , 表示内存的连续区域。</span><span class="sxs-lookup"><span data-stu-id="4793b-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="4793b-104">但与不同<xref:System.Span%601>的是,不是ref结构。`Memory<T>` [](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types)</span><span class="sxs-lookup"><span data-stu-id="4793b-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span></span> <span data-ttu-id="4793b-105">这意味着`Memory<T>` , 可以将放置在托管堆上, 而<xref:System.Span%601>不能。</span><span class="sxs-lookup"><span data-stu-id="4793b-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="4793b-106">因此, 该`Memory<T>`结构没有<xref:System.Span%601>与实例相同的限制。</span><span class="sxs-lookup"><span data-stu-id="4793b-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="4793b-107">具体而言：</span><span class="sxs-lookup"><span data-stu-id="4793b-107">In particular:</span></span>

- <span data-ttu-id="4793b-108">它可用作类中的字段。</span><span class="sxs-lookup"><span data-stu-id="4793b-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="4793b-109">它可以跨`await`和`yield`边界使用。</span><span class="sxs-lookup"><span data-stu-id="4793b-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="4793b-110">除了之外`Memory<T>`, 还可以使用<xref:System.ReadOnlyMemory%601?displayProperty=nameWithType>来表示不可变或只读内存。</span><span class="sxs-lookup"><span data-stu-id="4793b-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4793b-111">用来从中创建 <see cref="T:System.Memory`1" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-111">The array from which to create the <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="4793b-112">在整个指定数组上创建新的 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-112">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-113">如果`array` <xref:System.Memory%601> `default<T>`为`null`, 则此构造函数返回一个具有值的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-113">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="4793b-114"><paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-114"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span>
        
<span data-ttu-id="4793b-115">或</span><span class="sxs-lookup"><span data-stu-id="4793b-115">-or-</span></span>

<span data-ttu-id="4793b-116">数组是<see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">协变</see>。</span><span class="sxs-lookup"><span data-stu-id="4793b-116">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4793b-117">源数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-117">The source array.</span></span></param>
        <param name="start"><span data-ttu-id="4793b-118">要包括在新的 <see cref="T:System.Memory`1" /> 内的第一个元素的索引。</span><span class="sxs-lookup"><span data-stu-id="4793b-118">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <param name="length"><span data-ttu-id="4793b-119">要包括在新的 <see cref="T:System.Memory`1" /> 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="4793b-119">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="4793b-120">从指定索引开始，创建包含数组的指定元素数的新 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-120">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-121">如果`array` <xref:System.Memory%601> `default<T>`为`null`, 则此构造函数返回一个具有值的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-121">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4793b-122"><paramref name="array" /> 是 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 不为零。</span><span class="sxs-lookup"><span data-stu-id="4793b-122"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>


<span data-ttu-id="4793b-123">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4793b-123">-or-</span></span>

<span data-ttu-id="4793b-124"><paramref name="start" /> 在数组的界限外。</span><span class="sxs-lookup"><span data-stu-id="4793b-124"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="4793b-125">或</span><span class="sxs-lookup"><span data-stu-id="4793b-125">-or-</span></span>

<span data-ttu-id="4793b-126"><paramref name="start" /> 和 <paramref name="length" /> 超过数组中的元素数。</span><span class="sxs-lookup"><span data-stu-id="4793b-126"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="4793b-127"><paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-127"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="4793b-128">目标 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-128">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="4793b-129">将 <see cref="T:System.Memory`1" /> 对象的内容复制到目标 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-129">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-130">即使当前实例的内容和重叠, <xref:System.Memory%601> `destination`此方法也会`destination`将当前实例的所有内容复制到中。</span><span class="sxs-lookup"><span data-stu-id="4793b-130">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4793b-131"><paramref name="destination" /> 的长度小于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="4793b-131">The length of <paramref name="destination" /> is less than the length of the current instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4793b-132">返回空的 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-132">Returns an empty <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <value><span data-ttu-id="4793b-133">一个空对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-133">An empty object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="4793b-134">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-134">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="4793b-135">确定指定的 <see cref="T:System.Memory`1" /> 对象是否等于当前对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-135">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="4793b-136">如果当前实例与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-136"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-137">如果为, 则两个对象相等:</span><span class="sxs-lookup"><span data-stu-id="4793b-137">The two objects are equal if:</span></span>

   - <span data-ttu-id="4793b-138">`other`<xref:System.Memory%601>为或<xref:System.ReadOnlyMemory%601>对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-138">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="4793b-139">这两个对象都指向同一数组, 并且具有相同的长度。</span><span class="sxs-lookup"><span data-stu-id="4793b-139">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="4793b-140">方法执行引用相等性的测试; 不比较的<xref:System.Memory%601>元素是否相等。 `Equals(Memory<T>)`</span><span class="sxs-lookup"><span data-stu-id="4793b-140">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4793b-141">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-141">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="4793b-142">确定指定的对象是否等于当前对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-142">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="4793b-143">如果当前实例与 <paramref name="obj" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-143"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-144">如果<xref:System.Memory%601>两个对象都指向同一数组, 并且具有相同的长度, 则两个对象相等。</span><span class="sxs-lookup"><span data-stu-id="4793b-144">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="4793b-145">请注意, 测试相等性并不检查内容是否相等。</span><span class="sxs-lookup"><span data-stu-id="4793b-145">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4793b-146">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="4793b-146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="4793b-147">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="4793b-147">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4793b-148">指示当前实例是否为空。</span><span class="sxs-lookup"><span data-stu-id="4793b-148">Indicates whether the current instance is empty.</span></span></summary>
        <value><span data-ttu-id="4793b-149"><see langword="true" />如果当前实例为空, 则为; 否则为。否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-149"><see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks><span data-ttu-id="4793b-150">如果<see cref="T:System.Memory`1" />对象的长度为 0, 则该对象为空。</span><span class="sxs-lookup"><span data-stu-id="4793b-150">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; this[Range range] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Item(valuetype System.Range)" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Item(System.Range)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(range As Range) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; default[Range] { Memory&lt;T&gt; get(Range range); };" />
      <MemberSignature Language="F#" Value="member this.Item(Range) : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4793b-151">获取当前实例中的项数。</span><span class="sxs-lookup"><span data-stu-id="4793b-151">Gets the number of items in the current instance.</span></span></summary>
        <value><span data-ttu-id="4793b-152">当前实例中的项数。</span><span class="sxs-lookup"><span data-stu-id="4793b-152">The number of items in the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="4793b-153">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-153">The object to convert.</span></span></param>
        <summary><span data-ttu-id="4793b-154">定义从 <see cref="T:System.ArraySegment`1" /> 对象到 <see cref="T:System.Memory`1" /> 对象的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="4793b-154">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="4793b-155">被转换的 <see cref="T:System.ArraySegment`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-155">The converted <see cref="T:System.ArraySegment`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="4793b-156">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-156">The object to convert.</span></span></param>
        <summary><span data-ttu-id="4793b-157">定义从 <see cref="T:System.Memory`1" /> 对象到 <see cref="T:System.ReadOnlyMemory`1" /> 对象的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="4793b-157">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="4793b-158">被转换的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-158">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4793b-159">要转换的数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-159">The array to convert.</span></span></param>
        <summary><span data-ttu-id="4793b-160">定义从数组到 <see cref="T:System.Memory`1" /> 对象的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="4793b-160">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="4793b-161">被转换的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-161">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4793b-162">为 <see cref="T:System.Memory`1" /> 对象创建句柄。</span><span class="sxs-lookup"><span data-stu-id="4793b-162">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="4793b-163"><see cref="T:System.Memory`1" /> 对象的句柄。</span><span class="sxs-lookup"><span data-stu-id="4793b-163">A handle for the <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="4793b-164">请参阅</span><span class="sxs-lookup"><span data-stu-id="4793b-164">See also</span></span>

<span data-ttu-id="4793b-165">在释放返回<xref:System.Buffers.MemoryHandle>的对象之前, 垃圾回收器不会移动内存。</span><span class="sxs-lookup"><span data-stu-id="4793b-165">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="4793b-166">这使您可以检索和使用内存的地址。</span><span class="sxs-lookup"><span data-stu-id="4793b-166">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4793b-167">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</span><span class="sxs-lookup"><span data-stu-id="4793b-167">An instance with non-primitive (non-blittable) members cannot be pinned.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndex As Index) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Index startIndex);" />
      <MemberSignature Language="F#" Value="member this.Slice : Index -&gt; Memory&lt;'T&gt;" Usage="memory.Slice startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Index" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="4793b-168">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="4793b-168">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="4793b-169">从指定索引处开始的当前内存外形成切片。</span><span class="sxs-lookup"><span data-stu-id="4793b-169">Forms a slice out of the current memory that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="4793b-170">包含当前实例的所有元素（从 <paramref name="start" /> 到实例末尾）的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-170">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4793b-171"><paramref name="start" /> 小于零或大于 <see cref="P:System.Memory`1.Length" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-171"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Range range);" />
      <MemberSignature Language="F#" Value="member this.Slice : Range -&gt; Memory&lt;'T&gt;" Usage="memory.Slice range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="4793b-172">开始切片处的索引。</span><span class="sxs-lookup"><span data-stu-id="4793b-172">The index at which to begin the slice.</span></span></param>
        <param name="length"><span data-ttu-id="4793b-173">要包括在切片中的元素数。</span><span class="sxs-lookup"><span data-stu-id="4793b-173">The number of elements to include in the slice.</span></span></param>
        <summary><span data-ttu-id="4793b-174">从指定长度的指定索引处开始，在当前内存外形成切片。</span><span class="sxs-lookup"><span data-stu-id="4793b-174">Forms a slice out of the current memory starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="4793b-175">包含当前实例的 <paramref name="length" /> 元素（从 <paramref name="start" /> 开始）的对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-175">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4793b-176"><paramref name="start" /> 小于零或大于 <see cref="P:System.Memory`1.Length" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-176"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span>

<span data-ttu-id="4793b-177">或</span><span class="sxs-lookup"><span data-stu-id="4793b-177">-or-</span></span>

<span data-ttu-id="4793b-178"><paramref name="length" /> 大于 <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span><span class="sxs-lookup"><span data-stu-id="4793b-178"><paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4793b-179">返回当前实例的范围。</span><span class="sxs-lookup"><span data-stu-id="4793b-179">Returns a span from the current instance.</span></span></summary>
        <value><span data-ttu-id="4793b-180">从当前<see cref="T:System.Memory`1" />对象创建的范围。</span><span class="sxs-lookup"><span data-stu-id="4793b-180">A span created from the current <see cref="T:System.Memory`1" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4793b-181">将此内存的内容复制到新数组中。</span><span class="sxs-lookup"><span data-stu-id="4793b-181">Copies the contents from the memory into a new array.</span></span></summary>
        <returns><span data-ttu-id="4793b-182">包含当前内存中元素的数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-182">An array containing the elements in the current memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-183">因为对`ToArray`方法的调用会执行堆分配, 所以通常应避免这样做。</span><span class="sxs-lookup"><span data-stu-id="4793b-183">Because a call to the `ToArray` method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="4793b-184">但是, 有时需要利用仅可用于数组的功能。</span><span class="sxs-lookup"><span data-stu-id="4793b-184">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="4793b-185">对方法的`ToArray`每个调用都将返回一个新数组。</span><span class="sxs-lookup"><span data-stu-id="4793b-185">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4793b-186">返回此 <see cref="T:System.Memory`1" /> 对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="4793b-186">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="4793b-187">此 <see cref="T:System.Memory`1" /> 对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="4793b-187">the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-188">对于`Memory<Char>` <xref:System.String> , 方法返回一个<xref:System.Memory%601>, 该字符串包含由指向的字符。 `ToString`</span><span class="sxs-lookup"><span data-stu-id="4793b-188">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="4793b-189">否则, 它将返回<xref:System.String> , 其中包含类型的名称和<xref:System.Memory%601>包含的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="4793b-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="4793b-190">目标 <see cref="T:System.Memory`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4793b-190">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="4793b-191">将此内存的内容复制到目标 <see cref="T:System.Memory`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="4793b-191">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="4793b-192">如果复制操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4793b-192"><see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="4793b-193">即使当前实例的内容和重叠, <xref:System.Memory%601> `destination`此方法也会`destination`将当前实例的所有内容复制到中。</span><span class="sxs-lookup"><span data-stu-id="4793b-193">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
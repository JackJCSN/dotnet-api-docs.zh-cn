<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ad5ad967d190db85e1ed1595c011914829e054e" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67250101" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1f434-101">提供用于设置和检索应用程序上下文相关数据的成员。</span><span class="sxs-lookup"><span data-stu-id="1f434-101">Provides members for setting and retrieving data about an application's context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="1f434-102"><xref:System.AppContext>类使库编写器可为其用户提供统一的新功能选择退出机制。</span><span class="sxs-lookup"><span data-stu-id="1f434-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="1f434-103">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="1f434-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="1f434-104">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="1f434-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="1f434-105">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="1f434-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>

## <a name="appcontext-for-library-developers"></a><span data-ttu-id="1f434-106">库开发人员的 AppContext</span><span class="sxs-lookup"><span data-stu-id="1f434-106">AppContext for library developers</span></span>
 <span data-ttu-id="1f434-107">库使用<xref:System.AppContext>类来定义和公开兼容性切换，而库用户可以设置这些开关以影响库行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="1f434-108">默认情况下，库提供新功能；如果设置了开关，则只更改新功能（即，它们提供以前的功能）。</span><span class="sxs-lookup"><span data-stu-id="1f434-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="1f434-109">这使得库以同时继续支持依赖于以前的行为的调用方提供的现有 API 的新行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>

### <a name="defining-the-switch-name"></a><span data-ttu-id="1f434-110">定义的开关名称</span><span class="sxs-lookup"><span data-stu-id="1f434-110">Defining the switch name</span></span>
 <span data-ttu-id="1f434-111">允许您的使用者可以选择不使用的更改的最常见方法是行为的库的定义命名的开关。</span><span class="sxs-lookup"><span data-stu-id="1f434-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="1f434-112">其`value`元素都是名称/值对组成开关的名称并将其<xref:System.Boolean>值。</span><span class="sxs-lookup"><span data-stu-id="1f434-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="1f434-113">默认情况下，此开关它始终隐式`false`，它提供了新的行为 （和参加使得新行为，默认情况下）。</span><span class="sxs-lookup"><span data-stu-id="1f434-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="1f434-114">此开关设置为`true`启用它，它提供的旧行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="1f434-115">此开关显式设置为`false`还提供了新行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>

 <span data-ttu-id="1f434-116">最好交换机名称，因为它们是由库公开的正式协定中使用一致的格式。</span><span class="sxs-lookup"><span data-stu-id="1f434-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="1f434-117">以下是两种明显的格式。</span><span class="sxs-lookup"><span data-stu-id="1f434-117">The following are two obvious formats.</span></span>

-   <span data-ttu-id="1f434-118">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="1f434-118">*Switch*.*namespace*.*switchname*</span></span>

-   <span data-ttu-id="1f434-119">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="1f434-119">*Switch*.*library*.*switchname*</span></span>

 <span data-ttu-id="1f434-120">一旦定义并记录该交换机，调用方可以使用它通过使用注册表中，通过添加[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)元素到其应用程序配置文件，或通过调用<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>方法以编程方式。</span><span class="sxs-lookup"><span data-stu-id="1f434-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="1f434-121">请参阅[库的使用者的 AppContext](#ForConsumers)详细了解如何调用方使用和设置的值部分<xref:System.AppContext>配置切换。</span><span class="sxs-lookup"><span data-stu-id="1f434-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>

 <span data-ttu-id="1f434-122">当公共语言运行时运行的应用程序时，它会自动读取注册表的兼容性设置并加载应用程序配置文件以填充应用程序的<xref:System.AppContext>实例。</span><span class="sxs-lookup"><span data-stu-id="1f434-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="1f434-123">因为<xref:System.AppContext>实例已填充以编程方式调用方或运行时，不需要采取任何操作，例如，调用<xref:System.AppContext.SetSwitch%2A>方法，以配置<xref:System.AppContext>实例。</span><span class="sxs-lookup"><span data-stu-id="1f434-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>

### <a name="checking-the-setting"></a><span data-ttu-id="1f434-124">检查设置</span><span class="sxs-lookup"><span data-stu-id="1f434-124">Checking the setting</span></span>
 <span data-ttu-id="1f434-125">然后，可以选中使用者已声明的值的交换机和通过调用适当的 act<xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1f434-126">该方法返回`true`如果`switchName`找到参数，并且该方法返回时，将其`isEnabled`参数指示开关的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="1f434-127">否则，该方法将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="1f434-127">Otherwise, the method returns `false`.</span></span>

### <a name="an-example"></a><span data-ttu-id="1f434-128">示例</span><span class="sxs-lookup"><span data-stu-id="1f434-128">An example</span></span>
 <span data-ttu-id="1f434-129">下面的示例演示如何使用<xref:System.AppContext>类，以允许客户选择的库方法的原始行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="1f434-130">下面是一个名为库的 1.0 版`StringLibrary`。</span><span class="sxs-lookup"><span data-stu-id="1f434-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="1f434-131">它定义`SubstringStartsAt`方法执行序号比较来确定更大的字符串中的子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="1f434-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 <span data-ttu-id="1f434-132">下面的示例然后使用库中"archaeologist"查找"archæ"的子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="1f434-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="1f434-133">由于该方法执行序号比较，因此不能找到子字符串。</span><span class="sxs-lookup"><span data-stu-id="1f434-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 <span data-ttu-id="1f434-134">版本 2 的库，但是，当更改`SubstringStartsAt`要使用区分区域性的比较方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 <span data-ttu-id="1f434-135">时重新编译应用程序以针对库的新版本上运行，它现在将报告的子字符串"archæ""archaeologist"中的索引 4 处找到。</span><span class="sxs-lookup"><span data-stu-id="1f434-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 <span data-ttu-id="1f434-136">此更改可以防止通过定义取决于原始行为的应用程序的重大[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)切换。</span><span class="sxs-lookup"><span data-stu-id="1f434-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) switch.</span></span> <span data-ttu-id="1f434-137">在这种情况下，名为开关`StringLibrary.DoNotUseCultureSensitiveComparison`。</span><span class="sxs-lookup"><span data-stu-id="1f434-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="1f434-138">其默认值， `false`，指示库应执行其 2.0 版区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="1f434-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="1f434-139">`true` 指示库应执行其版本 1.0 序号比较。</span><span class="sxs-lookup"><span data-stu-id="1f434-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="1f434-140">稍作修改，前面的代码允许设置开关，用于确定的方法不会执行的比较类型的库使用方。</span><span class="sxs-lookup"><span data-stu-id="1f434-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 <span data-ttu-id="1f434-141">如果应用程序然后可以使用下面的配置文件来还原版本 1.0 的行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 <span data-ttu-id="1f434-142">应用程序运行时使用的配置文件存在，它将生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="1f434-142">When the application is run with the configuration file present, it produces the following output:</span></span>

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="1f434-143">库的使用者的 AppContext</span><span class="sxs-lookup"><span data-stu-id="1f434-143">AppContext for library consumers</span></span>
 <span data-ttu-id="1f434-144">如果您是一个库，使用者<xref:System.AppContext>类使您可以利用的库或库方法的新功能的选择退出机制。</span><span class="sxs-lookup"><span data-stu-id="1f434-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="1f434-145">正在调用的类库的单个方法定义特定的开关启用或禁用新行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="1f434-146">开关的值是一个布尔值。</span><span class="sxs-lookup"><span data-stu-id="1f434-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="1f434-147">如果它是`false`，这通常是默认值、 启用新行为; 如果它是`true`、 禁用新行为，并且该成员的行为就像以前一样。</span><span class="sxs-lookup"><span data-stu-id="1f434-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>

 <span data-ttu-id="1f434-148">可以在四种方法之一来设置开关的值：</span><span class="sxs-lookup"><span data-stu-id="1f434-148">You can set the value of a switch in one of four ways:</span></span>

-   <span data-ttu-id="1f434-149">通过调用<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>在代码中的方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="1f434-150">`switchName`参数定义交换机名称和`isEnabled`属性定义开关的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="1f434-151">因为<xref:System.AppContext>是一个静态类，它是可在每个应用程序域基础上。</span><span class="sxs-lookup"><span data-stu-id="1f434-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>

     <span data-ttu-id="1f434-152">调用<xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>具有应用程序的作用域; 也就是说，它会影响只有应用程序。</span><span class="sxs-lookup"><span data-stu-id="1f434-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>

-   <span data-ttu-id="1f434-153">通过添加`<AppContextSwitchOverrides>`元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config 文件的部分。</span><span class="sxs-lookup"><span data-stu-id="1f434-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your app.config file.</span></span> <span data-ttu-id="1f434-154">交换机具有单个属性`value`，其值是一个字符串，表示包含开关的名称和值的键/值对。</span><span class="sxs-lookup"><span data-stu-id="1f434-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>

     <span data-ttu-id="1f434-155">若要定义多个开关，单独的每个开关中的键/值对[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)元素的`value`以分号结尾的属性。</span><span class="sxs-lookup"><span data-stu-id="1f434-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="1f434-156">在这种情况下，`<AppContextSwitchOverrides>`元素具有以下格式：</span><span class="sxs-lookup"><span data-stu-id="1f434-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     <span data-ttu-id="1f434-157">使用`<AppContextSwitchOverrides>`元素来定义配置设置应用程序作用域; 也就是说，它会影响只有应用程序。</span><span class="sxs-lookup"><span data-stu-id="1f434-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>

    > [!NOTE]
    > <span data-ttu-id="1f434-158">.NET Framework 定义的开关的信息，请参阅[ \<AppContextSwitchOverrides > 元素](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)。</span><span class="sxs-lookup"><span data-stu-id="1f434-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).</span></span>

-   <span data-ttu-id="1f434-159">通过将其名称是交换机的名称的字符串值添加到`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`密钥在注册表中。</span><span class="sxs-lookup"><span data-stu-id="1f434-159">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="1f434-160">其值必须为字符串表示形式<xref:System.Boolean>，则可以通过分析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 即，它必须为"True"，"true"，"False"或"false"。</span><span class="sxs-lookup"><span data-stu-id="1f434-160">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span> <span data-ttu-id="1f434-161">如果运行时遇到任何其他值，它将忽略此开关。</span><span class="sxs-lookup"><span data-stu-id="1f434-161">If the runtime encounters any other value, it ignores the switch.</span></span>

     <span data-ttu-id="1f434-162">使用注册表来定义<xref:System.AppContext>交换机具有计算机范围; 即，它会影响计算机上运行每个应用程序。</span><span class="sxs-lookup"><span data-stu-id="1f434-162">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>

- <span data-ttu-id="1f434-163">对于 ASP.NET 应用程序，您将添加[\<添加 >](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md)元素[ \<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md) web.config 文件部分。</span><span class="sxs-lookup"><span data-stu-id="1f434-163">For ASP.NET applications, you add an [\<Add>](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) element to the [\<appSettings>](~/docs/framework/configure-apps/file-schema/appsettings/index.md) section of the web.config file.</span></span> <span data-ttu-id="1f434-164">例如:</span><span class="sxs-lookup"><span data-stu-id="1f434-164">For example:</span></span>

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

 <span data-ttu-id="1f434-165">如果在多个方面中设置相同的开关，用于确定哪些设置会重写其他顺序是优先的：</span><span class="sxs-lookup"><span data-stu-id="1f434-165">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>

1.  <span data-ttu-id="1f434-166">以编程方式设置。</span><span class="sxs-lookup"><span data-stu-id="1f434-166">The programmatic setting.</span></span>

2.  <span data-ttu-id="1f434-167">应用程序配置文件或 web.config 文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="1f434-167">The setting in the app config file or the web.config file.</span></span>

3.  <span data-ttu-id="1f434-168">注册表设置。</span><span class="sxs-lookup"><span data-stu-id="1f434-168">The registry setting.</span></span>

 <span data-ttu-id="1f434-169">下面是简单的应用程序将文件 URI 传递到<xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-169">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="1f434-170">当.NET Framework 4.6 下运行，它将引发<xref:System.ArgumentException>因为`file://`不再是有效的部件的文件路径。</span><span class="sxs-lookup"><span data-stu-id="1f434-170">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 <span data-ttu-id="1f434-171">若要还原的方法的以前的行为，并避免此异常，可以添加`Switch.System.IO.UseLegacyPathHandling`切换到应用程序配置文件。 例如：</span><span class="sxs-lookup"><span data-stu-id="1f434-171">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a><span data-ttu-id="1f434-172">请参阅</span><span class="sxs-lookup"><span data-stu-id="1f434-172">See also</span></span>
[<span data-ttu-id="1f434-173">AppContext 开关</span><span class="sxs-lookup"><span data-stu-id="1f434-173">AppContext switch</span></span>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd"><span data-ttu-id="1f434-174">&lt;运行时&gt;元素</span><span class="sxs-lookup"><span data-stu-id="1f434-174">&lt;runtime&gt; Element</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752"><span data-ttu-id="1f434-175">&lt;AppContextSwitchOverrides&gt;元素</span><span class="sxs-lookup"><span data-stu-id="1f434-175">&lt;AppContextSwitchOverrides&gt; Element</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f434-176">获取程序集解析程序用于探测程序集的基目录的路径名。</span><span class="sxs-lookup"><span data-stu-id="1f434-176">Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="1f434-177">程序集解析程序用于探测程序集的基目录的路径名。</span><span class="sxs-lookup"><span data-stu-id="1f434-177">the pathname of the base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="1f434-178">这是每个应用程序域属性。</span><span class="sxs-lookup"><span data-stu-id="1f434-178">This is a per application domain property.</span></span> <span data-ttu-id="1f434-179">其值对应于<xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType>当前应用程序域的属性。</span><span class="sxs-lookup"><span data-stu-id="1f434-179">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1f434-180">数据元素的名称。</span><span class="sxs-lookup"><span data-stu-id="1f434-180">The name of the data element.</span></span></param>
        <summary><span data-ttu-id="1f434-181">返回分配给当前应用程序域的已命名数据元素的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-181">Returns the value of the named data element assigned to the current application domain.</span></span></summary>
        <returns><span data-ttu-id="1f434-182">如果 <paramref name="name" /> 识别出已命名值，则为 <paramref name="name" /> 的值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-182">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="1f434-183">开关的名称。</span><span class="sxs-lookup"><span data-stu-id="1f434-183">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="1f434-184">开关的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-184">The value of the switch.</span></span></param>
        <summary><span data-ttu-id="1f434-185">设置开关的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-185">Sets the value of a switch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="1f434-186"><xref:System.AppContext>类使库编写器可为其用户提供统一的新功能选择退出机制。</span><span class="sxs-lookup"><span data-stu-id="1f434-186">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="1f434-187">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="1f434-187">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="1f434-188">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="1f434-188">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="1f434-189">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="1f434-189">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="1f434-190"><xref:System.AppContext.SetSwitch%2A>应用程序 （或库） 来声明的开关值调用方法 (它始终是<xref:System.Boolean>值) 的相关库定义。</span><span class="sxs-lookup"><span data-stu-id="1f434-190">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="1f434-191">切换它始终隐式`false`，它提供新行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-191">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="1f434-192">此开关设置为`true`启用它，它提供的旧行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-192">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="1f434-193">此开关显式设置为`false`还提供了新行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-193">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="1f434-194">依赖库然后可以检查该开关的值通过调用<xref:System.AppContext.TryGetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-194">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="1f434-195">最好交换机名称，因为它们是由库公开的正式协定中使用一致的格式。</span><span class="sxs-lookup"><span data-stu-id="1f434-195">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="1f434-196">以下是两种明显的格式。</span><span class="sxs-lookup"><span data-stu-id="1f434-196">The following are two obvious formats.</span></span>
>
> -   <span data-ttu-id="1f434-197">*Switch*.*namespace*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="1f434-197">*Switch*.*namespace*.*switchname*</span></span>
> -   <span data-ttu-id="1f434-198">*Switch*.*library*.*switchname*</span><span class="sxs-lookup"><span data-stu-id="1f434-198">*Switch*.*library*.*switchname*</span></span>

 <span data-ttu-id="1f434-199">在.NET Framework，除了以编程方式设置开关的值上运行的应用程序它也可以设置：</span><span class="sxs-lookup"><span data-stu-id="1f434-199">For applications running on the .NET Framework, in addition to setting the value of a switch programmatically, it can also be set:</span></span>

-   <span data-ttu-id="1f434-200">通过添加开关名称和值[ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)中的元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)部分中的应用程序配置文件。</span><span class="sxs-lookup"><span data-stu-id="1f434-200">By adding the switch name and value to the [\<AppContextSwitchOverrides>](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) element in the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of an application configuration file.</span></span> <span data-ttu-id="1f434-201">例如，以下示例定义名为的交换机`Libraries.FPLibrary.UseExactFloatingPointComparison`其值是`False`。</span><span class="sxs-lookup"><span data-stu-id="1f434-201">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

-   <span data-ttu-id="1f434-202">通过将其名称是交换机的名称的字符串值添加到`HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext`密钥在注册表中。</span><span class="sxs-lookup"><span data-stu-id="1f434-202">By adding a string value whose name is the name of the switch to the `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` key in the registry.</span></span> <span data-ttu-id="1f434-203">其值必须为字符串表示形式<xref:System.Boolean>，则可以通过分析<xref:System.Boolean.Parse%2A?displayProperty=nameWithType>方法; 即，它必须为"True"，"true"，"False"或"false"。</span><span class="sxs-lookup"><span data-stu-id="1f434-203">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>

 <span data-ttu-id="1f434-204">如果`switchName`已存在，其值将被覆盖`isEnabled`参数。</span><span class="sxs-lookup"><span data-stu-id="1f434-204">If `switchName` already exists, its value is overwritten by the `isEnabled` argument.</span></span>  <span data-ttu-id="1f434-205">在最近调用，即<xref:System.AppContext.SetSwitch%2A>方法重写在注册表中，在应用配置文件，或通过以前调用定义的值<xref:System.AppContext.SetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-205">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 ### <a name="appcontextsetswitch-and-net-core"></a><span data-ttu-id="1f434-206">AppContext.SetSwitch 和.NET Core</span><span class="sxs-lookup"><span data-stu-id="1f434-206">AppContext.SetSwitch and .NET Core</span></span>

<span data-ttu-id="1f434-207">.NET core 支持以编程方式调用<xref:System.AppContext.SetSwitch%2A>仅限方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-207">.NET Core supports programmatic calls with the <xref:System.AppContext.SetSwitch%2A> method only.</span></span> <span data-ttu-id="1f434-208">支持下列开关：</span><span class="sxs-lookup"><span data-stu-id="1f434-208">The following switches are supported:</span></span>

|<span data-ttu-id="1f434-209">开关</span><span class="sxs-lookup"><span data-stu-id="1f434-209">Switch</span></span>|<span data-ttu-id="1f434-210">值</span><span class="sxs-lookup"><span data-stu-id="1f434-210">Values</span></span>|<span data-ttu-id="1f434-211">描述</span><span class="sxs-lookup"><span data-stu-id="1f434-211">Description</span></span>|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|<span data-ttu-id="1f434-212">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="1f434-212">`true` or `false`</span></span>|<span data-ttu-id="1f434-213">指示是否对启用了 HTTP/2 协议的支持 (`true`) 还是禁用 (`false`)。</span><span class="sxs-lookup"><span data-stu-id="1f434-213">Indicates whether support for the HTTP/2 protocol is enabled (`true`) or disabled (`false`).</span></span> <span data-ttu-id="1f434-214">默认为禁用。</span><span class="sxs-lookup"><span data-stu-id="1f434-214">The default is disabled.</span></span> <span data-ttu-id="1f434-215">首次使用之前，必须设置此开关<xref:System.Net.Http.HttpClient>。</span><span class="sxs-lookup"><span data-stu-id="1f434-215">The switch must be set before the first use of <xref:System.Net.Http.HttpClient>.</span></span> <span data-ttu-id="1f434-216">从开始，提供使用.NET Core 3.0 Preview 4。</span><span class="sxs-lookup"><span data-stu-id="1f434-216">Available starting with .NET Core 3.0 Preview 4.</span></span>|
|`System.Net.Http.UseSocketsHttpHandler` |<span data-ttu-id="1f434-217">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="1f434-217">`true` or `false`</span></span>|<span data-ttu-id="1f434-218">确定是否高级网络 Api，例如<xref:System.Net.Http.HttpClient>使用<xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>(`true`) 或<xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType>(`false`)。</span><span class="sxs-lookup"><span data-stu-id="1f434-218">Determines whether high-level networking APIs such as <xref:System.Net.Http.HttpClient> use <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) or <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span></span>|

## Examples
 <span data-ttu-id="1f434-219">以下代码行设置名为的交换机`Switch.AmazingLib.ThrowOnException`到`true`，使旧行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-219">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="1f434-220">然后，库可以检查库使用者是否已将开关的值设置通过调用<xref:System.AppContext.TryGetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-220">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f434-221"><paramref name="switchName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-221"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f434-222"><paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-222"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f434-223">获取当前应用程序所针对的框架版本的名称。</span><span class="sxs-lookup"><span data-stu-id="1f434-223">Gets the name of the framework version targeted by the current application.</span></span></summary>
        <value><span data-ttu-id="1f434-224">当前应用程序所针对的框架版本的名称。</span><span class="sxs-lookup"><span data-stu-id="1f434-224">The name of the framework version targeted by the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="1f434-225">目标框架版本的名称对应的值<xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="1f434-225">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1f434-226">.NET framework 的目标框架名称的列表，请参阅[ &lt;supportedRuntime&gt;元素](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md)元素。</span><span class="sxs-lookup"><span data-stu-id="1f434-226">For a list of target framework names for the .NET Framework, see the [&lt;supportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) element.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="1f434-227">开关的名称。</span><span class="sxs-lookup"><span data-stu-id="1f434-227">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="1f434-228">此方法返回时，如果找到 <paramref name="switchName" />，则包含 <paramref name="switchName" /> 的值；如果未找到 <paramref name="switchName" />，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-228">When this method returns, contains the value of <paramref name="switchName" /> if <paramref name="switchName" /> was found, or <see langword="false" /> if <paramref name="switchName" /> was not found.</span></span> <span data-ttu-id="1f434-229">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="1f434-229">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="1f434-230">尝试获取开关的值。</span><span class="sxs-lookup"><span data-stu-id="1f434-230">Tries to get the value of a switch.</span></span></summary>
        <returns><span data-ttu-id="1f434-231">如果设置了 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 参数包含开关的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-231"><see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="1f434-232"><xref:System.AppContext>类使库编写器可为其用户提供统一的新功能选择退出机制。</span><span class="sxs-lookup"><span data-stu-id="1f434-232">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="1f434-233">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="1f434-233">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="1f434-234">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="1f434-234">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="1f434-235">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="1f434-235">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="1f434-236">公共语言运行时自动填充分配给的开关<xref:System.AppContext>通过读取注册表和应用程序的配置文件的实例。</span><span class="sxs-lookup"><span data-stu-id="1f434-236">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="1f434-237">然后可以重写这些开关的值，并添加新的开关，通过调用<xref:System.AppContext.SetSwitch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="1f434-237">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 <span data-ttu-id="1f434-238">一个库调用<xref:System.AppContext.TryGetSwitch%2A>方法来检查其使用者是否已声明该开关的值，然后对其进行适当地处理。</span><span class="sxs-lookup"><span data-stu-id="1f434-238">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span>  <span data-ttu-id="1f434-239">默认情况下，如果未定义该交换机，新功能被启用...</span><span class="sxs-lookup"><span data-stu-id="1f434-239">By default, if the switch is not defined, the new functionality is enabled..</span></span> <span data-ttu-id="1f434-240">如果定义了开关，其值为`false`，也可以启用新功能。</span><span class="sxs-lookup"><span data-stu-id="1f434-240">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="1f434-241">如果其值为`true`，启用旧行为。</span><span class="sxs-lookup"><span data-stu-id="1f434-241">If its value is `true`, the legacy behavior is enabled.</span></span>



## Examples
 <span data-ttu-id="1f434-242">下面的示例确定库使用者是否已将名为的交换机设置`Switch.AmazingLib.ThrowOnException`。</span><span class="sxs-lookup"><span data-stu-id="1f434-242">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f434-243"><paramref name="switchName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-243"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f434-244"><paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="1f434-244"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
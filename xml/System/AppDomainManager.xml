<Type Name="AppDomainManager" FullName="System.AppDomainManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3660a95f090568736272c604496a87dbf44df3dd" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70594568" /></Metadata><TypeSignature Language="C#" Value="public class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppDomainManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.AppDomainManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AppDomainManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type AppDomainManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0d00c-101">提供非托管宿主的托管等效项。</span><span class="sxs-lookup"><span data-stu-id="0d00c-101">Provides a managed equivalent of an unmanaged host.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="0d00c-102">不要使用<xref:System.AppDomainManager>在 ASP.NET 中配置应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-102">Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET.</span></span> <span data-ttu-id="0d00c-103">在 ASP.NET 中，必须由主机处理配置。</span><span class="sxs-lookup"><span data-stu-id="0d00c-103">In ASP.NET, configuration must be handled by the host.</span></span>  
  
 <span data-ttu-id="0d00c-104">通过实现<xref:System.AppDomainManager>类，宿主应用程序可以参与创建新的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-104">Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains.</span></span> <span data-ttu-id="0d00c-105">若要替换默认<xref:System.AppDomainManager>值，请在 APPDOMAIN_MANAGER_ASM 和 APPDOMAIN_MANAGER_TYPE 环境<xref:System.AppDomainManager> [ \<](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)变量中标识替换项的程序集和类型，或使用 b l y > 和y p e 配置文件中的元素 >。 [ \<](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</span><span class="sxs-lookup"><span data-stu-id="0d00c-105">To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file.</span></span> <span data-ttu-id="0d00c-106">该程序集必须是完全受信任的，并且包含在全局程序集缓存或启动应用程序的目录中。</span><span class="sxs-lookup"><span data-stu-id="0d00c-106">The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application.</span></span> <span data-ttu-id="0d00c-107">在环境变量中必须完全限定类型名称和程序集名称。</span><span class="sxs-lookup"><span data-stu-id="0d00c-107">The type and assembly names must be fully qualified in the environment variables.</span></span> <span data-ttu-id="0d00c-108">例如:</span><span class="sxs-lookup"><span data-stu-id="0d00c-108">For example:</span></span>  
  
 `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  
  
 `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  
  
> [!IMPORTANT]
>  <span data-ttu-id="0d00c-109">如果包含的<xref:System.AppDomainManager>子类的程序集依赖于用条件<xref:System.Security.AllowPartiallyTrustedCallersAttribute> （APTCA）特性标记的程序集，则必须将这些程序集包含在传递到的<xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A>  <xref:System.AppDomainSetup> 属性的列表中。使用创建应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-109">If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains.</span></span> <span data-ttu-id="0d00c-110">否则，将禁用用条件 APTCA 特性标记的程序集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-110">Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.</span></span>  
  
 <span data-ttu-id="0d00c-111"><xref:System.AppDomainManager>是非托管宿主的托管等效项。</span><span class="sxs-lookup"><span data-stu-id="0d00c-111">The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host.</span></span> <span data-ttu-id="0d00c-112">对象参与在进程中创建新的应用程序域，并可以在运行其他托管<xref:System.AppDomain>代码之前自定义新的。 <xref:System.AppDomainManager></span><span class="sxs-lookup"><span data-stu-id="0d00c-112">An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs.</span></span> <span data-ttu-id="0d00c-113">还<xref:System.AppDomainManager>可以提供参与公共语言运行时执行的其他方面的主机管理器。</span><span class="sxs-lookup"><span data-stu-id="0d00c-113">The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution.</span></span> <span data-ttu-id="0d00c-114">例如， <xref:System.AppDomainManager>可以<xref:System.Security.HostSecurityManager>标识参与应用程序域的安全决策的对象。</span><span class="sxs-lookup"><span data-stu-id="0d00c-114">For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d00c-115">仅`FullTrust`授予的程序集（例如全局程序集缓存中的程序集`fullTrustAssemblies`或在<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中标识为的程序<xref:System.AppDomainManager.%23ctor%2A>集） <xref:System.AppDomainManager.InitializeNewDomain%2A>可以在构造函数和方法中加载。</span><span class="sxs-lookup"><span data-stu-id="0d00c-115">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d00c-116">此类包含类级别的链接要求和继承要求。</span><span class="sxs-lookup"><span data-stu-id="0d00c-116">This class contains a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="0d00c-117">当直接调用方或派生类没有基础结构权限时，将引发。 <xref:System.Security.SecurityException></span><span class="sxs-lookup"><span data-stu-id="0d00c-117">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission.</span></span> <span data-ttu-id="0d00c-118">有关安全要求的详细信息，请参阅[链接要求](~/docs/framework/misc/link-demands.md)和[继承要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="0d00c-118">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d00c-119">下面的示例演示的<xref:System.AppDomainManager>实现非常简单。</span><span class="sxs-lookup"><span data-stu-id="0d00c-119">The following example shows a very simple implementation of <xref:System.AppDomainManager>.</span></span>  
  
 [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]
 [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.Security.SecurityException"><span data-ttu-id="0d00c-120">调用方没有正确的权限。</span><span class="sxs-lookup"><span data-stu-id="0d00c-120">The caller does not have the correct permissions.</span></span> <span data-ttu-id="0d00c-121">请参阅“要求”部分。</span><span class="sxs-lookup"><span data-stu-id="0d00c-121">See the Requirements section.</span></span></exception>
    <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="0d00c-122">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="0d00c-122">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="0d00c-123">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="0d00c-123">This member cannot be used by partially trusted or transparent code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="0d00c-124">用于将可执行代码插入到公共语言运行时承载基础结构的派生类。</span><span class="sxs-lookup"><span data-stu-id="0d00c-124">for derived classes to plug executable code into the common language runtime hosting infrastructure.</span></span> <span data-ttu-id="0d00c-125">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />。</span><span class="sxs-lookup"><span data-stu-id="0d00c-125">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppDomainManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomainManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0d00c-126">初始化 <see cref="T:System.AppDomainManager" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0d00c-126">Initializes a new instance of the <see cref="T:System.AppDomainManager" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="0d00c-127">仅`FullTrust`授予的程序集（例如全局程序集缓存中的程序集`fullTrustAssemblies`或在<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中标识为的程序<xref:System.AppDomainManager.%23ctor%2A>集） <xref:System.AppDomainManager.InitializeNewDomain%2A>可以在构造函数和方法中加载。</span><span class="sxs-lookup"><span data-stu-id="0d00c-127">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="0d00c-128">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="0d00c-128">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="0d00c-129">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="0d00c-129">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationActivator">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Hosting.ApplicationActivator ApplicationActivator" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.ApplicationActivator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ApplicationActivator As ApplicationActivator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::Hosting::ApplicationActivator ^ ApplicationActivator { System::Runtime::Hosting::ApplicationActivator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationActivator : System.Runtime.Hosting.ApplicationActivator" Usage="System.AppDomainManager.ApplicationActivator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Hosting.ApplicationActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d00c-130">获取应用程序激活器，该激活器用于激活相应域中的外接程序和基于清单的应用程序。</span><span class="sxs-lookup"><span data-stu-id="0d00c-130">Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.</span></span></summary>
        <value><span data-ttu-id="0d00c-131">应用程序激活器。</span><span class="sxs-lookup"><span data-stu-id="0d00c-131">The application activator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-132">在每个<xref:System.Runtime.Hosting.ApplicationActivator> <xref:System.AppDomain>中，有一个类的单个指定实例，所有加载项和基于清单的应用程序激活调用都路由到该实例。</span><span class="sxs-lookup"><span data-stu-id="0d00c-132">There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed.</span></span> <span data-ttu-id="0d00c-133">当前的可以提供自己的自定义<xref:System.Runtime.Hosting.ApplicationActivator>，或创建默认<xref:System.Runtime.Hosting.ApplicationActivator>的实例。 <xref:System.AppDomain> <xref:System.AppDomainManager></span><span class="sxs-lookup"><span data-stu-id="0d00c-133">The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecuritySettings">
      <MemberSignature Language="C#" Value="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckSecuritySettings(class System.Security.SecurityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSecuritySettings (state As SecurityState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckSecuritySettings(System::Security::SecurityState ^ state);" />
      <MemberSignature Language="F#" Value="abstract member CheckSecuritySettings : System.Security.SecurityState -&gt; bool&#xA;override this.CheckSecuritySettings : System.Security.SecurityState -&gt; bool" Usage="appDomainManager.CheckSecuritySettings state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.SecurityState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="0d00c-134"><see cref="T:System.Security.SecurityState" /> 的一个子类，用来标识请求其安全状态的操作。</span><span class="sxs-lookup"><span data-stu-id="0d00c-134">A subclass of <see cref="T:System.Security.SecurityState" /> that identifies the operation whose security status is requested.</span></span></param>
        <summary><span data-ttu-id="0d00c-135">指示是否允许在应用程序域中执行指定的操作。</span><span class="sxs-lookup"><span data-stu-id="0d00c-135">Indicates whether the specified operation is allowed in the application domain.</span></span></summary>
        <returns><span data-ttu-id="0d00c-136">如果宿主允许在应用程序域中执行 <paramref name="state" /> 指定的操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0d00c-136"><see langword="true" /> if the host allows the operation specified by <paramref name="state" /> to be performed in the application domain; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-137">此方法的默认实现返回`false`。</span><span class="sxs-lookup"><span data-stu-id="0d00c-137">The default implementation of this method returns `false`.</span></span>  
  
 <span data-ttu-id="0d00c-138">调用<xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType>方法以增加独立存储配额时，将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="0d00c-138">This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType> method has been called to increase the isolated storage quota.</span></span> <span data-ttu-id="0d00c-139">托管公共语言运行时（CLR）的应用程序可以重写<xref:System.AppDomainManager.CheckSecuritySettings%2A>方法以基于<xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState>对象（继承<xref:System.Security.SecurityState>）执行策略决策，然后可以允许或阻止增加。</span><span class="sxs-lookup"><span data-stu-id="0d00c-139">An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase.</span></span> <span data-ttu-id="0d00c-140">例如，主机可能会提示最终用户批准或拒绝增加配额的请求。</span><span class="sxs-lookup"><span data-stu-id="0d00c-140">For example, a host could prompt the end user to approve or deny the request to increase the quota.</span></span> <span data-ttu-id="0d00c-141">主机的实现<xref:System.AppDomainManager.CheckSecuritySettings%2A>应考虑拒绝服务攻击的可能性。</span><span class="sxs-lookup"><span data-stu-id="0d00c-141">The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks.</span></span> <span data-ttu-id="0d00c-142">例如，只有在用户启动的事件（例如按钮单击）中调用方法时，才应提示用户。</span><span class="sxs-lookup"><span data-stu-id="0d00c-142">For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDomain (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain&#xA;override this.CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="appDomainManager.CreateDomain (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="0d00c-143">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="0d00c-143">The friendly name of the domain.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="0d00c-144">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-144">An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</span></span></param>
        <param name="appDomainInfo"><span data-ttu-id="0d00c-145">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="0d00c-145">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="0d00c-146">返回新的或现有的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-146">Returns a new or existing application domain.</span></span></summary>
        <returns><span data-ttu-id="0d00c-147">新的或现有的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-147">A new or existing application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-148">由`friendlyName`参数指定的友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-148">The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="0d00c-149">有关更多信息，请参见 <xref:System.AppDomain.FriendlyName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="0d00c-149">For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.</span></span>  
  
 <span data-ttu-id="0d00c-150">默认<xref:System.AppDomainManager.CreateDomain%2A>方法调用受保护<xref:System.AppDomainManager.CreateDomainHelper%2A>的方法来创建<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="0d00c-150">The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>.</span></span> <span data-ttu-id="0d00c-151">此方法的重写不需要调用方法， <xref:System.AppDomainManager.CreateDomainHelper%2A>但可以返回现有域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-151">Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0d00c-152">当从<see cref="T:System.AppDomainManager" />类继承并重<see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />写方法时，可以在调用<see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />方法之前执行自定义应用程序域初始化活动，或者根本不调用帮助程序方法。</span><span class="sxs-lookup"><span data-stu-id="0d00c-152">When you inherit from the <see cref="T:System.AppDomainManager" /> class and override the <see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, you can perform custom application domain initialization activities before calling the <see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, or not call the helper method at all.</span></span>  <span data-ttu-id="0d00c-153">例如，你可以修改作为<paramref name="securityInfo" />传入的证据，更新关联<see cref="T:System.AppDomainSetup" />的字段，或重复使用现有域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-153">For example, you could modify the evidence passed in as <paramref name="securityInfo" />, update the fields of the associated <see cref="T:System.AppDomainSetup" />, or reuse an exiting domain.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateDomainHelper">
      <MemberSignature Language="C#" Value="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDomainHelper (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static AppDomain ^ CreateDomainHelper(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="static member CreateDomainHelper : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="System.AppDomainManager.CreateDomainHelper (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="0d00c-154">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="0d00c-154">The friendly name of the domain.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="0d00c-155">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-155">An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</span></span></param>
        <param name="appDomainInfo"><span data-ttu-id="0d00c-156">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="0d00c-156">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="0d00c-157">提供帮助器方法以创建一个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-157">Provides a helper method to create an application domain.</span></span></summary>
        <returns><span data-ttu-id="0d00c-158">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-158">A newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-159">此受保护的帮助器方法会处理新的应用程序域的创建。</span><span class="sxs-lookup"><span data-stu-id="0d00c-159">This protected helper method handles the creation of a new application domain.</span></span>  
  
 <span data-ttu-id="0d00c-160">此友好名称由`friendlyName`参数指定，可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-160">This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="0d00c-161">有关更多信息，请参见 <xref:System.AppDomain.FriendlyName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="0d00c-161">For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0d00c-162"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0d00c-162"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="0d00c-163">用于控制证据。</span><span class="sxs-lookup"><span data-stu-id="0d00c-163">for controlling evidence.</span></span> <span data-ttu-id="0d00c-164">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="0d00c-164">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span> <span data-ttu-id="0d00c-165">关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="0d00c-165">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly EntryAssembly" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.EntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ EntryAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryAssembly : System.Reflection.Assembly" Usage="System.AppDomainManager.EntryAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d00c-166">获取应用程序的入口程序集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-166">Gets the entry assembly for an application.</span></span></summary>
        <value><span data-ttu-id="0d00c-167">应用程序的入口程序集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-167">The entry assembly for the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-168">如果应用程序是清单激活的应用程序，则会从应用程序清单确定条目程序集。</span><span class="sxs-lookup"><span data-stu-id="0d00c-168">If the application is a manifest-activated application, the entry assembly is determined from the application manifest.</span></span> <span data-ttu-id="0d00c-169">如果应用程序未激活清单，则入口程序集是默认应用程序域中的进程可执行文件。</span><span class="sxs-lookup"><span data-stu-id="0d00c-169">If the application is not manifest activated, the entry assembly is the process executable in the default application domain.</span></span> <span data-ttu-id="0d00c-170">在其他应用程序域中，入口程序集是<xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType>方法执行的第一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="0d00c-170">In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostExecutionContextManager">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostExecutionContextManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostExecutionContextManager As HostExecutionContextManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::HostExecutionContextManager ^ HostExecutionContextManager { System::Threading::HostExecutionContextManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostExecutionContextManager : System.Threading.HostExecutionContextManager" Usage="System.AppDomainManager.HostExecutionContextManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContextManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d00c-171">获取宿主执行上下文管理器，该管理器对执行上下文的流进行管理。</span><span class="sxs-lookup"><span data-stu-id="0d00c-171">Gets the host execution context manager that manages the flow of the execution context.</span></span></summary>
        <value><span data-ttu-id="0d00c-172">宿主执行上下文管理器。</span><span class="sxs-lookup"><span data-stu-id="0d00c-172">The host execution context manager.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-173">此属性允许主机提供<xref:System.Threading.HostExecutionContextManager> ，它可以在异步调用之间参与执行上下文的流动。</span><span class="sxs-lookup"><span data-stu-id="0d00c-173">This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostSecurityManager">
      <MemberSignature Language="C#" Value="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.HostSecurityManager HostSecurityManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostSecurityManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostSecurityManager As HostSecurityManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::HostSecurityManager ^ HostSecurityManager { System::Security::HostSecurityManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostSecurityManager : System.Security.HostSecurityManager" Usage="System.AppDomainManager.HostSecurityManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.HostSecurityManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d00c-174">获取宿主安全管理器，该管理器参与应用程序域的安全决策。</span><span class="sxs-lookup"><span data-stu-id="0d00c-174">Gets the host security manager that participates in security decisions for the application domain.</span></span></summary>
        <value><span data-ttu-id="0d00c-175">宿主安全管理器。</span><span class="sxs-lookup"><span data-stu-id="0d00c-175">The host security manager.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d00c-176">此属性允许主机提供<xref:System.Security.HostSecurityManager>以参与应用程序域的安全决策。</span><span class="sxs-lookup"><span data-stu-id="0d00c-176">This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d00c-177">下面的示例演示了自定义应用<xref:System.AppDomainManager.HostSecurityManager%2A>程序域管理器的属性的重写。</span><span class="sxs-lookup"><span data-stu-id="0d00c-177">The following example shows an override of the <xref:System.AppDomainManager.HostSecurityManager%2A> property for a custom application domain manager.</span></span> <span data-ttu-id="0d00c-178">此代码示例是为<xref:System.AppDomainManager>类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0d00c-178">This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.</span></span>  
  
 [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]
 [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationFlags">
      <MemberSignature Language="C#" Value="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.InitializationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property InitializationFlags As AppDomainManagerInitializationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManagerInitializationOptions InitializationFlags { AppDomainManagerInitializationOptions get(); void set(AppDomainManagerInitializationOptions value); };" />
      <MemberSignature Language="F#" Value="member this.InitializationFlags : AppDomainManagerInitializationOptions with get, set" Usage="System.AppDomainManager.InitializationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManagerInitializationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d00c-179">获取自定义应用程序域管理器的初始化标志。</span><span class="sxs-lookup"><span data-stu-id="0d00c-179">Gets the initialization flags for custom application domain managers.</span></span></summary>
        <value><span data-ttu-id="0d00c-180">枚举值的按位组合，这些枚举值描述要执行的初始化操作。</span><span class="sxs-lookup"><span data-stu-id="0d00c-180">A bitwise combination of the enumeration values that describe the initialization action to perform.</span></span> <span data-ttu-id="0d00c-181">默认值为 <see cref="F:System.AppDomainManagerInitializationOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="0d00c-181">The default is <see cref="F:System.AppDomainManagerInitializationOptions.None" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeNewDomain">
      <MemberSignature Language="C#" Value="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitializeNewDomain (appDomainInfo As AppDomainSetup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitializeNewDomain(AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member InitializeNewDomain : AppDomainSetup -&gt; unit&#xA;override this.InitializeNewDomain : AppDomainSetup -&gt; unit" Usage="appDomainManager.InitializeNewDomain appDomainInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="appDomainInfo"><span data-ttu-id="0d00c-182">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="0d00c-182">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="0d00c-183">初始化新应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-183">Initializes the new application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="0d00c-184">不要使用此方法初始化 ASP.NET 中的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-184">Do not use this method to initialize an application domain in ASP.NET.</span></span> <span data-ttu-id="0d00c-185">在 ASP.NET 中，必须由主机处理配置。</span><span class="sxs-lookup"><span data-stu-id="0d00c-185">In ASP.NET, configuration must be handled by the host.</span></span> <span data-ttu-id="0d00c-186">如果使用此方法初始化应用程序域，则在尝试初始化应用<xref:System.InvalidOperationException>程序域时，主机将引发。</span><span class="sxs-lookup"><span data-stu-id="0d00c-186">If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain.</span></span> <span data-ttu-id="0d00c-187">异常消息指示已进行了初始化。</span><span class="sxs-lookup"><span data-stu-id="0d00c-187">The exception message indicates that initialization has already occurred.</span></span>  
  
 <span data-ttu-id="0d00c-188">此方法在构造函数之后立即调用。</span><span class="sxs-lookup"><span data-stu-id="0d00c-188">This method is called immediately after the constructor.</span></span> <span data-ttu-id="0d00c-189">默认<xref:System.AppDomainManager.InitializeNewDomain%2A>实现不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="0d00c-189">The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.</span></span>  <span data-ttu-id="0d00c-190">自定义实现可以设置内部类和委托，设置具有非托管主机接口的接口，或设置新<xref:System.AppDomain>的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="0d00c-190">A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="0d00c-191">此外，对于外接程序激活，自定义实现可将当前<xref:System.AppDomain>标识为目标应用程序域。</span><span class="sxs-lookup"><span data-stu-id="0d00c-191">Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.</span></span>  
  
 <span data-ttu-id="0d00c-192">从开始，可以使用此方法在应用程序启动时将默认应用程序域沙盒，或修改新应用程序域的沙箱。 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="0d00c-192">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain.</span></span> <span data-ttu-id="0d00c-193">为此，请在初始化<xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A>应用<xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A>程序域之前<xref:System.Security.Policy.ApplicationTrust> ，调整分配给<xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType>的属性`appDomainInfo`的对象的和属性。</span><span class="sxs-lookup"><span data-stu-id="0d00c-193">To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType> property of `appDomainInfo`, before you initialize the application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d00c-194">仅`FullTrust`授予的程序集（例如全局程序集缓存中的程序集`fullTrustAssemblies`或在<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中标识为的程序<xref:System.AppDomainManager.%23ctor%2A>集） <xref:System.AppDomainManager.InitializeNewDomain%2A>可以在构造函数和方法中加载。</span><span class="sxs-lookup"><span data-stu-id="0d00c-194">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d00c-195">下面的示例演示了对自定义<xref:System.AppDomainManager.InitializeNewDomain%2A>应用程序域管理器的方法的重写。</span><span class="sxs-lookup"><span data-stu-id="0d00c-195">The following example shows an override of the <xref:System.AppDomainManager.InitializeNewDomain%2A> method for a custom application domain manager.</span></span> <span data-ttu-id="0d00c-196">此代码示例是为<xref:System.AppDomainManager>类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0d00c-196">This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.</span></span>  
  
 [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]
 [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="AppDomainManager" FullName="System.AppDomainManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="24a805a0b0915703f76ce18aa4357573e7e7239c" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64238261" /></Metadata><TypeSignature Language="C#" Value="public class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppDomainManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.AppDomainManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AppDomainManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type AppDomainManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f6435-101">提供非托管宿主的托管等效项。</span><span class="sxs-lookup"><span data-stu-id="f6435-101">Provides a managed equivalent of an unmanaged host.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="f6435-102">不要使用<xref:System.AppDomainManager>在 ASP.NET 中配置应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-102">Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET.</span></span> <span data-ttu-id="f6435-103">在 ASP.NET 中，配置必须由主机处理。</span><span class="sxs-lookup"><span data-stu-id="f6435-103">In ASP.NET, configuration must be handled by the host.</span></span>  
  
 <span data-ttu-id="f6435-104">实现<xref:System.AppDomainManager>类可以参与新的应用程序域的创建将托管应用程序。</span><span class="sxs-lookup"><span data-stu-id="f6435-104">Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains.</span></span> <span data-ttu-id="f6435-105">若要替换默认<xref:System.AppDomainManager>，确定程序集和替换的类型<xref:System.AppDomainManager>APPDOMAIN_MANAGER_ASM 和 APPDOMAIN_MANAGER_TYPE 环境变量，或使用[ \<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)并[ \<appDomainManagerType >](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)配置文件中的元素。</span><span class="sxs-lookup"><span data-stu-id="f6435-105">To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file.</span></span> <span data-ttu-id="f6435-106">程序集必须是完全受信任，并且包含在全局程序集缓存或起始应用程序的目录。</span><span class="sxs-lookup"><span data-stu-id="f6435-106">The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application.</span></span> <span data-ttu-id="f6435-107">必须在环境变量中完全限定的类型和程序集名称。</span><span class="sxs-lookup"><span data-stu-id="f6435-107">The type and assembly names must be fully qualified in the environment variables.</span></span> <span data-ttu-id="f6435-108">例如:</span><span class="sxs-lookup"><span data-stu-id="f6435-108">For example:</span></span>  
  
 `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  
  
 `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  
  
> [!IMPORTANT]
>  <span data-ttu-id="f6435-109">如果该程序集包含的子类<xref:System.AppDomainManager>取决于标记的条件性程序集<xref:System.Security.AllowPartiallyTrustedCallersAttribute>(APTCA) 特性，您必须将传递到列表中包含这些程序集<xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A>属性<xref:System.AppDomainSetup>用来创建应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-109">If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains.</span></span> <span data-ttu-id="f6435-110">否则，使用条件性 APTCA 特性标记的程序集将被禁用。</span><span class="sxs-lookup"><span data-stu-id="f6435-110">Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.</span></span>  
  
 <span data-ttu-id="f6435-111"><xref:System.AppDomainManager>为非托管主机的托管等效项。</span><span class="sxs-lookup"><span data-stu-id="f6435-111">The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host.</span></span> <span data-ttu-id="f6435-112"><xref:System.AppDomainManager>对象参与的进程中的新应用程序域的创建，并可以自定义新<xref:System.AppDomain>其他托管的代码运行之前。</span><span class="sxs-lookup"><span data-stu-id="f6435-112">An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs.</span></span> <span data-ttu-id="f6435-113"><xref:System.AppDomainManager>还可以提供主机管理器，从而参与公共语言运行时执行的其他方面。</span><span class="sxs-lookup"><span data-stu-id="f6435-113">The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution.</span></span> <span data-ttu-id="f6435-114">例如，<xref:System.AppDomainManager>可识别<xref:System.Security.HostSecurityManager>参与应用程序域的安全决定的对象。</span><span class="sxs-lookup"><span data-stu-id="f6435-114">For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f6435-115">只有程序集授予`FullTrust`，例如全局程序集缓存中的程序集还是已标识为`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中加载<xref:System.AppDomainManager.%23ctor%2A>构造函数和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-115">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f6435-116">此类包含一个链接要求和在类级别继承要求。</span><span class="sxs-lookup"><span data-stu-id="f6435-116">This class contains a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="f6435-117">一个<xref:System.Security.SecurityException>直接调用方或派生的类不包含基础结构权限时引发。</span><span class="sxs-lookup"><span data-stu-id="f6435-117">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission.</span></span> <span data-ttu-id="f6435-118">有关安全要求的详细信息，请参阅[链接需求](~/docs/framework/misc/link-demands.md)并[继承需求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="f6435-118">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6435-119">下面的示例演示一个非常简单的实现<xref:System.AppDomainManager>。</span><span class="sxs-lookup"><span data-stu-id="f6435-119">The following example shows a very simple implementation of <xref:System.AppDomainManager>.</span></span>  
  
 [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]
 [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f6435-120">调用方没有正确的权限。</span><span class="sxs-lookup"><span data-stu-id="f6435-120">The caller does not have the correct permissions.</span></span> <span data-ttu-id="f6435-121">请参阅“要求”部分。</span><span class="sxs-lookup"><span data-stu-id="f6435-121">See the Requirements section.</span></span></exception>
    <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f6435-122">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="f6435-122">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f6435-123">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f6435-123">This member cannot be used by partially trusted or transparent code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="f6435-124">为派生类，以可执行代码插入公共语言运行时托管基础结构。</span><span class="sxs-lookup"><span data-stu-id="f6435-124">for derived classes to plug executable code into the common language runtime hosting infrastructure.</span></span> <span data-ttu-id="f6435-125">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />。</span><span class="sxs-lookup"><span data-stu-id="f6435-125">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppDomainManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomainManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f6435-126">初始化 <see cref="T:System.AppDomainManager" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f6435-126">Initializes a new instance of the <see cref="T:System.AppDomainManager" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f6435-127">只有程序集授予`FullTrust`，例如全局程序集缓存中的程序集还是已标识为`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中加载<xref:System.AppDomainManager.%23ctor%2A>构造函数和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-127">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="f6435-128">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="f6435-128">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="f6435-129">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="f6435-129">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationActivator">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Hosting.ApplicationActivator ApplicationActivator" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.ApplicationActivator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ApplicationActivator As ApplicationActivator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::Hosting::ApplicationActivator ^ ApplicationActivator { System::Runtime::Hosting::ApplicationActivator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationActivator : System.Runtime.Hosting.ApplicationActivator" Usage="System.AppDomainManager.ApplicationActivator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Hosting.ApplicationActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6435-130">获取应用程序激活器，该激活器用于激活相应域中的外接程序和基于清单的应用程序。</span><span class="sxs-lookup"><span data-stu-id="f6435-130">Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.</span></span></summary>
        <value><span data-ttu-id="f6435-131">应用程序激活器。</span><span class="sxs-lookup"><span data-stu-id="f6435-131">The application activator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-132">没有指定的单一实例<xref:System.Runtime.Hosting.ApplicationActivator>中每个类<xref:System.AppDomain>激活调用路由到的所有外接程序和基于清单的应用程序。</span><span class="sxs-lookup"><span data-stu-id="f6435-132">There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed.</span></span> <span data-ttu-id="f6435-133"><xref:System.AppDomainManager>为当前<xref:System.AppDomain>可以提供其自己的自定义<xref:System.Runtime.Hosting.ApplicationActivator>，或默认值的实例<xref:System.Runtime.Hosting.ApplicationActivator>创建。</span><span class="sxs-lookup"><span data-stu-id="f6435-133">The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecuritySettings">
      <MemberSignature Language="C#" Value="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckSecuritySettings(class System.Security.SecurityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSecuritySettings (state As SecurityState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckSecuritySettings(System::Security::SecurityState ^ state);" />
      <MemberSignature Language="F#" Value="abstract member CheckSecuritySettings : System.Security.SecurityState -&gt; bool&#xA;override this.CheckSecuritySettings : System.Security.SecurityState -&gt; bool" Usage="appDomainManager.CheckSecuritySettings state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.SecurityState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="f6435-134"><see cref="T:System.Security.SecurityState" /> 的一个子类，用来标识请求其安全状态的操作。</span><span class="sxs-lookup"><span data-stu-id="f6435-134">A subclass of <see cref="T:System.Security.SecurityState" /> that identifies the operation whose security status is requested.</span></span></param>
        <summary><span data-ttu-id="f6435-135">指示是否允许在应用程序域中执行指定的操作。</span><span class="sxs-lookup"><span data-stu-id="f6435-135">Indicates whether the specified operation is allowed in the application domain.</span></span></summary>
        <returns><span data-ttu-id="f6435-136">如果宿主允许在应用程序域中执行 <paramref name="state" /> 指定的操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6435-136"><see langword="true" /> if the host allows the operation specified by <paramref name="state" /> to be performed in the application domain; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-137">此方法的默认实现返回`false`。</span><span class="sxs-lookup"><span data-stu-id="f6435-137">The default implementation of this method returns `false`.</span></span>  
  
 <span data-ttu-id="f6435-138">将调用此方法<xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType>调用方法来增加独立的存储配额。</span><span class="sxs-lookup"><span data-stu-id="f6435-138">This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType> method has been called to increase the isolated storage quota.</span></span> <span data-ttu-id="f6435-139">承载公共语言运行时 (CLR) 的应用程序可以重写<xref:System.AppDomainManager.CheckSecuritySettings%2A>方法来执行策略决策基于<xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState>对象 (其继承<xref:System.Security.SecurityState>)，并可以然后允许或禁止增加。</span><span class="sxs-lookup"><span data-stu-id="f6435-139">An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase.</span></span> <span data-ttu-id="f6435-140">例如，主机可能提示最终用户来批准或拒绝请求增加配额。</span><span class="sxs-lookup"><span data-stu-id="f6435-140">For example, a host could prompt the end user to approve or deny the request to increase the quota.</span></span> <span data-ttu-id="f6435-141">主机的实现<xref:System.AppDomainManager.CheckSecuritySettings%2A>应考虑到拒绝服务攻击的可能性。</span><span class="sxs-lookup"><span data-stu-id="f6435-141">The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks.</span></span> <span data-ttu-id="f6435-142">例如，它应提示用户，仅当用户启动的事件中调用该方法，如按钮单击。</span><span class="sxs-lookup"><span data-stu-id="f6435-142">For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDomain (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain&#xA;override this.CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="appDomainManager.CreateDomain (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="f6435-143">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="f6435-143">The friendly name of the domain.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="f6435-144">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</span><span class="sxs-lookup"><span data-stu-id="f6435-144">An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</span></span></param>
        <param name="appDomainInfo"><span data-ttu-id="f6435-145">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f6435-145">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="f6435-146">返回新的或现有的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-146">Returns a new or existing application domain.</span></span></summary>
        <returns><span data-ttu-id="f6435-147">新的或现有的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-147">A new or existing application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-148">指定的友好名称`friendlyName`参数，可以显示在用户界面，以标识域中。</span><span class="sxs-lookup"><span data-stu-id="f6435-148">The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="f6435-149">有关更多信息，请参见 <xref:System.AppDomain.FriendlyName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="f6435-149">For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.</span></span>  
  
 <span data-ttu-id="f6435-150">默认值<xref:System.AppDomainManager.CreateDomain%2A>方法调用受保护<xref:System.AppDomainManager.CreateDomainHelper%2A>方法来创建<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="f6435-150">The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>.</span></span> <span data-ttu-id="f6435-151">重写此方法不需要调用<xref:System.AppDomainManager.CreateDomainHelper%2A>方法，但可以返回现有域。</span><span class="sxs-lookup"><span data-stu-id="f6435-151">Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f6435-152">继承自<see cref="T:System.AppDomainManager" />类并重写<see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />方法，您可以执行自定义应用程序域初始化活动之前调用<see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />方法或不调用根本的帮助器方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-152">When you inherit from the <see cref="T:System.AppDomainManager" /> class and override the <see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, you can perform custom application domain initialization activities before calling the <see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, or not call the helper method at all.</span></span>  <span data-ttu-id="f6435-153">例如，可以修改作为传递的证据<paramref name="securityInfo" />，更新关联的字段<see cref="T:System.AppDomainSetup" />，或重复使用现有的域。</span><span class="sxs-lookup"><span data-stu-id="f6435-153">For example, you could modify the evidence passed in as <paramref name="securityInfo" />, update the fields of the associated <see cref="T:System.AppDomainSetup" />, or reuse an exiting domain.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateDomainHelper">
      <MemberSignature Language="C#" Value="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDomainHelper (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static AppDomain ^ CreateDomainHelper(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="static member CreateDomainHelper : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="System.AppDomainManager.CreateDomainHelper (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="f6435-154">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="f6435-154">The friendly name of the domain.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="f6435-155">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</span><span class="sxs-lookup"><span data-stu-id="f6435-155">An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</span></span></param>
        <param name="appDomainInfo"><span data-ttu-id="f6435-156">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f6435-156">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="f6435-157">提供帮助器方法以创建一个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-157">Provides a helper method to create an application domain.</span></span></summary>
        <returns><span data-ttu-id="f6435-158">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-158">A newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-159">此受保护的帮助器方法处理新的应用程序域的创建。</span><span class="sxs-lookup"><span data-stu-id="f6435-159">This protected helper method handles the creation of a new application domain.</span></span>  
  
 <span data-ttu-id="f6435-160">此友好名称，由指定`friendlyName`参数，可以显示在用户界面，以标识域中。</span><span class="sxs-lookup"><span data-stu-id="f6435-160">This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="f6435-161">有关更多信息，请参见 <xref:System.AppDomain.FriendlyName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="f6435-161">For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f6435-162"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f6435-162"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="f6435-163">用于控制证据。</span><span class="sxs-lookup"><span data-stu-id="f6435-163">for controlling evidence.</span></span> <span data-ttu-id="f6435-164">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="f6435-164">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span> <span data-ttu-id="f6435-165">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="f6435-165">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly EntryAssembly" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.EntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ EntryAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryAssembly : System.Reflection.Assembly" Usage="System.AppDomainManager.EntryAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6435-166">获取应用程序的入口程序集。</span><span class="sxs-lookup"><span data-stu-id="f6435-166">Gets the entry assembly for an application.</span></span></summary>
        <value><span data-ttu-id="f6435-167">应用程序的入口程序集。</span><span class="sxs-lookup"><span data-stu-id="f6435-167">The entry assembly for the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-168">如果应用程序，清单激活的应用程序的入口程序集由应用程序清单。</span><span class="sxs-lookup"><span data-stu-id="f6435-168">If the application is a manifest-activated application, the entry assembly is determined from the application manifest.</span></span> <span data-ttu-id="f6435-169">如果应用程序不是清单激活，入口程序集是默认应用程序域中的可执行过程。</span><span class="sxs-lookup"><span data-stu-id="f6435-169">If the application is not manifest activated, the entry assembly is the process executable in the default application domain.</span></span> <span data-ttu-id="f6435-170">在其他应用程序域中，输入程序集是由已执行的第一个可执行文件<xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-170">In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostExecutionContextManager">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostExecutionContextManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostExecutionContextManager As HostExecutionContextManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::HostExecutionContextManager ^ HostExecutionContextManager { System::Threading::HostExecutionContextManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostExecutionContextManager : System.Threading.HostExecutionContextManager" Usage="System.AppDomainManager.HostExecutionContextManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContextManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6435-171">获取宿主执行上下文管理器，该管理器对执行上下文的流进行管理。</span><span class="sxs-lookup"><span data-stu-id="f6435-171">Gets the host execution context manager that manages the flow of the execution context.</span></span></summary>
        <value><span data-ttu-id="f6435-172">宿主执行上下文管理器。</span><span class="sxs-lookup"><span data-stu-id="f6435-172">The host execution context manager.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-173">此属性使宿主可以提供<xref:System.Threading.HostExecutionContextManager>，它可参与的执行上下文流跨异步调用。</span><span class="sxs-lookup"><span data-stu-id="f6435-173">This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostSecurityManager">
      <MemberSignature Language="C#" Value="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.HostSecurityManager HostSecurityManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostSecurityManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostSecurityManager As HostSecurityManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::HostSecurityManager ^ HostSecurityManager { System::Security::HostSecurityManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostSecurityManager : System.Security.HostSecurityManager" Usage="System.AppDomainManager.HostSecurityManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.HostSecurityManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6435-174">获取宿主安全管理器，该管理器参与应用程序域的安全决策。</span><span class="sxs-lookup"><span data-stu-id="f6435-174">Gets the host security manager that participates in security decisions for the application domain.</span></span></summary>
        <value><span data-ttu-id="f6435-175">宿主安全管理器。</span><span class="sxs-lookup"><span data-stu-id="f6435-175">The host security manager.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6435-176">此属性使宿主可以提供<xref:System.Security.HostSecurityManager>参与应用程序域的安全决策。</span><span class="sxs-lookup"><span data-stu-id="f6435-176">This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6435-177">下面的示例演示如何重写的<xref:System.AppDomainManager.HostSecurityManager%2A>自定义应用程序域管理器的属性。</span><span class="sxs-lookup"><span data-stu-id="f6435-177">The following example shows an override of the <xref:System.AppDomainManager.HostSecurityManager%2A> property for a custom application domain manager.</span></span> <span data-ttu-id="f6435-178">此代码示例是为提供一个更大示例的一部分<xref:System.AppDomainManager>类。</span><span class="sxs-lookup"><span data-stu-id="f6435-178">This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.</span></span>  
  
 [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]
 [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationFlags">
      <MemberSignature Language="C#" Value="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.InitializationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property InitializationFlags As AppDomainManagerInitializationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManagerInitializationOptions InitializationFlags { AppDomainManagerInitializationOptions get(); void set(AppDomainManagerInitializationOptions value); };" />
      <MemberSignature Language="F#" Value="member this.InitializationFlags : AppDomainManagerInitializationOptions with get, set" Usage="System.AppDomainManager.InitializationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManagerInitializationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6435-179">获取自定义应用程序域管理器的初始化标志。</span><span class="sxs-lookup"><span data-stu-id="f6435-179">Gets the initialization flags for custom application domain managers.</span></span></summary>
        <value><span data-ttu-id="f6435-180">枚举值的按位组合，这些枚举值描述要执行的初始化操作。</span><span class="sxs-lookup"><span data-stu-id="f6435-180">A bitwise combination of the enumeration values that describe the initialization action to perform.</span></span> <span data-ttu-id="f6435-181">默认值为 <see cref="F:System.AppDomainManagerInitializationOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="f6435-181">The default is <see cref="F:System.AppDomainManagerInitializationOptions.None" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeNewDomain">
      <MemberSignature Language="C#" Value="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitializeNewDomain (appDomainInfo As AppDomainSetup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitializeNewDomain(AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member InitializeNewDomain : AppDomainSetup -&gt; unit&#xA;override this.InitializeNewDomain : AppDomainSetup -&gt; unit" Usage="appDomainManager.InitializeNewDomain appDomainInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="appDomainInfo"><span data-ttu-id="f6435-182">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f6435-182">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="f6435-183">初始化新应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-183">Initializes the new application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="f6435-184">不使用此方法来初始化 ASP.NET 中的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-184">Do not use this method to initialize an application domain in ASP.NET.</span></span> <span data-ttu-id="f6435-185">在 ASP.NET 中，配置必须由主机处理。</span><span class="sxs-lookup"><span data-stu-id="f6435-185">In ASP.NET, configuration must be handled by the host.</span></span> <span data-ttu-id="f6435-186">如果使用此方法以初始化应用程序域，主机会引发<xref:System.InvalidOperationException>在尝试初始化应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-186">If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain.</span></span> <span data-ttu-id="f6435-187">异常消息指示已发生的初始化。</span><span class="sxs-lookup"><span data-stu-id="f6435-187">The exception message indicates that initialization has already occurred.</span></span>  
  
 <span data-ttu-id="f6435-188">在构造函数后立即调用此方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-188">This method is called immediately after the constructor.</span></span> <span data-ttu-id="f6435-189">默认值<xref:System.AppDomainManager.InitializeNewDomain%2A>实现不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="f6435-189">The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.</span></span>  <span data-ttu-id="f6435-190">自定义实现可以设置内部的类和委托、 设置非托管的主机接口的接口或设置事件处理程序的新<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="f6435-190">A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="f6435-191">此外，有关外接程序激活的自定义实现无法识别当前<xref:System.AppDomain>作为目标应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-191">Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.</span></span>  
  
 <span data-ttu-id="f6435-192">从[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，可以使用此方法将默认应用程序域沙盒，在应用程序启动或修改新的应用程序域的沙盒。</span><span class="sxs-lookup"><span data-stu-id="f6435-192">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain.</span></span> <span data-ttu-id="f6435-193">若要执行此操作，调整<xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A>并<xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A>上的属性<xref:System.Security.Policy.ApplicationTrust>对象分配给<xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType>属性`appDomainInfo`之前初始化应用程序域。</span><span class="sxs-lookup"><span data-stu-id="f6435-193">To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType> property of `appDomainInfo`, before you initialize the application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f6435-194">只有程序集授予`FullTrust`，例如全局程序集缓存中的程序集还是已标识为`fullTrustAssemblies`中<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法中加载<xref:System.AppDomainManager.%23ctor%2A>构造函数和<xref:System.AppDomainManager.InitializeNewDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-194">Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6435-195">下面的示例演示如何重写的<xref:System.AppDomainManager.InitializeNewDomain%2A>自定义应用程序域管理器的方法。</span><span class="sxs-lookup"><span data-stu-id="f6435-195">The following example shows an override of the <xref:System.AppDomainManager.InitializeNewDomain%2A> method for a custom application domain manager.</span></span> <span data-ttu-id="f6435-196">此代码示例是为提供一个更大示例的一部分<xref:System.AppDomainManager>类。</span><span class="sxs-lookup"><span data-stu-id="f6435-196">This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.</span></span>  
  
 [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]
 [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
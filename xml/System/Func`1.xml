<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12c19fab871127dad68688aaa249b48d82668c35" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70724892" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
    <summary>封装一个不具有参数但却返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
    <returns>此委托封装的方法的返回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此委托来表示一个方法，该方法可作为参数传递，而无需显式声明自定义委托。 封装的方法必须对应于由此委托定义的方法签名。 这意味着封装的方法必须没有任何参数，并且必须返回值。  
  
> [!NOTE]
>  若要引用`void`没有参数并返回（或在 Visual Basic 中声明`Sub`为而不是作为`Function`）的方法，请<xref:System.Action>改用委托。  
  
 使用<xref:System.Func%601>委托时，无需显式定义用于封装无参数方法的委托。 例如，下面的代码显式声明一个名为`WriteMethod`的委托，并将对该`OutputTarget.SendToFile`实例方法的引用分配给它的委托实例。  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 下面的示例通过实例化<xref:System.Func%601>委托来简化此代码，而不是显式定义一个新委托并为其分配一个命名方法。  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 可在中C#将<xref:System.Func%601>委托与匿名方法一起使用，如下面的示例所示。 （有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。）  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 你还可以将 lambda 表达式分配给<xref:System.Func%602>委托，如下面的示例所示。 （有关 lambda 表达式的介绍，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。）  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Lambda 表达式的基础类型是一个泛型`Func`委托。 这样，便可以将 lambda 表达式作为参数传递，而无需将其显式分配给委托。 具体而言，因为<xref:System.Linq>命名空间中的许多类型的方法都有`Func`参数，所以可以将这些方法传递给 lambda `Func`表达式，而无需显式实例化委托。  
  
 如果你有一种开销较高的计算，只需在实际需要结果时执行此计算，你就可以为<xref:System.Func%601>委托分配昂贵的函数。 然后，可以将函数的执行延迟到在表达式中使用访问值的属性。 下一节中的示例演示如何执行此操作。  
  
   
  
## Examples  
 下面的示例演示如何使用不带参数的委托。 此代码创建一个名为`LazyValue`的泛型类，该类具有类型<xref:System.Func%601>为的字段。 此委托字段可以存储对任何函数的引用，该函数返回与`LazyValue`对象的类型参数相对应的类型值。 类型还具有一个`Value`执行函数的属性（如果尚未执行）并返回结果值。 `LazyValue`  
  
 该示例创建两个方法，并`LazyValue`实例化两个对象，其中包含调用这些方法的 lambda 表达式。 Lambda 表达式不采用参数，因为它们只需调用方法。 如输出所示，仅当检索每个`LazyValue`对象的值时，才会执行这两种方法。  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Lambda 表达式（C# 编程指南）</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda 表达式</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">委托（C# 编程指南）</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Visual Basic 中的委托</related>
  </Docs>
</Type>

<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbd87cb9c175eb0c4d5aa893ad32101018b03b5b" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67245151" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="68954-101">提供一种用于异步释放非托管资源的机制。</span><span class="sxs-lookup"><span data-stu-id="68954-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="68954-102">在.NET 中，通常拥有非托管的资源的类实现<xref:System.IDisposable>接口，以提供一种机制用于释放非托管资源，以同步方式。</span><span class="sxs-lookup"><span data-stu-id="68954-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="68954-103">但是，在某些情况下它们需要提供一种异步机制用于释放非托管的资源，除 （或 instead of） 同步的一个。</span><span class="sxs-lookup"><span data-stu-id="68954-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="68954-104">提供此类机制允许使用者而不会阻止很长时间的 GUI 应用程序的主线程执行占用大量资源的释放操作。</span><span class="sxs-lookup"><span data-stu-id="68954-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="68954-105"><xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType>此接口的方法将返回<xref:System.Threading.Tasks.ValueTask>表示异步释放操作。</span><span class="sxs-lookup"><span data-stu-id="68954-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="68954-106">拥有非托管的资源的类实现此方法，并且这些类的使用者在不再需要时在对象上调用此方法。</span><span class="sxs-lookup"><span data-stu-id="68954-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="68954-107">结合使用异步方法`async`并`await`中的关键字C#和 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="68954-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="68954-108">有关更多 insformation，请参阅[中的任务的异步编程模型C#](/dotnet/csharp/programming-guide/concepts/async/index)或[使用 Async 和 Await (Visual Basic 中) 的异步编程](/dotnet/visual-basic/programming-guide/concepts/async/)。</span><span class="sxs-lookup"><span data-stu-id="68954-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="68954-109">使用实现 IAsyncDisposable 的对象</span><span class="sxs-lookup"><span data-stu-id="68954-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="68954-110">如果应用程序使用实现的对象`IAsyncDisposable`，应调用对象的<xref:System.IAsyncDisposable.DisposeAsync%2A>实现完成后使用它。</span><span class="sxs-lookup"><span data-stu-id="68954-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="68954-111">若要确保即使发生异常时释放资源，请调用<xref:System.IAsyncDisposable.DisposeAsync%2A>方法内的`finally`子句`try` / `finally`语句。</span><span class="sxs-lookup"><span data-stu-id="68954-111">To make sure resources are released even in case of an exception, call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="68954-112">有关详细信息`try` / `finally`模式，请参阅[try finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) 或[尝试...Catch...Finally 语句](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)(Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="68954-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="68954-113">实现 IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="68954-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="68954-114">您可能会实现`IAsyncDisposable`在以下情况下：</span><span class="sxs-lookup"><span data-stu-id="68954-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="68954-115">开发的异步枚举器时拥有非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="68954-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="68954-116">异步枚举器使用与C#8.0 异步流功能。</span><span class="sxs-lookup"><span data-stu-id="68954-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="68954-117">有关异步流的详细信息，请参阅[教程：生成和使用异步流使用C#8.0 和.NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)。</span><span class="sxs-lookup"><span data-stu-id="68954-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="68954-118">当您的类拥有非托管的资源并释放它们需要占用大量资源的 I/O 操作，如中间缓冲区的内容刷新到文件或通过网络来关闭连接发送数据包。</span><span class="sxs-lookup"><span data-stu-id="68954-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="68954-119">使用<xref:System.IAsyncDisposable.DisposeAsync%2A>方法来执行任何清理后必须执行使用的非托管的资源，例如释放或重置非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="68954-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="68954-120">有关在.NET 中的非托管资源的详细信息，请参阅[清理了非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="68954-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68954-121">以异步方式执行与释放或重置非托管资源相关的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="68954-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="68954-122">一个表示异步释放操作的任务。</span><span class="sxs-lookup"><span data-stu-id="68954-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="68954-123">使用此方法以异步方式关闭或释放非托管的资源，例如文件、 流和句柄由实现此接口的类的实例。</span><span class="sxs-lookup"><span data-stu-id="68954-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="68954-124">使用此方法，而不是<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>使您可以执行占用大量资源的释放操作，而不会阻止主线程的较长时间的 GUI 应用程序。</span><span class="sxs-lookup"><span data-stu-id="68954-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="68954-125">如果您使用的实现的类<xref:System.IAsyncDisposable>接口，应调用其`DisposeAsync`完后使用类的实现。</span><span class="sxs-lookup"><span data-stu-id="68954-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="68954-126">有关详细信息，请参阅"使用实现 IAsyncDisposable 的对象"一节中<xref:System.IAsyncDisposable>主题。</span><span class="sxs-lookup"><span data-stu-id="68954-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="68954-127">实现此方法时，请确保所有持有中传播的包含层次结构通过调用来释放资源。</span><span class="sxs-lookup"><span data-stu-id="68954-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="68954-128">例如，如果对象 A 分配一个对象 B，并且对象 B 分配对象 C，然后一个`DisposeAsync`实现必须调用`DisposeAsync`在 B 上，这又必须调用`DisposeAsync`上 c。对象还必须调用`DisposeAsync`如果基类实现其基本类的方法<xref:System.IAsyncDisposable>。</span><span class="sxs-lookup"><span data-stu-id="68954-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="68954-129">如果对象的`DisposeAsync`不止一次调用方法，该对象必须忽略在第一个之后的所有调用并以同步方式返回已成功完成<xref:System.Threading.Tasks.ValueTask>。</span><span class="sxs-lookup"><span data-stu-id="68954-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="68954-130">该对象必须引发异常，如果其`DisposeAsync`多次调用方法。</span><span class="sxs-lookup"><span data-stu-id="68954-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="68954-131">不是实例方法`DisposeAsync`可能会引发<xref:System.ObjectDisposedException>已释放资源。</span><span class="sxs-lookup"><span data-stu-id="68954-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
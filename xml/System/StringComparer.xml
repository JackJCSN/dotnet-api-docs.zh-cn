<Type Name="StringComparer" FullName="System.StringComparer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fdb4894880368e2a9618cef65ca6cd1caf0c1e7" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67250253" /></Metadata><TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type StringComparer = class&#xA;    interface IComparer&#xA;    interface IEqualityComparer&#xA;    interface IComparer&lt;string&gt;&#xA;    interface IEqualityComparer&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="013c2-101">表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="013c2-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-102">一个派生自<xref:System.StringComparer>类包含基于字符串的比较、 相等性，并考虑到这两个用例和特定于区域性的比较规则的哈希代码操作。</span><span class="sxs-lookup"><span data-stu-id="013c2-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="013c2-103">可以使用<xref:System.StringComparer>类来创建特定于类型的比较泛型集合中的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="013c2-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="013c2-104">类，如<xref:System.Collections.Hashtable>， <xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.SortedList>，和<xref:System.Collections.Generic.SortedList%602>使用<xref:System.StringComparer>类对于排序目的而言。</span><span class="sxs-lookup"><span data-stu-id="013c2-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="013c2-105">比较运算，由表示<xref:System.StringComparer>类定义进行区分大小写或不区分大小写，并使用任一词 （区分区域性） 或 （不区分区域性的） 的序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="013c2-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="013c2-106">有关 word 和序号比较规则的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="013c2-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  

> [!NOTE]
> <span data-ttu-id="013c2-107">可以下载[排序权重表](https://www.microsoft.com/download/details.aspx?id=10921)，这是一组文本文件，其中包含有关 Windows 操作系统排序和比较操作中所使用的字符权重的信息，也可以下载[默认 Unicode 排序元素表](https://www.unicode.org/Public/UCA/latest/allkeys.txt)，这是适用于 Linux 和 macOS 的最新版排序权重表。</span><span class="sxs-lookup"><span data-stu-id="013c2-107">You can download the [Sorting Weight Tables](https://www.microsoft.com/download/details.aspx?id=10921), a set of text files that contain information on the character weights used in sorting and comparison operations for Windows operating systems, and the [Default Unicode Collation Element Table](https://www.unicode.org/Public/UCA/latest/allkeys.txt), the latest version of the sort weight table for Linux and macOS.</span></span> <span data-ttu-id="013c2-108">Linux 和 macOS 上的特定排序权重表版本取决于系统上安装的 [International Components for Unicode](http://site.icu-project.org/) 库的版本。</span><span class="sxs-lookup"><span data-stu-id="013c2-108">The specific version of the sort weight table on Linux and macOS depends on the version of the [International Components for Unicode](http://site.icu-project.org/) libraries installed on the system.</span></span> <span data-ttu-id="013c2-109">有关 ICU 版本及它们所实现的 Unicode 版本的信息，请参阅[下载 ICU](http://site.icu-project.org/download)。</span><span class="sxs-lookup"><span data-stu-id="013c2-109">For information on ICU versions and the Unicode versions that they implement, see [Downloading ICU](http://site.icu-project.org/download).</span></span>

## <a name="implemented-properties"></a><span data-ttu-id="013c2-110">实现的属性</span><span class="sxs-lookup"><span data-stu-id="013c2-110">Implemented properties</span></span>  

<span data-ttu-id="013c2-111">您可能不清楚如何使用<xref:System.StringComparer>由于了矛盾类属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-111">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="013c2-112"><xref:System.StringComparer>类的声明`abstract`(`MustInherit`在 Visual Basic 中)，这意味着其成员可以仅在派生类的对象上调用<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-112">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-113">矛盾在于的每个属性<xref:System.StringComparer>类的声明`static`(`Shared`在 Visual Basic 中)，这意味着该属性可以无需首先创建一个派生的类调用。</span><span class="sxs-lookup"><span data-stu-id="013c2-113">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="013c2-114">您可以调用<xref:System.StringComparer>属性直接因为每个属性会实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-114">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-115">因此，每个属性值的类型是<xref:System.StringComparer>，这不是匿名类的基类的匿名类型类本身。</span><span class="sxs-lookup"><span data-stu-id="013c2-115">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="013c2-116">每个<xref:System.StringComparer>类属性返回<xref:System.StringComparer>支持预定义的用例和比较规则的对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-116">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
## Examples  

<span data-ttu-id="013c2-117">下面的示例演示属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-117">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-118">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-118">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="013c2-119">初始化 <see cref="T:System.StringComparer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="013c2-119">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="013c2-120">比较两个对象或字符串，并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="013c2-120">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="y" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="013c2-121">要与 <paramref name="y" /> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-121">An object to compare to <paramref name="y" />.</span></span></param>
        <param name="y"><span data-ttu-id="013c2-122">要与 <paramref name="x" /> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-122">An object to compare to <paramref name="x" />.</span></span></param>
        <summary><span data-ttu-id="013c2-123">当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="013c2-123">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="013c2-124">一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="013c2-124">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="013c2-125">值</span><span class="sxs-lookup"><span data-stu-id="013c2-125">Value</span></span> 
 </term><description> <span data-ttu-id="013c2-126">含义</span><span class="sxs-lookup"><span data-stu-id="013c2-126">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="013c2-127">小于零</span><span class="sxs-lookup"><span data-stu-id="013c2-127">Less than zero</span></span> 
 </term><description><span data-ttu-id="013c2-128">在排序顺序中，<paramref name="x" /> 位于 <paramref name="y" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="013c2-128"><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
<span data-ttu-id="013c2-129">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-129">-or-</span></span> 
 <span data-ttu-id="013c2-130"><paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-130"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="013c2-131">零</span><span class="sxs-lookup"><span data-stu-id="013c2-131">Zero</span></span> 
 </term><description><span data-ttu-id="013c2-132"><paramref name="x" /> 等于 <paramref name="y" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-132"><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
<span data-ttu-id="013c2-133">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-133">-or-</span></span> 
 <span data-ttu-id="013c2-134"><paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-134"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="013c2-135">大于零</span><span class="sxs-lookup"><span data-stu-id="013c2-135">Greater than zero</span></span> 
 </term><description><span data-ttu-id="013c2-136"><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="013c2-136"><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
<span data-ttu-id="013c2-137">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-137">-or-</span></span> 
 <span data-ttu-id="013c2-138"><paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-138"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-139"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法是比效率稍有提高<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因为不转换`x`和`y`执行比较所需的参数。</span><span class="sxs-lookup"><span data-stu-id="013c2-139">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="013c2-140"><paramref name="x" /> 或 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 对象，并且 <paramref name="x" /> 或 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="013c2-140">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="013c2-141">要与 <paramref name="y" /> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-141">A string to compare to <paramref name="y" />.</span></span></param>
        <param name="y"><span data-ttu-id="013c2-142">要与 <paramref name="x" /> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-142">A string to compare to <paramref name="x" />.</span></span></param>
        <summary><span data-ttu-id="013c2-143">当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="013c2-143">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="013c2-144">一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="013c2-144">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="013c2-145">值</span><span class="sxs-lookup"><span data-stu-id="013c2-145">Value</span></span> 
 </term><description> <span data-ttu-id="013c2-146">含义</span><span class="sxs-lookup"><span data-stu-id="013c2-146">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="013c2-147">小于零</span><span class="sxs-lookup"><span data-stu-id="013c2-147">Less than zero</span></span> 
 </term><description><span data-ttu-id="013c2-148"><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="013c2-148"><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
<span data-ttu-id="013c2-149">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-149">-or-</span></span> 
 <span data-ttu-id="013c2-150"><paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-150"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="013c2-151">零</span><span class="sxs-lookup"><span data-stu-id="013c2-151">Zero</span></span> 
 </term><description><span data-ttu-id="013c2-152"><paramref name="x" /> 等于 <paramref name="y" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-152"><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
<span data-ttu-id="013c2-153">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-153">-or-</span></span> 
 <span data-ttu-id="013c2-154"><paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-154"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="013c2-155">大于零</span><span class="sxs-lookup"><span data-stu-id="013c2-155">Greater than zero</span></span> 
 </term><description><span data-ttu-id="013c2-156"><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="013c2-156"><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
<span data-ttu-id="013c2-157">- 或 -</span><span class="sxs-lookup"><span data-stu-id="013c2-157">-or-</span></span> 
 <span data-ttu-id="013c2-158"><paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-158"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-159"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法是比效率稍有提高<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因为不转换`x`和`y`执行比较所需的参数。</span><span class="sxs-lookup"><span data-stu-id="013c2-159">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * bool -&gt; StringComparer" Usage="System.StringComparer.Create (culture, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="013c2-160">一个区域性，其语言规则用于执行字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-160">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="013c2-161"><see langword="true" /> 指定比较操作不区分大小写；<see langword="false" /> 指定比较操作区分大小写。</span><span class="sxs-lookup"><span data-stu-id="013c2-161"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="013c2-162">创建 <see cref="T:System.StringComparer" /> 对象，该对象根据指定区域性的规则对字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-162">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="013c2-163">一个新 <see cref="T:System.StringComparer" /> 对象，该对象根据 <paramref name="culture" /> 参数使用的比较规则以及 <paramref name="ignoreCase" /> 参数指定的大小写规则执行字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-163">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="013c2-164">下面的代码示例演示了属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-164">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-165">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-165">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="013c2-166"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-166"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; StringComparer" Usage="System.StringComparer.Create (culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : StringComparer" Usage="System.StringComparer.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-167">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-167">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="013c2-168">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-168">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-169"><xref:System.StringComparer>返回的<xref:System.StringComparer.CurrentCulture%2A>语言相关字符串时，可以使用属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-169">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="013c2-170">例如，如果字符串显示给用户，或者如果字符串是用户交互的结果，应使用区分区域性的字符串比较字符串数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="013c2-170">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="013c2-171">当前区域性为<xref:System.Globalization.CultureInfo>对象与当前线程关联。</span><span class="sxs-lookup"><span data-stu-id="013c2-171">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="013c2-172"><xref:System.StringComparer.CurrentCulture%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-172">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="013c2-173">每次调用<xref:System.StringComparer.CurrentCulture%2A>属性`get`访问器返回一个新<xref:System.StringComparer>对象，如以下代码所示。</span><span class="sxs-lookup"><span data-stu-id="013c2-173">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="013c2-174">若要提高性能，可以存储<xref:System.StringComparer>对象中的本地变量，而不是检索的值<xref:System.StringComparer.CurrentCulture%2A>属性多次。</span><span class="sxs-lookup"><span data-stu-id="013c2-174">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013c2-175">下面的代码示例演示了属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-175">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-176">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-176">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-177">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-177">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCultureIgnoreCase : StringComparer" Usage="System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-178">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-178">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="013c2-179">字符串比较一个新对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-179">A new object for string comparison.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-180">为当前区域性<xref:System.Globalization.CultureInfo>与当前线程关联的对象; 返回的<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-180">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread; it is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> property.</span></span>
  
 <span data-ttu-id="013c2-181"><xref:System.StringComparer>返回的<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>字符串是与语言相关，但不是其大小写时，可以使用属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-181">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="013c2-182">例如，如果字符串显示给用户，但情况是不重要，则区分区域性的应使用不区分大小写的字符串比较字符串数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="013c2-182">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  

[!INCLUDE[platform-note](~/includes/c-and-posix-cultures.md)]  

 <span data-ttu-id="013c2-183"><xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-183">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="013c2-184">每次调用<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性`get`访问器返回一个新<xref:System.StringComparer>对象，如以下代码所示。</span><span class="sxs-lookup"><span data-stu-id="013c2-184">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="013c2-185">若要提高性能，可以存储<xref:System.StringComparer>对象中的本地变量，而不是检索的值<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性多次。</span><span class="sxs-lookup"><span data-stu-id="013c2-185">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-186">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-186">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="013c2-187">当在派生类中重写时，指示两个对象或字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="013c2-187">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="y" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="013c2-188">要与 <paramref name="y" /> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-188">An object to compare to <paramref name="y" />.</span></span></param>
        <param name="y"><span data-ttu-id="013c2-189">要与 <paramref name="x" /> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-189">An object to compare to <paramref name="x" />.</span></span></param>
        <summary><span data-ttu-id="013c2-190">当在派生类中重写时，指示两个对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="013c2-190">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns><span data-ttu-id="013c2-191">如果 <paramref name="x" /> 和 <paramref name="y" /> 引用同一对象，或者 <paramref name="x" /> 和 <paramref name="y" /> 是相同的对象类型且这些对象相等，或者 <paramref name="x" /> 和 <paramref name="y" /> 都是 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-192">因为运行时并没有要取消装箱`x`或`y`如果它们是值类型或尝试为向下转换`x`或`y`为如果它们是引用类型的字符串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比稍微更高效<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="013c2-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * string -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="013c2-193">要与 <paramref name="y" /> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-193">A string to compare to <paramref name="y" />.</span></span></param>
        <param name="y"><span data-ttu-id="013c2-194">要与 <paramref name="x" /> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-194">A string to compare to <paramref name="x" />.</span></span></param>
        <summary><span data-ttu-id="013c2-195">当在派生类中重写时，指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="013c2-195">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns><span data-ttu-id="013c2-196">如果 <paramref name="x" /> 和 <paramref name="y" /> 引用同一对象，或者 <paramref name="x" /> 和 <paramref name="y" /> 相等，或者 <paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-196"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-197">因为运行时并没有要取消装箱`x`或`y`如果它们是值类型或尝试为向下转换`x`或`y`为如果它们是引用类型的字符串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比稍微更高效<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="013c2-197">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member FromComparison : StringComparison -&gt; StringComparer" Usage="System.StringComparer.FromComparison comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="013c2-198">当在派生类中重写时，将获取当前 <see cref="T:System.StringComparer" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="013c2-198">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="013c2-199">一个对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-199">An object.</span></span></param>
        <summary><span data-ttu-id="013c2-200">当在派生类中重写时，将获取指定对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="013c2-200">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="013c2-201">根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</span><span class="sxs-lookup"><span data-stu-id="013c2-201">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-202"><xref:System.StringComparer.GetHashCode%28System.String%29>方法是比效率更高<xref:System.StringComparer.GetHashCode%2A>方法因为`obj`参数无需取消装箱来执行该操作。</span><span class="sxs-lookup"><span data-stu-id="013c2-202">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="013c2-203"><xref:System.StringComparer.GetHashCode%28System.Object%29>方法分配的大小成正比的内存量`obj`若要计算的哈希代码`obj`。</span><span class="sxs-lookup"><span data-stu-id="013c2-203">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="013c2-204">在大型字符串的情况下尝试检索哈希代码可能会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="013c2-204">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="013c2-205">相反，您可以使用计算哈希代码时分配固定的内存量的可选算法。</span><span class="sxs-lookup"><span data-stu-id="013c2-205">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="013c2-206">若要使用此算法时，将添加[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)应用程序的配置文件的部分。</span><span class="sxs-lookup"><span data-stu-id="013c2-206">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="013c2-207">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="013c2-207">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="013c2-208"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-208"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="013c2-209">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-209">A string.</span></span></param>
        <summary><span data-ttu-id="013c2-210">当在派生类中重写时，将获取指定字符串的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="013c2-210">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="013c2-211">根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</span><span class="sxs-lookup"><span data-stu-id="013c2-211">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-212"><xref:System.StringComparer.GetHashCode%28System.String%29>方法是比效率更高<xref:System.StringComparer.GetHashCode%28System.Object%29>方法因为`obj`参数无需取消装箱来执行该操作。</span><span class="sxs-lookup"><span data-stu-id="013c2-212">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="013c2-213"><xref:System.StringComparer.GetHashCode%28System.String%29>方法分配的大小成正比的内存量`obj`若要计算的哈希代码`obj`。</span><span class="sxs-lookup"><span data-stu-id="013c2-213">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="013c2-214">在大型字符串的情况下尝试检索哈希代码可能会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="013c2-214">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="013c2-215">相反，您可以使用计算哈希代码时分配固定的内存量的可选算法。</span><span class="sxs-lookup"><span data-stu-id="013c2-215">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="013c2-216">若要使用此算法时，将添加[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)应用程序的配置文件的部分。</span><span class="sxs-lookup"><span data-stu-id="013c2-216">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="013c2-217">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="013c2-217">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="013c2-218"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="013c2-218"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : StringComparer" Usage="System.StringComparer.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-219">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-219">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="013c2-220">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-220">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-221"><xref:System.StringComparer>返回的<xref:System.StringComparer.InvariantCulture%2A>属性对字符串进行比较以与语言相关的方式，但它不是适用于任何特定区域性中显示。</span><span class="sxs-lookup"><span data-stu-id="013c2-221">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="013c2-222">其主要应用程序是为各个区域性中将是相同的方式的顺序字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-222">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="013c2-223">是固定的区域性<xref:System.Globalization.CultureInfo>返回对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-223">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="013c2-224"><xref:System.StringComparer.InvariantCulture%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-224">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013c2-225">下面的代码示例演示了属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-225">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-226">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-226">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-227">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-227">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCultureIgnoreCase : StringComparer" Usage="System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-228">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-228">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="013c2-229">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-229">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-230"><xref:System.StringComparer>返回的<xref:System.StringComparer.InvariantCultureIgnoreCase%2A>属性对字符串进行比较的方式与语言相关的不区分大小写，但它不是适用于任何特定区域性中显示。</span><span class="sxs-lookup"><span data-stu-id="013c2-230">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="013c2-231">其主要应用程序是为各个区域性中将是相同的方式的顺序字符串。</span><span class="sxs-lookup"><span data-stu-id="013c2-231">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="013c2-232">是固定的区域性<xref:System.Globalization.CultureInfo>返回对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="013c2-232">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="013c2-233"><xref:System.StringComparer.InvariantCultureIgnoreCase%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-233">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-234">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-234">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Ordinal : StringComparer" Usage="System.StringComparer.Ordinal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-235">获取 <see cref="T:System.StringComparer" /> 对象，该对象执行区分大小写的序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-235">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="013c2-236">一个 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-236">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-237"><xref:System.StringComparer>返回的<xref:System.StringComparer.Ordinal%2A>属性执行与语言无关的简单字节比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-237">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="013c2-238">比较字符串的生成以编程方式或比较区分大小写的资源，如密码时，这是最合适。</span><span class="sxs-lookup"><span data-stu-id="013c2-238">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="013c2-239"><xref:System.StringComparer.Ordinal%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-239">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013c2-240">下面的代码示例演示了属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-240">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-241">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-241">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-242">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-242">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrdinalIgnoreCase : StringComparer" Usage="System.StringComparer.OrdinalIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="013c2-243">获取 <see cref="T:System.StringComparer" /> 对象，该对象执行不区分大小写的序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="013c2-243">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="013c2-244">一个 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="013c2-244">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013c2-245"><xref:System.StringComparer>返回的<xref:System.StringComparer.OrdinalIgnoreCase%2A>属性中要比较为如果它们已转换为大写，则使用固定区域性的约定的字符串视为字符，并执行独立于的简单字节比较语言。</span><span class="sxs-lookup"><span data-stu-id="013c2-245">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="013c2-246">比较字符串的生成以编程方式或比较不区分大小写的资源，例如路径和文件名时，这是最合适。</span><span class="sxs-lookup"><span data-stu-id="013c2-246">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="013c2-247"><xref:System.StringComparer.OrdinalIgnoreCase%2A>属性实际返回的匿名类派生自实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-247">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013c2-248">下面的代码示例演示了属性和<xref:System.StringComparer.Create%2A>方法的<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="013c2-248">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="013c2-249">该示例演示如何将不同<xref:System.StringComparer>对象排序三个版本的拉丁文字母 I。</span><span class="sxs-lookup"><span data-stu-id="013c2-249">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="013c2-250">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="013c2-250">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="y" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="y" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
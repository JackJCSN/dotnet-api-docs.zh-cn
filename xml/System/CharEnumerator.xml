<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="674ca0ff6ab128d0807cf2b9d4f07caded3523e1" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70671589" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>支持循环访问 <see cref="T:System.String" /> 对象并读取其各个字符。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供对被引用<xref:System.String>对象中的字符的只读访问。 <xref:System.CharEnumerator> 例如， `foreach` Microsoft Visual Basic 和C#编程语言的语句（可循环访问<xref:System.CharEnumerator>集合的元素）将从<xref:System.String>对象检索，以便循环访问字符在该对象中。  

> [!IMPORTANT]
> 类枚举单个16位<xref:System.Char>实例。 `CharEnumerator` 它不会将 graphemes （即，后跟一个或多个 combiding 字符的字符）或代理项对（即 Unicode 基本多语言平面之外的字符）视为单个字符。 对于将这些类型的字符作为单个单元进行处理的枚举数，请<xref:System.Globalization.StringInfo>使用类。

 没有公共构造函数<xref:System.CharEnumerator>。 相反，调用<xref:System.String>对象的<xref:System.String.GetEnumerator%2A>方法以获取<xref:System.CharEnumerator>初始化为引用该字符串的。  
  
 <xref:System.CharEnumerator>维护<xref:System.CharEnumerator>引用的字符串中的字符的内部索引。 当索引引用字符串中第一个字符之前或最后一个字符之后的字符位置时，该索引的状态无效，在引用字符串中的字符时有效。 索引初始化为逻辑上位于第一个字符之前的位置，并在迭代完成后设置为最后一个字符之后的位置。 如果尝试在索引无效时访问字符，则会引发异常。  
  
 此<xref:System.CharEnumerator.MoveNext%2A>方法将索引递增一，因此依次访问第一个和后面的字符。 <xref:System.CharEnumerator.Reset%2A>方法将索引设置为逻辑上位于第一个字符之前的位置。 <xref:System.CharEnumerator.Current%2A>属性检索当前按索引引用的字符。 方法创建的副本 <xref:System.CharEnumerator> 。  <xref:System.CharEnumerator.Clone%2A>  
  
> [!NOTE]
>  一个或多个<xref:System.CharEnumerator>线程上的多个独立实例可以访问单个<xref:System.String>实例。 实现此类以支持<xref:System.Collections.IEnumerator>接口。 有关使用枚举器的详细信息，请参阅<xref:System.Collections.IEnumerator>主题。  
  
   
  
## Examples  
 下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的单个字符。 它通过<xref:System.CharEnumerator> <xref:System.CharEnumerator.MoveNext%2A>调用方法来实例化对象，并通过调用方法从一个字符移动到下一个字符，并通过检索<xref:System.CharEnumerator.Current%2A>属性的值来显示当前字符。 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 但请注意，可以使用`foreach` （在中C#）或`For Each` （在 Visual Basic 中）以更直观的方式执行相同的操作，如下面的示例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</summary>
        <returns><see cref="T:System.Object" />，是当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回值是此实例的<xref:System.CharEnumerator>副本及其当前状态。 这对于在遍历<xref:System.String>对象时保存状态很有用。  
  
 例如，假设应用程序使用的原始实例<xref:System.CharEnumerator>来循环访问中的<xref:System.String>每个字符。 当遇到一些唯一字符时，应用程序会暂停处理并调用<xref:System.CharEnumerator.Clone%2A>方法。 实际上，这会将<xref:System.CharEnumerator> <xref:System.String>对象的索引保存在中。  
  
 应用程序使用该克隆导航到的`String`另一部分，以执行一些辅助处理。 此导航的副作用是克隆无法跟踪处理停止的位置。 不过，辅助处理完成后，应用程序会丢弃克隆，并使用原始<xref:System.CharEnumerator>实例继续处理原始处理停止的<xref:System.String>位置。  
  
> [!NOTE]
>  实现此方法是为了支持<xref:System.ICloneable>接口。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。</summary>
        <value>当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的 Unicode 字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类维护枚举字符串的内部索引， <xref:System.CharEnumerator.Current%2A>属性返回索引当前引用的字符。 <xref:System.CharEnumerator> 仅当索引有效时才应调用此属性;否则，将引发异常。  
  
 索引对于空字符串（""）始终无效。 调用<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 或 <xref:System.CharEnumerator.Reset%2A> 方法后，该索引也无效。 在调用这些方法中的任一方法后， <xref:System.CharEnumerator.MoveNext%2A>调用方法将索引调整为枚举字符串中的第一个字符。 只要<xref:System.CharEnumerator.MoveNext%2A>方法返回`true`，索引就有效。  
  
 <xref:System.CharEnumerator.Current%2A>在<xref:System.CharEnumerator.Current%2A>调用、 <xref:System.CharEnumerator.MoveNext%2A> <xref:System.CharEnumerator.Reset%2A>或之前，不会移动索引和连续调用来返回相同的字符。 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的单个字符。 它通过<xref:System.CharEnumerator> <xref:System.CharEnumerator.MoveNext%2A>调用方法来实例化对象，并通过调用方法从一个字符移动到下一个字符，并通过检索<xref:System.CharEnumerator.Current%2A>属性的值来显示当前字符。 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 但请注意，可以使用`foreach` （在中C#）或`For Each` （在 Visual Basic 中）以更直观的方式执行相同的操作，如下面的示例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该索引无效；即它位于枚举字符串的第一个字符之前或最后一个字符之后。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.CharEnumerator" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.CharEnumerator.Dispose%2A> 后，应调用 <xref:System.CharEnumerator>。 <xref:System.CharEnumerator.Dispose%2A> 方法使 <xref:System.CharEnumerator> 处于不可用状态。 调用<xref:System.CharEnumerator.Dispose%2A>后，必须释放对的<xref:System.CharEnumerator>所有引用，以便垃圾回收器能够<xref:System.CharEnumerator>回收占用的内存。  
  
 有关详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
> [!NOTE]
>  每次释放对 <xref:System.CharEnumerator.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.CharEnumerator>。 否则，在垃圾回收器调用 <xref:System.CharEnumerator> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>递增当前 <see cref="T:System.CharEnumerator" /> 对象的内部索引使其指向枚举的字符串的下一个字符。</summary>
        <returns>如果索引递增成功并且在枚举字符串内，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类维护枚举字符串的内部索引，方法将<xref:System.CharEnumerator.MoveNext%2A>索引递增1。 <xref:System.CharEnumerator> 在<xref:System.CharEnumerator.MoveNext%2A>调用<xref:System.String.GetEnumerator%2A> 或 <xref:System.CharEnumerator.Reset%2A> 后调用，以将当前字符位置递增到枚举字符串中的第一个字符。 检查返回值是否`true`为，以确定当前字符位置是否有效。  
  
 如果索引已经超出枚举字符串的最后一个字符，则不会更改该索引并`false`返回。  
  
 请注意，如果枚举的字符串为空（""），则的<xref:System.CharEnumerator>状态始终无效。 这是因为的<xref:System.CharEnumerator>内部索引最初位于枚举字符串的第一个字符之前，因此无效。 <xref:System.CharEnumerator.MoveNext%2A>在逻辑上将索引设置为枚举字符串的最后一个（不存在的）字符之后也无效。  
  
   
  
## Examples  
 下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的单个字符。 它通过<xref:System.CharEnumerator> <xref:System.CharEnumerator.MoveNext%2A>调用方法来实例化对象，并通过调用方法从一个字符移动到下一个字符，并通过检索<xref:System.CharEnumerator.Current%2A>属性的值来显示当前字符。 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 但请注意，可以使用`foreach` （在中C#）或`For Each` （在 Visual Basic 中）以更直观的方式执行相同的操作，如下面的示例所示。  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将索引初始化为逻辑上位于枚举字符串的第一个字符之前的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类维护枚举字符串的内部索引， <xref:System.CharEnumerator.Reset%2A>方法将索引设置为无效状态。 <xref:System.CharEnumerator>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。 有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
        <value>当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的已装箱 Unicode 字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.CharEnumerator> 实例被强制转换为 <xref:System.Collections.IEnumerator> 接口时使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">枚举未启动。  
  
 或  
  
 枚举已经终止。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.CharEnumerator" /> 类使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
使用<xref:System.CharEnumerator>完类后，调用 IDisposable。 方法使<xref:System.CharEnumerator>类处于不可用状态。 调用此方法后，必须释放对<xref:System.CharEnumerator>该类的所有引用，以便垃圾回收器可以回收<xref:System.CharEnumerator>类占用的内存。

有关详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。

> [!NOTE]
> 在释放对类的<xref:System.CharEnumerator>最后一个引用之前，请始终调用 IDisposable。 否则，在垃圾回收器调用 <xref:System.CharEnumerator> 对象的 <xref:System.Object.Finalize> 方法之前，该对象正在使用的资源不会被释放。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

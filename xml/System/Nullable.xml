<Type Name="Nullable" FullName="System.Nullable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eb1495aac12b1542e1ee7428ea6b2fa056fb790" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405439" /></Metadata><TypeSignature Language="C#" Value="public static class Nullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Nullable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Nullable" />
  <TypeSignature Language="VB.NET" Value="Public Class Nullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Nullable abstract sealed" />
  <TypeSignature Language="F#" Value="type Nullable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>支持可分配有 <see langword="null" /> 的值类型。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果可以为类型赋值或赋值`null`, 则可以为 null, 这意味着类型没有任何值。 默认情况下, 所有引用类型 (如<xref:System.String>) 都可以为 null, 但所有值类型 ( <xref:System.Int32>如) 都不是。  
  
 在C#和 Visual Basic 中, 通过在值类型后使用`?`表示法, 将值类型标记为可以为 null。 例如, `int?`在C#或`Integer?`中 Visual Basic 声明可分配`null`的整数值类型。  
  
 <xref:System.Nullable>类提供<xref:System.Nullable%601>对结构的互补支持。 <xref:System.Nullable>类支持获取可以为 null 的类型的基础类型, 以及针对其基础值类型不支持泛型比较和相等运算的可以为 null 的类型对的比较和相等运算。  
  
## <a name="boxing-and-unboxing"></a>装箱和取消装箱  
 如果将可为 null 的类型装箱, 公共语言运行时将自动装箱<xref:System.Nullable%601>对象的基础值, <xref:System.Nullable%601>而不是对象本身。 也就是说, 如果<xref:System.Nullable%601.HasValue%2A>属性为`true` <xref:System.Nullable%601.Value%2A> , 则属性的内容为装箱。 如果属性为`false` ,`null`则为装箱。 `HasValue` 如果可以为 null 的类型的基础值为取消装箱, 则公共语言运行时<xref:System.Nullable%601>将创建一个新的结构, 该结构已初始化为基础值。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Nullable`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/e473cb01-28ca-42be-9cea-f717055d72c6">可以为 null 的类型（C# 编程指南）</related>
    <related type="Article" href="https://msdn.microsoft.com/library/9ac3b602-6f96-4e6d-96f7-cd4e81c468a6">可以为 Null 的值类型 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="Compare&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int Compare&lt;T&gt; (Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Nullable`1&lt;!!T&gt; n1, valuetype System.Nullable`1&lt;!!T&gt; n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare(Of T As Structure) (n1 As Nullable(Of T), n2 As Nullable(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static int Compare(Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2);" />
      <MemberSignature Language="F#" Value="static member Compare : Nullable&lt;'T (requires 'T : struct)&gt; * Nullable&lt;'T (requires 'T : struct)&gt; -&gt; int (requires 'T : struct)" Usage="System.Nullable.Compare (n1, n2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="n1" Type="System.Nullable&lt;T&gt;" />
        <Parameter Name="n2" Type="System.Nullable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
        <param name="n1">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
        <param name="n2">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
        <summary>比较两个 <see cref="T:System.Nullable`1" /> 对象的相对值。</summary>
        <returns>一个整数，指示 <paramref name="n1" /> 和 <paramref name="n2" /> 参数的相对值。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 说明 
 </description></listheader><item><term> 小于零 
 </term><description> <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />。  
  
- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值小于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。  
  
 </description></item><item><term> 零 
 </term><description> <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  
  
或 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值等于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。  
  
 </description></item><item><term> 大于零 
 </term><description> <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  
  
- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值大于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Equals&lt;T&gt; (Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Nullable`1&lt;!!T&gt; n1, valuetype System.Nullable`1&lt;!!T&gt; n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals(Of T As Structure) (n1 As Nullable(Of T), n2 As Nullable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool Equals(Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2);" />
      <MemberSignature Language="F#" Value="static member Equals : Nullable&lt;'T (requires 'T : struct)&gt; * Nullable&lt;'T (requires 'T : struct)&gt; -&gt; bool (requires 'T : struct)" Usage="System.Nullable.Equals (n1, n2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="n1" Type="System.Nullable&lt;T&gt;" />
        <Parameter Name="n2" Type="System.Nullable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
        <param name="n1">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
        <param name="n2">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
        <summary>指示两个指定的 <see cref="T:System.Nullable`1" /> 对象是否相等。</summary>
        <returns>如果 <paramref name="n1" /> 参数等于 <paramref name="n2" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。  
  
返回值取决于所比较的两个参数的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 属性。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 说明 
 </description></listheader><item><term><see langword="true" /></term><description> <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  
  
或 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性相等。  
  
 </description></item><item><term><see langword="false" /></term><description> 一个参数的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，另一个参数的该属性为 <see langword="false" />。  
  
- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性不相等。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type nullableType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type nullableType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Nullable.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (nullableType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ nullableType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Nullable.GetUnderlyingType nullableType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nullableType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nullableType">一个 <see cref="T:System.Type" /> 对象，描述关闭的泛型可以为 null 的类型。</param>
        <summary>返回指定可以为 null 的类型的基础类型参数。</summary>
        <returns>如果 <paramref name="nullableType" /> 参数为关闭的泛型可以为 null 的类型，则为 <paramref name="nullableType" /> 参数的类型变量；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 泛型类型定义是一种类型声明, 如<xref:System.Nullable%601>包含类型参数列表的, 类型参数列表声明了一个或多个类型参数。 封闭式泛型类型是一种类型声明, 其中为类型参数指定了特定类型。  
  
 例如, 如果`nullableType`参数<xref:System.Int32>是`Nullable<Int32>`中C#的类型 (`Nullable(Of Int32)`在 Visual Basic 中), 则返回值为的类型 (即, 封闭式泛型类型的类型参数)。  
  
   
  
## Examples  
 下面的代码示例定义了一个方法, 该方法的返回<xref:System.Nullable%601>值<xref:System.Int32>的类型为。 此代码示例使用<xref:System.Nullable.GetUnderlyingType%2A>方法来显示返回值的类型参数。  
  
 [!code-csharp[system.nullable_GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullable_GetUnderlyingType/cs/gut.cs#1)]
 [!code-vb[system.nullable_GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullable_GetUnderlyingType/vb/gut.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nullableType" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>

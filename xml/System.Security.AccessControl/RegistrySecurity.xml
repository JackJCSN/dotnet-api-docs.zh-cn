<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a1e573054d899d9ece24be60d9cd1af96043f0b2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69085995" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type RegistrySecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="204f0-101">表示注册表项的 Windows 访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="204f0-101">Represents the Windows access control security for a registry key.</span></span> <span data-ttu-id="204f0-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="204f0-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-103"><xref:System.Security.AccessControl.RegistrySecurity>对象指定对注册表项的访问权限, 还指定如何审核访问尝试。</span><span class="sxs-lookup"><span data-stu-id="204f0-103">A <xref:System.Security.AccessControl.RegistrySecurity> object specifies access rights for a registry key, and also specifies how access attempts are audited.</span></span> <span data-ttu-id="204f0-104">注册表项的访问权限表示为规则, 每个访问规则都由一个<xref:System.Security.AccessControl.RegistryAccessRule>对象表示。</span><span class="sxs-lookup"><span data-stu-id="204f0-104">Access rights to the registry key are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.RegistryAccessRule> object.</span></span> <span data-ttu-id="204f0-105">每个审核规则都由一个<xref:System.Security.AccessControl.RegistryAuditRule>对象表示。</span><span class="sxs-lookup"><span data-stu-id="204f0-105">Each auditing rule is represented by a <xref:System.Security.AccessControl.RegistryAuditRule> object.</span></span>  
  
 <span data-ttu-id="204f0-106">这会镜像底层 Windows 安全系统, 其中每个安全对象最多具有一个控制对受保护对象的访问的随机访问控制列表 (DACL), 最多有一个指定访问权限的系统访问控制列表 (SACL)审核尝试。</span><span class="sxs-lookup"><span data-stu-id="204f0-106">This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</span></span> <span data-ttu-id="204f0-107">DACL 和 SACL 是访问控制项 (ACE) 的有序列表, 它们指定了用户和组的访问权限和审核。</span><span class="sxs-lookup"><span data-stu-id="204f0-107">The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</span></span> <span data-ttu-id="204f0-108"><xref:System.Security.AccessControl.RegistryAccessRule> 或<xref:System.Security.AccessControl.RegistryAuditRule>对象可能表示多个 ACE。</span><span class="sxs-lookup"><span data-stu-id="204f0-108">A <xref:System.Security.AccessControl.RegistryAccessRule> or <xref:System.Security.AccessControl.RegistryAuditRule> object might represent more than one ACE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-109">Windows 访问控制安全性只能应用于注册表项。</span><span class="sxs-lookup"><span data-stu-id="204f0-109">Windows access control security can only be applied to registry keys.</span></span> <span data-ttu-id="204f0-110">它不能应用于存储在键中的各个键/值对。</span><span class="sxs-lookup"><span data-stu-id="204f0-110">It cannot be applied to individual key/value pairs stored in a key.</span></span>  
  
 <span data-ttu-id="204f0-111"><xref:System.Security.AccessControl.RegistrySecurity>、和类<xref:System.Security.AccessControl.RegistryAuditRule>隐藏 acl 和 ace 的实现细节。 <xref:System.Security.AccessControl.RegistryAccessRule></span><span class="sxs-lookup"><span data-stu-id="204f0-111">The <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, and <xref:System.Security.AccessControl.RegistryAuditRule> classes hide the implementation details of ACLs and ACEs.</span></span> <span data-ttu-id="204f0-112">它们允许你忽略17个不同的 ACE 类型以及正确保留访问权限的继承和传播的复杂性。</span><span class="sxs-lookup"><span data-stu-id="204f0-112">They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</span></span> <span data-ttu-id="204f0-113">这些对象还旨在防止出现以下常见的访问控制错误:</span><span class="sxs-lookup"><span data-stu-id="204f0-113">These objects are also designed to prevent the following common access control errors:</span></span>  
  
-   <span data-ttu-id="204f0-114">使用 null DACL 创建安全说明符。</span><span class="sxs-lookup"><span data-stu-id="204f0-114">Creating a security descriptor with a null DACL.</span></span> <span data-ttu-id="204f0-115">对 DACL 的空引用允许任何用户向对象添加访问规则, 这可能会造成拒绝服务攻击。</span><span class="sxs-lookup"><span data-stu-id="204f0-115">A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</span></span> <span data-ttu-id="204f0-116">新<xref:System.Security.AccessControl.RegistrySecurity>对象始终以空的 DACL 开头, 这会拒绝所有用户的所有访问。</span><span class="sxs-lookup"><span data-stu-id="204f0-116">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty DACL, which denies all access for all users.</span></span>  
  
-   <span data-ttu-id="204f0-117">违反了 Ace 的规范排序。</span><span class="sxs-lookup"><span data-stu-id="204f0-117">Violating the canonical ordering of ACEs.</span></span> <span data-ttu-id="204f0-118">如果 DACL 中的 ACE 列表不是以规范顺序保存的, 则可能会无意中向用户授予对受保护对象的访问权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-118">If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</span></span> <span data-ttu-id="204f0-119">例如, 拒绝的访问权限必须始终出现在允许的访问权限之前。</span><span class="sxs-lookup"><span data-stu-id="204f0-119">For example, denied access rights must always appear before allowed access rights.</span></span> <span data-ttu-id="204f0-120"><xref:System.Security.AccessControl.RegistrySecurity>对象在内部保持正确的顺序。</span><span class="sxs-lookup"><span data-stu-id="204f0-120"><xref:System.Security.AccessControl.RegistrySecurity> objects maintain the correct order internally.</span></span>  
  
-   <span data-ttu-id="204f0-121">操作安全描述符标志, 这些标志应仅限 resource manager 控件。</span><span class="sxs-lookup"><span data-stu-id="204f0-121">Manipulating security descriptor flags, which should be under resource manager control only.</span></span>  
  
-   <span data-ttu-id="204f0-122">创建 ACE 标志的无效组合。</span><span class="sxs-lookup"><span data-stu-id="204f0-122">Creating invalid combinations of ACE flags.</span></span>  
  
-   <span data-ttu-id="204f0-123">操作继承的 Ace。</span><span class="sxs-lookup"><span data-stu-id="204f0-123">Manipulating inherited ACEs.</span></span> <span data-ttu-id="204f0-124">继承和传播由资源管理器处理, 以响应对访问和审核规则所做的更改。</span><span class="sxs-lookup"><span data-stu-id="204f0-124">Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</span></span>  
  
-   <span data-ttu-id="204f0-125">向 Acl 中插入无意义的 Ace。</span><span class="sxs-lookup"><span data-stu-id="204f0-125">Inserting meaningless ACEs into ACLs.</span></span>  
  
 <span data-ttu-id="204f0-126">.NET 安全对象不支持的唯一功能是应由大多数应用程序开发人员避免的危险活动, 如下所示:</span><span class="sxs-lookup"><span data-stu-id="204f0-126">The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</span></span>  
  
-   <span data-ttu-id="204f0-127">通常由资源管理器执行的低级别任务。</span><span class="sxs-lookup"><span data-stu-id="204f0-127">Low-level tasks that are normally performed by the resource manager.</span></span>  
  
-   <span data-ttu-id="204f0-128">以不维护规范排序的方式添加或移除访问控制项。</span><span class="sxs-lookup"><span data-stu-id="204f0-128">Adding or removing access control entries in ways that do not maintain the canonical ordering.</span></span>  
  
 <span data-ttu-id="204f0-129">若要修改注册表项的 Windows 访问控制安全性, 请使用<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>方法来<xref:System.Security.AccessControl.RegistrySecurity>获取对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-129">To modify Windows access control security for a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="204f0-130">通过添加和删除规则修改安全对象, 然后使用<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法将其重新附加。</span><span class="sxs-lookup"><span data-stu-id="204f0-130">Modify the security object by adding and removing rules, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to reattach it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="204f0-131">对对象所做的更改不会影响注册表项的访问级别, 直到<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>调用方法将已更改的安全对象分配给注册表项。 <xref:System.Security.AccessControl.RegistrySecurity></span><span class="sxs-lookup"><span data-stu-id="204f0-131">Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the registry key.</span></span>  
  
 <span data-ttu-id="204f0-132">若要将访问控制安全性从一个注册表项复制到另一个<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>注册表项, 请<xref:System.Security.AccessControl.RegistrySecurity>使用方法获取表示第一个注册表项的访问和审核规则的对象<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> , 然后使用方法将这些规则分配给第二个注册表项。</span><span class="sxs-lookup"><span data-stu-id="204f0-132">To copy access control security from one registry key to another, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object representing the access and audit rules for the first registry key, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign those rules to the second registry key.</span></span> <span data-ttu-id="204f0-133">你还可以使用具有<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> <xref:System.Security.AccessControl.RegistrySecurity>对象参数的或<xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType>方法将规则分配给第二个注册表项。</span><span class="sxs-lookup"><span data-stu-id="204f0-133">You can also assign the rules to a second registry key with an <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> or <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> method that takes a <xref:System.Security.AccessControl.RegistrySecurity> object parameter.</span></span>  
  
 <span data-ttu-id="204f0-134">投资于安全描述符定义语言 (SDDL) 的用户可以使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法来设置注册表项的访问规则, <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>并使用方法来获取表示采用 SDDL 格式的访问规则的字符串。</span><span class="sxs-lookup"><span data-stu-id="204f0-134">Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a registry key, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format.</span></span> <span data-ttu-id="204f0-135">这不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="204f0-135">This is not recommended for new development.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-136">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="204f0-136">This section contains two code examples.</span></span> <span data-ttu-id="204f0-137">第一个示例演示如何在添加和删除兼容规则后进行合并, 第二个示例演示继承和传播标志如何影响规则的添加和删除。</span><span class="sxs-lookup"><span data-stu-id="204f0-137">The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</span></span>  
  
 <span data-ttu-id="204f0-138">示例 1</span><span class="sxs-lookup"><span data-stu-id="204f0-138">Example 1</span></span>  
  
 <span data-ttu-id="204f0-139">下面的代码示例演示如何<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>从兼容规则中删除权限, 以及该方法如何将<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>权限与兼容的规则合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-139">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="204f0-140">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象并添加允许当前用户<xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType>权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-140">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="204f0-141">然后, 该示例创建一个规则, 该规则<xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>向用户授予与第一条规则相同的继承和传播权限, 并<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>使用方法从<xref:System.Security.AccessControl.RegistrySecurity>对象中删除此新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-141">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="204f0-142"><xref:System.Security.AccessControl.RegistryRights.SetValue>是的<xref:System.Security.AccessControl.RegistryRights.ReadKey>组成部分, 因此它将从兼容规则中删除。</span><span class="sxs-lookup"><span data-stu-id="204f0-142"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="204f0-143">将显示<xref:System.Security.AccessControl.RegistrySecurity>对象中的规则, 并显示的其余<xref:System.Security.AccessControl.RegistryRights.ReadKey>组成部分。</span><span class="sxs-lookup"><span data-stu-id="204f0-143">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="204f0-144">然后, 示例代码调用<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>方法, 将<xref:System.Security.AccessControl.RegistryRights.SetValue>权限合并回<xref:System.Security.AccessControl.RegistrySecurity>对象中的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-144">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-145">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-145">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-146">本部分中的第二个示例附加一个安全对象, 并在和<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>中执行示例。</span><span class="sxs-lookup"><span data-stu-id="204f0-146">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 <span data-ttu-id="204f0-147">示例 2</span><span class="sxs-lookup"><span data-stu-id="204f0-147">Example 2</span></span>  
  
 <span data-ttu-id="204f0-148">下面的代码示例演示使用继承和传播的访问规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-148">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="204f0-149">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象, 然后创建并添加两个<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>具有标志的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-149">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="204f0-150">第一个规则没有传播标志, 而第二条具有<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>和<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>。</span><span class="sxs-lookup"><span data-stu-id="204f0-150">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="204f0-151">该程序将在<xref:System.Security.AccessControl.RegistrySecurity>对象中显示规则, 然后<xref:System.Security.AccessControl.RegistrySecurity>使用对象创建子项。</span><span class="sxs-lookup"><span data-stu-id="204f0-151">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey.</span></span> <span data-ttu-id="204f0-152">该程序创建一个子子项和一个孙级子项, 并显示每个子项的安全性。</span><span class="sxs-lookup"><span data-stu-id="204f0-152">The program creates a child subkey and a grandchild subkey, then displays the security for each subkey.</span></span> <span data-ttu-id="204f0-153">最后, 程序删除测试密钥。</span><span class="sxs-lookup"><span data-stu-id="204f0-153">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="204f0-154">使用默认值初始化 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="204f0-154">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class with default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-155">新<xref:System.Security.AccessControl.RegistrySecurity>对象始终以空的自由访问列表 (DACL) 开头, 此列表拒绝所有用户的所有访问。</span><span class="sxs-lookup"><span data-stu-id="204f0-155">A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204f0-156">获取 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 类用于表示访问权限的枚举类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-156">Gets the enumeration type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rights.</span></span></summary>
        <value><span data-ttu-id="204f0-157">一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.RegistryRights" /> 枚举。</span><span class="sxs-lookup"><span data-stu-id="204f0-157">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryRights" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-158">派生自<xref:System.Security.AccessControl.ObjectSecurity>类的类将<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>重写属性, 并返回它们用来表示访问权限的类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-158">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights.</span></span> <span data-ttu-id="204f0-159">当使用包含多个类型的安全对象的数组或集合时, 请使用此属性来确定要用于每个安全对象的正确枚举类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-159">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="registrySecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="204f0-160">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</span><span class="sxs-lookup"><span data-stu-id="204f0-160">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="204f0-161"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，用于指定允许或拒绝的访问权限，该组合将被强制转换为整数。</span><span class="sxs-lookup"><span data-stu-id="204f0-161">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to allow or deny, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="204f0-162">一个布尔值，指定规则是否为继承的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-162">A Boolean value specifying whether the rule is inherited.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="204f0-163"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值的按位组合，指定子项如何继承规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-163">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="204f0-164"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 值的按位组合，用于修改子项继承规则的方式。</span><span class="sxs-lookup"><span data-stu-id="204f0-164">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span></span> <span data-ttu-id="204f0-165">如果 <paramref name="inheritanceFlags" /> 的值为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则它没有意义。</span><span class="sxs-lookup"><span data-stu-id="204f0-165">Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span></span></param>
        <param name="type"><span data-ttu-id="204f0-166"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-166">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="204f0-167">使用指定的访问权限、访问控制和标志为指定用户创建新的访问控制规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-167">Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</span></span></summary>
        <returns><span data-ttu-id="204f0-168">一个 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 对象，表示指定用户的指定权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-168">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> object representing the specified rights for the specified user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-169">创建访问控制规则的建议方法是使用<xref:System.Security.AccessControl.RegistryAccessRule>类的构造函数。</span><span class="sxs-lookup"><span data-stu-id="204f0-169">The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-170">尽管可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标志, 但没有任何一点要这样做。</span><span class="sxs-lookup"><span data-stu-id="204f0-170">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="204f0-171">出于访问控制的目的, 子项中的名称/值对不是单独的对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-171">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="204f0-172">对名称/值对的访问权限由子项的权限控制。</span><span class="sxs-lookup"><span data-stu-id="204f0-172">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="204f0-173">此外, 由于所有子项均为容器 (也就是说, 它们可以包含其他子项), 因此它们不会受到<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志的影响。</span><span class="sxs-lookup"><span data-stu-id="204f0-173">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="204f0-174">最后, 指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地使规则维护复杂化, 因为这会影响兼容规则的正常组合。</span><span class="sxs-lookup"><span data-stu-id="204f0-174">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="204f0-175"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="type" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="204f0-175"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-176"><paramref name="identityReference" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-176"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="204f0-177">- 或 -</span><span class="sxs-lookup"><span data-stu-id="204f0-177">-or-</span></span> 
 <span data-ttu-id="204f0-178"><paramref name="accessMask" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="204f0-178"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="204f0-179"><paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</span><span class="sxs-lookup"><span data-stu-id="204f0-179"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204f0-180">获取 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 类用于表示访问规则的类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-180">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent access rules.</span></span></summary>
        <value><span data-ttu-id="204f0-181">一个表示 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-181">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-182">派生自<xref:System.Security.AccessControl.ObjectSecurity>类的类将<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>重写属性, 并返回用于表示访问规则的类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-182">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules.</span></span> <span data-ttu-id="204f0-183">当使用包含多个类型的安全对象的数组或集合时, 请使用此属性来确定要用于每个安全对象的正确访问规则类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-183">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-184">要添加的访问控制规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-184">The access control rule to add.</span></span></param>
        <summary><span data-ttu-id="204f0-185">搜索匹配的访问控制，新规则将与之进行合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-185">Searches for a matching access control with which the new rule can be merged.</span></span> <span data-ttu-id="204f0-186">如果未找到符合条件的规则，则添加新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-186">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-187">方法搜索具有相同用户或组以及与`rule`相同<xref:System.Security.AccessControl.AccessControlType>的规则。 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A></span><span class="sxs-lookup"><span data-stu-id="204f0-187">The <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`.</span></span> <span data-ttu-id="204f0-188">如果未找到, `rule`则添加。</span><span class="sxs-lookup"><span data-stu-id="204f0-188">If none are found, `rule` is added.</span></span> <span data-ttu-id="204f0-189">如果找到匹配规则, 则中`rule`的权限将与现有规则合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-189">If a matching rule is found, the rights in `rule` are merged with the existing rule.</span></span>  
  
 <span data-ttu-id="204f0-190">如果规则具有不同的继承标志, 则无法合并规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-190">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="204f0-191">例如, 如果允许用户使用没有继承标志的读取访问权限, 并且<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>用于添加一个规则, 为用户提供对子项 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>) 的继承的写入访问权限, 则这两个规则将无法合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-191">For example, if a user is allowed read access with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> is used to add a rule giving the user write access with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 <span data-ttu-id="204f0-192">不会合并<xref:System.Security.AccessControl.AccessControlType>具有不同值的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-192">Rules with different <xref:System.Security.AccessControl.AccessControlType> values are never merged.</span></span>  
  
 <span data-ttu-id="204f0-193">规则以最经济的方式表示权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-193">Rules express rights in the most economical way.</span></span> <span data-ttu-id="204f0-194">例如, 如果<xref:System.Security.AccessControl.RegistryRights.QueryValues>用户具有<xref:System.Security.AccessControl.RegistryRights.Notify>和<xref:System.Security.AccessControl.RegistryRights.ReadPermissions>权限, 并且你添加了允许<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>权限的规则, 则该用户将拥有<xref:System.Security.AccessControl.RegistryRights.ReadKey>权限的所有组成部分。</span><span class="sxs-lookup"><span data-stu-id="204f0-194">For example, if a user has <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> and <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> rights, and you add a rule allowing <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the user has all the constituent parts of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="204f0-195">如果查询用户的权限, 将看到包含<xref:System.Security.AccessControl.RegistryRights.ReadKey>权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-195">If you query the user's rights, you will see a rule containing <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights.</span></span> <span data-ttu-id="204f0-196">同样, 如果您删除<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>权限, 其他权利的<xref:System.Security.AccessControl.RegistryRights.ReadKey>其他组成部分将再次出现。</span><span class="sxs-lookup"><span data-stu-id="204f0-196">Similarly, if you remove <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> rights, the other constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey> rights will reappear.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-197">下面的代码示例创建了注册表访问规则并将其添加<xref:System.Security.AccessControl.RegistrySecurity>到了一个对象中, 其中显示了允许和拒绝权限的规则如何保持独立, 同时合并了相同类型的兼容规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-197">The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-198">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-198">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-199">可在和<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>中找到附加安全对象的示例。</span><span class="sxs-lookup"><span data-stu-id="204f0-199">Examples that attach security objects can be found in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="204f0-200">演示继承和传播标志的代码示例可在<xref:System.Security.AccessControl.RegistryAccessRule>类中找到。</span><span class="sxs-lookup"><span data-stu-id="204f0-200">A code example that demonstrates inheritance and propagation flags can be found in the <xref:System.Security.AccessControl.RegistryAccessRule> class.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-201"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-201"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-202">要添加的审核规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-202">The audit rule to add.</span></span> <span data-ttu-id="204f0-203">由此规则指定的用户来确定搜索。</span><span class="sxs-lookup"><span data-stu-id="204f0-203">The user specified by this rule determines the search.</span></span></param>
        <summary><span data-ttu-id="204f0-204">搜索可以将新规则与之合并的审核规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-204">Searches for an audit rule with which the new rule can be merged.</span></span> <span data-ttu-id="204f0-205">如果未找到符合条件的规则，则添加新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-205">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-206">方法搜索与相同用户或`rule`组的规则。 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A></span><span class="sxs-lookup"><span data-stu-id="204f0-206">The <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`.</span></span> <span data-ttu-id="204f0-207">如果未找到, `rule`则添加。</span><span class="sxs-lookup"><span data-stu-id="204f0-207">If none are found, `rule` is added.</span></span> <span data-ttu-id="204f0-208">如果找到匹配规则, 则中`rule`的标志将合并到现有规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-208">If a matching rule is found, the flags in `rule` are merged into the existing rule.</span></span>  
  
 <span data-ttu-id="204f0-209">如果规则具有不同的继承标志, 则无法合并规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-209">Rules cannot be merged if they have different inheritance flags.</span></span> <span data-ttu-id="204f0-210">例如, 如果对特定用户 (没有继承标志) 审核尝试写入密钥的失败, 并<xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A>使用来添加一个规则, 该规则指定对同一用户审核失败的更改权限尝试, 但使用继承子项 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), 这两个规则不能合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-210">For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), the two rules cannot be merged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="registrySecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="204f0-211">一个 <see cref="T:System.Security.Principal.IdentityReference" />，用于标识此规则应用到的用户或组。</span><span class="sxs-lookup"><span data-stu-id="204f0-211">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="204f0-212"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，用于指定要审核的访问权限，该组合将被强制转换为整数。</span><span class="sxs-lookup"><span data-stu-id="204f0-212">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the access rights to audit, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="204f0-213">一个布尔值，指定规则是否为继承的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-213">A Boolean value specifying whether the rule is inherited.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="204f0-214"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 值的按位组合，指定子项如何继承规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-214">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying how the rule is inherited by subkeys.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="204f0-215"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 值的按位组合，用于修改子项继承规则的方式。</span><span class="sxs-lookup"><span data-stu-id="204f0-215">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that modify the way the rule is inherited by subkeys.</span></span> <span data-ttu-id="204f0-216">如果 <paramref name="inheritanceFlags" /> 的值为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则它没有意义。</span><span class="sxs-lookup"><span data-stu-id="204f0-216">Meaningless if the value of <paramref name="inheritanceFlags" /> is <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</span></span></param>
        <param name="flags"><span data-ttu-id="204f0-217"><see cref="T:System.Security.AccessControl.AuditFlags" /> 值的按位组合，它指定是审核成功的访问、失败的访问还是对这两种情况都进行审核。</span><span class="sxs-lookup"><span data-stu-id="204f0-217">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit successful access, failed access, or both.</span></span></param>
        <summary><span data-ttu-id="204f0-218">新建审核规则，指定此规则应用到的用户、要审核的访问权限、规则的继承和传播以及触发此规则的结果。</span><span class="sxs-lookup"><span data-stu-id="204f0-218">Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</span></span></summary>
        <returns><span data-ttu-id="204f0-219">一个 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 对象，表示指定用户的指定审核规则，带有指定标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-219">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> object representing the specified audit rule for the specified user, with the specified flags.</span></span> <span data-ttu-id="204f0-220">该方法的返回类型是基类 <see cref="T:System.Security.AccessControl.AuditRule" />，但可以安全地将返回值强制转换为派生类。</span><span class="sxs-lookup"><span data-stu-id="204f0-220">The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-221">创建审核规则的建议方法是使用<xref:System.Security.AccessControl.RegistryAuditRule>类的构造函数。</span><span class="sxs-lookup"><span data-stu-id="204f0-221">The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.RegistryAuditRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-222">尽管可以指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType>标志, 但没有任何一点要这样做。</span><span class="sxs-lookup"><span data-stu-id="204f0-222">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag, there is no point in doing so.</span></span> <span data-ttu-id="204f0-223">出于审核控制的目的, 子项中的名称/值对不是单独的对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-223">For the purposes of audit control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="204f0-224">对名称/值对的审核权限由子项的权限控制。</span><span class="sxs-lookup"><span data-stu-id="204f0-224">The audit rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="204f0-225">此外, 由于所有子项均为容器 (也就是说, 它们可以包含其他子项), 因此它们不会受到<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志的影响。</span><span class="sxs-lookup"><span data-stu-id="204f0-225">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="204f0-226">最后, 指定<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>标志不必要地使规则维护复杂化, 因为这会影响兼容规则的正常组合。</span><span class="sxs-lookup"><span data-stu-id="204f0-226">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="204f0-227"><paramref name="accessMask" />、<paramref name="inheritanceFlags" />、<paramref name="propagationFlags" /> 或 <paramref name="flags" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="204f0-227"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-228"><paramref name="identityReference" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-228"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="204f0-229">- 或 -</span><span class="sxs-lookup"><span data-stu-id="204f0-229">-or-</span></span> 
 <span data-ttu-id="204f0-230"><paramref name="accessMask" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="204f0-230"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="204f0-231"><paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</span><span class="sxs-lookup"><span data-stu-id="204f0-231"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="204f0-232">获取 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 类用于表示审核规则的类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-232">Gets the type that the <see cref="T:System.Security.AccessControl.RegistrySecurity" /> class uses to represent audit rules.</span></span></summary>
        <value><span data-ttu-id="204f0-233">一个表示 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-233">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-234">派生自<xref:System.Security.AccessControl.ObjectSecurity>类的类将<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>重写属性, 并返回用于表示审核权限的类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-234">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights.</span></span> <span data-ttu-id="204f0-235">当使用包含多个类型的安全对象的数组或集合时, 请使用此属性来确定要用于每个安全对象的正确审核规则类型。</span><span class="sxs-lookup"><span data-stu-id="204f0-235">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; bool" Usage="registrySecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-236">指定要搜索的用户和 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 的 <see cref="T:System.Security.AccessControl.AccessControlType" />，以及匹配规则（如果找到）必须兼容的一组继承和传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-236">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="204f0-237">指定要从兼容规则移除的权限（如果找到）。</span><span class="sxs-lookup"><span data-stu-id="204f0-237">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="204f0-238">搜索如下的访问控制规则：与指定的访问规则具有相同的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝），并具有兼容的继承和传播标志；如果找到，则从中移除指定访问规则中包含的权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-238">Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="204f0-239">如果找到一个兼容规则，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-239"><see langword="true" /> if a compatible rule is found; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-240">将搜索<xref:System.Security.AccessControl.RegistrySecurity>当前的规则, 该规则具有相同的用户和与相同<xref:System.Security.AccessControl.AccessControlType>的值`rule`。</span><span class="sxs-lookup"><span data-stu-id="204f0-240">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="204f0-241">如果未找到此类规则, 则不执行任何操作, 并且该方法`false`将返回。</span><span class="sxs-lookup"><span data-stu-id="204f0-241">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="204f0-242">如果找到匹配规则, 则检查其继承和兼容性标志是否与中`rule`指定的标志兼容。</span><span class="sxs-lookup"><span data-stu-id="204f0-242">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="204f0-243">如果未找到兼容的规则, 则不执行任何操作, 并且该方法`false`将返回。</span><span class="sxs-lookup"><span data-stu-id="204f0-243">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="204f0-244">如果找到具有兼容标志的规则, 则中`rule`指定的权限将从兼容规则中删除, 并且该方法将返回。 `true`</span><span class="sxs-lookup"><span data-stu-id="204f0-244">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="204f0-245">如果`rule`指定的权限不包含在兼容规则中, 则不会对这些权限采取任何措施。</span><span class="sxs-lookup"><span data-stu-id="204f0-245">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="204f0-246">如果从兼容规则中删除所有权限, 则将从当前<xref:System.Security.AccessControl.RegistrySecurity>对象中删除整个规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-246">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-247">下面的代码示例演示如何<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>从兼容规则中删除权限, 以及该方法如何将<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>权限与兼容的规则合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-247">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.</span></span>  
  
 <span data-ttu-id="204f0-248">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象并添加允许当前用户<xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType>权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-248">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> rights.</span></span> <span data-ttu-id="204f0-249">然后, 该示例创建一个规则, 该规则<xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>向用户授予与第一条规则相同的继承和传播权限, 并<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>使用方法从<xref:System.Security.AccessControl.RegistrySecurity>对象中删除此新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-249">The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="204f0-250"><xref:System.Security.AccessControl.RegistryRights.SetValue>是的<xref:System.Security.AccessControl.RegistryRights.ReadKey>组成部分, 因此它将从兼容规则中删除。</span><span class="sxs-lookup"><span data-stu-id="204f0-250"><xref:System.Security.AccessControl.RegistryRights.SetValue> is a constituent of <xref:System.Security.AccessControl.RegistryRights.ReadKey>, so it is removed from the compatible rule.</span></span> <span data-ttu-id="204f0-251">将显示<xref:System.Security.AccessControl.RegistrySecurity>对象中的规则, 并显示的其余<xref:System.Security.AccessControl.RegistryRights.ReadKey>组成部分。</span><span class="sxs-lookup"><span data-stu-id="204f0-251">The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights.ReadKey>.</span></span>  
  
 <span data-ttu-id="204f0-252">然后, 示例代码调用<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>方法, 将<xref:System.Security.AccessControl.RegistryRights.SetValue>权限合并回<xref:System.Security.AccessControl.RegistrySecurity>对象中的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-252">The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights.SetValue> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-253">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-253">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-254">本部分中的第二个示例附加一个安全对象, 并在中<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>执行示例。</span><span class="sxs-lookup"><span data-stu-id="204f0-254">The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-255"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-255"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-256">一个 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />，指定要搜索的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-256">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for.</span></span> <span data-ttu-id="204f0-257">忽略此规则指定的任何权限、继承标志或传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-257">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="204f0-258">搜索与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有访问控制规则，如果找到则将其移除。</span><span class="sxs-lookup"><span data-stu-id="204f0-258">Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-259">当前<xref:System.Security.AccessControl.RegistrySecurity>将搜索具有相同用户和<xref:System.Security.AccessControl.AccessControlType>值`rule`的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-259">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="204f0-260">执行此搜索时, 将忽略指定的`rule`任何权限、继承标志或传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-260">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="204f0-261">如果未找到匹配规则, 则不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="204f0-261">If no matching rules are found, no action is taken.</span></span>  
  
 <span data-ttu-id="204f0-262">例如, 如果用户具有多个规则, 这些规则允许各种权限具有不同的继承和传播标志, 则可以通过创建一个<xref:System.Security.AccessControl.RegistryAccessRule>指定用户的对象并<xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>使用任意权限和标志, 来删除所有这些规则。并将该规则传递给<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="204f0-262">For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref:System.Security.AccessControl.RegistryAccessRule> object that specifies the user and <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>, with any arbitrary rights and flags, and passing that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-263">下面的代码示例演示方法将<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>删除所有匹配用户和的规则, <xref:System.Security.AccessControl.AccessControlType>同时忽略权限和标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-263">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights and flags.</span></span>  
  
 <span data-ttu-id="204f0-264">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象, 并使用不同的继承和传播标志, 为当前用户添加允许和拒绝各种权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-264">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="204f0-265">然后, 该示例创建一个新规则, 该规则允许当前用户获取所有权, 并将此规则传递<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>给方法以删除允许访问的两个规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-265">The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> method to remove the two rules that allow access.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-266">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-266">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-267">请参见<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法和方法。 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="204f0-267">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-268"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-268"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-269">要移除的 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-269">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to remove.</span></span></param>
        <summary><span data-ttu-id="204f0-270">搜索与指定的规则完全匹配的访问控制规则，如果找到则将其移除。</span><span class="sxs-lookup"><span data-stu-id="204f0-270">Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-271">只有在所有详细信息 (包括标志) `rule`中完全匹配时, 才会删除规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-271">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="204f0-272">具有相同用户和<xref:System.Security.AccessControl.AccessControlType>的其他规则不受影响。</span><span class="sxs-lookup"><span data-stu-id="204f0-272">Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="204f0-273">规则表示一个或多个基础访问控制项 (ACE), 在修改用户的访问安全规则时, 将根据需要拆分或合并这些项。</span><span class="sxs-lookup"><span data-stu-id="204f0-273">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</span></span> <span data-ttu-id="204f0-274">因此, 在添加规则时, 该规则可能不再存在于其所在的特定窗体中, 在这种<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>情况下, 该方法将无法删除它。</span><span class="sxs-lookup"><span data-stu-id="204f0-274">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-275">下面的代码示例演示<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>方法仅当规则完全匹配时才删除规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-275">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method removes a rule only if it matches exactly.</span></span>  
  
 <span data-ttu-id="204f0-276">该示例创建两个允许不同权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-276">The example creates two rules that allow different rights.</span></span> <span data-ttu-id="204f0-277">规则具有兼容的继承和传播标志, 因此, 在添加第二个规则时, 它将与第一个规则合并。</span><span class="sxs-lookup"><span data-stu-id="204f0-277">The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first.</span></span> <span data-ttu-id="204f0-278">该示例调用<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>方法, 并指定第一条规则, 但由于规则已合并, 因此没有匹配的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-278">The example calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method, specifying the first rule, but because the rules are merged there is no rule that matches.</span></span> <span data-ttu-id="204f0-279">然后, 该示例调用<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>方法以从合并规则中删除第二个规则, 最后<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>调用方法以删除第一个规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-279">The example then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to the remove the second rule from the merged rule, and finally calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> method to remove the first rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-280">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-280">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-281">请参见<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法和方法。 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="204f0-281">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-282"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-282"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; bool" Usage="registrySecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-283">一个 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />，指定要搜索的用户以及匹配规则（如果找到）必须兼容的一组继承和传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-283">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="204f0-284">指定要从兼容规则移除的权限（如果找到）。</span><span class="sxs-lookup"><span data-stu-id="204f0-284">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="204f0-285">搜索以下的审核控制规则：与指定的规则具有相同的用户，并具有兼容的继承和传播标志；如果找到兼容规则，则从中移除指定的规则中包含的权限。</span><span class="sxs-lookup"><span data-stu-id="204f0-285">Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="204f0-286">如果找到一个兼容规则，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-286"><see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-287">搜索当前<xref:System.Security.AccessControl.RegistrySecurity>的, 其中包含与相同的`rule`用户的审核规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-287">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for an audit rule that has the same user as `rule`.</span></span> <span data-ttu-id="204f0-288">如果未找到此类规则, 则不执行任何操作, 并且该方法`false`将返回。</span><span class="sxs-lookup"><span data-stu-id="204f0-288">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="204f0-289">如果找到匹配规则, 则检查其继承和兼容性标志是否与中`rule`指定的标志兼容。</span><span class="sxs-lookup"><span data-stu-id="204f0-289">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="204f0-290">如果未找到兼容的规则, 则不执行任何操作, 并且该方法`false`将返回。</span><span class="sxs-lookup"><span data-stu-id="204f0-290">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="204f0-291">如果找到具有兼容标志的规则, 则中`rule`指定的权限将从兼容规则中删除, 并且该方法将返回。 `true`</span><span class="sxs-lookup"><span data-stu-id="204f0-291">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="204f0-292">如果`rule`指定的权限不包含在兼容规则中, 则不会对这些权限采取任何措施。</span><span class="sxs-lookup"><span data-stu-id="204f0-292">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="204f0-293">如果从兼容规则中删除所有权限, 则将从当前<xref:System.Security.AccessControl.RegistrySecurity>对象中删除整个规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-293">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-294"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-294"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-295">指定要搜索的用户的 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-295">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> that specifies the user to search for.</span></span> <span data-ttu-id="204f0-296">忽略此规则指定的任何权限、继承标志或传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-296">Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="204f0-297">搜索所有使用相同用户作为指定规则的审核规则，如果找到符合条件的规则，则移除它们。</span><span class="sxs-lookup"><span data-stu-id="204f0-297">Searches for all audit rules with the same user as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-298">当前<xref:System.Security.AccessControl.RegistrySecurity>将搜索与具有相同`rule`用户的审核规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-298">The current <xref:System.Security.AccessControl.RegistrySecurity> is searched for audit rules that have the same user as `rule`.</span></span> <span data-ttu-id="204f0-299">执行此搜索时, 将忽略指定的`rule`任何权限、继承标志或传播标志。</span><span class="sxs-lookup"><span data-stu-id="204f0-299">Any rights, inheritance flags, or propagation flags specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="204f0-300">如果未找到匹配规则, 则不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="204f0-300">If no matching rules are found, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-301"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-301"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-302">要移除的 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-302">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to be removed.</span></span></param>
        <summary><span data-ttu-id="204f0-303">搜索与指定的规则完全匹配的审核规则；如果找到，则移除这些规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-303">Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-304">只有在所有详细信息 (包括标志) `rule`中完全匹配时, 才会删除规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-304">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="204f0-305">同一用户的其他审核规则不受影响。</span><span class="sxs-lookup"><span data-stu-id="204f0-305">Other audit rules for the same user are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="204f0-306">规则表示一个或多个基础访问控制项 (ACE), 在修改用户的审核安全规则时, 将根据需要拆分或合并这些项。</span><span class="sxs-lookup"><span data-stu-id="204f0-306">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</span></span> <span data-ttu-id="204f0-307">因此, 在添加规则时, 该规则可能不再存在于其所在的特定窗体中, 在这种<xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A>情况下, 该方法将无法删除它。</span><span class="sxs-lookup"><span data-stu-id="204f0-307">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-308"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-308"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-309">要添加的 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-309">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span></span> <span data-ttu-id="204f0-310">由此规则指定的用户确定在添加此规则之前要移除的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-310">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="204f0-311">不论 <see cref="T:System.Security.AccessControl.AccessControlType" /> 如何，移除与指定的规则具有相同用户的所有访问控制规则，然后添加指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-311">Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-312">如果没有用户与指定规则匹配的访问规则, `rule`则会添加。</span><span class="sxs-lookup"><span data-stu-id="204f0-312">If there are no access rules whose user matches the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-313">下面的代码示例演示如何将<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>匹配用户的所有规则替换为为匹配指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-313">The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.</span></span>  
  
 <span data-ttu-id="204f0-314">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象, 并使用不同的继承和传播标志, 为当前用户添加允许和拒绝各种权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-314">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="204f0-315">然后, 该示例创建一个新规则, 该规则允许当前用户只读取密钥, 并使用<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>方法删除用户的所有规则并将其替换为新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-315">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> method to remove the all rules for the user and replace them with the new rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-316">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-316">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-317">请参见<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法和方法。 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="204f0-317">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-318">要添加的 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-318">The <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> to add.</span></span> <span data-ttu-id="204f0-319">由此规则的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 确定在添加此规则之前要移除的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-319">The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="204f0-320">移除与指定的规则具有相同用户和 <see cref="T:System.Security.AccessControl.AccessControlType" />（允许或拒绝）的所有控制规则，然后添加指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-320">Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-321">如果指定的规则具有<xref:System.Security.AccessControl.AccessControlType.Allow>, 则此方法的作用是移除指定用户<xref:System.Security.AccessControl.AccessControlType.Allow>的所有规则, 并将其替换为指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-321">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule.</span></span> <span data-ttu-id="204f0-322">如果指定的规则具有<xref:System.Security.AccessControl.AccessControlType.Deny>, 则<xref:System.Security.AccessControl.AccessControlType.Deny>指定用户的所有规则都将替换为指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-322">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.</span></span>  
  
 <span data-ttu-id="204f0-323">如果没有规则的用户和<xref:System.Security.AccessControl.AccessControlType>匹配指定的规则, `rule`则添加。</span><span class="sxs-lookup"><span data-stu-id="204f0-323">If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="204f0-324">下面的代码示例显示方法删除<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>与用户<xref:System.Security.AccessControl.AccessControlType>和的`rule`规则, 同时忽略权限和标志, 并将其替换为`rule`。</span><span class="sxs-lookup"><span data-stu-id="204f0-324">The following code example shows that the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, ignoring rights and flags, and replaces them with `rule`.</span></span>  
  
 <span data-ttu-id="204f0-325">该示例创建一个<xref:System.Security.AccessControl.RegistrySecurity>对象, 并使用不同的继承和传播标志, 为当前用户添加允许和拒绝各种权限的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-325">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags.</span></span> <span data-ttu-id="204f0-326">然后, 该示例创建一个新规则, 该规则允许当前用户只读取密钥, 并使用<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>方法删除允许访问的两个规则, 并将其替换为新规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-326">The example then creates a new rule that allows the current user only to read the key, and uses the <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> method to remove the two rules that allow access and to replace them with the new rule.</span></span> <span data-ttu-id="204f0-327">拒绝访问的规则不受影响。</span><span class="sxs-lookup"><span data-stu-id="204f0-327">The rule that denies access is not affected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="204f0-328">此示例不会将安全对象附加到<xref:Microsoft.Win32.RegistryKey>对象。</span><span class="sxs-lookup"><span data-stu-id="204f0-328">This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object.</span></span> <span data-ttu-id="204f0-329">请参见<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>方法和方法。 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="204f0-329">See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-330"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-330"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="204f0-331">要添加的 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-331">The <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> to add.</span></span> <span data-ttu-id="204f0-332">由此规则指定的用户确定在添加此规则之前要移除的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-332">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="204f0-333">不论 <see cref="T:System.Security.AccessControl.AuditFlags" /> 的值如何，移除与指定的规则具有相同用户的所有审核规则，然后添加指定的规则。</span><span class="sxs-lookup"><span data-stu-id="204f0-333">Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="204f0-334">如果没有与指定规则匹配的审核规则, `rule`则会添加。</span><span class="sxs-lookup"><span data-stu-id="204f0-334">If there are no audit rules whose user matches the specified rule, `rule` is added.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="204f0-335"><paramref name="rule" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="204f0-335"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

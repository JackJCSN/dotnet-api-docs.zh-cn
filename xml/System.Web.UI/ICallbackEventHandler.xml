<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef7b1b41a1d7ac8730ff15ee9421d471cd5ace43" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70447093" /></Metadata><TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>用于指示控件可以作为服务器上的回调事件的目标。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为需要接收回调事件的任何自定义控件实现接口。 <xref:System.Web.UI.ICallbackEventHandler> 有关详细信息，请参阅[实现无回发的客户端回调](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)。  
  
 实现<xref:System.Web.UI.ICallbackEventHandler>接口的控件的示例<xref:System.Web.UI.WebControls.GridView>包括、 <xref:System.Web.UI.WebControls.DetailsView>和<xref:System.Web.UI.WebControls.TreeView>控件。 当回调事件的目标为实现<xref:System.Web.UI.ICallbackEventHandler>接口的控件时<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> ，将调用方法来处理事件，并将事件自变量作为参数传递，并且方法<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>将返回回调的结果。  
  
 在回调过程中从数据源控件检索数据的控件可以同步或异步执行此操作。 ASP.NET 控件（ <xref:System.Web.UI.WebControls.GridView>如<xref:System.Web.UI.WebControls.DetailsView>、和<xref:System.Web.UI.WebControls.TreeView> ）是同步实现的。 同步回调不会阻止用户在浏览器中工作。 在同步模式下，一次只能执行一个回调，并优先处理最后一个回调。 实现 Web 控件以支持异步行为时，可以同时引发多个回调。 有关异步编程的详细信息，请参阅[基于事件的异步模式（EAP）](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)。  
  
 您可以指定是否验证来自实现<xref:System.Web.UI.ICallbackEventHandler>接口的控件所呈现的用户界面的回调事件。 事件验证是一种很好的安全做法。 但出于性能原因，你可以禁用它。 若要控制是否对回调事件执行事件验证，请设置`enableEventValidation` web.config 文件的[@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)指令或`enableEventValidation` [pages 元素（ASP.NET Settings Schema）](https://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458)的属性。 如果在代码中<xref:System.Web.UI.Page.EnableEventValidation%2A>设置属性，请`Page_Init`在页面处理阶段设置该属性。 若要详细了解事件验证的安全优势及其性能成本，请参阅[ASP.NET 性能概述](https://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b)。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回以控件为目标的回调事件的结果。</summary>
        <returns>回调的结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中引发的<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>异常不会<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>阻止调用并返回结果。 若要<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>防止返回结果，请在中<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>引发异常时设置标志，并从<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>返回空字符串。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">一个字符串，表示要传递到事件处理程序的事件参数。</param>
        <summary>处理以控件为目标的回调事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当`null`用作事件参数参数时，字符串将被序列化为 "null" 并发送回服务器。 由于没有办法区分`null`和 "null"，因此应`null`避免将参数参数用于回调。  
  
 中引发的<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>异常不会<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>阻止调用并返回结果。 若要<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>防止返回结果，请在中<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>引发异常时设置标志，并从<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>返回空字符串。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ControlCachePolicy" FullName="System.Web.UI.ControlCachePolicy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7afd40dbf913bc4476da6a5e53b2c30808ac3411" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70447203" /></Metadata><TypeSignature Language="C#" Value="public sealed class ControlCachePolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ControlCachePolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCachePolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ControlCachePolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCachePolicy sealed" />
  <TypeSignature Language="F#" Value="type ControlCachePolicy = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对 ASP.NET 用户控件的输出缓存设置的编程访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 开发人员使用类来指定用户控件（.ascx 文件）的输出缓存设置。 <xref:System.Web.UI.ControlCachePolicy> ASP.NET 在<xref:System.Web.UI.BasePartialCachingControl>实例中嵌入用户控件。 <xref:System.Web.UI.BasePartialCachingControl>类表示启用了输出缓存的用户控件。 在访问<xref:System.Web.UI.PartialCachingControl>控件的<xref:System.Web.UI.BasePartialCachingControl.CachePolicy%2A?displayProperty=nameWithType>属性时，将始终接收有效<xref:System.Web.UI.ControlCachePolicy>的对象。 <xref:System.Web.UI.UserControl.CachePolicy%2A?displayProperty=nameWithType>但是，如果访问<xref:System.Web.UI.UserControl>控件的属性，则只有当用户控件已由<xref:System.Web.UI.ControlCachePolicy> <xref:System.Web.UI.BasePartialCachingControl>控件包装时，才会收到有效的对象。 如果未包装，则当你<xref:System.Web.UI.ControlCachePolicy>尝试对属性返回的对象没有关联<xref:System.Web.UI.BasePartialCachingControl>的时，它将引发异常。 若要确定<xref:System.Web.UI.UserControl>实例是否支持缓存而不生成异常，请<xref:System.Web.UI.ControlCachePolicy.SupportsCaching%2A>检查属性。  
  
 <xref:System.Web.UI.ControlCachePolicy>使用类是启用输出缓存的多种方式之一。 以下列表描述了可用于启用输出缓存的方法：  
  
-   使用指令启用声明性方案中的输出缓存。  
  
-   <xref:System.Web.UI.PartialCachingAttribute>使用特性可在代码隐藏文件中为用户控件启用缓存。  
  
-   使用类以编程方式指定缓存设置，在这些方案中，您使用<xref:System.Web.UI.BasePartialCachingControl>的是已启用缓存的实例，这些实例使用上述方法之一<xref:System.Web.UI.TemplateControl.LoadControl%2A?displayProperty=nameWithType> ，并使用方法动态加载。 <xref:System.Web.UI.ControlCachePolicy> 只能在控件生命周期的`Init`和`PreRender`阶段之间成功处理实例。 <xref:System.Web.UI.ControlCachePolicy> 如果在此`PreRender`阶段<xref:System.Web.UI.ControlCachePolicy>之后修改对象，ASP.NET 将引发异常，因为呈现控件后所做的任何更改都不会影响缓存设置（ `Render`控件在阶段缓存）。 最后，在实际呈现时，用户控件实例<xref:System.Web.UI.ControlCachePolicy> （及其对象）仅适用于编程操作。  
  
   
  
## Examples  
 下面的代码示例演示如何在运行时动态加载用户控件并以编程方式进行操作。 特性应用于名为`SimpleControl`的用户控件，这意味着用户<xref:System.Web.UI.PartialCachingControl>控件在运行时由控件包装。 <xref:System.Web.UI.PartialCachingAttribute> 对象的缓存设置可以通过其关联<xref:System.Web.UI.ControlCachePolicy>的对象进行编程操作，该对象可<xref:System.Web.UI.PartialCachingControl>通过对包装该对象的控件的引用提供。 `SimpleControl` 在此示例中， <xref:System.Web.UI.ControlCachePolicy.Duration%2A>在页初始化期间检查属性，并在满足<xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A>某些<xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>条件时使用和方法进行更改。  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 下面的代码示例演示如何在`SimpleControl` Web 窗体页中使用用户控件。 若要成功运行此示例，请确保用户控件文件（.ascx）、其代码隐藏文件（.cs 或 .vb）以及承载用户控件（.aspx）的 Web 窗体页位于同一个目录中。  
  
 [!code-csharp[System.Web.UI.ControlCachePolicy_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/SimpleControl.ascx.cs#2)]
 [!code-vb[System.Web.UI.ControlCachePolicy_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/SimpleControl.ascx.vb#2)]  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/SimpleControl.ascx#3)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/SimpleControl.ascx#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.BasePartialCachingControl.CachePolicy" />
    <altmember cref="P:System.Web.UI.UserControl.CachePolicy" />
    <related type="Article" href="https://msdn.microsoft.com/library/cdd8e523-7305-4685-a456-c5be1de1367e">缓存 ASP.NET 页面的部分</related>
  </Docs>
  <Members>
    <Member MemberName="Cached">
      <MemberSignature Language="C#" Value="public bool Cached { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cached" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Cached" />
      <MemberSignature Language="VB.NET" Value="Public Property Cached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cached { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Cached : bool with get, set" Usage="System.Web.UI.ControlCachePolicy.Cached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否为用户控件启用片段缓存。</summary>
        <value>如果缓存用户控件的输出，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。  
  
或 
<see cref="P:System.Web.UI.ControlCachePolicy.Cached" /> 属性是在控件的初始化和呈现阶段之外设置的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dependency">
      <MemberSignature Language="C#" Value="public System.Web.Caching.CacheDependency Dependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Caching.CacheDependency Dependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Dependency" />
      <MemberSignature Language="VB.NET" Value="Public Property Dependency As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Caching::CacheDependency ^ Dependency { System::Web::Caching::CacheDependency ^ get(); void set(System::Web::Caching::CacheDependency ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Dependency : System.Web.Caching.CacheDependency with get, set" Usage="System.Web.UI.ControlCachePolicy.Dependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与缓存的用户控件输出关联的 <see cref="T:System.Web.Caching.CacheDependency" /> 类的实例。</summary>
        <value>与控件关联的 <see cref="T:System.Web.Caching.CacheDependency" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性委托给包装用户控件的<xref:System.Web.UI.BasePartialCachingControl>控件的属性。 <xref:System.Web.UI.BasePartialCachingControl.Dependency%2A>  <xref:System.Web.UI.ControlCachePolicy.Dependency%2A> <xref:System.Web.Caching.CacheDependency>实例失效后，将从缓存中删除该用户控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。  
  
或 
<see cref="P:System.Web.UI.ControlCachePolicy.Dependency" /> 属性是在控件的初始化和呈现阶段之外设置的。</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
        <altmember cref="P:System.Web.UI.BasePartialCachingControl.Dependency" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Duration" />
      <MemberSignature Language="VB.NET" Value="Public Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Duration : TimeSpan with get, set" Usage="System.Web.UI.ControlCachePolicy.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存的项将在输出缓存中保留的时间。</summary>
        <value><see cref="T:System.TimeSpan" />，表示用户控件将在输出缓存中保留的时间。 默认值为 <see cref="F:System.TimeSpan.Zero" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用<xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A>方法设置了绝对过期策略，则<xref:System.Web.UI.ControlCachePolicy.Duration%2A>属性将返回缓存条目过期之前的剩余时间量。  
  
   
  
## Examples  
 下面的代码示例演示如何在运行时动态加载用户控件并以编程方式进行操作。 特性应用于名为`SimpleControl`的用户控件，这意味着<xref:System.Web.UI.PartialCachingControl>它在运行时由控件包装。 <xref:System.Web.UI.PartialCachingAttribute> 对象的缓存设置可以通过其关联<xref:System.Web.UI.ControlCachePolicy>的对象进行编程操作，该对象可<xref:System.Web.UI.PartialCachingControl>通过对包装该对象的控件的引用提供。 `SimpleControl` 在此示例中， <xref:System.Web.UI.ControlCachePolicy.Duration%2A>在页初始化期间检查属性，并在满足某些条件时更改缓存过期。 此示例是为<xref:System.Web.UI.ControlCachePolicy>类提供的更大示例的一部分。  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。  
  
- 或 - 
<see cref="P:System.Web.UI.ControlCachePolicy.Duration" /> 属性是在控件的初始化和呈现阶段之外设置的。</exception>
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string with get, set" Usage="System.Web.UI.ControlCachePolicy.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与控件实例关联的输出缓存提供程序的名称，。</summary>
        <value>提供程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性使您可以<xref:System.Web.UI.ControlCachePolicy>使用实例指定与控件关联的当前输出缓存提供程序。 <xref:System.Web.UI.ControlCachePolicy.ProviderName%2A> 此属性只能在控件生命周期中<xref:System.Web.UI.Control.PreRender>发生事件之前设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到提供程序名称。</exception>
        <exception cref="T:System.Web.HttpException">尝试在 <see cref="P:System.Web.UI.ControlCachePolicy.ProviderName" /> 事件期间或之后设置 <see cref="E:System.Web.UI.Control.PreRender" /> 属性。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetExpires">
      <MemberSignature Language="C#" Value="public void SetExpires (DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExpires(valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExpires (expirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExpires(DateTime expirationTime);" />
      <MemberSignature Language="F#" Value="member this.SetExpires : DateTime -&gt; unit" Usage="controlCachePolicy.SetExpires expirationTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="expirationTime"><see cref="T:System.DateTime" />，之后缓存项会过期。</param>
        <summary>指示包装用户控件的 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 控件在指定的日期和时间使缓存项过期。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>使用和<xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A>方法`true` （ <xref:System.Web.UI.BasePartialCachingControl> 通过传递）指示包装用户控件的控件使用可调过期缓存策略，而不是绝对过期策略。 使用方法和方法（通过传递`false`）指定绝对过期策略。 <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>  
  
   
  
## Examples  
 下面的代码示例演示如何在运行时动态加载用户控件并以编程方式进行操作。 特性应用于名为`SimpleControl`的用户控件，这意味着用户<xref:System.Web.UI.PartialCachingControl>控件在运行时由控件包装。 <xref:System.Web.UI.PartialCachingAttribute> 对象的缓存设置可以通过其关联<xref:System.Web.UI.ControlCachePolicy>的对象进行编程操作，该对象可<xref:System.Web.UI.PartialCachingControl>通过对包装该对象的控件的引用提供。 `SimpleControl` 在此示例中， <xref:System.Web.UI.ControlCachePolicy.Duration%2A>在页初始化期间检查属性，并在满足<xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A>某些<xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>条件时使用和方法进行更改。 此示例是为<xref:System.Web.UI.ControlCachePolicy>类提供的更大示例的一部分。  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。</exception>
        <altmember cref="P:System.Web.UI.ControlCachePolicy.Duration" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetSlidingExpiration">
      <MemberSignature Language="C#" Value="public void SetSlidingExpiration (bool useSlidingExpiration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSlidingExpiration(bool useSlidingExpiration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSlidingExpiration (useSlidingExpiration As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSlidingExpiration(bool useSlidingExpiration);" />
      <MemberSignature Language="F#" Value="member this.SetSlidingExpiration : bool -&gt; unit" Usage="controlCachePolicy.SetSlidingExpiration useSlidingExpiration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useSlidingExpiration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useSlidingExpiration">如果使用可调缓存过期而不是绝对过期，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>指示包装用户控件的 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 控件将用户控件的缓存项设置为使用可调或绝对过期。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>使用和<xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A>方法`true` （ <xref:System.Web.UI.BasePartialCachingControl> 通过传递）指示包装用户控件的控件使用可调过期缓存策略，而不是绝对过期策略。 使用方法和方法（通过传递`false`）指定绝对过期策略。 <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A>  
  
   
  
## Examples  
 下面的代码示例演示如何在运行时动态加载用户控件并以编程方式进行操作。 名`SimpleControl`为的用户控件<xref:System.Web.UI.PartialCachingAttribute>使用特性进行修饰，这意味着<xref:System.Web.UI.PartialCachingControl>它在运行时由控件包装。 对象的缓存设置可以通过其关联<xref:System.Web.UI.ControlCachePolicy>的对象进行编程操作，该对象可<xref:System.Web.UI.PartialCachingControl>通过对包装该对象的控件的引用提供。 `SimpleControl` 在此示例中，缓存设置在页初始化期间进行检查，并在满足某些条件时进行更改。 此示例是为<xref:System.Web.UI.ControlCachePolicy>类提供的更大示例的一部分。  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。</exception>
        <altmember cref="P:System.Web.UI.ControlCachePolicy.Duration" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="SetVaryByCustom">
      <MemberSignature Language="C#" Value="public void SetVaryByCustom (string varyByCustom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVaryByCustom(string varyByCustom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetVaryByCustom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVaryByCustom (varyByCustom As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVaryByCustom(System::String ^ varyByCustom);" />
      <MemberSignature Language="F#" Value="member this.SetVaryByCustom : string -&gt; unit" Usage="controlCachePolicy.SetVaryByCustom varyByCustom" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varyByCustom" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="varyByCustom">自定义字符串列表。</param>
        <summary>设置要由输出缓存用来改变用户控件的自定义字符串列表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将 "browser" 作为`varyByCustom`参数传递，则用户控件将因浏览器类型和主要版本号而变化。 如果输入了另一个自定义字符串，则必须<xref:System.Web.HttpApplication.GetVaryByCustomString%2A>在应用程序的 global.asax 文件中重写方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom" />
      </Docs>
    </Member>
    <Member MemberName="SupportsCaching">
      <MemberSignature Language="C#" Value="public bool SupportsCaching { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.SupportsCaching" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsCaching { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsCaching : bool" Usage="System.Web.UI.ControlCachePolicy.SupportsCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示用户控件是否支持缓存。</summary>
        <value>如果用户控件支持缓存，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果用户控件与某个<xref:System.Web.UI.BasePartialCachingControl>实例相关联，则该用户控件支持缓存，这会发出信号，指示 ASP.NET 分析器分析了指令或用户控件已<xref:System.Web.UI.PartialCachingAttribute>使用属性进行修饰。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PartialCachingAttribute" />
        <altmember cref="T:System.Web.UI.BasePartialCachingControl" />
      </Docs>
    </Member>
    <Member MemberName="VaryByControl">
      <MemberSignature Language="C#" Value="public string VaryByControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VaryByControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.VaryByControl" />
      <MemberSignature Language="VB.NET" Value="Public Property VaryByControl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VaryByControl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.VaryByControl : string with get, set" Usage="System.Web.UI.ControlCachePolicy.VaryByControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用来改变缓存输出的控件标识符列表。</summary>
        <value>分号分隔的字符串列表，用于改变用户控件的输出缓存。 这些字符串表示在用户控件中声明的 ASP.NET 服务器控件的 <see cref="P:System.Web.UI.Control.ID" /> 属性值。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。  
  
或 
<see cref="P:System.Web.UI.ControlCachePolicy.VaryByControl" /> 属性是在控件的初始化和呈现阶段之外设置的。</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByControls" />
      </Docs>
    </Member>
    <Member MemberName="VaryByParams">
      <MemberSignature Language="C#" Value="public System.Web.HttpCacheVaryByParams VaryByParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpCacheVaryByParams VaryByParams" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.VaryByParams" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VaryByParams As HttpCacheVaryByParams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCacheVaryByParams ^ VaryByParams { System::Web::HttpCacheVaryByParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VaryByParams : System.Web.HttpCacheVaryByParams" Usage="System.Web.UI.ControlCachePolicy.VaryByParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCacheVaryByParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要用来改变缓存输出的 <see langword="GET" /> 或 <see langword="POST" /> 参数名称列表。</summary>
        <value>分号分隔的字符串列表，用于使输出缓存发生变化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，这些字符串对应于使用 GET 方法发送的查询字符串值或使用 POST 方法发送的参数。 <xref:System.Web.UI.ControlCachePolicy.VaryByParams%2A>当属性设置为多个参数时，输出缓存会为每个指定的参数包含不同版本的请求文档。 可能的值包括“none”、“*”以及任何有效的查询字符串或 POST 参数名。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">用户控件与 <see cref="T:System.Web.UI.BasePartialCachingControl" /> 没有关联，因此不可缓存。</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByParams" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="104d2049917965e51df31d302ef405c67a321e2f" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70482533" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>向 ASP.NET 服务器控件的输出流写入一系列特定于 cHTML 的字符和文本。 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类提供 ASP.NET 服务器控件在将 cHTML 内容呈现给客户端时所使用的格式化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML 或 cHTML 是 HTML 2.0、HTML 3.2 和 HTML 4.0 的子集，设计用于在内存和 CPU 能力有限的设备上进行呈现，同时还可呈现小显示屏幕、有限格式设置功能以及有限数量的输入选项（如手机触摸板）。 因此，cHTML 不支持以下功能：  
  
-   JPEG 图像。  
  
-   张.  
  
-   图像映射。  
  
-   多字符字体和样式。  
  
-   背景颜色和图像。  
  
-   文本框.  
  
-   样式表。  
  
 类派生<xref:System.Web.UI.Html32TextWriter>自类，并且它的大部分功能由提供， <xref:System.Web.UI.HtmlTextWriter>所有标记文本编写器的基类（该类是类）。 <xref:System.Web.UI.Html32TextWriter> <xref:System.Web.UI.ChtmlTextWriter>  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个`CustomChtmlTextWriter` <xref:System.Web.UI.ChtmlTextWriter>从类派生的名为的类。 它创建两个构造函数并重<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>写方法，以`bgcolor`防止将样式特性写入<xref:System.Web.UI.ChtmlTextWriter>对象的输出流中。 它还将创建一个名`ChtmlCustomPageAdapter`为的类，该类`CreateCustomChtmlTextWriter`定义一个方法，该方法创建并`CustomChtmlTextWriter`返回类的实例。 然后`CustomChtmlTextWriter` ，会向具有使用 cHTML 标记的浏览器的设备呈现页面的 cHTML 内容。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>初始化使用 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 常数使行缩进的 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类具有两个构造函数，这是直接或间接<xref:System.Web.UI.HtmlTextWriter>从类派生的所有类的标准。 <xref:System.Web.UI.ChtmlTextWriter>  
  
 构造函数采用<xref:System.IO.TextWriter>类的实例作为参数，调用第二个构造函数并向其传递两个参数值： <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>  
  
-   <xref:System.IO.TextWriter>  
  
-   在<xref:System.Web.UI.HtmlTextWriter.DefaultTabString>字段中指定的字符串值，用于定义 XHTML 文本编写器使用的制表符间距。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个名为`ChtmlCustomPageAdapter`的类，并定义一个方法， `CreateCustomChtmlTextWriter`该方法创建并`CustomChtmlTextWriter`返回类的实例。 然后`CustomChtmlTextWriter` ，使用使用 cHTML 标记的浏览器向设备呈现页面的 cHTML 内容。  
  
 此代码示例是为<xref:System.Web.UI.ChtmlTextWriter>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">呈现标记内容的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="tabString"><see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> 中定义的空格数。</param>
        <summary>使用指定的行缩进初始化 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数采用<xref:System.IO.TextWriter>类的实例和字符串<xref:System.Web.UI.Html32TextWriter>作为参数，在创建<xref:System.Web.UI.ChtmlTextWriter>类的实例时调用采用相同参数的构造函数。 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个名`CustomChtmlTextWriter`为的自定义类，该类派生<xref:System.Web.UI.ChtmlTextWriter>自类。 它创建两个构造函数，可用于创建自定义类的实例，其模式与从<xref:System.Web.UI.HtmlTextWriter>类直接或间接派生的所有类的模式相同。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要添加特性的 cHTML 元素。</param>
        <param name="attributeName">要添加到 <paramref name="elementName" /> 的特性。</param>
        <summary>将一个特性添加到 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 对象的 cHTML 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>方法将特性添加到 cHTML 元素。 可识别的特性存储在<xref:System.Collections.Hashtable> <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>属性所引用的<xref:System.Web.UI.ChtmlTextWriter>对象的已识别特性集合中。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已全局取消的特性（无法在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>已全局取消的 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的列表显示了在创建<xref:System.Web.UI.ChtmlTextWriter>类的新实例时设置的全局禁止使用的属性。  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">要呈现的 cHTML 特性。</param>
        <param name="value">分配给 <paramref name="name" /> 的值。</param>
        <param name="key">与 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 关联的 <paramref name="name" />。</param>
        <summary>确定指定的 cHTML 特性及其值是否将呈现给请求页。 可以在从 <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> 类派生的类中重写 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 方法，以筛选出不希望在支持 cHTML 的设备上呈现的特性。</summary>
        <returns>如果将特性及其值写入 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 输入流，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下， <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>该方法阻止全局禁止显示<xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A>在属性中列出的属性和元素特定的、禁止写入到输出流中<xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A>的属性中列出的属性。 可以在派生<xref:System.Web.UI.ChtmlTextWriter>自类的类<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>中重写方法的行为。  
  
   
  
## Examples  
 下面的代码示例演示如何使用重写<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>方法的自定义类，以防止将`bgcolor`特性写入 cHTML 输出流中。 然后，它<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> <xref:System.Web.UI.ChtmlTextWriter>从类中调用基方法提供的功能，以确保也使用其默认行为。  
  
 此代码示例是为<xref:System.Web.UI.ChtmlTextWriter>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">包含要呈现的样式属性名称的字符串。</param>
        <param name="value">一个包含要分配给 <paramref name="name" /> 的值的字符串。</param>
        <param name="key">与 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 关联的 <paramref name="name" />。</param>
        <summary>确定是否可以向当前标记元素呈现指定的 cHTML 标记样式特性及其值。</summary>
        <returns>如果可以呈现样式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `false` <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> 当 `key` 等于字段且值为 `"line-through"` 时，该方法返回。 <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">一个包含要呈现的 cHTML 元素的名称的字符串。</param>
        <param name="key">与 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 关联的 <paramref name="name" />。</param>
        <summary>确定指定的 cHTML 标记元素是否将呈现给请求页。</summary>
        <returns>如果可以呈现指定的 cHTML 标记元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 cHTML 元素是一个`span`元素，则该方法将`false` <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A>返回。 对于所有其他标记，它将`true`返回。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可识别特性（可以在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>可识别 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>使用方法可将可识别的特性添加到识别的特性集合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">要从中移除特性的 cHTML 元素。</param>
        <param name="attributeName">要从 <paramref name="elementName" /> 移除的特性。</param>
        <summary>移除 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 对象的 cHTML 元素的特性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>方法从 cHTML 元素中移除特性。 将从<xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>属性所引用的<xref:System.Web.UI.ChtmlTextWriter>对象的 " <xref:System.Collections.Hashtable>已识别特性" 集合中删除识别的特性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户指定的已取消的特性（无法在 cHTML 元素上呈现）的 <see cref="T:System.Collections.Hashtable" /> 对象。</summary>
        <value>已取消的 cHTML 特性的 <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>使用方法可将特性添加到取消的特性集合。  
  
 下面的列表显示在创建`div` <xref:System.Web.UI.ChtmlTextWriter>类的新实例时为元素设置的默认取消的特性。  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 下面的列表显示在创建`span` <xref:System.Web.UI.ChtmlTextWriter>类的新实例时为元素设置的默认取消的特性。  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see langword="br" /> 元素写入 cHTML 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>使用方法向 cHTML 流中插入换行符。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何创建 cHTML 类和自定义属性。 第二个代码示例演示如何在网页上使用自定义类。  
  
 若要使用自`ChtmlSimplelabelAdapter`定义适配器，请将以下代码添加到 .NET Framework 配置目录的浏览器的子目录中的相应计算机范围内的文件，或添加到 Web 下的 App_Browsers 目录中的自定义浏览器文件应用程序根目录。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 下面的代码示例演示如何为名`ChtmlSimpleLabelAdapter` `SimpleLabel`为的类创建一个名为的 cHTML 适配器类。 它创建一个自`Control`定义属性，该`ChtmlSimpleLabelAdapter`属性允许类`SimpleLabel`访问类的成员，然后重写<xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>方法。 在替代中，将发生以下情况：  
  
-   它创建<xref:System.Web.UI.ChtmlTextWriter>一个名`w`为的对象的引用， <xref:System.Web.UI.HtmlTextWriter>该对象派生自作为<xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>方法的`writer`参数传递的对象。  
  
-   它将创建一个字符串，并将其设置`SimpleLabel.Text`为与值相等。  
  
-   它调用<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>方法，将标签的<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>属性定义的样式应用到 cHTML 输出流中。  
  
-   它将`Text`属性值写入流，并通过<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>调用方法关闭样式块。  
  
-   它调用<xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>方法，以在呈现`br`文本和样式后将元素呈现给输出流。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 下面的示例演示如何在网页中`SimpleLabel`使用类。  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要进行编码并写入到输出流的文本字符串。</param>
        <summary>对请求设备的指定文本进行编码，然后将其写入到输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果传入<xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>方法的文本参数为`null`或的长度为零，则不写入任何内容。  
  
 如果字符串包含尖括号（\<或 >）或与号（&），并且你想要确保它们在请求设备上正确呈现，请使用方法。 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>  
  
 方法使用基类的<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>方法。 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>

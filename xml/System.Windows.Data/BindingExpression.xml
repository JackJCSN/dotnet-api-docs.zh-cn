<Type Name="BindingExpression" FullName="System.Windows.Data.BindingExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6300e7cf3d76dc813b065e4a554061c3a2d5c179" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69211090" /></Metadata><TypeSignature Language="C#" Value="public sealed class BindingExpression : System.Windows.Data.BindingExpressionBase, System.Windows.IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BindingExpression extends System.Windows.Data.BindingExpressionBase implements class System.Windows.IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingExpression" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BindingExpression&#xA;Inherits BindingExpressionBase&#xA;Implements IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingExpression sealed : System::Windows::Data::BindingExpressionBase, System::Windows::IWeakEventListener" />
  <TypeSignature Language="F#" Value="type BindingExpression = class&#xA;    inherit BindingExpressionBase&#xA;    interface IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingExpressionBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IWeakEventListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>包含有关 <see cref="T:System.Windows.Data.Binding" /> 的单个实例的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.Binding>类是绑定的声明的高级类。 <xref:System.Windows.Data.BindingExpression>类是维护绑定源和绑定目标之间的连接的基础对象。 包含可在多个<xref:System.Windows.Data.BindingExpression>对象之间共享的所有信息。 <xref:System.Windows.Data.Binding> 是无法共享的实例表达式, 它包含有关的<xref:System.Windows.Data.Binding>所有实例信息。 <xref:System.Windows.Data.BindingExpression>  
  
 例如, 请考虑以下情况, 其中`myDataObject`是`MyData`类的一个实例, `myBinding`是源<xref:System.Windows.Data.Binding>对象, `MyData`类是一个定义的类, 其中包含一个名为`MyDataProperty`的字符串属性。 此示例将 (的`mytext` <xref:System.Windows.Controls.TextBlock>实例) 的文本内容绑定到`MyDataProperty`。  
  
 [!code-csharp[CodeOnlyBinding#1](~/samples/snippets/csharp/VS_Snippets_Wpf/CodeOnlyBinding/CSharp/binding.cs#1)]
 [!code-vb[CodeOnlyBinding#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CodeOnlyBinding/VisualBasic/App.vb#1)]  
  
 您可以使用相同`myBinding`的对象创建其他绑定。 例如, 您可以使用`myBinding`对象将复选框的文本内容绑定到。 `MyDataProperty` 在这种情况下, 将有两个<xref:System.Windows.Data.BindingExpression> `myBinding`共享对象的实例。  
  
 您可以通过<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>使用<xref:System.Windows.Data.BindingExpression>方法或数据绑定对象上的<xref:System.Windows.FrameworkElement.GetBindingExpression%2A>方法来获取对象。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingExpression.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataItem : obj" Usage="System.Windows.Data.BindingExpression.DataItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Data.BindingExpression" /> 使用的绑定源对象。</summary>
        <value>此 <see cref="T:System.Windows.Data.BindingExpression" /> 使用的绑定源对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了<xref:System.Windows.Controls.Primitives.ButtonBase.Click>一个事件处理程序的实现, 该事件处理程序<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>使用<xref:System.Windows.Data.BindingExpression>方法获取, 然后<xref:System.Windows.Data.BindingExpression.DataItem%2A>调用属性来访问绑定源对象。  
  
 是绑定目标对象, 其<xref:System.Windows.Controls.TextBlock.Text%2A>属性是绑定目标属性。 <xref:System.Windows.Controls.TextBlock> `SavingsText`  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.Binding ParentBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.Binding ParentBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingExpression.ParentBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentBinding As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::Binding ^ ParentBinding { System::Windows::Data::Binding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentBinding : System.Windows.Data.Binding" Usage="System.Windows.Data.BindingExpression.ParentBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回当前 <see cref="T:System.Windows.Data.BindingExpression" /> 的 <see cref="T:System.Windows.Data.Binding" /> 对象。</summary>
        <value>当前绑定表达式的 <see cref="T:System.Windows.Data.Binding" /> 对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvedSource">
      <MemberSignature Language="C#" Value="public object ResolvedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ResolvedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingExpression.ResolvedSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResolvedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ResolvedSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResolvedSource : obj" Usage="System.Windows.Data.BindingExpression.ResolvedSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该 <see cref="T:System.Windows.Data.BindingExpression" /> 的绑定源对象。</summary>
        <value>此 <see cref="T:System.Windows.Data.BindingExpression" /> 的绑定源对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvedSourcePropertyName">
      <MemberSignature Language="C#" Value="public string ResolvedSourcePropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResolvedSourcePropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingExpression.ResolvedSourcePropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResolvedSourcePropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ResolvedSourcePropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResolvedSourcePropertyName : string" Usage="System.Windows.Data.BindingExpression.ResolvedSourcePropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取<see cref="T:System.Windows.Data.BindingExpression" /> 的获取绑定源属性的名称。</summary>
        <value>此 <see cref="T:System.Windows.Data.BindingExpression" /> 绑定源属性的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.IWeakEventListener.ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="bool IWeakEventListener.ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.IWeakEventListener.ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingExpression.System#Windows#IWeakEventListener#ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean Implements IWeakEventListener.ReceiveWeakEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e) = System::Windows::IWeakEventListener::ReceiveWeakEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。 这仅识别类型 <see cref="T:System.Collections.Specialized.CollectionChangedEventManager" /> 的管理器对象。</param>
        <param name="sender">发出该事件的对象。</param>
        <param name="e">事件数据。</param>
        <summary>此成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不能在代码中直接使用。</summary>
        <returns>如果侦听器已处理事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSource">
      <MemberSignature Language="C#" Value="public override void UpdateSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingExpression.UpdateSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpdateSource ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpdateSource();" />
      <MemberSignature Language="F#" Value="override this.UpdateSource : unit -&gt; unit" Usage="bindingExpression.UpdateSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前绑定目标值发送到 <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> 或 <see cref="F:System.Windows.Data.BindingMode.OneWayToSource" /> 绑定中的绑定源属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当绑定<xref:System.Windows.Data.Binding.Mode%2A>的不<xref:System.Windows.Data.BindingMode.TwoWay>是或<xref:System.Windows.Data.BindingMode.OneWayToSource>时, 此方法不执行任何操作。  
  
 如果绑定<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>的值设置为<xref:System.Windows.Data.UpdateSourceTrigger.Explicit> <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> , 则必须调用方法, 否则更改不会传播回源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此绑定已从其目标分离。</exception>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="UpdateTarget">
      <MemberSignature Language="C#" Value="public override void UpdateTarget ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateTarget() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpdateTarget ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpdateTarget();" />
      <MemberSignature Language="F#" Value="override this.UpdateTarget : unit -&gt; unit" Usage="bindingExpression.UpdateTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>强制将数据从绑定源属性传输到绑定目标属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 利用此方法, 您可以强制将数据从源属性传输到目标属性。 如果源对象实现了正确的属性更改的通知机制 (例如<xref:System.ComponentModel.INotifyPropertyChanged>), 则会自动进行目标更新。 但是, 您可以选择使用此方法在以下情况下显式更新目标属性: 源对象未提供正确的属性更改通知。 如果应用程序需要定期更新目标属性, 还可以使用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此绑定已从其目标分离。</exception>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
  </Members>
</Type>

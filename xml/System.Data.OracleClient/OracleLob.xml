<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa9dd409c0f67866e6d19aa2f3fa7d1a852dcf07" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63891627" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示存储在 Oracle 服务器上的大型对象二进制 (<see langword="LOB" />) 数据类型。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>不同于<xref:System.Data.OracleClient.OracleBFile>，而不是在操作系统中的物理文件中的服务器上存储数据。 它也可以是一个读写对象，与不同<xref:System.Data.OracleClient.OracleBFile>，这始终是只读的。  
  
 <xref:System.Data.OracleClient.OracleLob>可能是以下其中一个<xref:System.Data.OracleClient.OracleType>数据类型。  
  
|OracleType 数据类型|描述|  
|--------------------------|-----------------|  
|`Blob`|Oracle`BLOB`包含二进制数据的最大大小为 4 千兆字节 (GB) 的数据类型。 它映射到 <xref:System.Array> 类型的 <xref:System.Byte>。|  
|`Clob`|Oracle`CLOB`包含基于默认字符的字符数据的数据类型设置的服务器上，最大大小为 4 GB。 它映射到 <xref:System.String>。|  
|`NClob`|Oracle`NCLOB`基于最大大小为 4 GB 服务器上的区域字符集包含字符数据的数据类型。 它映射到 <xref:System.String>。|  
  
 .NET 应用程序开发人员可以检索 Oracle`LOB`值为基本的.NET 数据类型，例如<xref:System.Array>类型的<xref:System.Byte>并<xref:System.String>，或专用<xref:System.Data.OracleClient.OracleLob>数据类型。 <xref:System.Data.OracleClient.OracleLob>类支持读取数据并写入到 Oracle `LOB` Oracle 数据库中。  
  
 以下列出的主要特征<xref:System.Data.OracleClient.OracleLob>区分从基本的.NET 数据类型的数据类型：  
  
-   检索 Oracle 后`LOB`值到 Oracle 数据库中的<xref:System.Data.OracleClient.OracleLob>类，您可以更改`LOB`中打开的事务和所做的更改的数据将直接反映到数据库。 如果检索 Oracle`LOB`值到<xref:System.Array>类型的<xref:System.Byte>或<xref:System.String>和更新这些阵列所做的更改不会反映到数据库。  
  
-   当你使用<xref:System.Data.OracleClient.OracleLob>类访问的区块`LOB`值，仅该文本块传递从 Oracle 数据库向客户端。 当你使用<xref:System.Data.OracleClient.OracleDataReader.GetChars%2A>方法访问的区块`LOB`值，该值的整个内容传递从 Oracle 数据库向客户端。  
  
 若要获取<xref:System.Data.OracleClient.OracleLob>对象，请调用<xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A>方法。  
  
 您可以构造<xref:System.Data.OracleClient.OracleLob>值为 NULL，使用此格式：  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 此方法主要用于测试是否`LOB`从服务器返回为 NULL，如本示例所示：  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 为空`LOB`的行为类似于零字节`LOB`在于<xref:System.Data.OracleClient.OracleLob.Read%2A>成功并始终返回零字节。  
  
 选择`LOB`包含 null 值的列返回<xref:System.Data.OracleClient.OracleLob.Null>。  
  
 必须以事务，然后才能获取临时`LOB`。 否则为<xref:System.Data.OracleClient.OracleDataReader>更高版本中获取数据可能会失败。  
  
 您还可以打开一个临时`LOB`中通过调用 DBMS_LOB Oracle。CREATETEMPORARY 系统存储过程并绑定`LOB`输出参数。 在客户端，临时`LOB`的行为类似于基于表的`LOB`。 例如，若要更新临时`LOB`，它必须封装在事务中。  
  
 下面的 C# 示例演示了如何打开临时`LOB`。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  继承<xref:System.IO.Stream.WriteByte%2A>时用于字符数据，方法会失败并<xref:System.InvalidOperationException>引发。 请改用 <xref:System.Data.OracleClient.OracleLob.Write%2A> 方法。  
>   
>  临时`LOB`仅关闭时关闭连接，而通过使用池和在负载下，临时`LOB`不会关闭。 这可以通过释放临时解决`LOB`，通过调用`tempLob.Dispose()`。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">要从其中追加数据的 <see langword="LOB" />。</param>
        <summary>将数据从指定的 <see langword="LOB" /> 追加到当前 <see langword="LOB" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
 源中的所有数据`LOB`追加到当前末尾`LOB`。 位置既不`LOB`计算也没有在此过程中更改。  
  
 在基础数据类型始终必须相同。 例如，如果将从追加<xref:System.Data.OracleClient.OracleType.NClob>，目标<xref:System.Data.OracleClient.OracleLob>还必须是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在执行多个写操作时避免服务器端触发器激发。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在执行多个读操作时避免服务器端触发器激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时将打开`LOB`中<xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly>模式; 因此，`LOB`只能读取，不会写入，到相应的调用直到<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>。 若要执行批处理写入`LOB`，调用<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>与<xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>。  
  
 调用<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>不止一次在同一事务中的当前引发 Oracle"ORA 22293:LOB 已在同一事务中打开"时出错。 此外，如果您获得`LOB`使用另一个<xref:System.Data.OracleClient.OracleDataReader>，且不会调用原始调用方具有<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>生成方法，同样的错误。 因此，您必须调用<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法完成后使用<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">模式（<see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> 值之一），在该模式下，可在此 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> 调用与对应的 <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> 调用之间访问 <see langword="LOB" />。</param>
        <summary>在以指定的访问模式执行多个读写操作时避免服务器端触发器激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
 调用<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>不止一次在同一事务中的当前引发 Oracle"ORA 22293:LOB 已在同一事务中打开"时出错。 此外，如果您获得`LOB`使用另一个<xref:System.Data.OracleClient.OracleDataReader>，且不会调用原始调用方具有<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>生成方法，同样的错误。 因此，您必须调用<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法完成后使用<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see langword="LOB" /> 流是否可读。</summary>
        <value>如果 <see langword="true" /> 流支持读取，则为 <see langword="LOB" />；如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="LOB" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示能否执行向前和向后查找操作。</summary>
        <value>如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="LOB" />；否则为 <see langword="true" />。 对于 <see cref="F:System.Data.OracleClient.OracleLob.Null" />，总是为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不管 <see langword="LOB" /> 是否支持写入，始终返回真。</summary>
        <value>不管已打开的或未释放的 <see langword="true" /> 是否支持写入，始终返回 <see langword="LOB" />；如果 <see langword="false" /> 已关闭或已释放，则返回 <see langword="LOB" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要写入到`LOB`，必须在检索`LOB`使用 FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须已启动对本地事务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示读/写操作过程中要从服务器检索或发送到服务器的最小字节数。</summary>
        <value>要检索或发送的最小字节数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>属性不是适用于 Oracle 的.NET Framework 数据提供程序的设置。 相反，它是与服务器通信时使用 Oracle 调用接口 (OCI) 的值。 使用<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>以确保客户端的区块大小相同。 读取或写入更小的块不会缓存数据，并将导致无优化往返于服务器，因为完整数据包都不接收或发送。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象，该对象与原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象引用相同的 Oracle <see langword="LOB" />。</summary>
        <returns>一个与原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象引用相同 Oracle <see langword="LOB" /> 的新 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新属性<xref:System.Data.OracleClient.OracleLob>对象最初具有与原始对象相同的值。 但是之后,<xref:System.Data.OracleClient.OracleLob.Clone%2A>每个已完成，<xref:System.Data.OracleClient.OracleLob>对象是相互独立。 例如，更改的值<xref:System.Data.OracleClient.OracleLob.Position%2A>原始属性<xref:System.Data.OracleClient.OracleLob>的值不更改<xref:System.Data.OracleClient.OracleLob.Position%2A>副本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前流并释放与该流关联的资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由该 <see cref="T:System.Data.OracleClient.OracleConnection" /> 实例使用的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <value>到数据源的连接。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在基础数据类型始终必须相同。 例如，如果要从复制<xref:System.Data.OracleClient.OracleType.NClob>，目标<xref:System.Data.OracleClient.OracleLob>还必须是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目标偏移量是否超出目标末尾`LOB`，则`LOB`扩展到其复制数据。 末尾之间的间距`LOB`用零填充超出末尾位置的目标偏移量`BLOB`数据类型，以空格`CLOB`和`NCLOB`数据类型。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不是更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`将更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
>   
>  `CopyTo`方法并不会清除目标内容`OracleLob`之前执行复制操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">要复制到的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数字节数。</param>
        <summary>将指定数量的数据从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在基础数据类型始终必须相同。 例如，如果要从复制<xref:System.Data.OracleClient.OracleType.NClob>，目标<xref:System.Data.OracleClient.OracleLob>还必须是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目标偏移量是否超出目标末尾`LOB`，则`LOB`扩展到其复制数据。 末尾之间的间距`LOB`用零填充目标超出末尾位置的偏移量`BLOB`数据类型，以空格`CLOB`和`NCLOB`数据类型。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
>   
>  `CopyTo`方法并不会清除目标内容`OracleLob`之前执行复制操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destinationOffset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
<paramref name="destinationOffset" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。  
  
- 或 - 
必须将 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型指定为偶数字节数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">要从中复制的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="destination">目标 <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />。</param>
        <param name="destinationOffset">要复制到的目标偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="amount">要复制的数据数量（以字节为单位）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>使用该源偏移量将指定数量的数据从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在基础数据类型始终必须相同。 例如，如果要从复制<xref:System.Data.OracleClient.OracleType.NClob>，目标<xref:System.Data.OracleClient.OracleLob>还必须是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目标偏移量是否超出目标末尾`LOB`，则`LOB`扩展到其复制数据。 末尾之间的间距`LOB`用零填充目标超出末尾位置的偏移量`BLOB`数据类型，以空格`CLOB`和`NCLOB`数据类型。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
>   
>  `CopyTo`方法并不会清除目标内容`OracleLob`之前执行复制操作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
在 <paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放此对象使用的资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允许服务器端触发器在执行多个写入操作之后继续激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>方法开始执行之前写入操作数<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除所有数据。</summary>
        <returns>清除的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不会截断数据。 `LOB`长度始终相同`BLOB`数据类型，并清除的数据，会替换为 0x00。 `CLOB` 和`NCLOB`数据类型替换为空格。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">要从中清除的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="amount">要清除的数据数量（以字节为单位）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除指定数量的数据。</summary>
        <returns>清除的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的值的总和`offset`并`amount`参数可以是大于的大小<xref:System.Data.OracleClient.OracleLob>。 因此，指定的值比返回的大<xref:System.Data.OracleClient.OracleLob.Length%2A>属性将成功; 但是<xref:System.Data.OracleClient.OracleLob.Erase%2A>只会删除到末尾<xref:System.Data.OracleClient.OracleLob>。 (同样，如果是负数值传递给`offset`，<xref:System.Data.OracleClient.OracleLob.Erase%2A>将会成功，但仅擦除的从头开始启动<xref:System.Data.OracleClient.OracleLob>。)此行为是不同的<xref:System.Data.OracleClient.OracleLob.Read%2A>并<xref:System.Data.OracleClient.OracleLob.Write%2A>方法和产品/服务的优点是能够擦除所有数据值指定`offset`而无需进行一次附加往返到服务器后，若要验证的实际大小。  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不会截断数据。 `LOB`长度始终相同`BLOB`数据类型，并清除的数据，会替换为 0x00。 `CLOB` 和`NCLOB`数据类型替换为空格。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  在此版本中，对只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>目前尚不支持。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在此版本中，此方法不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示应用程序是否调用了 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法。</summary>
        <value>如果应用程序调用了 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用 Oracle 8.0.5 server，Oracle"ORA 00600： 内部错误代码"会引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否为一个 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 是 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否为临时 <see langword="LOB" />。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 是临时 <see langword="true" />，则为 <see langword="LOB" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例演示如何创建一个临时`LOB`。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值返回 <see cref="T:System.Data.OracleClient.OracleLob" /> 的大小。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> 的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大小<xref:System.Data.OracleClient.OracleLob>始终以字节为单位的所有数据类型返回。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值返回 <see langword="LOB" /> 数据类型。</summary>
        <value>之一<see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" />数据类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>可能是下列任一<xref:System.Data.OracleClient.OracleType>数据类型。  
  
|OracleType 数据类型|描述|  
|--------------------------|-----------------|  
|`Blob`|包含二进制数据的 Oracle `BLOB` 数据类型，其最大大小为 4 GB。 它映射到 <xref:System.Array> 类型的 <xref:System.Byte>。|  
|`Clob`|包含字符数据的 Oracle `CLOB` 数据类型，根据服务器的默认字符集，其最大大小为 4 GB。 它映射到 <xref:System.String>。|  
|`NClob`|Oracle`NCLOB`基于最大大小为 4 千兆字节在服务器上的区域字符集包含字符数据的数据类型。 它映射到 <xref:System.String>。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示一个 null <see cref="T:System.Data.OracleClient.OracleLob" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以构造<xref:System.Data.OracleClient.OracleLob>值为 NULL，使用此格式：  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 此方法主要用于测试是否`LOB`从服务器返回为 NULL，如本示例所示：  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 为空`LOB`的行为类似于零字节`LOB`在于<xref:System.Data.OracleClient.OracleLob.Read%2A>成功并始终返回零字节。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.OracleClient.OracleLob" /> 流中的当前读取位置。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> 流中的当前位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 流必须支持查找要获取或设置位置。 使用<xref:System.Data.OracleClient.OracleLob.CanSeek%2A>属性来确定该流是否支持查找。  
  
 支持查找到流的长度超出任何位置。 查找到的异常位置`CLOB`和`NCLOB`还支持数据类型。 有关详细信息，请参阅备注部分的<xref:System.Data.OracleClient.OracleLob.Read%2A>属性。  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A>属性不会不跟踪的和 / 或已使用，跳过，该流中的字节数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">字节数组。 当此方法返回时，此缓冲区包含指定的字符数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" />) 之间的值被从当前源中读取的字节所替换。</param>
        <param name="offset"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="count">要从当前流中最多读取的字节数。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>从当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流中读取字节序列，并在该流中按照读取的字节数提升位置。</summary>
        <returns>读入缓冲区中的总字节数。 如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A>方法中读取的最大`count`个字节从当前流，并将它们存储在`buffer`开始`offset`。 在流中的当前位置高级通过读取; 的字节数但是，如果发生异常，该流中的当前位置保持不变。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 返回读取的字节数。 仅当位置目前位于流结尾，返回值为零。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 将阻止直到至少一个字节的数据可供读取，在的任何数据是可用。<xref:System.Data.OracleClient.OracleLob.Read%2A> 如果您尝试从读取，则返回 0`LOB`时当前位于末尾的`LOB`。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 可以返回少于所请求的字节，即使尚未达到流结尾。  
  
 适用于 Oracle 的.NET Framework 数据提供程序处理所有`CLOB`和`NCLOB`以 unicode 格式的数据。 因此，访问时`CLOB`和`NCLOB`数据类型，您始终处理的字节，其中每个字符是 2 个字节数。 例如，如果包含三个字符的文本的字符串将保存为`NCLOB`上的 Oracle 服务器，其中的字符集是每个字符，4 个字节，则执行`Read`操作，指定字符串的长度为 6 个字节，尽管它是存储为在服务器上的 12 个字节。  
  
 下面的 C# 示例演示如何读取<xref:System.Data.OracleClient.OracleLob>对象。  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipulate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 您可以构造<xref:System.Data.OracleClient.OracleLob>值为 NULL，使用此格式：  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 此方法主要用于测试是否`LOB`从服务器返回为 NULL，如以下示例所示。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 为空`LOB`的行为类似于零字节`LOB`在于<xref:System.Data.OracleClient.OracleLob.Read%2A>成功并始终返回零字节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 或 <paramref name="count" /> 参数中的值为非正。  
  
- 或 - 
offset 参数与 count 参数之和大于 buffer 的长度。  
  
- 或 - 
<paramref name="amount" /> 或 <paramref name="offset" /> 参数中指定的值小于零，或大于 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">相对于 origin 的字节偏移量。 如果 <paramref name="offset" /> 为负，则新位置位于 <paramref name="origin" /> 指定的位置之前 <paramref name="offset" /> 指定的字节数。 如果 <paramref name="offset" /> 为零，则新位置是 <paramref name="origin" /> 指定的位置。 如果 <paramref name="offset" /> 为正，则新位置位于 <paramref name="origin" /> 指定的位置之后 <paramref name="offset" /> 指定的字节数。</param>
        <param name="origin"><see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</param>
        <summary>在当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流上设置位置。</summary>
        <returns>当前流中的新位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`offset`为负，则新位置必须位于指定的位置`origin`按指定的字节数`offset`。 如果`offset`为零，则新位置必须是指定的位置`origin`。 如果`offset`为正，则新位置必须遵循指定的位置`origin`按指定的字节数`offset`。  
  
 支持查找到流的长度超出任何位置。 查找到的异常位置`CLOB`和`NCLOB`还支持数据类型。 有关详细信息，请参阅备注部分的<xref:System.Data.OracleClient.OracleLob.Read%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="origin" /> 参数不包含有效的值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">结果位置在值的长度之外。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Data.OracleClient.OracleLob" /> 对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">所需的当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流的长度（以字节表示）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>将 <see cref="T:System.Data.OracleClient.OracleLob" /> 流的长度设置为小于当前长度的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尝试增加的长度<xref:System.Data.OracleClient.OracleLob>流失败，并返回"消息：ORA 22926： 指定剪裁长度大于当前 LOB 值的长度"Oracle 服务器。  
  
 流必须支持写入和查找有关<xref:System.Data.OracleClient.OracleLob.SetLength%2A>函数。  
  
 适用于 Oracle 的.NET Framework 数据提供程序处理所有`CLOB`和`NCLOB`以 unicode 格式的数据。 因此，访问时`CLOB`和`NCLOB`数据类型，您始终处理的字节，其中每个字符是 2 个字节数。 例如，如果包含三个字符的文本的字符串将保存为`NCLOB`上的 Oracle 服务器，其中的字符集是每个字符，4 个字节，则执行`SetLength`操作，指定字符串的长度为 6 个字节，尽管它是存储为在服务器上的 12 个字节。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  一个只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。  
  
- 或 - 
<paramref name="value" /> 参数中指定的值小于零，或大于 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取公共语言运行时流值（基础值的等效值）。</summary>
        <value>对于 <see cref="F:System.Data.OracleClient.OracleType.Blob" />，为 <see langword="Byte[]" /> 类型的数组。 对于 <see cref="F:System.Data.OracleClient.OracleType.Clob" /> 和 <see cref="F:System.Data.OracleClient.OracleType.NClob" />，为 <see langword="String" />。 对于 null 数据，则为 <see cref="T:System.DBNull" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关<xref:System.Data.OracleClient.OracleType.Blob>数据类型<xref:System.Data.OracleClient.OracleLob.Value%2A>连续类型的数组的形式返回整个基础数据`Byte[]`。 有关<xref:System.Data.OracleClient.OracleType.Clob>并<xref:System.Data.OracleClient.OracleType.NClob>数据类型<xref:System.Data.OracleClient.OracleLob.Value%2A>返回所有数据作为`String`数据类型。 对于 null 数据<xref:System.Data.OracleClient.OracleLob.Value%2A>返回<xref:System.DBNull>。 通过比较返回的值，你可以区分出空数据、 为 null 数据和数据。  
  
> [!NOTE]
>  使用的好处是`LOB`数据类型是能够检索大量客户端在区块中的数据。 但是，使用<xref:System.Data.OracleClient.OracleLob.Value%2A>，获取有关的所有数据`LOB`列作为一个连续的区块，可以显著提高应用程序开销。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 中指定的字节数从 <paramref name="buffer" /> 复制到当前流中。</param>
        <param name="offset"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="count">要写入当前流的字节数。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>将一个字节序列写入当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流，并使流中的当前位置前进所写入的字节数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果写入操作成功，流中的位置向前移动写入的字节数。 如果发生异常，则流中的位置保持不变。  
  
 编写结尾之外`LOB`允许和放大`LOB`通过写入的字节数。  
  
 适用于 Oracle 的.NET Framework 数据提供程序处理所有`CLOB`和`NCLOB`以 unicode 格式的数据。 因此，访问时`CLOB`和`NCLOB`数据类型，您始终处理的字节，其中每个字符是 2 个字节数。 例如，如果包含三个字符的文本的字符串将保存为`NCLOB`上的 Oracle 服务器，其中的字符集是每个字符，4 个字节，则执行`Write`操作，指定字符串的长度为 6 个字节，尽管它是存储为在服务器上的 12 个字节。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
 下面的 C# 示例演示如何将写入到<xref:System.Data.OracleClient.OracleLob>对象。  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  一个只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 或 <paramref name="count" /> 参数中的值为非正。  
  
- 或 - 
<paramref name="offset" /> 参数与 <paramref name="count" /> 参数之和大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
<paramref name="count" /> 或 <paramref name="offset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
必须将 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型指定为偶数字节数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要写入流中的字节。</param>
        <summary>将一个字节写入 <see cref="T:System.Data.OracleClient.OracleLob" /> 流内的当前位置，并将流内的位置向前推进一个字节。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果写入操作成功，流中的位置向前推进一个字节。 如果发生异常，则流中的位置保持不变。  
  
 编写结尾之外`LOB`允许和放大`LOB`1 个字节。  
  
 要写入到`LOB`，必须在检索`LOB`using FOR UPDATE 子句中的 SQL SELECT 语句，并且您必须有启动的本地事务。  
  
> [!NOTE]
>  一个只读的写入操作`LOB`可能会成功，但不会更新`LOB`在服务器上。 在这种情况下，但是，在本地复制的`LOB`更新。 因此，更高版本上读取操作<xref:System.Data.OracleClient.OracleLob>对象可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80e5d5e11b35c67ef0fb914d400a1817056cb130" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70677419" /></Metadata><TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <TypeSignature Language="F#" Value="type ThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="85aff-101">提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</span><span class="sxs-lookup"><span data-stu-id="85aff-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-102">许多应用程序创建线程，在休眠状态中花费大量时间等待事件发生。</span><span class="sxs-lookup"><span data-stu-id="85aff-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="85aff-103">其他线程可能会进入休眠状态，只需要定期唤醒才能轮询更改或更新状态信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="85aff-104">使用线程池，可以通过向应用程序提供由系统管理的工作线程池，来更有效地使用线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="85aff-105">使用线程池线程的操作示例包括：</span><span class="sxs-lookup"><span data-stu-id="85aff-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="85aff-106">当你创建<xref:System.Threading.Tasks.Task>或<xref:System.Threading.Tasks.Task%601>对象以异步执行某些任务时，默认情况下，任务计划在线程池线程上运行。</span><span class="sxs-lookup"><span data-stu-id="85aff-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="85aff-107">异步计时器使用线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="85aff-108">线程池线程执行来自类的<xref:System.Threading.Timer?displayProperty=nameWithType>回调并引发来自类的<xref:System.Timers.Timer?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="85aff-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="85aff-109">使用已注册的等待句柄时，系统线程会监视等待句柄的状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="85aff-110">等待操作完成后，线程池中的工作线程会执行相应的回调函数。</span><span class="sxs-lookup"><span data-stu-id="85aff-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="85aff-111">调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法以将方法排队以便在线程池线程上执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="85aff-112">为<xref:System.Threading.WaitCallback>此，可将方法传递给委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="85aff-113">委托具有签名</span><span class="sxs-lookup"><span data-stu-id="85aff-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="85aff-114">其中`state` ，是包含要由委托使用的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="85aff-115">通过调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>方法，可以将实际数据传递到委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-116">托管线程池中的线程是后台线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="85aff-117">也就是说，其<xref:System.Threading.Thread.IsBackground%2A>属性为`true`。</span><span class="sxs-lookup"><span data-stu-id="85aff-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="85aff-118">这意味着，在<xref:System.Threading.ThreadPool>所有前台线程退出后，线程不会使应用程序保持运行。</span><span class="sxs-lookup"><span data-stu-id="85aff-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85aff-119">当线程池重用某个线程时，它不会清除线程本地存储区中的数据或用<xref:System.ThreadStaticAttribute>特性标记的字段中的数据。</span><span class="sxs-lookup"><span data-stu-id="85aff-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="85aff-120">因此，当某个方法检查线程本地存储区或用<xref:System.ThreadStaticAttribute>特性标记的字段时，它所找到的值可能会从先前使用线程池线程的过程中遗留。</span><span class="sxs-lookup"><span data-stu-id="85aff-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="85aff-121">你还可以将与等待操作无关的工作项排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="85aff-122">若要请求由线程池中的线程处理工作项，请调用<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="85aff-123">此方法将引用从线程池中选择的线程调用的方法或委托作为参数。</span><span class="sxs-lookup"><span data-stu-id="85aff-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="85aff-124">在工作项排队后，无法取消该工作项。</span><span class="sxs-lookup"><span data-stu-id="85aff-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="85aff-125">计时器-队列计时器和已注册的等待操作也使用线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="85aff-126">它们的回调函数将排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="85aff-127">每个进程都有一个线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-127">There is one thread pool per process.</span></span> <span data-ttu-id="85aff-128">从 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 开始，进程的线程池的默认大小取决于若干因素，例如虚拟地址空间的大小。</span><span class="sxs-lookup"><span data-stu-id="85aff-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="85aff-129">进程可以调用 <xref:System.Threading.ThreadPool.GetMaxThreads%2A> 方法，以确定线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="85aff-130">可以使用<xref:System.Threading.ThreadPool.SetMaxThreads%2A>方法更改线程池中的线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="85aff-131">每个线程都使用默认堆栈大小，并按默认优先级运行。</span><span class="sxs-lookup"><span data-stu-id="85aff-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-132">承载 .NET Framework 的非托管代码可以使用在 mscoree.dll 文件中定义的`CorSetMaxThreads`函数更改线程池的大小。</span><span class="sxs-lookup"><span data-stu-id="85aff-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="85aff-133">线程池按需提供新的工作线程或 i/o 完成线程，直到达到每个类别的最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="85aff-134">达到最小值时，线程池可以在该类别中创建更多的线程，或等待某些任务完成。</span><span class="sxs-lookup"><span data-stu-id="85aff-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="85aff-135">从 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 开始，线程池创建和销毁工作线程以优化吞吐量，吞吐量被定义为每个单位时间完成的任务数。</span><span class="sxs-lookup"><span data-stu-id="85aff-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="85aff-136">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="85aff-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-137">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="85aff-138">可以使用 <xref:System.Threading.ThreadPool.GetMinThreads%2A> 方法来获取这些最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-139">您可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>方法来增加最小线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="85aff-140">但是，不必要地增加这些值可能导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="85aff-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="85aff-141">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</span><span class="sxs-lookup"><span data-stu-id="85aff-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="85aff-142">大多数情况下，使用自己的分配线程算法，线程池将更好地执行任务。</span><span class="sxs-lookup"><span data-stu-id="85aff-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-143">在下面的示例中，主应用程序线程将一个名`ThreadProc`为的方法排队，使其在线程池线程上执行，休眠一秒钟，然后退出。</span><span class="sxs-lookup"><span data-stu-id="85aff-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="85aff-144">`ThreadProc`方法只是显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="85aff-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="85aff-145">如果注释掉对<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法的调用，则在线程池线程上运行方法之前，主线程将退出。</span><span class="sxs-lookup"><span data-stu-id="85aff-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="85aff-146">线程池使用后台线程，如果所有前台线程均已终止，则不会使应用程序保持运行。</span><span class="sxs-lookup"><span data-stu-id="85aff-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="85aff-147">（这是争用条件的一个简单示例。）</span><span class="sxs-lookup"><span data-stu-id="85aff-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="85aff-148">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="85aff-148">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="85aff-149">线程与线程处理</span><span class="sxs-lookup"><span data-stu-id="85aff-149">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-150">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-150">The Managed Thread Pooling</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85aff-151">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-151">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : nativeint -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="osHandle"><span data-ttu-id="85aff-152">持有句柄的 <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-152">An <see cref="T:System.IntPtr" /> that holds the handle.</span></span> <span data-ttu-id="85aff-153">在非托管端必须为重叠 I/O 打开该句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-153">The handle must have been opened for overlapped I/O on the unmanaged side.</span></span></param>
        <summary><span data-ttu-id="85aff-154">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-154">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span></span></summary>
        <returns><span data-ttu-id="85aff-155">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-155"><see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-156">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-156">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="85aff-157">用于调用非托管代码。</span><span class="sxs-lookup"><span data-stu-id="85aff-157">for the ability to call unmanaged code.</span></span> <span data-ttu-id="85aff-158">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-158">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="osHandle"><span data-ttu-id="85aff-159">保存操作系统句柄的 <see cref="T:System.Runtime.InteropServices.SafeHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-159">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span></span> <span data-ttu-id="85aff-160">在非托管端必须为重叠 I/O 打开该句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-160">The handle must have been opened for overlapped I/O on the unmanaged side.</span></span></param>
        <summary><span data-ttu-id="85aff-161">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-161">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span></span></summary>
        <returns><span data-ttu-id="85aff-162">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-162"><see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-163">参数应为从抽象<xref:System.Runtime.InteropServices.SafeHandle>类派生的。 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> `osHandle`</span><span class="sxs-lookup"><span data-stu-id="85aff-163">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-164"><paramref name="osHandle" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-164"><paramref name="osHandle" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="85aff-165">用于调用非托管代码。</span><span class="sxs-lookup"><span data-stu-id="85aff-165">for the ability to call unmanaged code.</span></span> <span data-ttu-id="85aff-166">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-166">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CompletedWorkItemCount">
      <MemberSignature Language="C#" Value="public static long CompletedWorkItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 CompletedWorkItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadPool.CompletedWorkItemCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedWorkItemCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long CompletedWorkItemCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedWorkItemCount : int64" Usage="System.Threading.ThreadPool.CompletedWorkItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="85aff-167">获取迄今为止已处理的工作项数。</span><span class="sxs-lookup"><span data-stu-id="85aff-167">Gets the number of work items that have been processed so far.</span></span></summary>
        <value><span data-ttu-id="85aff-168">到目前为止已处理的工作项的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-168">The number of work items that have been processed so far.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="85aff-169">如果线程池实现可能具有不同类型的工作项，则计数将包括所有类型。</span><span class="sxs-lookup"><span data-stu-id="85aff-169">If a thread pool implementation may have different types of work items, the count includes all types.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetAvailableThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetAvailableThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="workerThreads"><span data-ttu-id="85aff-170">可用辅助线程的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-170">The number of available worker threads.</span></span></param>
        <param name="completionPortThreads"><span data-ttu-id="85aff-171">可用异步 I/O 线程的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-171">The number of available asynchronous I/O threads.</span></span></param>
        <summary><span data-ttu-id="85aff-172">检索由 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法返回的最大线程池线程数和当前活动线程数之间的差值。</span><span class="sxs-lookup"><span data-stu-id="85aff-172">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-173">当<xref:System.Threading.ThreadPool.GetAvailableThreads%2A>返回时，由`workerThreads`指定的变量包含可启动的附加工作线程的数目，并且由`completionPortThreads`指定的变量包含其他可首先.</span><span class="sxs-lookup"><span data-stu-id="85aff-173">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="85aff-174">如果没有可用的线程，附加的线程池请求将保持排队状态，直到线程池线程变为可用。</span><span class="sxs-lookup"><span data-stu-id="85aff-174">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-175">下面的示例显示了启动简单应用时可用的工作线程和 i/o 线程的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-175">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMaxThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="workerThreads"><span data-ttu-id="85aff-176">线程池中辅助线程的最大数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-176">The maximum number of worker threads in the thread pool.</span></span></param>
        <param name="completionPortThreads"><span data-ttu-id="85aff-177">线程池中异步 I/O 线程的最大数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-177">The maximum number of asynchronous I/O threads in the thread pool.</span></span></param>
        <summary><span data-ttu-id="85aff-178">检索可以同时处于活动状态的线程池请求的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-178">Retrieves the number of requests to the thread pool that can be active concurrently.</span></span> <span data-ttu-id="85aff-179">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</span><span class="sxs-lookup"><span data-stu-id="85aff-179">All requests above that number remain queued until thread pool threads become available.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-180">当<xref:System.Threading.ThreadPool.GetMaxThreads%2A>返回时，由`workerThreads`指定的变量包含线程池中允许的最大工作线程数，由`completionPortThreads`指定的变量包含允许在线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-180">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="85aff-181">在任意给定时间<xref:System.Threading.ThreadPool.GetAvailableThreads%2A> ，都可以使用方法来确定线程池中的实际线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-181">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="85aff-182">你可以使用<xref:System.Threading.ThreadPool.SetMaxThreads%2A>来设置线程池中的最大工作线程数和异步 i/o 线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-182">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="85aff-183">可以将任意数量的线程池请求排队，因为系统内存允许。</span><span class="sxs-lookup"><span data-stu-id="85aff-183">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="85aff-184">如果请求数超过线程池线程数，则在线程池线程变得可用之前，附加请求将保持排队。</span><span class="sxs-lookup"><span data-stu-id="85aff-184">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-185">下面的代码示例演示如何检索线程池中的最大和可用线程数的计数。</span><span class="sxs-lookup"><span data-stu-id="85aff-185">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="85aff-186">将使用`FileStream`异步写入两个文件的工作项排队。</span><span class="sxs-lookup"><span data-stu-id="85aff-186">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="85aff-187">回调方法被计时为重叠。</span><span class="sxs-lookup"><span data-stu-id="85aff-187">The callback methods are timed to overlap.</span></span> <span data-ttu-id="85aff-188">工作线程处理工作项，并根据计算机上的处理器速度和数量，一个或两个完成端口线程处理写入操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-188">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMinThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="workerThreads"><span data-ttu-id="85aff-189">当此方法返回时，将包含线程池根据需要创建的最少数量的辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-189">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span></span></param>
        <param name="completionPortThreads"><span data-ttu-id="85aff-190">当此方法返回时，将包含线程池根据需要创建的最少数量的异步 I/O 线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-190">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span></span></param>
        <summary><span data-ttu-id="85aff-191">发出新的请求时，在切换到管理线程创建和销毁的算法之前检索线程池按需创建的线程的最小数量。</span><span class="sxs-lookup"><span data-stu-id="85aff-191">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-192">线程池按需提供新的工作线程或 i/o 完成线程，直到达到每个类别的最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-192">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="85aff-193">默认情况下，最小线程数设置为系统上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="85aff-193">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="85aff-194">达到最小值时，线程池可以在该类别中创建更多的线程，或等待某些任务完成。</span><span class="sxs-lookup"><span data-stu-id="85aff-194">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="85aff-195">从开始，线程池创建并销毁线程，以优化吞吐量，定义为每个时间单位完成的任务数。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</span><span class="sxs-lookup"><span data-stu-id="85aff-195">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="85aff-196">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="85aff-196">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-197">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-197">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-198">下面的示例将最小工作线程数设置为4，并保留最小异步 i/o 完成线程数的原始值。</span><span class="sxs-lookup"><span data-stu-id="85aff-198">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="PendingWorkItemCount">
      <MemberSignature Language="C#" Value="public static long PendingWorkItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 PendingWorkItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadPool.PendingWorkItemCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PendingWorkItemCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long PendingWorkItemCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PendingWorkItemCount : int64" Usage="System.Threading.ThreadPool.PendingWorkItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="85aff-199">获取当前已加入处理队列的工作项数。</span><span class="sxs-lookup"><span data-stu-id="85aff-199">Gets the number of work items that are currently queued to be processed.</span></span></summary>
        <value><span data-ttu-id="85aff-200">当前排队等候处理的工作项的数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-200">The number of work items that are currently queued to be processed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="85aff-201">如果线程池实现可能具有不同类型的工作项，则计数将包括可以跟踪的所有类型，这些类型只能是用户工作项（包括任务）。</span><span class="sxs-lookup"><span data-stu-id="85aff-201">If a thread pool implementation may have different types of work items, the count includes all types that can be tracked, which may only be the user work items, including tasks.</span></span> <span data-ttu-id="85aff-202">某些实现可能还包括队列中的计时器和等待回调。</span><span class="sxs-lookup"><span data-stu-id="85aff-202">Some implementations may also include queued timer and wait callbacks in the count.</span></span> <span data-ttu-id="85aff-203">在 Windows 上，计数不太可能包含挂起的 IO 完成次数，因为它们直接发送到 IO 完成端口。</span><span class="sxs-lookup"><span data-stu-id="85aff-203">On Windows, the count is unlikely to include the number of pending IO completions, because they are posted directly to an IO completion port.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85aff-204">将方法排入队列以便执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-204">Queues a method for execution.</span></span> <span data-ttu-id="85aff-205">此方法在有线程池线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-205">The method executes when a thread pool thread becomes available.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem callBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack"><span data-ttu-id="85aff-206">一个 <see cref="T:System.Threading.WaitCallback" />，表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-206">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span></span></param>
        <summary><span data-ttu-id="85aff-207">将方法排入队列以便执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-207">Queues a method for execution.</span></span> <span data-ttu-id="85aff-208">此方法在有线程池线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-208">The method executes when a thread pool thread becomes available.</span></span></summary>
        <returns><span data-ttu-id="85aff-209">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-209"><see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-210">可以在定义方法的类的实例字段中放置排队方法所需的数据，也可以使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29>接受包含所需数据的对象的重载。</span><span class="sxs-lookup"><span data-stu-id="85aff-210">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-211">Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并且只需在将回调方法传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>时`AddressOf`使用运算符。</span><span class="sxs-lookup"><span data-stu-id="85aff-211">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="85aff-212">Visual Basic 自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="85aff-212">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-213">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-213">Version Information</span></span>  
 <span data-ttu-id="85aff-214">在 .NET Framework 版本2.0 中，属性<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>值将传播到<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-214">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="85aff-215">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-215">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-216">下面的示例使用<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29>方法重载对任务进行排队，该任务`ThreadProc`由方法表示，以便在线程变为可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-216">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="85aff-217">此重载未提供任何任务信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-217">No task information is supplied with this overload.</span></span> <span data-ttu-id="85aff-218">因此，可用于`ThreadProc`方法的信息仅限于该方法所属的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-218">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-219"><paramref name="callBack" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-219"><paramref name="callBack" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="85aff-220">承载公共语言运行时 (CLR) 的宿主不支持此操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-220">The common language runtime (CLR) is hosted, and the host does not support this action.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-221">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-221">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack"><span data-ttu-id="85aff-222"><see cref="T:System.Threading.WaitCallback" />，它表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-222">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-223">包含方法所用数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-223">An object containing data to be used by the method.</span></span></param>
        <summary><span data-ttu-id="85aff-224">将方法排入队列以便执行，并指定包含该方法所用数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-224">Queues a method for execution, and specifies an object containing data to be used by the method.</span></span> <span data-ttu-id="85aff-225">此方法在有线程池线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-225">The method executes when a thread pool thread becomes available.</span></span></summary>
        <returns><span data-ttu-id="85aff-226">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-226"><see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-227">如果回调方法需要复杂数据，则可以定义一个包含数据的类。</span><span class="sxs-lookup"><span data-stu-id="85aff-227">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85aff-228">Visual Basic 用户可以省略<xref:System.Threading.WaitCallback>构造函数，并且只需在将回调方法传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>时`AddressOf`使用运算符。</span><span class="sxs-lookup"><span data-stu-id="85aff-228">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="85aff-229">Visual Basic 自动调用正确的委托构造函数。</span><span class="sxs-lookup"><span data-stu-id="85aff-229">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-230">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-230">Version Information</span></span>  
 <span data-ttu-id="85aff-231">在 .NET Framework 版本2.0 中，属性<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>值将传播到<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-231">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="85aff-232">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-232">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-233">下面的示例使用 .net 线程池来计算介于 20 `Fibonacci`和40之间的5个数字的结果。</span><span class="sxs-lookup"><span data-stu-id="85aff-233">The following example uses the .NET thread pool to calculate the `Fibonacci` result for five numbers between 20 and 40.</span></span> <span data-ttu-id="85aff-234">每个 `Fibonacci` 结果都由 `Fibonacci` 类表示，该类提供一个名为 `ThreadPoolCallback` 的方法，用于执行计算。</span><span class="sxs-lookup"><span data-stu-id="85aff-234">Each `Fibonacci` result is represented by the `Fibonacci` class, which provides a method named `ThreadPoolCallback` that performs the calculation.</span></span> <span data-ttu-id="85aff-235">创建表示每个 `Fibonacci` 值的对象，并将 `ThreadPoolCallback` 方法传递给 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>，它分配池中的一个可用线程来执行此方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-235">An object that represents each `Fibonacci` value is created, and the `ThreadPoolCallback` method is passed to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>, which assigns an available thread in the pool to execute the method.</span></span>  
  
 <span data-ttu-id="85aff-236">由于为`Fibonacci`每个对象提供了半随机值计算，并且每个线程都将争用处理器时间，因此您无法提前知道要计算所有五个结果所需的时间。</span><span class="sxs-lookup"><span data-stu-id="85aff-236">Because each `Fibonacci` object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all five results to be calculated.</span></span> <span data-ttu-id="85aff-237">这就是在构造期间为每个 `Fibonacci` 对象传递 <xref:System.Threading.ManualResetEvent> 类的一个实例的原因。</span><span class="sxs-lookup"><span data-stu-id="85aff-237">That is why each `Fibonacci` object is passed an instance of the <xref:System.Threading.ManualResetEvent> class during construction.</span></span> <span data-ttu-id="85aff-238">在计算完成后，每个对象都向提供的事件对象发出信号，这允许主线程阻止<xref:System.Threading.WaitHandle.WaitAll%2A>执行，直到`Fibonacci`所有五个对象都计算出结果。</span><span class="sxs-lookup"><span data-stu-id="85aff-238">Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with <xref:System.Threading.WaitHandle.WaitAll%2A> until all five `Fibonacci` objects have calculated a result.</span></span> <span data-ttu-id="85aff-239">然后 `Main` 方法会显示每个 `Fibonacci` 结果。</span><span class="sxs-lookup"><span data-stu-id="85aff-239">The `Main` method then displays each `Fibonacci` result.</span></span>
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="85aff-240">承载公共语言运行时 (CLR) 的宿主不支持此操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-240">The common language runtime (CLR) is hosted, and the host does not support this action.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-241"><paramref name="callBack" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-241"><paramref name="callBack" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-242">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-242">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="preferLocal" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="85aff-243"><paramref name="state" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="85aff-243">The type of elements of <paramref name="state" />.</span></span></typeparam>
        <param name="callBack"><span data-ttu-id="85aff-244"><see cref="T:System.Action`1" />，它表示要执行的方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-244">An <see cref="T:System.Action`1" /> representing the method to execute.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-245">包含方法所用数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-245">An object containing data to be used by the method.</span></span></param>
        <param name="preferLocal"><span data-ttu-id="85aff-246"><see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</span><span class="sxs-lookup"><span data-stu-id="85aff-246"><see langword="true" /> to prefer queueing the work item in a queue close to the current thread; <see langword="false" /> to prefer queueing the work item to the thread pool's shared queue.</span></span></param>
        <summary><span data-ttu-id="85aff-247">将 <see cref="T:System.Action`1" /> 委托指定的方法排入队列以便执行，并提供该方法使用的数据。</span><span class="sxs-lookup"><span data-stu-id="85aff-247">Queues a method specified by an <see cref="T:System.Action`1" /> delegate for execution, and provides data to be used by the method.</span></span> <span data-ttu-id="85aff-248">此方法在有线程池线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-248">The method executes when a thread pool thread becomes available.</span></span></summary>
        <returns><span data-ttu-id="85aff-249">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-249"><see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85aff-250">注册正在等待 <see cref="T:System.Threading.WaitHandle" /> 的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-250">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-251">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-251">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-252">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-252">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-253">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-253">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-254">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-254">The object that is passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-255">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-255">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-256">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-256">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-257">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-257">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-258">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-258"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-259">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="85aff-259">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="85aff-260">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-260">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-261">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-261">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-262">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-262">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-263">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-263">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="85aff-264"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法将指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-264">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="85aff-265">当发生以下情况之一时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="85aff-265">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="85aff-266">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-266">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="85aff-267">超时间隔已过去。</span><span class="sxs-lookup"><span data-stu-id="85aff-267">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="85aff-268">方法检查指定对象的<xref:System.Threading.WaitHandle>的当前状态。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-268">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="85aff-269">如果对象的状态为信号，则该方法将注册等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-269">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="85aff-270">等待操作由线程池中的一个线程执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-270">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="85aff-271">当对象的状态变为 "已终止" 或超时间隔结束时，工作线程会执行委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-271">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="85aff-272">如果参数不为0（零） `executeOnlyOnce` ，并且参数为`false`，则在每次事件终止或超时间隔结束时，将重置计时器。 `timeOutInterval`</span><span class="sxs-lookup"><span data-stu-id="85aff-272">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85aff-273"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-273">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="85aff-274">使用最大计数为1的，而不是。 <xref:System.Threading.Mutex>  <xref:System.Threading.Semaphore></span><span class="sxs-lookup"><span data-stu-id="85aff-274">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="85aff-275">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-275">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="85aff-276">等待线程使用 Win32 `WaitForMultipleObjects`函数监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-276">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="85aff-277">因此，如果必须在多个调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>中使用相同的本机操作系统句柄，则必须使用 Win32 `DuplicateHandle`函数复制句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-277">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="85aff-278">请注意，不应脉冲传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>的事件对象，因为等待线程可能检测不到事件在重置前已发出信号。</span><span class="sxs-lookup"><span data-stu-id="85aff-278">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="85aff-279">在返回之前，函数会修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-279">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="85aff-280">仅对其终止状态导致等待条件得到满足的对象进行修改。</span><span class="sxs-lookup"><span data-stu-id="85aff-280">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="85aff-281">例如，信号量的计数减少1。</span><span class="sxs-lookup"><span data-stu-id="85aff-281">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-282">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-282">Version Information</span></span>  
 <span data-ttu-id="85aff-283">从 .NET Framework 版本2.0 开始，属性值<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>将传播到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-283">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="85aff-284">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-284">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-285"><paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-285">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-286">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-286">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-287">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-287">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-288">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-288">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-289">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-289">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-290">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-290">The object passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-291">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-291">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-292">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-292">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-293">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-293">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-294">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-294"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-295">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="85aff-295">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="85aff-296">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-296">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-297">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-297">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-298">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-298">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-299">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-299">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="85aff-300"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法将指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-300">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="85aff-301">当发生以下情况之一时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="85aff-301">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="85aff-302">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-302">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="85aff-303">超时间隔已过去。</span><span class="sxs-lookup"><span data-stu-id="85aff-303">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="85aff-304">方法检查指定对象的<xref:System.Threading.WaitHandle>的当前状态。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-304">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="85aff-305">如果对象的状态为信号，则该方法将注册等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-305">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="85aff-306">等待操作由线程池中的一个线程执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-306">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="85aff-307">当对象的状态变为 "已终止" 或超时间隔结束时，工作线程会执行委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-307">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="85aff-308">如果参数不为0（零） `executeOnlyOnce` ，并且参数为`false`，则在每次事件终止或超时间隔结束时，将重置计时器。 `timeOutInterval`</span><span class="sxs-lookup"><span data-stu-id="85aff-308">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85aff-309"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-309">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="85aff-310">使用最大计数为1的，而不是。 <xref:System.Threading.Mutex>  <xref:System.Threading.Semaphore></span><span class="sxs-lookup"><span data-stu-id="85aff-310">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="85aff-311">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-311">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="85aff-312">等待线程使用 Win32 `WaitForMultipleObjects`函数监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-312">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="85aff-313">因此，如果必须在多个调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>中使用相同的本机操作系统句柄，则必须使用 Win32 `DuplicateHandle`函数复制句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-313">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="85aff-314">请注意，不应脉冲传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>的事件对象，因为等待线程可能检测不到事件在重置前已发出信号。</span><span class="sxs-lookup"><span data-stu-id="85aff-314">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="85aff-315">在返回之前，函数会修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-315">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="85aff-316">仅对其终止状态导致等待条件得到满足的对象进行修改。</span><span class="sxs-lookup"><span data-stu-id="85aff-316">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="85aff-317">例如，信号量的计数减少1。</span><span class="sxs-lookup"><span data-stu-id="85aff-317">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-318">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-318">Version Information</span></span>  
 <span data-ttu-id="85aff-319">从 .NET Framework 版本2.0 开始，属性值<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>将传播到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-319">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="85aff-320">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-320">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-321"><paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-321">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-322">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-322">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-323">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-323">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-324">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-324">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-325">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-325">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-326">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-326">The object passed to the delegate.</span></span></param>
        <param name="timeout"><span data-ttu-id="85aff-327"><see cref="T:System.TimeSpan" /> 表示的超时时间。</span><span class="sxs-lookup"><span data-stu-id="85aff-327">The time-out represented by a <see cref="T:System.TimeSpan" />.</span></span> <span data-ttu-id="85aff-328">如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-328">If <paramref name="timeout" /> is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-329">如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-329">If <paramref name="timeout" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-330">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-330"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-331">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。</span><span class="sxs-lookup"><span data-stu-id="85aff-331">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="85aff-332">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-332">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-333">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-333">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-334">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-334">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-335">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-335">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="85aff-336"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法将指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-336">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="85aff-337">当发生以下情况之一时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="85aff-337">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="85aff-338">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-338">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="85aff-339">超时间隔已过去。</span><span class="sxs-lookup"><span data-stu-id="85aff-339">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="85aff-340">方法检查指定对象的<xref:System.Threading.WaitHandle>的当前状态。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-340">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="85aff-341">如果对象的状态为信号，则该方法将注册等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-341">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="85aff-342">等待操作由线程池中的一个线程执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-342">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="85aff-343">当对象的状态变为 "已终止" 或超时间隔结束时，工作线程会执行委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-343">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="85aff-344">如果参数不为0（零） `executeOnlyOnce` ，并且参数为`false`，则在每次事件终止或超时间隔结束时，将重置计时器。 `timeOutInterval`</span><span class="sxs-lookup"><span data-stu-id="85aff-344">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85aff-345"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-345">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="85aff-346">使用最大计数为1的，而不是。 <xref:System.Threading.Mutex>  <xref:System.Threading.Semaphore></span><span class="sxs-lookup"><span data-stu-id="85aff-346">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="85aff-347">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-347">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="85aff-348">等待线程使用 Win32 `WaitForMultipleObjects`函数监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-348">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="85aff-349">因此，如果必须在多个调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>中使用相同的本机操作系统句柄，则必须使用 Win32 `DuplicateHandle`函数复制句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-349">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="85aff-350">请注意，不应脉冲传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>的事件对象，因为等待线程可能检测不到事件在重置前已发出信号。</span><span class="sxs-lookup"><span data-stu-id="85aff-350">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="85aff-351">在返回之前，函数会修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-351">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="85aff-352">仅对其终止状态导致等待条件得到满足的对象进行修改。</span><span class="sxs-lookup"><span data-stu-id="85aff-352">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="85aff-353">例如，信号量的计数减少1。</span><span class="sxs-lookup"><span data-stu-id="85aff-353">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-354">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-354">Version Information</span></span>  
 <span data-ttu-id="85aff-355">从 .NET Framework 版本2.0 开始，属性值<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>将传播到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-355">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="85aff-356">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-356">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-357"><paramref name="timeout" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-357">The <paramref name="timeout" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="85aff-358"><paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-358">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-359">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-359">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-360">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-360">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-361">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-361">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-362">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-362">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-363">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-363">The object passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-364">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-364">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-365">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-365">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-366">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-366">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-367">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-367"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-368">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-368">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="85aff-369"><see cref="T:System.Threading.RegisteredWaitHandle" />，可用于取消已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-369">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-370">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-370">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-371">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-371">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-372">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-372">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="85aff-373"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法将指定的委托排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-373">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="85aff-374">当发生以下情况之一时，工作线程将执行委托：</span><span class="sxs-lookup"><span data-stu-id="85aff-374">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="85aff-375">指定的对象处于终止状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-375">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="85aff-376">超时间隔已过去。</span><span class="sxs-lookup"><span data-stu-id="85aff-376">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="85aff-377">方法检查指定对象的<xref:System.Threading.WaitHandle>的当前状态。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-377">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="85aff-378">如果对象的状态为信号，则该方法将注册等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-378">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="85aff-379">等待操作由线程池中的一个线程执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-379">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="85aff-380">当对象的状态变为 "已终止" 或超时间隔结束时，工作线程会执行委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-380">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="85aff-381">如果参数不为0（零） `executeOnlyOnce` ，并且参数为`false`，则在每次事件终止或超时间隔结束时，将重置计时器。 `timeOutInterval`</span><span class="sxs-lookup"><span data-stu-id="85aff-381">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="85aff-382"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-382">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="85aff-383">使用最大计数为1的，而不是。 <xref:System.Threading.Mutex>  <xref:System.Threading.Semaphore></span><span class="sxs-lookup"><span data-stu-id="85aff-383">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="85aff-384">若要取消等待操作，请调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-384">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="85aff-385">等待线程使用 Win32 `WaitForMultipleObjects`函数监视已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-385">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="85aff-386">因此，如果必须在多个调用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>中使用相同的本机操作系统句柄，则必须使用 Win32 `DuplicateHandle`函数复制句柄。</span><span class="sxs-lookup"><span data-stu-id="85aff-386">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="85aff-387">请注意，不应脉冲传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>的事件对象，因为等待线程可能检测不到事件在重置前已发出信号。</span><span class="sxs-lookup"><span data-stu-id="85aff-387">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="85aff-388">在返回之前，函数会修改某些类型的同步对象的状态。</span><span class="sxs-lookup"><span data-stu-id="85aff-388">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="85aff-389">仅对其终止状态导致等待条件得到满足的对象进行修改。</span><span class="sxs-lookup"><span data-stu-id="85aff-389">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="85aff-390">例如，信号量的计数减少1。</span><span class="sxs-lookup"><span data-stu-id="85aff-390">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="85aff-391">版本信息</span><span class="sxs-lookup"><span data-stu-id="85aff-391">Version Information</span></span>  
 <span data-ttu-id="85aff-392">从 .NET Framework 版本2.0 开始，属性值<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>将传播到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>使用方法排队的工作线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-392">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="85aff-393">在早期版本中，不传播主体信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-393">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-394">下面的示例演示如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法在指定的等待句柄收到信号时执行指定的回调方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-394">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="85aff-395">在此示例中，回调方法为`WaitProc`，等待句柄<xref:System.Threading.AutoResetEvent>是。</span><span class="sxs-lookup"><span data-stu-id="85aff-395">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="85aff-396">该示例定义了`TaskInfo`一个类，用于保存在执行时传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="85aff-396">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="85aff-397">该示例创建一个`TaskInfo`对象，并为其分配一些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="85aff-397">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="85aff-398"><xref:System.Threading.RegisteredWaitHandle> <xref:System.Threading.RegisteredWaitHandle>方法返回的将分配 `TaskInfo` 给对象的字段，以便回调方法有权访问。 `Handle`  <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-398">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="85aff-399">除了`TaskInfo`指定作为要传递给回调方法的对象， <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>对方法的调用还指定<xref:System.Threading.AutoResetEvent>了任务将`WaitProc`等待的， <xref:System.Threading.WaitOrTimerCallback>委托表示回调方法，1秒的超时间隔和多个回调。</span><span class="sxs-lookup"><span data-stu-id="85aff-399">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="85aff-400">当主线程<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法发出信号时， <xref:System.Threading.WaitOrTimerCallback>将调用委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-400">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="85aff-401">`WaitProc`方法测试 <xref:System.Threading.RegisteredWaitHandle> 以确定是否发生了超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-401">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="85aff-402">如果回调是由于等待句柄已发出信号而调用的`WaitProc` ，则该<xref:System.Threading.RegisteredWaitHandle>方法将注销，并停止其他回调。</span><span class="sxs-lookup"><span data-stu-id="85aff-402">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="85aff-403">在超时情况下，任务将继续等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-403">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="85aff-404">`WaitProc`方法通过将消息打印到控制台来结束。</span><span class="sxs-lookup"><span data-stu-id="85aff-404">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-405"><paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-405">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-406">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-406">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMaxThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="completionPortThreads" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="workerThreads"><span data-ttu-id="85aff-407">线程池中辅助线程的最大数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-407">The maximum number of worker threads in the thread pool.</span></span></param>
        <param name="completionPortThreads"><span data-ttu-id="85aff-408">线程池中异步 I/O 线程的最大数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-408">The maximum number of asynchronous I/O threads in the thread pool.</span></span></param>
        <summary><span data-ttu-id="85aff-409">设置可以同时处于活动状态的线程池的请求数目。</span><span class="sxs-lookup"><span data-stu-id="85aff-409">Sets the number of requests to the thread pool that can be active concurrently.</span></span> <span data-ttu-id="85aff-410">所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</span><span class="sxs-lookup"><span data-stu-id="85aff-410">All requests above that number remain queued until thread pool threads become available.</span></span></summary>
        <returns><span data-ttu-id="85aff-411">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-411"><see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-412">不能将工作线程或 i/o 完成线程的最大数目设置为小于计算机上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="85aff-412">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="85aff-413">若要确定有多少个处理器，可检索<xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType>属性的值。</span><span class="sxs-lookup"><span data-stu-id="85aff-413">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="85aff-414">此外，不能将最大工作线程或 i/o 完成线程的最大数目设置为小于工作线程或 i/o 完成线程对应的最小数目的数字。</span><span class="sxs-lookup"><span data-stu-id="85aff-414">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="85aff-415">若要确定最小线程池大小，请<xref:System.Threading.ThreadPool.GetMinThreads%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-415">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="85aff-416">如果托管公共语言运行时（例如 Internet Information Services （IIS）或 SQL Server），则宿主可能会限制或阻止对线程池大小所做的更改。</span><span class="sxs-lookup"><span data-stu-id="85aff-416">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="85aff-417">更改线程池中线程的最大数量时，请务必小心。</span><span class="sxs-lookup"><span data-stu-id="85aff-417">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="85aff-418">虽然你的代码可能会受益，但所做的更改可能会对你使用的代码库产生不利影响。</span><span class="sxs-lookup"><span data-stu-id="85aff-418">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="85aff-419">将线程池大小设置得太大可能会导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="85aff-419">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="85aff-420">如果同时执行的线程太多，任务切换开销会成为一个重要因素。</span><span class="sxs-lookup"><span data-stu-id="85aff-420">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="85aff-421">用于控制线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-421">for the ability to control threads.</span></span> <span data-ttu-id="85aff-422">权限值：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="85aff-422">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMinThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="completionPortThreads" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="workerThreads"><span data-ttu-id="85aff-423">要由线程池根据需要创建的新的最小工作程序线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-423">The minimum number of worker threads that the thread pool creates on demand.</span></span></param>
        <param name="completionPortThreads"><span data-ttu-id="85aff-424">要由线程池根据需要创建的新的最小空闲异步 I/O 线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-424">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span></span></param>
        <summary><span data-ttu-id="85aff-425">发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。</span><span class="sxs-lookup"><span data-stu-id="85aff-425">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span></span></summary>
        <returns><span data-ttu-id="85aff-426">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-426"><see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-427">线程池按需提供新的工作线程或 i/o 完成线程，直到达到每个类别的最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-427">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="85aff-428">达到最小值时，线程池可以在该类别中创建更多的线程，或等待某些任务完成。</span><span class="sxs-lookup"><span data-stu-id="85aff-428">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="85aff-429">从开始，线程池创建并销毁线程，以优化吞吐量，定义为每个时间单位完成的任务数。 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</span><span class="sxs-lookup"><span data-stu-id="85aff-429">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="85aff-430">线程过少可能无法实现可用资源的最优利用，而线程过多则可能增加资源争用。</span><span class="sxs-lookup"><span data-stu-id="85aff-430">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="85aff-431">需求较低时，线程池线程的实际数量可以低于最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-431">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="85aff-432">如果指定一个负数或一个大于活动线程池线程的最大数目（使用<xref:System.Threading.ThreadPool.GetMaxThreads%2A>获得）的数字， <xref:System.Threading.ThreadPool.SetMinThreads%2A>则返回`false` ，并且不会更改任何一个最小值。</span><span class="sxs-lookup"><span data-stu-id="85aff-432">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-433">默认情况下，最小线程数设置为系统上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="85aff-433">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="85aff-434">您可以使用<xref:System.Threading.ThreadPool.SetMinThreads%2A>方法来增加最小线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-434">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="85aff-435">但是，不必要地增加这些值可能导致性能问题。</span><span class="sxs-lookup"><span data-stu-id="85aff-435">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="85aff-436">如果在同一时间开始太多的任务，则所有任务均可能会很慢。</span><span class="sxs-lookup"><span data-stu-id="85aff-436">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="85aff-437">在大多数情况下，线程池可通过其自身用于分配线程的算法来更好地执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-437">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="85aff-438">将最小值减小到小于处理器数量也可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="85aff-438">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="85aff-439">下面的示例将最小工作线程数设置为4，并保留最小异步 i/o 完成线程数的原始值。</span><span class="sxs-lookup"><span data-stu-id="85aff-439">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="85aff-440">用于控制线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-440">for the ability to control threads.</span></span> <span data-ttu-id="85aff-441">权限值：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="85aff-441">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="ThreadCount">
      <MemberSignature Language="C#" Value="public static int ThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ThreadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadPool.ThreadCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ThreadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int ThreadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadCount : int" Usage="System.Threading.ThreadPool.ThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="85aff-442">获取当前存在的线程池线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-442">Gets the number of thread pool threads that currently exist.</span></span></summary>
        <value><span data-ttu-id="85aff-443">当前存在的线程池线程数。</span><span class="sxs-lookup"><span data-stu-id="85aff-443">The number of thread pool threads that currently exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="85aff-444">如果线程池实现可能具有不同类型的线程，则计数将包括所有类型。</span><span class="sxs-lookup"><span data-stu-id="85aff-444">If a thread pool implementation may have different types of threads, the count includes all types.</span></span>

        ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="overlapped"><span data-ttu-id="85aff-445">要排队的 <see cref="T:System.Threading.NativeOverlapped" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="85aff-445">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span></span></param>
        <summary><span data-ttu-id="85aff-446">将重叠的 I/O 操作排队以便执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-446">Queues an overlapped I/O operation for execution.</span></span></summary>
        <returns><span data-ttu-id="85aff-447">如果成功地将此操作排队到 I/O 完成端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-447"><see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-448">有关使用本机 Win32 重叠 i/o 的信息，请参阅 Win32 平台<xref:System.Threading.Overlapped> SDK 中的<xref:System.Threading.NativeOverlapped>类、结构和`OVERLAPPED`结构。</span><span class="sxs-lookup"><span data-stu-id="85aff-448">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-449"><xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>使用方法可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-449">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-450">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-450">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-451">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>排队时，线程池线程的堆栈没有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-451">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-452">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-452">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-453">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-453">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-454">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-454">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.IThreadPoolWorkItem callBack, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.IThreadPoolWorkItem callBack, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As IThreadPoolWorkItem, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::IThreadPoolWorkItem ^ callBack, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.IThreadPoolWorkItem * bool -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.IThreadPoolWorkItem" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="preferLocal" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callBack"><span data-ttu-id="85aff-455">当线程池中的线程选择工作项时调用的工作项。</span><span class="sxs-lookup"><span data-stu-id="85aff-455">The work item to invoke when a thread in the thread pool picks up the work item.</span></span></param>
        <param name="preferLocal"><span data-ttu-id="85aff-456"><see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</span><span class="sxs-lookup"><span data-stu-id="85aff-456"><see langword="true" /> to prefer queueing the work item in a queue close to the current thread; <see langword="false" /> to prefer queueing the work item to the thread pool's shared queue.</span></span></param>
        <summary><span data-ttu-id="85aff-457">将指定的工作项对象排队到线程池。</span><span class="sxs-lookup"><span data-stu-id="85aff-457">Queues the specified work item object to the thread pool.</span></span></summary>
        <returns><span data-ttu-id="85aff-458">如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-458"><see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="85aff-459">线程池将调用工作项的<xref:System.Threading.IThreadPoolWorkItem.Execute>方法。</span><span class="sxs-lookup"><span data-stu-id="85aff-459">The thread pool will invoke the work item's <xref:System.Threading.IThreadPoolWorkItem.Execute> method.</span></span> <span data-ttu-id="85aff-460">如果需要，该工作项负责传播<xref:System.Threading.ExecutionContext> ，而线程池则不会执行此操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-460">It is the responsibility of that work item to propagate <xref:System.Threading.ExecutionContext> if it's needed; the thread pool will not do so.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-461"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-461"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-462">该工作项是一个 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-462">The work item is a <see cref="T:System.Threading.Tasks.Task" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="85aff-463">未能将该工作项排队。</span><span class="sxs-lookup"><span data-stu-id="85aff-463">The work item could not be queued.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callBack"><span data-ttu-id="85aff-464">一个 <see cref="T:System.Threading.WaitCallback" />，表示当线程池中的线程选择工作项时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-464">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-465">在接受线程池服务时传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-465">The object that is passed to the delegate when serviced from the thread pool.</span></span></param>
        <summary><span data-ttu-id="85aff-466">将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-466">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span></span></summary>
        <returns><span data-ttu-id="85aff-467">如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-467"><see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-468">与方法不同， <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>不会将调用堆栈传播到辅助线程。 <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-468">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="85aff-469">这允许代码丢失调用堆栈，从而提升其安全权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-469">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-470">使用<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-470">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-471">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-471">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-472">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>排队时，线程池线程的堆栈将不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-472">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-473">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-473">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-474">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-474">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="85aff-475">遇到了内存不足的情况。</span><span class="sxs-lookup"><span data-stu-id="85aff-475">An out-of-memory condition was encountered.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="85aff-476">未能将该工作项排队。</span><span class="sxs-lookup"><span data-stu-id="85aff-476">The work item could not be queued.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-477"><paramref name="callBack" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-477"><paramref name="callBack" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-478">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-478">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-479">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-479">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-480">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-480">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool UnsafeQueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="preferLocal" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="85aff-481"><paramref name="state" /> 的元素类型。</span><span class="sxs-lookup"><span data-stu-id="85aff-481">The type of elements of <paramref name="state" />.</span></span></typeparam>
        <param name="callBack"><span data-ttu-id="85aff-482">表示要执行的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-482">A delegate representing the method to execute.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-483">包含方法所用数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-483">An object containing data to be used by the method.</span></span></param>
        <param name="preferLocal"><span data-ttu-id="85aff-484"><see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</span><span class="sxs-lookup"><span data-stu-id="85aff-484"><see langword="true" /> to prefer queueing the work item in a queue close to the current thread; <see langword="false" /> to prefer queueing the work item to the thread pool's shared queue.</span></span></param>
        <summary><span data-ttu-id="85aff-485">将 <see cref="T:System.Action`1" /> 委托指定的方法排入队列以便执行，并指定包含该方法使用的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-485">Queues a method specified by an <see cref="T:System.Action`1" /> delegate for execution, and specifies an object containing data to be used by the method.</span></span> <span data-ttu-id="85aff-486">此方法在有线程池线程变得可用时执行。</span><span class="sxs-lookup"><span data-stu-id="85aff-486">The method executes when a thread pool thread becomes available.</span></span></summary>
        <returns><span data-ttu-id="85aff-487">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-487"><see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="85aff-488"><paramref name="callback" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-488"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="85aff-489">未能将该工作项排队。</span><span class="sxs-lookup"><span data-stu-id="85aff-489">The work item could not be queued.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="85aff-490">注册委托以等待 <see cref="T:System.Threading.WaitHandle" />，但不会将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-490">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-491">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-492">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-493">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-493">The delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-494">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-494">The object that is passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-495">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-495">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-496">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-496">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-497">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-497">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-498">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-498"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-499">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="85aff-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span></span> <span data-ttu-id="85aff-500">此方法不将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-500">This method does not propagate the calling stack to the worker thread.</span></span></summary>
        <returns><span data-ttu-id="85aff-501"><see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-501">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-502">与方法不同， <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不会将调用堆栈传播到辅助线程。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-502">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="85aff-503">这允许代码丢失调用堆栈，从而提升其安全权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-503">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-504">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-504">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-505">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-505">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-506">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>排队时，线程池线程的堆栈将不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-506">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-507">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-507">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="85aff-508"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-508">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="85aff-509">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-509">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-510">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-510">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-511">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-511">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-512"><paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-512">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-513">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-513">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-514">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-514">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-515">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-515">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-516">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-516">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-517">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-517">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-518">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-518">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-519">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-519">The delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-520">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-520">The object that is passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-521">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-521">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-522">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-522">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-523">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-523">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-524">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-524"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-525">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="85aff-525">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span></span> <span data-ttu-id="85aff-526">此方法不将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-526">This method does not propagate the calling stack to the worker thread.</span></span></summary>
        <returns><span data-ttu-id="85aff-527"><see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-527">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-528">与方法不同， <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不会将调用堆栈传播到辅助线程。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-528">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="85aff-529">这允许代码丢失调用堆栈，从而提升其安全权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-529">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-530">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-530">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-531">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-531">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-532">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>排队时，线程池线程的堆栈将不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-532">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-533">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-533">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="85aff-534"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-534">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="85aff-535">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-535">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-536">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-536">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-537">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-537">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-538"><paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-538">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-539">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-539">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-540">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-540">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-541">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-541">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-542">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-542">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-543">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-543">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-544">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-544">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-545">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-545">The delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-546">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-546">The object that is passed to the delegate.</span></span></param>
        <param name="timeout"><span data-ttu-id="85aff-547"><see cref="T:System.TimeSpan" /> 表示的超时时间。</span><span class="sxs-lookup"><span data-stu-id="85aff-547">The time-out represented by a <see cref="T:System.TimeSpan" />.</span></span> <span data-ttu-id="85aff-548">如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-548">If <paramref name="timeout" /> is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-549">如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-549">If <paramref name="timeout" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-550">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-550"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-551">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。此方法不将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-551">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span></span></summary>
        <returns><span data-ttu-id="85aff-552"><see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-552">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-553">与方法不同， <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不会将调用堆栈传播到辅助线程。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-553">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="85aff-554">这允许代码丢失调用堆栈，从而提升其安全权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-554">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-555">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-555">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-556">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-556">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-557">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>排队时，线程池线程的堆栈将不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-557">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-558">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-558">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="85aff-559"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-559">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="85aff-560">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-560">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-561">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-561">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-562">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-562">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="85aff-563"><paramref name="timeout" /> 参数小于 -1。</span><span class="sxs-lookup"><span data-stu-id="85aff-563">The <paramref name="timeout" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="85aff-564"><paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-564">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-565">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-565">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-566">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-566">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-567">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-567">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-568">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-568">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="85aff-569">要注册的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-569">The <see cref="T:System.Threading.WaitHandle" /> to register.</span></span> <span data-ttu-id="85aff-570">使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-570">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span></span></param>
        <param name="callBack"><span data-ttu-id="85aff-571">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</span><span class="sxs-lookup"><span data-stu-id="85aff-571">The delegate to call when the <paramref name="waitObject" /> parameter is signaled.</span></span></param>
        <param name="state"><span data-ttu-id="85aff-572">传递给委托的对象。</span><span class="sxs-lookup"><span data-stu-id="85aff-572">The object that is passed to the delegate.</span></span></param>
        <param name="millisecondsTimeOutInterval"><span data-ttu-id="85aff-573">以毫秒为单位的超时。</span><span class="sxs-lookup"><span data-stu-id="85aff-573">The time-out in milliseconds.</span></span> <span data-ttu-id="85aff-574">如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="85aff-574">If the <paramref name="millisecondsTimeOutInterval" /> parameter is 0 (zero), the function tests the object's state and returns immediately.</span></span> <span data-ttu-id="85aff-575">如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</span><span class="sxs-lookup"><span data-stu-id="85aff-575">If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses.</span></span></param>
        <param name="executeOnlyOnce"><span data-ttu-id="85aff-576">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</span><span class="sxs-lookup"><span data-stu-id="85aff-576"><see langword="true" /> to indicate that the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span></span></param>
        <summary><span data-ttu-id="85aff-577">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="85aff-577">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span></span> <span data-ttu-id="85aff-578">此方法不将调用堆栈传播到辅助线程。</span><span class="sxs-lookup"><span data-stu-id="85aff-578">This method does not propagate the calling stack to the worker thread.</span></span></summary>
        <returns><span data-ttu-id="85aff-579"><see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</span><span class="sxs-lookup"><span data-stu-id="85aff-579">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85aff-580">与方法不同， <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>不会将调用堆栈传播到辅助线程。 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="85aff-580">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="85aff-581">这允许代码丢失调用堆栈，从而提升其安全权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-581">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="85aff-582">使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>可能会无意中打开安全漏洞。</span><span class="sxs-lookup"><span data-stu-id="85aff-582">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="85aff-583">代码访问安全性根据堆栈上所有调用方的权限检查其权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-583">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="85aff-584">当工作在线程池线程上使用<xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>排队时，线程池线程的堆栈将不具有实际调用方的上下文。</span><span class="sxs-lookup"><span data-stu-id="85aff-584">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="85aff-585">恶意代码可以利用此漏洞来避免权限检查。</span><span class="sxs-lookup"><span data-stu-id="85aff-585">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="85aff-586"><xref:System.Threading.Mutex>使用 for `waitObject`不会为回调提供互斥，因为基础 Windows API 使用默认`WT_EXECUTEDEFAULT`标志，因此每个回调都在单独的线程池线程上进行调度。</span><span class="sxs-lookup"><span data-stu-id="85aff-586">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Windows API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="85aff-587">使用<xref:System.Threading.RegisteredWaitHandle>完此方法返回的后，调用其<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法以释放对等待句柄的引用。</span><span class="sxs-lookup"><span data-stu-id="85aff-587">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="85aff-588">建议你始终调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，即使你为`executeOnlyOnce`指定`true` 。</span><span class="sxs-lookup"><span data-stu-id="85aff-588">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="85aff-589">如果调用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType>方法，而不是根据注册的等待句柄的终结器，则垃圾回收的工作效率更高。</span><span class="sxs-lookup"><span data-stu-id="85aff-589">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="85aff-590">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="85aff-590">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="85aff-591">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="85aff-591">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="85aff-592">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="85aff-592">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="85aff-593">托管线程池</span><span class="sxs-lookup"><span data-stu-id="85aff-593">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

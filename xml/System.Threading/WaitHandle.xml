<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="401741fc866666c12ee5713a5308bc8f8fc88505" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70362721" /></Metadata><TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ad7cc-101">封装等待对共享资源进行独占访问的操作系统特定的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-101">Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-102"><xref:System.Threading.WaitHandle>类封装本机操作系统同步句柄，用于表示运行时中允许多个等待操作的所有同步对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="ad7cc-103">有关等待句柄与其他同步对象的比较，请参阅[同步基元概述](~/docs/standard/threading/overview-of-synchronization-primitives.md)。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="ad7cc-104"><xref:System.Threading.WaitHandle>类本身是抽象类。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="ad7cc-105">从派生的<xref:System.Threading.WaitHandle>类定义信号机制以指示获取或释放对共享资源的访问，但它们使用继承<xref:System.Threading.WaitHandle>的方法在等待对共享资源的访问时进行阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="ad7cc-106">派生自<xref:System.Threading.WaitHandle>的类包括：</span><span class="sxs-lookup"><span data-stu-id="ad7cc-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="ad7cc-107"><xref:System.Threading.Mutex> 类。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="ad7cc-108">请参阅[mutex](~/docs/standard/threading/mutexes.md)。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="ad7cc-109">类及其派生<xref:System.Threading.AutoResetEvent>类和<xref:System.Threading.ManualResetEvent>。 <xref:System.Threading.EventWaitHandle></span><span class="sxs-lookup"><span data-stu-id="ad7cc-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span>  
  
-   <span data-ttu-id="ad7cc-110"><xref:System.Threading.Semaphore> 类。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-110">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="ad7cc-111">请参阅[信号灯和 SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-111">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="ad7cc-112">线程可以通过调用实例方法阻止单个等待句柄，该<xref:System.Threading.WaitHandle.WaitOne%2A>实例方法由派生自<xref:System.Threading.WaitHandle>的类继承。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-112">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="ad7cc-113">的<xref:System.Threading.WaitHandle>派生类在其线程关联中有所不同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-113">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="ad7cc-114">事件等待句柄<xref:System.Threading.EventWaitHandle>（ <xref:System.Threading.AutoResetEvent>、、 <xref:System.Threading.ManualResetEvent>和）和信号量不具有线程关联，任何线程都可以通知事件等待句柄或信号量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-114">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="ad7cc-115">另一方面，互斥体确实具有线程关联;拥有互斥体的线程必须释放它，如果线程对不属于它的互斥体调用<xref:System.Threading.Mutex.ReleaseMutex%2A>方法，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-115">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="ad7cc-116">由于类派生自<xref:System.MarshalByRefObject>，因此这些类可用于跨应用程序域边界同步线程的活动。 <xref:System.Threading.WaitHandle></span><span class="sxs-lookup"><span data-stu-id="ad7cc-116">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="ad7cc-117">除派生类之外， <xref:System.Threading.WaitHandle>类还具有许多静态方法，这些方法阻止线程，直到一个或多个同步对象收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-117">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="ad7cc-118">这些方法包括：</span><span class="sxs-lookup"><span data-stu-id="ad7cc-118">These include:</span></span>  
  
-   <span data-ttu-id="ad7cc-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>，它允许线程向一个等待句柄发出信号，并立即等待另一个等待句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="ad7cc-120"><xref:System.Threading.WaitHandle.WaitAll%2A>，它允许线程等待，直到数组中的所有等待句柄都收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-120"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="ad7cc-121"><xref:System.Threading.WaitHandle.WaitAny%2A>，它允许线程等待，直到指定的一组等待句柄发出信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-121"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled.</span></span>  
  
 <span data-ttu-id="ad7cc-122">这些方法的重载提供了放弃等待的超时间隔，以及在进入等待前退出同步上下文的机会，从而允许其他线程使用同步上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-122">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ad7cc-123">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-123">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ad7cc-124">使用完类型或派生自该类型的类型后，应直接或间接释放它。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-124">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ad7cc-125">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.Threading.WaitHandle.Close%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-125">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ad7cc-126">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-126">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ad7cc-127">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-127">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ad7cc-128"><xref:System.Threading.WaitHandle><xref:System.IDisposable.Dispose%2A>实现模式。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-128"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="ad7cc-129">请参阅 [实现 Dispose 方法] （~/docs/standard/garbage-collection/implementing-dispose）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-129">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="ad7cc-130">从<xref:System.Threading.WaitHandle>派生时，请<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>使用属性存储本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-130">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="ad7cc-131">除非使用其他非托管资源，否则<xref:System.Threading.WaitHandle.Dispose%2A>不需要重写受保护的方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-131">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-132">下面的代码示例演示了在主线程使用<xref:System.Threading.WaitHandle.WaitAny%2A> <xref:System.Threading.WaitHandle>类的静态和<xref:System.Threading.WaitHandle.WaitAll%2A>方法等待任务完成时，两个线程可以执行后台任务的方式。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-132">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="ad7cc-133">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-133">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="ad7cc-134">线程</span><span class="sxs-lookup"><span data-stu-id="ad7cc-134">Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="ad7cc-135">线程处理对象和功能</span><span class="sxs-lookup"><span data-stu-id="ad7cc-135">Threading Objects and Features</span></span></related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="ad7cc-136">Mutexes</span><span class="sxs-lookup"><span data-stu-id="ad7cc-136">Mutexes</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cd94fc34-ac15-427f-b723-a1240a4fab7d"><span data-ttu-id="ad7cc-137">EventWaitHandle、AutoResetEvent 和 anualResetEvent</span><span class="sxs-lookup"><span data-stu-id="ad7cc-137">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="ad7cc-138">信号量</span><span class="sxs-lookup"><span data-stu-id="ad7cc-138">Semaphores</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public WaitHandle ();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WaitHandle();" FrameworkAlternate="netframework-1.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-139">初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-139">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-140">释放由当前 <see cref="T:System.Threading.WaitHandle" /> 占用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-140">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-141">此方法是<xref:System.Threading.WaitHandle>该类及其派生类的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法的公共实现。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-141">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="ad7cc-142">它提供了一个标准实现，该`Dispose(Boolean)`实现`true`使用<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>自变量调用重载，然后调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-142">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ad7cc-143">调用此方法可释放实例`WaitHandle`持有的所有资源或派生类。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-143">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="ad7cc-144">调用此方法后，对当前实例的引用将导致未定义的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-144">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-145">在释放<xref:System.Threading.WaitHandle.Close%2A>对<xref:System.Threading.WaitHandle.Dispose> 的<xref:System.Threading.WaitHandle>最后一个引用之前，请始终调用或。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-145">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ad7cc-146">否则，将不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-146">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad7cc-147">应重写<see langword="Dispose(Boolean)" />方法以释放派生类中分配的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-147">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="ad7cc-148">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="ad7cc-148">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad7cc-149">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源</span><span class="sxs-lookup"><span data-stu-id="ad7cc-149">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-150">释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-151">此方法等效于<xref:System.Threading.WaitHandle.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-151">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-152">在释放<xref:System.Threading.WaitHandle.Close%2A>对<xref:System.Threading.WaitHandle.Dispose> 的<xref:System.Threading.WaitHandle>最后一个引用之前，请始终调用或。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-152">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ad7cc-153">否则，将不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-153">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="ad7cc-154">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="ad7cc-154">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing"><span data-ttu-id="ad7cc-155"><see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-155"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="ad7cc-156">当在派生类中重写时，释放 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，并且可选择释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-156">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-157">此<xref:System.Threading.WaitHandle.Close%2A>方法由<xref:System.Threading.WaitHandle.Dispose>和`explicitDisposing`参数设置为`true`的方法调用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-157">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="ad7cc-158">当参数为`true`时，此方法释放该<xref:System.Threading.WaitHandle>对象引用的任何托管对象所持有的所有资源。 `explicitDisposing`</span><span class="sxs-lookup"><span data-stu-id="ad7cc-158">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad7cc-159">应重写<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />方法以释放派生类中分配的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-159">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
<span data-ttu-id="ad7cc-160"><see cref="M:System.Threading.WaitHandle.Close" /> 或<see cref="M:System.Threading.WaitHandle.Dispose" />方法可由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-160">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="ad7cc-161">重写此方法时，请注意不要引用之前在或对<see langword="Dispose" />或<see langword="Close" />的调用中已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-161">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="ad7cc-162">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="ad7cc-162">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-163">释放由当前实例所持有的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-163">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="ad7cc-164">此成员已从 .NET Framework 版本2.0 和后续版本中删除。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-164">This member has been removed from the .NET Framework version 2.0 and subsequent versions.</span></span> <span data-ttu-id="ad7cc-165">本主题仅适用于本主题后面的 "版本信息" 中列出的版本。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-165">This topic applies only to the versions listed in "Version Information" later in this topic.</span></span>


<span data-ttu-id="ad7cc-166">应用程序代码不会调用此方法;它在垃圾回收期间自动调用，除非已禁用垃圾回收器的终止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-166">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="ad7cc-167">有关详细信息，请参阅 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 和 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-167">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="ad7cc-168">此方法重写 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-168">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad7cc-169">获取或设置本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-169">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="ad7cc-170"><see langword="IntPtr" />，它表示本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-170">An <see langword="IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="ad7cc-171">默认为 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-171">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-172">为<xref:System.Threading.WaitHandle.Handle%2A>属性分配新值不会关闭上一个句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-172">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="ad7cc-173">这可能会导致句柄泄露。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-173">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="ad7cc-174">请不要在 .NET Framework 版本2.0 或更高版本中使用此属性;请改用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-174">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="ad7cc-175">如果将此属性设置为有效的句柄<xref:System.Threading.WaitHandle.SafeWaitHandle%2A> ，还会设置属性， <xref:System.Threading.WaitHandle.InvalidHandle>但将其设置为可能导致泄漏的句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-175">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ad7cc-176">需要对直接调用方的完全信任才能设置属性值。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-176">Requires full trust for the immediate caller to set the property value.</span></span> <span data-ttu-id="ad7cc-177">此成员不能由部分受信任的或透明的代码设置。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-177">This member cannot be set by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="ad7cc-178">派生的<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />类型必须设置属性值。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-178">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad7cc-179">表示无效的本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-179">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="ad7cc-180">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-180">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-181">在内部用来初始化<xref:System.Threading.WaitHandle.Handle%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-181">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ad7cc-182">您可以使用此值来确定<see cref="P:System.Threading.WaitHandle.Handle" />属性是否包含有效的本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-182">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad7cc-183">获取或设置本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-183">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="ad7cc-184"><see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，它表示本机操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-184">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-185">将新值分配到<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>属性时，将在收集上一个<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>对象时关闭上一个句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-185">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="ad7cc-186">不要手动关闭句柄，因为这<xref:System.ObjectDisposedException> <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>会导致在尝试关闭句柄时出现。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-186">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="ad7cc-187"><xref:System.Threading.WaitHandle><xref:System.IDisposable.Dispose%2A>实现模式。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-187"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="ad7cc-188">请参阅 [实现 Dispose 方法] （~/docs/standard/garbage-collection/implementing-dispose）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-188">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="ad7cc-189">当从<xref:System.Threading.WaitHandle>派生时， <xref:System.Threading.WaitHandle.SafeWaitHandle%2A>使用属性存储本机句柄操作系统句柄。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-189">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="ad7cc-190">除非使用其他非托管资源，否则<xref:System.Threading.WaitHandle.Dispose%2A>不需要重写受保护的方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-190">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ad7cc-191">需要对直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-191">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="ad7cc-192">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-192">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="ad7cc-193">派生的<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />类型必须调用此成员。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-193">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad7cc-194">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-194">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="ad7cc-195">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-195">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="ad7cc-196">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-196">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="ad7cc-197">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-197">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-198">如果信号和等待都成功完成，则为 <see langword="true" />；如果等待没有完成，则此方法不返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-198"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-199">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-199">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="ad7cc-200">在当前线程发出信号`toSignal`之后但在`toWaitOn`等待之前，另一个处理器上运行的线程可能会发出`toWaitOn`信号或等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-200">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-201">下面的代码示例使用<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>方法重载，以允许主线程向阻止的线程发出信号，并等待线程完成任务。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-201">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="ad7cc-202">该示例启动五个线程，使其可以在<xref:System.Threading.EventWaitHandle> <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>使用标志创建的上阻塞，然后在每次用户按下 enter 键时释放一个线程。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-202">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="ad7cc-203">然后，该示例将另一线程排队，并通过使用<xref:System.Threading.EventWaitHandle> <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>标志创建的所有线程释放它们。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-203">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-204"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-204"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-205">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-205">-or-</span></span> 
 <span data-ttu-id="ad7cc-206"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-206"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-207">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-207">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ad7cc-208">Windows 98 或 Windows Millennium Edition 不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-208">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-209"><paramref name="toSignal" /> 是信号量，已达到最大计数。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-209"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-210">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-210">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-211">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-211">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="ad7cc-212">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-212">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="ad7cc-213">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-213">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-214">一个整数，表示要等待的间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-214">An integer that represents the interval to wait.</span></span> <span data-ttu-id="ad7cc-215">如果值是 <see cref="F:System.Threading.Timeout.Infinite" />，即 -1，则等待是无限期的。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-215">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-216">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-216"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-217">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 32 位有符号整数，并指定在进入等待前是否退出上下文的同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-217">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-218">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-218"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-219">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-219">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="ad7cc-220">在当前线程发出信号`toSignal`之后但在`toWaitOn`等待之前，另一个处理器上运行的线程可能会发出`toWaitOn`信号或等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-220">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="ad7cc-221">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-221">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-222">它测试的状态`toWaitOn`并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-222">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-223">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-223">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-224">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.SignalAndWait%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-224">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-225">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-225">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-226">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-226">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-227">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-227">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="ad7cc-228">调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-228">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-229">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-229">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-230">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-230">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-231">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-231">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-232"><xref:System.Threading.WaitHandle.SignalAndWait%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-232">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-233"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-233"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-234">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-234">-or-</span></span> 
 <span data-ttu-id="ad7cc-235"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-235"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-236">对具有 <see cref="T:System.STAThreadAttribute" /> 的线程调用了此方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-236">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ad7cc-237">Windows 98 或 Windows Millennium Edition 不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-237">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-238">无法终止 <see cref="T:System.Threading.WaitHandle" />，因为它将超过其最大计数。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-238">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-239"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-239"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-240">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-240">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-241">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-241">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="ad7cc-242">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-242">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="ad7cc-243">要等待的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-243">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="ad7cc-244">一个 <see cref="T:System.TimeSpan" />，表示要等待的间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-244">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="ad7cc-245">如果值是 -1，则等待是无限期的。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-245">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-246">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-246"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-247">向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 <see cref="T:System.TimeSpan" />，并指定在进入等待前是否退出上下文的同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-247">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-248">如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-248"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-249">不保证此操作为原子操作。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-249">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="ad7cc-250">在当前线程发出信号`toSignal`之后但在`toWaitOn`等待之前，另一个处理器上运行的线程可能会发出`toWaitOn`信号或等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-250">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="ad7cc-251">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-251">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ad7cc-252">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-252">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-253">它测试的状态`toWaitOn`并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-253">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-254">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-254">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-255">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.SignalAndWait%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-255">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-256">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-256">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-257">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-257">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-258">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-258">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="ad7cc-259">调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-259">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-260">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-260">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-261">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-261">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-262">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-262">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-263"><xref:System.Threading.WaitHandle.SignalAndWait%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-263">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-264"><paramref name="toSignal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-264"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-265">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-265">-or-</span></span> 
 <span data-ttu-id="ad7cc-266"><paramref name="toWaitOn" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-266"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-267">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-267">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ad7cc-268">Windows 98 或 Windows Millennium Edition 不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-268">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-269"><paramref name="toSignal" /> 是信号量，已达到最大计数。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-269"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-270"><paramref name="timeout" /> 计算为 -1 以外的负毫秒数。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-270"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
<span data-ttu-id="ad7cc-271">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-271">-or-</span></span> 
 <span data-ttu-id="ad7cc-272"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-272"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-273">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-273">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-274">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-274">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-275">释放由 <see cref="T:System.Threading.WaitHandle" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-275">Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="ad7cc-276">调用`Dispose`会允许出于其他目的重新<xref:System.Threading.WaitHandle>分配所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-276">Calling `Dispose` allows the resources used by the <xref:System.Threading.WaitHandle> to be reallocated for other purposes.</span></span> <span data-ttu-id="ad7cc-277">有关的详细信息`Dispose`，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-277">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad7cc-278">等待指定数组中的所有元素都收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-278">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-279">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-279">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="ad7cc-280">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-280">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="ad7cc-281">等待指定数组中的所有元素都收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-281">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-282">如果 <see langword="true" /> 中的每个元素都收到信号，则返回 <paramref name="waitHandles" />；否则该方法永不返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-282"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-283"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-283"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-284">在以前的版本中<xref:System.Threading.WaitHandle.WaitAll%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-284">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-285">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-285">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-286">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-286">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-287">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-287">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-288">当<xref:System.Threading.WaitHandle.WaitAll%2A>所有句柄都收到信号时，此方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-288">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="ad7cc-289">在某些实现中，如果传递的<xref:System.NotSupportedException>句柄超过64，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-289">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="ad7cc-290">如果数组包含重复项，调用将失败，并<xref:System.DuplicateWaitObjectException>出现。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-290">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-291"><xref:System.Threading.WaitHandle.WaitAll%2A> 具有<xref:System.STAThreadAttribute>的线程不支持方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-291">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="ad7cc-292">调用此方法重载等效<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>于调用方法重载，并为`millisecondsTimeout`和`true` `exitContext`指定-1 （ <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>或）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-292">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-293">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-293">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="ad7cc-294">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-294">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="ad7cc-295">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-295">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-296"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="ad7cc-297">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-297">-or-</span></span> 
<span data-ttu-id="ad7cc-298"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-298">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-299">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-299">-or-</span></span> 
 <span data-ttu-id="ad7cc-300"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-300"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="ad7cc-301">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-301">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="ad7cc-302"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-302">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-303"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-303">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="ad7cc-304">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-304">-or-</span></span> 
<span data-ttu-id="ad7cc-305"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-305">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-306"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-306"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-307">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-307">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-308">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-308">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-309"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-309">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-310">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-310">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="ad7cc-311">此数组不能包含对同一对象的多个引用（重复的元素）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-311">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-312">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-312">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-313">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-313">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-314">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-314"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-315">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-315">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-316">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-316">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-317">此<xref:System.Threading.WaitHandle.WaitAll%2A>方法在等待终止时返回，这意味着在所有句柄都发出信号或发生超时时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-317">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="ad7cc-318">在某些实现中，如果传递的<xref:System.NotSupportedException>句柄超过64，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-318">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="ad7cc-319">如果数组中有重复项，调用将失败，并<xref:System.DuplicateWaitObjectException>出现。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-319">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-320"><xref:System.Threading.WaitHandle.WaitAll%2A> 具有<xref:System.STAThreadAttribute>的线程不支持方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-320">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="ad7cc-321">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-321">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-322"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-322">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-323">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-323">-or-</span></span> 
<span data-ttu-id="ad7cc-324"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-324">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-325">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-325">-or-</span></span> 
 <span data-ttu-id="ad7cc-326"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-326"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="ad7cc-327">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-327">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="ad7cc-328"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-328">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-329"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-329">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="ad7cc-330">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-330">-or-</span></span> 
<span data-ttu-id="ad7cc-331"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-331">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-332"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-332"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-333">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-333">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-334">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-334">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-335"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-335">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-336">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-336">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="ad7cc-337">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-337">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="ad7cc-338">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-338">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-339">等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-339">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-340">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-340"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-341">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-341">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-342">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-342">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-343">当<xref:System.Threading.WaitHandle.WaitAll%2A>等待终止时，此方法将返回，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-343">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-344">在某些实现中，如果传递的<xref:System.NotSupportedException>句柄超过64，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-344">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="ad7cc-345">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-345">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-346"><xref:System.Threading.WaitHandle.WaitAll%2A> 具有<xref:System.STAThreadAttribute>的线程不支持方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-346">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="ad7cc-347">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-347">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ad7cc-348">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-348">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-349"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-349">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-350">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-350">-or-</span></span> 
<span data-ttu-id="ad7cc-351"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-351">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-352">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-352">-or-</span></span> 
 <span data-ttu-id="ad7cc-353"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-353"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="ad7cc-354">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-354">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="ad7cc-355"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-355">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-356"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-356">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="ad7cc-357">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-357">-or-</span></span> 
<span data-ttu-id="ad7cc-358"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-358">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-359"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-359"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-360">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-360">-or-</span></span> 
 <span data-ttu-id="ad7cc-361"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-361"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-362">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-362">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-363">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-363">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-364"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-364">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-365">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-365">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="ad7cc-366">此数组不能包含对同一对象的多个引用（重复的元素）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-366">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-367">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-367">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-368">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-368"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-369">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.Int32" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-369">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-370">如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-370"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-371">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-371">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-372">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-372">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-373"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-373"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-374">在以前的版本中<xref:System.Threading.WaitHandle.WaitAll%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-374">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-375">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-375">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-376">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-376">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-377">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-377">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-378">此<xref:System.Threading.WaitHandle.WaitAll%2A>方法在等待终止时返回，这意味着在所有句柄都发出信号或发生超时时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-378">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="ad7cc-379">在某些实现中，如果传递的<xref:System.NotSupportedException>句柄超过64，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-379">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="ad7cc-380">如果数组中有重复项，调用将失败，并<xref:System.DuplicateWaitObjectException>出现。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-380">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-381"><xref:System.Threading.WaitHandle.WaitAll%2A> 具有<xref:System.STAThreadAttribute>的线程不支持方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-381">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-382">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-382">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-383">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitAll%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-383">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-384">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-384">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-385">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-385">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-386">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitAll%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-386">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="ad7cc-387">调用<xref:System.Threading.WaitHandle.WaitAll%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-387">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-388">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-388">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="ad7cc-389">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-389">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-390">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitAll%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-390">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-391"><xref:System.Threading.WaitHandle.WaitAll%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-391">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-392">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-392">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="ad7cc-393">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-393">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="ad7cc-394">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-394">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-395"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-395">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-396">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-396">-or-</span></span> 
<span data-ttu-id="ad7cc-397"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-397">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-398">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-398">-or-</span></span> 
 <span data-ttu-id="ad7cc-399"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-399"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="ad7cc-400"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-400">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-401"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-401">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="ad7cc-402">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-402">-or-</span></span> 
<span data-ttu-id="ad7cc-403"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-403">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-404"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-404"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-405"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-405"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-406">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-406">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-407">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-407">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-408"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-408">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-409">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-409">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="ad7cc-410">此数组不能包含对同一对象的多个引用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-410">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="ad7cc-411">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-411">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-412">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-412"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-413">等待指定数组中的所有元素收到信号，使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-413">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-414">如果 <paramref name="waitHandles" /> 中的每个元素都收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-414"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-415">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-415">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-416">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-416">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-417"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-417"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-418">在以前的版本中<xref:System.Threading.WaitHandle.WaitAll%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-418">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-419">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-419">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-420">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-420">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-421">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-421">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-422">当<xref:System.Threading.WaitHandle.WaitAll%2A>等待终止时，此方法将返回，这意味着所有句柄都已终止或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-422">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-423">在某些实现中，如果传递的<xref:System.NotSupportedException>句柄超过64，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-423">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="ad7cc-424">如果数组包含重复项，则调用将失败。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-424">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-425"><xref:System.Threading.WaitHandle.WaitAll%2A> 具有<xref:System.STAThreadAttribute>的线程不支持方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-425">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="ad7cc-426">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-426">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-427">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-427">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-428">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitAll%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-428">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-429">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-429">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-430">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-430">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-431">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitAll%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-431">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="ad7cc-432">此<xref:System.Threading.WaitHandle.WaitAll%2A>方法在调用方法完成后返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-432">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-433">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-433">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-434">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-434">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-435">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitAll%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-435">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-436"><xref:System.Threading.WaitHandle.WaitAll%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-436">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-437">下面的代码示例演示如何使用线程池异步创建和写入一组文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-437">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="ad7cc-438">每个写入操作都作为工作项排队，并在完成后发出信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-438">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="ad7cc-439">主线程等待所有项发出信号，然后退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-439">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-440"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-440">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-441">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-441">-or-</span></span> 
<span data-ttu-id="ad7cc-442"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-442">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-443">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-443">-or-</span></span> 
 <span data-ttu-id="ad7cc-444"><paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-444"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="ad7cc-445"><paramref name="waitHandles" /> 数组包含重复的元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-445">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-446"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-446">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="ad7cc-447">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-447">-or-</span></span> 
<span data-ttu-id="ad7cc-448"><see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-448">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-449"><paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-449"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-450"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-450"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-451">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-451">-or-</span></span> 
 <span data-ttu-id="ad7cc-452"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-452"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-453">等待终止，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-453">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-454">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-455"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-455">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad7cc-456">等待指定数组中的任一元素收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-456">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-457">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="ad7cc-458">等待指定数组中的任一元素收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-458">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-459">满足等待的对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-459">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-460"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-460"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-461">在以前的版本中<xref:System.Threading.WaitHandle.WaitAny%2A> ，如果`true`等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-461">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-462">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-462">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-463">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-463">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-464">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-464">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-465">此<xref:System.Threading.WaitHandle.WaitAny%2A>方法<xref:System.Threading.AbandonedMutexException>仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-465">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="ad7cc-466">如果`waitHandles`包含的释放互斥体的索引号小于被放弃的互斥体， <xref:System.Threading.WaitHandle.WaitAny%2A>则该方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-466">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-467">在早于版本2.0 的 .NET Framework 版本中，如果<xref:System.Threading.Mutex>线程退出或中止，而不显式释放， `Mutex`并且位于另一个线程的`WaitAny`数组中的索引为0（零），则返回`WaitAny`的索引为128而不是0。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-467">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="ad7cc-468">当任何句柄终止时，此方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-468">This method returns when any handle is signaled.</span></span> <span data-ttu-id="ad7cc-469">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-469">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="ad7cc-470">在某些实现中，如果传递了64个以上的句<xref:System.NotSupportedException>柄，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-470">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-471">调用此方法重载等效<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>于调用方法重载，并为`millisecondsTimeout`和`true` `exitContext`指定-1 （ <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>或）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-471">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-472">下面的代码示例演示如何调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-472">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-473"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-473">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-474">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-474">-or-</span></span> 
<span data-ttu-id="ad7cc-475"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-475">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-476"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-476">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-477"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-477"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-478">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-478">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-479">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-479">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ad7cc-480"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-480"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-481"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-481">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-482">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-482">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-483">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-483">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-484">等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-484">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-485">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-485">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-486">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-486">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-487">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-487">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-488">此<xref:System.Threading.WaitHandle.WaitAny%2A>方法<xref:System.Threading.AbandonedMutexException>仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-488">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="ad7cc-489">如果`waitHandles`包含的释放互斥体的索引号小于被放弃的互斥体， <xref:System.Threading.WaitHandle.WaitAny%2A>则该方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-489">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-490">当等待终止时，此方法将返回，无论是在任何句柄收到信号，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-490">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="ad7cc-491">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-491">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="ad7cc-492">在某些实现中，如果传递了64个以上的句<xref:System.NotSupportedException>柄，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-492">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-493">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-493">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-494"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-494">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-495">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-495">-or-</span></span> 
<span data-ttu-id="ad7cc-496"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-496">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-497"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-497">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-498"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-498"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-499">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-499">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-500">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-500">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ad7cc-501"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-501"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-502"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-502">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-503">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-503">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="ad7cc-504">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-504">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-505">等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-505">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-506">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-506">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-507">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-507">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-508">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-508">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-509">此<xref:System.Threading.WaitHandle.WaitAny%2A>方法<xref:System.Threading.AbandonedMutexException>仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-509">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="ad7cc-510">如果`waitHandles`包含的释放互斥体的索引号小于被放弃的互斥体， <xref:System.Threading.WaitHandle.WaitAny%2A>则该方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-510">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-511">当等待终止时，此方法将返回，无论是在任何句柄收到信号时，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-511">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="ad7cc-512">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-512">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="ad7cc-513">在某些实现中，如果传递了64个以上的句<xref:System.NotSupportedException>柄，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-513">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-514">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-514">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ad7cc-515">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-515">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-516"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-516">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-517">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-517">-or-</span></span> 
<span data-ttu-id="ad7cc-518"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-518">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-519"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-519">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-520"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-520"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-521">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ad7cc-521">-or-</span></span> 
 <span data-ttu-id="ad7cc-522"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-522"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-523">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-523">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-524">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-524">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ad7cc-525"><paramref name="waitHandles" /> 是一个不含任何元素的数组。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-525"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-526"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-526">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-527">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-527">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-528">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-528">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-529">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-529"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-530">等待指定数组中的任一元素收到信号，使用 32 位带符号整数指定时间间隔并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-530">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-531">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-531">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-532">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-532">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-533">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-533">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-534"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-534"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-535">在以前的版本中<xref:System.Threading.WaitHandle.WaitAny%2A> ，如果`true`等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-535">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-536">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-536">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-537">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-537">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-538">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-538">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-539">此<xref:System.Threading.WaitHandle.WaitAny%2A>方法<xref:System.Threading.AbandonedMutexException>仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-539">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="ad7cc-540">如果`waitHandles`包含的释放互斥体的索引号小于被放弃的互斥体， <xref:System.Threading.WaitHandle.WaitAny%2A>则该方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-540">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-541">在早于版本2.0 的 .NET Framework 版本中，如果<xref:System.Threading.Mutex>线程退出或中止，而不显式释放， `Mutex`并且位于另一个线程的`WaitAny`数组中的索引为0（零），则返回`WaitAny`的索引为128而不是0。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-541">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="ad7cc-542">当等待终止时，此方法将返回，无论是在任何句柄收到信号，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-542">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="ad7cc-543">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-543">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="ad7cc-544">在某些实现中，如果传递了64个以上的句<xref:System.NotSupportedException>柄，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-544">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-545">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-545">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-546">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitAny%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-546">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-547">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-547">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-548">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-548">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-549">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitAny%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-549">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="ad7cc-550">调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-550">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-551">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-551">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-552">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-552">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-553">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-553">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-554"><xref:System.Threading.WaitHandle.WaitAny%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-554">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-555">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-555">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="ad7cc-556">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-556">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-557"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-557">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-558">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-558">-or-</span></span> 
<span data-ttu-id="ad7cc-559"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-559">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-560"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-560">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-561"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-561"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-562"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-562"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-563">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-563">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-564">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-564">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ad7cc-565"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-565"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-566"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-566">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="ad7cc-567">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-567">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="ad7cc-568">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-568">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-569">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-569"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-570">等待指定数组中的任一元素收到信号，使用 <see cref="T:System.TimeSpan" /> 指定时间间隔并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-570">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-571">满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-571">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-572">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-572">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-573">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-573">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-574"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-574"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-575">在以前的版本中<xref:System.Threading.WaitHandle.WaitAny%2A> ，如果`true`等待因放弃互斥体而完成，则该方法返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-575">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-576">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-576">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-577">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-577">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-578">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-578">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-579">此<xref:System.Threading.WaitHandle.WaitAny%2A>方法<xref:System.Threading.AbandonedMutexException>仅在等待由于放弃的 mutex 而完成时引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-579">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="ad7cc-580">如果`waitHandles`包含的释放互斥体的索引号小于被放弃的互斥体， <xref:System.Threading.WaitHandle.WaitAny%2A>则该方法将正常完成并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-580">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad7cc-581">在早于版本2.0 的 .NET Framework 版本中，如果<xref:System.Threading.Mutex>线程退出或中止，而不显式释放， `Mutex`并且位于另一个线程的`WaitAny`数组中的索引为0（零），则返回`WaitAny`的索引为128而不是0。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-581">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="ad7cc-582">当等待终止时，此方法将返回，无论是在任何句柄收到信号时，还是发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-582">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="ad7cc-583">如果在调用过程中有多个对象收到信号，则返回值为带有所有已发出信号的对象的最小索引值的信号对象的数组索引。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-583">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="ad7cc-584">在某些实现中，如果传递了64个以上的句<xref:System.NotSupportedException>柄，则会引发。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-584">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="ad7cc-585">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-585">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-586">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-586">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-587">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitAny%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-587">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-588">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-588">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-589">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-589">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-590">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitAny%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-590">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="ad7cc-591">调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-591">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-592">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-592">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-593">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-593">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-594">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitAny%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-594">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-595"><xref:System.Threading.WaitHandle.WaitAny%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-595">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-596">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-596">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="ad7cc-597">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-597">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ad7cc-598"><paramref name="waitHandles" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-598">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="ad7cc-599">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-599">-or-</span></span> 
<span data-ttu-id="ad7cc-600"><paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-600">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ad7cc-601"><paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-601">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="ad7cc-602"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-602"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-603"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-603"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-604">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-604">-or-</span></span> 
 <span data-ttu-id="ad7cc-605"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-605"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-606">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-606">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-607">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-607">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ad7cc-608"><paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-608"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-609"><paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-609">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ad7cc-610">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad7cc-611">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-611">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-612">如果当前实例收到信号，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-612"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="ad7cc-613">如果当前实例永不发出信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 永不返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-613">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-614"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-614"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-615">在以前的版本中<xref:System.Threading.WaitHandle.WaitOne%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-615">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-616">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-616">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-617">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-617">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-618">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-618">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-619">此方法的调用方会无限期阻止，直到当前实例收到信号。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-619">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="ad7cc-620">使用此方法可在<xref:System.Threading.WaitHandle>接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-620">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="ad7cc-621">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-621">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="ad7cc-622">调用此方法重载等效于调用<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>方法重载，并将第一个参数和<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> `false`第二个参数指定为-1 或。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-622">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="ad7cc-623">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-623">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-624">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-624">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ad7cc-625">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-625">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-626">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-626">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-627">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-627">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-628">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-628">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-629">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-629">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-630">阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-630">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-631">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-631"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-632">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-632">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-633">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-633">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-634">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-634">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-635">使用此方法可在<xref:System.Threading.WaitHandle>接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-635">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="ad7cc-636">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-636">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="ad7cc-637">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-637">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="ad7cc-638">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-638">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-639">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-639">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ad7cc-640">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-640">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-641"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-641"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-642">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-642">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-643">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-643">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-644">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-644">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ad7cc-645">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-645">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="ad7cc-646">阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-646">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-647">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-647"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-648">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-648">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-649">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-649">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-650">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-650">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-651">使用此方法可在<xref:System.Threading.WaitHandle>接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-651">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="ad7cc-652">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-652">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="ad7cc-653">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-653">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="ad7cc-654">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-654">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ad7cc-655">调用此方法重载与调用<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>重载并为指定`false`的`exitContext`相同。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-655">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ad7cc-656">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-656">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-657"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-657"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-658">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-658">-or-</span></span> 
 <span data-ttu-id="ad7cc-659"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-659"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-660">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-660">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-661">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-661">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-662">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-662">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="ad7cc-663">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-663">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-664">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-664"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-665">阻止当前线程，直到当前的 <see cref="T:System.Threading.WaitHandle" /> 收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-665">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-666">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-666"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-667">如果`millisecondsTimeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-667">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-668">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-668">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-669"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-669"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-670">在以前的版本中<xref:System.Threading.WaitHandle.WaitOne%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-670">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-671">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-671">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-672">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-672">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-673">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-673">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-674">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-674">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-675">使用此方法可在<xref:System.Threading.WaitHandle>接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-675">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="ad7cc-676">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-676">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="ad7cc-677">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-677">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-678">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-678">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-679">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitOne%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-679">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-680">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-680">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-681">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-681">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-682">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitOne%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-682">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="ad7cc-683">调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-683">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-684">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-684">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-685">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-685">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-686">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-686">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-687"><xref:System.Threading.WaitHandle.WaitOne%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-687">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-688">下面的示例演示方法重载<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>在同步域中调用时的行为方式。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-688">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="ad7cc-689">首先，线程`exitContext`将设置为`false`并在等待超时过期之前进行阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-689">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="ad7cc-690">第一个线程在第一个线程终止并等待设置为`exitContext` `true`时执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-690">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="ad7cc-691">对此第二个线程的等待句柄发出信号的调用未被阻止，线程在等待超时前完成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-691">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ad7cc-692">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-692">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-693"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-693"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-694">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-694">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-695">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-695">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-696">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-696">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ad7cc-697">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-697">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="ad7cc-698">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-698"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ad7cc-699">阻止当前线程，直到当前实例收到信号为止，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔，并指定是否在等待之前退出同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-699">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="ad7cc-700">如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-700"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-701">如果`timeout`为零，则该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-701">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="ad7cc-702">它将测试等待句柄的状态并立即返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-702">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="ad7cc-703"><xref:System.Threading.AbandonedMutexException>是 .NET Framework 版本2.0 中的新增项。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-703"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="ad7cc-704">在以前的版本中<xref:System.Threading.WaitHandle.WaitOne%2A> ，在`true`放弃互斥体时，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-704">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="ad7cc-705">被放弃的 mutex 通常表明出现了严重的编码错误。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-705">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="ad7cc-706">对于系统范围内的互斥体，它可能指示应用程序突然终止（例如，使用 Windows 任务管理器）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-706">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="ad7cc-707">此异常包含用于调试的信息。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-707">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="ad7cc-708">此方法的调用方会一直阻止，直到当前实例收到信号或发生超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-708">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="ad7cc-709">使用此方法可在<xref:System.Threading.WaitHandle>接收来自另一个线程的信号之前进行阻止，如在异步操作完成时生成。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-709">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="ad7cc-710">有关详细信息，请参阅<xref:System.IAsyncResult>接口。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-710">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="ad7cc-711">重写此方法以自定义派生类的行为。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-711">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="ad7cc-712">的最大值`timeout`为<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-712">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ad7cc-713">有关退出上下文的说明</span><span class="sxs-lookup"><span data-stu-id="ad7cc-713">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ad7cc-714">除非从非默认托管上下文内调用`exitContext` 方法，否则参数<xref:System.Threading.WaitHandle.WaitOne%2A>不起作用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-714">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ad7cc-715">如果你的线程在对从<xref:System.ContextBoundObject>派生的类的实例的调用中，则可能会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-715">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ad7cc-716">即使当前正在对不是从派生的<xref:System.ContextBoundObject>类（如<xref:System.String>）执行方法，如果<xref:System.ContextBoundObject>在当前应用程序域中的堆栈上，也可以在非默认上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-716">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ad7cc-717">当你的代码在非默认上下文中执行时`true` ， `exitContext`为指定将会导致线程在执行<xref:System.Threading.WaitHandle.WaitOne%2A>方法之前退出非默认托管上下文（即转换为默认上下文）。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-717">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="ad7cc-718">调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法完成后，线程返回到原始的非默认上下文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-718">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="ad7cc-719">当上下文绑定类具有<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-719">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="ad7cc-720">在这种情况下，对类成员的所有调用都将自动同步，同步域是类的整个代码正文。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-720">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ad7cc-721">如果成员的调用堆栈中的代码调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法并为`exitContext`指定`true` ，则线程将退出同步域，从而允许在对对象的任何成员的调用上被阻止的线程继续。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-721">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ad7cc-722"><xref:System.Threading.WaitHandle.WaitOne%2A>当方法返回时，进行调用的线程必须等待重新进入同步域。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-722">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-723">下面的代码示例演示如何使用等待句柄来防止进程在等待后台线程完成执行时终止。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-723">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ad7cc-724">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-724">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad7cc-725"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-725"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="ad7cc-726">或</span><span class="sxs-lookup"><span data-stu-id="ad7cc-726">-or-</span></span> 
 <span data-ttu-id="ad7cc-727"><paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-727"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="ad7cc-728">等待结束，因为线程在未释放互斥的情况下退出。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-728">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="ad7cc-729">在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-729">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad7cc-730">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-730">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="ad7cc-731">指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-731">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="ad7cc-732">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-732">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad7cc-733">此字段是可能的返回值`WaitAny`之一。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-733">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad7cc-734">下面的代码示例演示如何使用线程池同时搜索多个磁盘上的文件。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-734">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="ad7cc-735">出于空间考虑，只会搜索每个磁盘的根目录。</span><span class="sxs-lookup"><span data-stu-id="ad7cc-735">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d79c6ae2fdba861dc1f659f82ccc355a3d69639" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70453273" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.ThreadExceptionEventArgs>当发生未处理的异常时，由线程创建。 <xref:System.Threading.ThreadExceptionEventArgs><xref:System.Exception>包含发生的。  
  
   
  
## Examples  
 下面的示例允许您通过单击<xref:System.Windows.Forms.Application.ThreadException> `button1`窗体来引发事件。 该示例创建了两个类。 `ErrorHandler`类创建窗体和引发事件的按钮。 `CustomExceptionHandler`类提供处理异常的方法。  
  
 在`Main`类中，代码将创建异常处理类的新实例，即的实例 `CustomExceptionHandler` 。  `ErrorHandler` 然后，将该实例添加到事件中，并运行该应用程序。  
  
 `CustomExceptionHandler` `try...catch...finally`在类的方法中，该示例使用 `OnThreadException` 语句来处理异常。 `ShowThreadExceptionDialog`方法创建要显示的消息，并将其显示在消息框中。  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">已发生的 <see cref="T:System.Exception" />。</param>
        <summary>初始化 <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例允许您通过单击<xref:System.Windows.Forms.Application.ThreadException> `button1`窗体来引发事件。 该示例创建了两个类。 `ErrorHandler`类创建窗体和引发事件的按钮。 `CustomExceptionHandler`类提供处理异常的方法。  
  
 在`Main`类中，代码将创建异常处理类的新实例，即的实例 `CustomExceptionHandler` 。  `ErrorHandler` 然后，将该实例添加到事件中，并运行该应用程序。  
  
 `CustomExceptionHandler` `try...catch...finally`在类的方法中，该示例使用 `OnThreadException` 语句来处理异常。 `ShowThreadExceptionDialog`方法创建要显示的消息，并将其显示在消息框中。  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已发生的 <see cref="T:System.Exception" />。</summary>
        <value>已发生的 <see cref="T:System.Exception" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例允许您通过单击<xref:System.Windows.Forms.Application.ThreadException> `button1`窗体来引发事件。 该示例创建了两个类。 `ErrorHandler`类创建窗体和引发事件的按钮。 `CustomExceptionHandler`类提供处理异常的方法。  
  
 在`Main`类中，代码将创建异常处理类的新实例，即的实例 `CustomExceptionHandler` 。  `ErrorHandler` 然后，将该实例添加到事件中，并运行该应用程序。  
  
 `CustomExceptionHandler` `try...catch...finally`在类的方法中，该示例使用 `OnThreadException` 语句来处理异常。 `ShowThreadExceptionDialog`方法创建要显示的消息，并将其显示在消息框中。  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="701e103adf3ab9ec55715a289f91d30417501770" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70567428" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="63d4d-101">表示在调用 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 时已注册的句柄。</span><span class="sxs-lookup"><span data-stu-id="63d4d-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span></span> <span data-ttu-id="63d4d-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="63d4d-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="63d4d-103">下面的示例演示如何使用<xref:System.Threading.RegisteredWaitHandle>来确定调用回调方法的原因，以及如何在回调由于等待句柄发出信号而发生回调时取消注册任务。</span><span class="sxs-lookup"><span data-stu-id="63d4d-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="63d4d-104">该示例还演示了如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法在指定的等待句柄收到信号时执行指定的回调方法。</span><span class="sxs-lookup"><span data-stu-id="63d4d-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="63d4d-105">在此示例中，回调方法为`WaitProc`，等待句柄<xref:System.Threading.AutoResetEvent>是。</span><span class="sxs-lookup"><span data-stu-id="63d4d-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="63d4d-106">该示例定义了`TaskInfo`一个类，用于保存在执行时传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="63d4d-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="63d4d-107">该示例创建一个`TaskInfo`对象，并为其分配一些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="63d4d-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="63d4d-108"><xref:System.Threading.RegisteredWaitHandle> <xref:System.Threading.RegisteredWaitHandle>方法返回的将分配 `TaskInfo` 给对象的字段，以便回调方法有权访问。 `Handle`  <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="63d4d-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="63d4d-109">除了`TaskInfo`指定作为要传递给回调方法的对象， <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>对方法的调用还指定<xref:System.Threading.AutoResetEvent>了任务将`WaitProc`等待的， <xref:System.Threading.WaitOrTimerCallback>委托表示回调方法，1秒的超时间隔和多个回调。</span><span class="sxs-lookup"><span data-stu-id="63d4d-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="63d4d-110">当主线程<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法发出信号时， <xref:System.Threading.WaitOrTimerCallback>将调用委托。</span><span class="sxs-lookup"><span data-stu-id="63d4d-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="63d4d-111">`WaitProc`方法测试 <xref:System.Threading.RegisteredWaitHandle> 以确定是否发生了超时。</span><span class="sxs-lookup"><span data-stu-id="63d4d-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="63d4d-112">如果回调是由于等待句柄已发出信号而调用的`WaitProc` ，则该<xref:System.Threading.RegisteredWaitHandle>方法将注销，并停止其他回调。</span><span class="sxs-lookup"><span data-stu-id="63d4d-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="63d4d-113">在超时情况下，任务将继续等待。</span><span class="sxs-lookup"><span data-stu-id="63d4d-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="63d4d-114">`WaitProc`方法通过将消息打印到控制台来结束。</span><span class="sxs-lookup"><span data-stu-id="63d4d-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="63d4d-115">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="63d4d-115">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="63d4d-116">托管线程池</span><span class="sxs-lookup"><span data-stu-id="63d4d-116">The managed thread pool</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="63d4d-117">在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="63d4d-117">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="63d4d-118">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="63d4d-118">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span></span></param>
        <summary><span data-ttu-id="63d4d-119">取消由 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法发出的已注册等待操作。</span><span class="sxs-lookup"><span data-stu-id="63d4d-119">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="63d4d-120">如果函数成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="63d4d-120"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="63d4d-121">如果`waitObject`已指定，则只有<xref:System.Threading.RegisteredWaitHandle>在成功注销后才会发出信号。</span><span class="sxs-lookup"><span data-stu-id="63d4d-121">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="63d4d-122">如果在执行时<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>回调方法正在进行， `waitObject`则在回调方法完成之前不会发出信号。</span><span class="sxs-lookup"><span data-stu-id="63d4d-122">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="63d4d-123">具体而言，如果回调方法执行<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>， `waitObject`则在回调方法完成之前不会发出信号。</span><span class="sxs-lookup"><span data-stu-id="63d4d-123">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="63d4d-124">下面的示例演示如何使用<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>方法取消注册，因为在等待句柄终止的情况下发生回调。</span><span class="sxs-lookup"><span data-stu-id="63d4d-124">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="63d4d-125">该示例还演示了如何使用<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>方法在指定的等待句柄收到信号时执行指定的回调方法。</span><span class="sxs-lookup"><span data-stu-id="63d4d-125">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="63d4d-126">在此示例中，回调方法为`WaitProc`，等待句柄<xref:System.Threading.AutoResetEvent>是。</span><span class="sxs-lookup"><span data-stu-id="63d4d-126">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="63d4d-127">该示例定义了`TaskInfo`一个类，用于保存在执行时传递给回调的信息。</span><span class="sxs-lookup"><span data-stu-id="63d4d-127">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="63d4d-128">该示例创建一个`TaskInfo`对象，并为其分配一些字符串数据。</span><span class="sxs-lookup"><span data-stu-id="63d4d-128">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="63d4d-129"><xref:System.Threading.RegisteredWaitHandle> <xref:System.Threading.RegisteredWaitHandle>方法返回的将分配 `TaskInfo` 给对象的字段，以便回调方法有权访问。 `Handle`  <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A></span><span class="sxs-lookup"><span data-stu-id="63d4d-129">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="63d4d-130">除了`TaskInfo`指定作为要传递给回调方法的对象， <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>对方法的调用还指定<xref:System.Threading.AutoResetEvent>了任务将`WaitProc`等待的， <xref:System.Threading.WaitOrTimerCallback>委托表示回调方法，1秒的超时间隔和多个回调。</span><span class="sxs-lookup"><span data-stu-id="63d4d-130">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="63d4d-131">当主线程<xref:System.Threading.AutoResetEvent>通过调用其<xref:System.Threading.EventWaitHandle.Set%2A>方法发出信号时， <xref:System.Threading.WaitOrTimerCallback>将调用委托。</span><span class="sxs-lookup"><span data-stu-id="63d4d-131">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="63d4d-132">`WaitProc`方法测试 <xref:System.Threading.RegisteredWaitHandle> 以确定是否发生了超时。</span><span class="sxs-lookup"><span data-stu-id="63d4d-132">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="63d4d-133">如果回调是由于等待句柄已发出信号而调用的`WaitProc` ，则该<xref:System.Threading.RegisteredWaitHandle>方法将注销，并停止其他回调。</span><span class="sxs-lookup"><span data-stu-id="63d4d-133">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="63d4d-134">在超时情况下，任务将继续等待。</span><span class="sxs-lookup"><span data-stu-id="63d4d-134">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="63d4d-135">`WaitProc`方法通过将消息打印到控制台来结束。</span><span class="sxs-lookup"><span data-stu-id="63d4d-135">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="63d4d-136">托管线程池</span><span class="sxs-lookup"><span data-stu-id="63d4d-136">The managed thread pool</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

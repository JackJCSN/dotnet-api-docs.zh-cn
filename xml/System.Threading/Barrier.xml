<Type Name="Barrier" FullName="System.Threading.Barrier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bee8026d3993b24f779b79de161aa4ef16ae3f60" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70644639" /></Metadata><TypeSignature Language="C#" Value="public class Barrier : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Barrier extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Barrier" />
  <TypeSignature Language="VB.NET" Value="Public Class Barrier&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Barrier : IDisposable" />
  <TypeSignature Language="F#" Value="type Barrier = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e41c4-101">使多个任务能够采用并行方式依据某种算法在多个阶段中协同工作。</span><span class="sxs-lookup"><span data-stu-id="e41c4-101">Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-102">通过一系列阶段共同合作的一组任务，其中每个阶段都在每个阶段到达<xref:System.Threading.Barrier> ，并隐式等待所有其他阶段到达。</span><span class="sxs-lookup"><span data-stu-id="e41c4-102">A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the <xref:System.Threading.Barrier> in a given phase and implicitly waits for all others to arrive.</span></span> <span data-ttu-id="e41c4-103">相同<xref:System.Threading.Barrier>的可用于多个阶段。</span><span class="sxs-lookup"><span data-stu-id="e41c4-103">The same <xref:System.Threading.Barrier> can be used for multiple phases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e41c4-104">下面的示例演示如何使用屏障：</span><span class="sxs-lookup"><span data-stu-id="e41c4-104">The following example shows how to use a barrier:</span></span>  
  
 [!code-csharp[System.Threading.Barrier#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.barrier/cs/barrier.cs#01)]
 [!code-vb[System.Threading.Barrier#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.barrier/vb/barrier.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e41c4-105">的所有公共和受保护<see cref="T:System.Threading.Barrier" />的成员都是线程安全的，并且可以从多个线程并发使用，而 Dispose 除外，只需在上的<see cref="T:System.Threading.Barrier" />所有其他操作完成后使用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-105">All public and protected members of <see cref="T:System.Threading.Barrier" /> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <see cref="T:System.Threading.Barrier" /> have completed.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-106">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-106">Barrier (.NET Framework)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-107">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-107">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e41c4-108">初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-108">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-109">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-109">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-110">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-110">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier participantCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="e41c4-111">参与线程的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-111">The number of participating threads.</span></span></param>
        <summary><span data-ttu-id="e41c4-112">初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-112">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-113"><paramref name="participantCount" /> 小于 0 或大于 32,767。</span><span class="sxs-lookup"><span data-stu-id="e41c4-113"><paramref name="participantCount" /> is less than 0 or greater than 32,767.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-114">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-114">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-115">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-115">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Barrier (int participantCount, Action&lt;System.Threading.Barrier&gt; postPhaseAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 participantCount, class System.Action`1&lt;class System.Threading.Barrier&gt; postPhaseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (participantCount As Integer, postPhaseAction As Action(Of Barrier))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Barrier(int participantCount, Action&lt;System::Threading::Barrier ^&gt; ^ postPhaseAction);" />
      <MemberSignature Language="F#" Value="new System.Threading.Barrier : int * Action&lt;System.Threading.Barrier&gt; -&gt; System.Threading.Barrier" Usage="new System.Threading.Barrier (participantCount, postPhaseAction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
        <Parameter Name="postPhaseAction" Type="System.Action&lt;System.Threading.Barrier&gt;" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="e41c4-116">参与线程的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-116">The number of participating threads.</span></span></param>
        <param name="postPhaseAction"><span data-ttu-id="e41c4-117">在每个阶段后执行 <see cref="T:System.Action`1" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-117">The <see cref="T:System.Action`1" /> to be executed after each phase.</span></span> <span data-ttu-id="e41c4-118">可传递 NULL（在 Visual Basic 中为 Nothing）以执行未执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="e41c4-118">null (Nothing in Visual Basic) may be passed to indicate no action is taken.</span></span></param>
        <summary><span data-ttu-id="e41c4-119">初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-119">Initializes a new instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-120">`postPhaseAction`委托将在所有参与者在一个阶段到达关卡后执行。</span><span class="sxs-lookup"><span data-stu-id="e41c4-120">The `postPhaseAction` delegate will be executed after all participants have arrived at the barrier in one phase.</span></span> <span data-ttu-id="e41c4-121">在 postPhaseAction 委托执行完毕之前，不会将参与者发布到下一阶段。</span><span class="sxs-lookup"><span data-stu-id="e41c4-121">The participants will not be released to the next phase until the postPhaseAction delegate has completed execution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-122"><paramref name="participantCount" /> 小于 0 或大于 32,767。</span><span class="sxs-lookup"><span data-stu-id="e41c4-122"><paramref name="participantCount" /> is less than 0 or greater than 32,767.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-123">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-123">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-124">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-124">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipant">
      <MemberSignature Language="C#" Value="public long AddParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipant () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipant();" />
      <MemberSignature Language="F#" Value="member this.AddParticipant : unit -&gt; int64" Usage="barrier.AddParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41c4-125">通知 <see cref="T:System.Threading.Barrier" />，告知其将会有另一个参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-125">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be an additional participant.</span></span></summary>
        <returns><span data-ttu-id="e41c4-126">新参与者将首先参与的屏障的阶段编号。</span><span class="sxs-lookup"><span data-stu-id="e41c4-126">The phase number of the barrier in which the new participants will first participate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-127">如果关卡当前正在执行 "后阶段" 操作，此调用将被阻止，直到 "后期阶段" 操作完成并且关卡已转到下一阶段。</span><span class="sxs-lookup"><span data-stu-id="e41c4-127">If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-128">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-128">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-129">添加参与者将导致屏障的参与者计数超过 32,767。</span><span class="sxs-lookup"><span data-stu-id="e41c4-129">Adding a participant would cause the barrier's participant count to exceed 32,767.</span></span>  
  
 <span data-ttu-id="e41c4-130">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e41c4-130">-or-</span></span>  
  
 <span data-ttu-id="e41c4-131">该方法从阶段后操作中调用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-131">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-132">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-132">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-133">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-133">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AddParticipants">
      <MemberSignature Language="C#" Value="public long AddParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 AddParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.AddParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParticipants (participantCount As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long AddParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.AddParticipants : int -&gt; int64" Usage="barrier.AddParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="e41c4-134">要添加到屏障的其他参与者的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-134">The number of additional participants to add to the barrier.</span></span></param>
        <summary><span data-ttu-id="e41c4-135">通知 <see cref="T:System.Threading.Barrier" />，告知其将会有多个其他参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-135">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be additional participants.</span></span></summary>
        <returns><span data-ttu-id="e41c4-136">新参与者将首先参与的屏障的阶段编号。</span><span class="sxs-lookup"><span data-stu-id="e41c4-136">The phase number of the barrier in which the new participants will first participate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-137">如果关卡当前正在执行 "后阶段" 操作，此调用将被阻止，直到 "后期阶段" 操作完成并且关卡已转到下一阶段。</span><span class="sxs-lookup"><span data-stu-id="e41c4-137">If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-138">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-138">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-139"><paramref name="participantCount" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="e41c4-139"><paramref name="participantCount" /> is less than 0.</span></span>  
  
<span data-ttu-id="e41c4-140">- 或 -</span><span class="sxs-lookup"><span data-stu-id="e41c4-140">-or-</span></span> 
<span data-ttu-id="e41c4-141">添加 <paramref name="participantCount" /> 参与者将导致屏障的参与者计数超过 32,767。</span><span class="sxs-lookup"><span data-stu-id="e41c4-141">Adding <paramref name="participantCount" /> participants would cause the barrier's participant count to exceed 32,767.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-142">该方法从阶段后操作中调用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-142">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-143">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-143">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-144">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-144">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CurrentPhaseNumber">
      <MemberSignature Language="C#" Value="public long CurrentPhaseNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CurrentPhaseNumber" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPhaseNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long CurrentPhaseNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPhaseNumber : int64" Usage="System.Threading.Barrier.CurrentPhaseNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41c4-145">获取屏障的当前阶段的编号。</span><span class="sxs-lookup"><span data-stu-id="e41c4-145">Gets the number of the barrier's current phase.</span></span></summary>
        <value><span data-ttu-id="e41c4-146">返回屏障的当前阶段的编号。</span><span class="sxs-lookup"><span data-stu-id="e41c4-146">Returns the number of the barrier's current phase.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-147">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-147">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-148">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-148">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e41c4-149">释放由 <see cref="T:System.Threading.Barrier" /> 类的当前实例使用的资源。</span><span class="sxs-lookup"><span data-stu-id="e41c4-149">Releases resources used by the current instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-150">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-150">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-151">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-151">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="barrier.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41c4-152">释放 <see cref="T:System.Threading.Barrier" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="e41c4-152">Releases all resources used by the current instance of the <see cref="T:System.Threading.Barrier" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-153">在完成使用 `Dispose` 后，应调用 <xref:System.Threading.Barrier>。</span><span class="sxs-lookup"><span data-stu-id="e41c4-153">Call `Dispose` when you are finished using the <xref:System.Threading.Barrier>.</span></span> <span data-ttu-id="e41c4-154">`Dispose` 方法使 <xref:System.Threading.Barrier> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="e41c4-154">The `Dispose` method leaves the <xref:System.Threading.Barrier> in an unusable state.</span></span> <span data-ttu-id="e41c4-155">调用`Dispose`后，必须释放对的<xref:System.Threading.Barrier>所有引用，以便垃圾回收器能够<xref:System.Threading.Barrier>回收占用的内存。</span><span class="sxs-lookup"><span data-stu-id="e41c4-155">After calling `Dispose`, you must release all references to the <xref:System.Threading.Barrier> so the garbage collector can reclaim the memory that the <xref:System.Threading.Barrier> was occupying.</span></span>  
  
 <span data-ttu-id="e41c4-156">有关详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="e41c4-156">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e41c4-157">每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Threading.Barrier>。</span><span class="sxs-lookup"><span data-stu-id="e41c4-157">Always call `Dispose` before you release your last reference to the <xref:System.Threading.Barrier>.</span></span> <span data-ttu-id="e41c4-158">否则，在垃圾回收器调用 <xref:System.Threading.Barrier> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="e41c4-158">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.Barrier> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-159">该方法从阶段后操作中调用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-159">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-160">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-160">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-161">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-161">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="barrier.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="e41c4-162">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="e41c4-162">true to release both managed and unmanaged resources; false to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="e41c4-163">释放由 <see cref="T:System.Threading.Barrier" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="e41c4-163">Releases the unmanaged resources used by the <see cref="T:System.Threading.Barrier" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-164">与的大多数成员<xref:System.Threading.Barrier>不同，Dispose 不是线程安全的，不能与此实例的其他成员同时使用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-164">Unlike most of the members of <xref:System.Threading.Barrier>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-165">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-165">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-166">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-166">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantCount">
      <MemberSignature Language="C#" Value="public int ParticipantCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantCount : int" Usage="System.Threading.Barrier.ParticipantCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41c4-167">获取屏障中参与者的总数。</span><span class="sxs-lookup"><span data-stu-id="e41c4-167">Gets the total number of participants in the barrier.</span></span></summary>
        <value><span data-ttu-id="e41c4-168">返回屏障中参与者的总数。</span><span class="sxs-lookup"><span data-stu-id="e41c4-168">Returns the total number of participants in the barrier.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-169">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-169">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-170">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-170">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ParticipantsRemaining">
      <MemberSignature Language="C#" Value="public int ParticipantsRemaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ParticipantsRemaining" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Barrier.ParticipantsRemaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParticipantsRemaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ParticipantsRemaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ParticipantsRemaining : int" Usage="System.Threading.Barrier.ParticipantsRemaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41c4-171">获取屏障中尚未在当前阶段发出信号的参与者的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-171">Gets the number of participants in the barrier that haven't yet signaled in the current phase.</span></span></summary>
        <value><span data-ttu-id="e41c4-172">返回屏障中尚未在当前阶段发出信号的参与者的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-172">Returns the number of participants in the barrier that haven't yet signaled in the current phase.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-173">在执行阶段操作委托执行期间，如果 ParticipantCount 为0，则这可能为0。</span><span class="sxs-lookup"><span data-stu-id="e41c4-173">This could be 0 during a post-phase action delegate execution or if the ParticipantCount is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-174">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-174">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-175">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-175">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipant">
      <MemberSignature Language="C#" Value="public void RemoveParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipant" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipant ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipant();" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipant : unit -&gt; unit" Usage="barrier.RemoveParticipant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41c4-176">通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一个参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-176">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be one less participant.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-177">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-177">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-178">屏障已经有 0 个参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-178">The barrier already has 0 participants.</span></span>  
  
 <span data-ttu-id="e41c4-179">或</span><span class="sxs-lookup"><span data-stu-id="e41c4-179">-or-</span></span>  
  
 <span data-ttu-id="e41c4-180">该方法从阶段后操作中调用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-180">The method was invoked from within a post-phase action.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-181">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-181">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-182">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-182">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveParticipants">
      <MemberSignature Language="C#" Value="public void RemoveParticipants (int participantCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveParticipants(int32 participantCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.RemoveParticipants(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveParticipants (participantCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveParticipants(int participantCount);" />
      <MemberSignature Language="F#" Value="member this.RemoveParticipants : int -&gt; unit" Usage="barrier.RemoveParticipants participantCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="participantCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="participantCount"><span data-ttu-id="e41c4-183">要从屏障中移除的其他参与者的数量。</span><span class="sxs-lookup"><span data-stu-id="e41c4-183">The number of additional participants to remove from the barrier.</span></span></param>
        <summary><span data-ttu-id="e41c4-184">通知 <see cref="T:System.Threading.Barrier" />，告知其将会减少一些参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-184">Notifies the <see cref="T:System.Threading.Barrier" /> that there will be fewer participants.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-185">如果`participantCount`参与者已在等待关卡，此删除操作将完成关卡，执行 "后期阶段" 操作，并且所有参与者都将唤醒，就像要删除的此参与者已成功达到关卡一样。</span><span class="sxs-lookup"><span data-stu-id="e41c4-185">If `participantCount` participants are already waiting on the barrier, this removal fulfills the barrier, the post phase action is executed and all of the participants are woken as if this participant being removed had successfully reached the barrier.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-186">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-186">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-187">参与者总数小于指定 <paramref name="participantCount" /></span><span class="sxs-lookup"><span data-stu-id="e41c4-187">The total participant count is less than the specified <paramref name="participantCount" /></span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-188">屏障已经有 0 个参与者。</span><span class="sxs-lookup"><span data-stu-id="e41c4-188">The barrier already has 0 participants.</span></span>  
  
 <span data-ttu-id="e41c4-189">或</span><span class="sxs-lookup"><span data-stu-id="e41c4-189">-or-</span></span>  
  
 <span data-ttu-id="e41c4-190">该方法从阶段后操作中调用。</span><span class="sxs-lookup"><span data-stu-id="e41c4-190">The method was invoked from within a post-phase action.</span></span>  
  
 <span data-ttu-id="e41c4-191">或</span><span class="sxs-lookup"><span data-stu-id="e41c4-191">-or-</span></span>  
  
 <span data-ttu-id="e41c4-192">当前的参与者计数小于指定 participantCount</span><span class="sxs-lookup"><span data-stu-id="e41c4-192">current participant count is less than the specified participantCount</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-193">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-193">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-194">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-194">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e41c4-195">发出参与者已达到屏障并等待所有其他参与者也达到屏障。</span><span class="sxs-lookup"><span data-stu-id="e41c4-195">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-196">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-196">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-197">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-197">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalAndWait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait();" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : unit -&gt; unit" Usage="barrier.SignalAndWait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41c4-198">发出参与者已达到屏障并等待所有其他参与者也达到屏障。</span><span class="sxs-lookup"><span data-stu-id="e41c4-198">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-199">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-199">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-200">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-200">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException"><span data-ttu-id="e41c4-201">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</span><span class="sxs-lookup"><span data-stu-id="e41c4-201">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-202">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-202">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-203">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-203">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int -&gt; bool" Usage="barrier.SignalAndWait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="e41c4-204">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e41c4-204">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="e41c4-205">发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 32 位带符号整数测量超时。</span><span class="sxs-lookup"><span data-stu-id="e41c4-205">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</span></span></summary>
        <returns><span data-ttu-id="e41c4-206">如果所有参与者都已在指定时间内达到屏障，则为 true；否则为 false。</span><span class="sxs-lookup"><span data-stu-id="e41c4-206">if all participants reached the barrier within the specified time; otherwise false.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-207">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-207">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-208"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="e41c4-208"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-209">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-209">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <exception cref="T:System.Threading.BarrierPostPhaseException"><span data-ttu-id="e41c4-210">在所有参与线程调用了 SignalAndWait 之后，如果关卡的后期阶段操作中引发了异常，该异常将包装在 BarrierPostPhaseException 中并在所有参与线程上引发。</span><span class="sxs-lookup"><span data-stu-id="e41c4-210">If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-211">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-211">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-212">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-212">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public void SignalAndWait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalAndWait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SignalAndWait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : System.Threading.CancellationToken -&gt; unit" Usage="barrier.SignalAndWait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="e41c4-213">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-213">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="e41c4-214">发出参与者已达到屏障的信号，并等待所有其他参与者达到屏障，同时观察取消标记。</span><span class="sxs-lookup"><span data-stu-id="e41c4-214">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e41c4-215"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="e41c4-215"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-216">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-216">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-217">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-217">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-218">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-218">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-219">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-219">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalAndWait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan -&gt; bool" Usage="barrier.SignalAndWait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e41c4-220">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-220">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="e41c4-221">发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，同时使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔。</span><span class="sxs-lookup"><span data-stu-id="e41c4-221">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan" /> object to measure the time interval.</span></span></summary>
        <returns><span data-ttu-id="e41c4-222">如果所有其他参与者已达到屏障，则为 true；否则为 false。</span><span class="sxs-lookup"><span data-stu-id="e41c4-222">true if all other participants reached the barrier; otherwise, false.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-223">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-223">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-224"><paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 32,767。</span><span class="sxs-lookup"><span data-stu-id="e41c4-224"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-225">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-225">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-226">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-226">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-227">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-227">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : int * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="e41c4-228">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="e41c4-228">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e41c4-229">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-229">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="e41c4-230">发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 32 位带符号整数测量超时，同时观察取消标记。</span><span class="sxs-lookup"><span data-stu-id="e41c4-230">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="e41c4-231">如果所有参与者都已在指定时间内达到屏障，则为 true；否则为 false。</span><span class="sxs-lookup"><span data-stu-id="e41c4-231">if all participants reached the barrier within the specified time; otherwise false</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41c4-232">如果在信号生效之前已取消， <xref:System.OperationCanceledException>则会引发并<xref:System.Threading.Barrier.ParticipantsRemaining%2A>减小值。 `cancellationToken`</span><span class="sxs-lookup"><span data-stu-id="e41c4-232">If the `cancellationToken` was canceled before the signal took effect, then an <xref:System.OperationCanceledException> is thrown and the <xref:System.Threading.Barrier.ParticipantsRemaining%2A> value is not decreased.</span></span> <span data-ttu-id="e41c4-233">如果在`cancellationToken`信号<xref:System.Threading.Barrier.ParticipantsRemaining%2A>生效后未取消或被取消，则会降低，并且不<xref:System.OperationCanceledException>会引发。</span><span class="sxs-lookup"><span data-stu-id="e41c4-233">If the `cancellationToken` is not canceled or is canceled after the signal takes effect then <xref:System.Threading.Barrier.ParticipantsRemaining%2A> is decreased and no <xref:System.OperationCanceledException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e41c4-234"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="e41c4-234"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-235">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-235">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-236"><paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="e41c4-236"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-237">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-237">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-238">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-238">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-239">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-239">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public bool SignalAndWait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SignalAndWait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SignalAndWait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SignalAndWait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="barrier.SignalAndWait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e41c4-240">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-240">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="e41c4-241">要观察的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="e41c4-241">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span></span></param>
        <summary><span data-ttu-id="e41c4-242">发出参与者已达到屏障的信号，并等待所有其他参与者也达到屏障，使用 <see cref="T:System.TimeSpan" /> 对象测量时间间隔，同时观察取消标记。</span><span class="sxs-lookup"><span data-stu-id="e41c4-242">Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <see cref="T:System.TimeSpan" /> object to measure the time interval, while observing a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="e41c4-243">如果所有其他参与者已达到屏障，则为 true；否则为 false。</span><span class="sxs-lookup"><span data-stu-id="e41c4-243">true if all other participants reached the barrier; otherwise, false.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="e41c4-244"><paramref name="cancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="e41c4-244"><paramref name="cancellationToken" /> has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e41c4-245">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="e41c4-245">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e41c4-246"><paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="e41c4-246"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e41c4-247">该方法从阶段后操作中调用，当前屏障具有 0 个参与者，或该屏障被注册为参与者的更多线程终止。</span><span class="sxs-lookup"><span data-stu-id="e41c4-247">The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/613a8bc7-6a28-4795-bd6c-1abd9050478f"><span data-ttu-id="e41c4-248">屏障 (.NET Framework)</span><span class="sxs-lookup"><span data-stu-id="e41c4-248">Barrier (.NET Framework)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e1a253ff-e0fb-4df8-95ff-d01a90d4cb19"><span data-ttu-id="e41c4-249">如何：使用屏障来使并发操作保持同步</span><span class="sxs-lookup"><span data-stu-id="e41c4-249">How to: Synchronize Concurrent Operations with a Barrier</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

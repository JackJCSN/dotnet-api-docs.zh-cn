<Type Name="EnumeratorToEnumVariantMarshaler" FullName="System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="259c539c25dfc1c9ca6547e3d86c295958d89fd1" /><Meta Name="ms.sourcegitcommit" Value="d69ca6581df56b4931f770f9211af492055a8b98" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="06/06/2019" /><Meta Name="ms.locfileid" Value="66725704" /></Metadata><TypeSignature Language="C#" Value="public class EnumeratorToEnumVariantMarshaler : System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnumeratorToEnumVariantMarshaler extends System.Object implements class System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Class EnumeratorToEnumVariantMarshaler&#xA;Implements ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumeratorToEnumVariantMarshaler : System::Runtime::InteropServices::ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type EnumeratorToEnumVariantMarshaler = class&#xA;    interface ICustomMarshaler" />
  <AssemblyInfo>
    <AssemblyName>CustomMarshalers</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.ICustomMarshaler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="18e9c-101">将 COM <see langword="IEnumVARIANT" /> 接口封送处理到 .NET Framework <see cref="T:System.Collections.IEnumerator" /> 接口，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="18e9c-101">Marshals the COM <see langword="IEnumVARIANT" /> interface to the .NET Framework <see cref="T:System.Collections.IEnumerator" /> interface, and vice versa.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-102">此自定义封送处理程序将封送`IEnumVARIANT`到<xref:System.Collections.IEnumerator>和封送<xref:System.Collections.IEnumerator>到`IEnumVARIANT`。</span><span class="sxs-lookup"><span data-stu-id="18e9c-102">This custom marshaler marshals `IEnumVARIANT` to <xref:System.Collections.IEnumerator> and marshals <xref:System.Collections.IEnumerator> to `IEnumVARIANT`.</span></span> <span data-ttu-id="18e9c-103">CLR 会自动使用此类桥 COM 枚举器，.NET 枚举器。</span><span class="sxs-lookup"><span data-stu-id="18e9c-103">The CLR automatically uses this class to bridge COM enumerators and .NET enumerators.</span></span> <span data-ttu-id="18e9c-104"><xref:System.Collections.IEnumerator>返回类型<xref:System.Collections.IEnumerable.GetEnumerator%2A>导入的 COM 类中的方法使用`EnumeratorToEnumVariantMarshaler`将映射到调用`IEnumVARIANT`dispid 为-4 的 COM 对象的成员所返回的接口指针。</span><span class="sxs-lookup"><span data-stu-id="18e9c-104">The <xref:System.Collections.IEnumerator> type returned by the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method in the imported COM class uses `EnumeratorToEnumVariantMarshaler` to map the calls to the `IEnumVARIANT` interface pointer returned by the COM object's member with a DISPID of -4.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".cctor">
      <MemberSignature Language="C#" Value="public static EnumeratorToEnumVariantMarshaler ();" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname rtspecialname void .cctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.#cctor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnumeratorToEnumVariantMarshaler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18e9c-105">提供静态类构造函数。</span><span class="sxs-lookup"><span data-stu-id="18e9c-105">Provides the static class constructor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="18e9c-106">在.NET Framework 2.0 版和后续版本中删除此成员。</span><span class="sxs-lookup"><span data-stu-id="18e9c-106">This member is removed in the .NET Framework version 2.0 and subsequent versions.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpManagedData (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CleanUpManagedData (pManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CleanUpManagedData(System::Object ^ pManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit&#xA;override this.CleanUpManagedData : obj -&gt; unit" Usage="enumeratorToEnumVariantMarshaler.CleanUpManagedData pManagedObj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj"><span data-ttu-id="18e9c-107">要销毁的托管对象。</span><span class="sxs-lookup"><span data-stu-id="18e9c-107">The managed object to be destroyed.</span></span></param>
        <summary><span data-ttu-id="18e9c-108">不再需要时执行必要的托管数据的清除。</span><span class="sxs-lookup"><span data-stu-id="18e9c-108">Performs necessary cleanup of the managed data when it is no longer needed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-109">CLR 调用此方法来清理中分配的托管数据<xref:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalNativeToManaged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18e9c-109">The CLR calls this method to clean up managed data allocated in the <xref:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit&#xA;override this.CleanUpNativeData : nativeint -&gt; unit" Usage="enumeratorToEnumVariantMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="18e9c-110">指向要销毁的非托管数据的指针。</span><span class="sxs-lookup"><span data-stu-id="18e9c-110">A pointer to the unmanaged data to be destroyed.</span></span></param>
        <summary><span data-ttu-id="18e9c-111">不再需要时执行必要的非托管数据的清除。</span><span class="sxs-lookup"><span data-stu-id="18e9c-111">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-112">CLR 调用此方法来清理在分配的非托管数据<xref:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalManagedToNative%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18e9c-112">The CLR calls this method to clean up the unmanaged data allocated in the <xref:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.ICustomMarshaler GetInstance (string pstrCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.InteropServices.ICustomMarshaler GetInstance(string pstrCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.GetInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (pstrCookie As String) As ICustomMarshaler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::ICustomMarshaler ^ GetInstance(System::String ^ pstrCookie);" />
      <MemberSignature Language="F#" Value="static member GetInstance : string -&gt; System.Runtime.InteropServices.ICustomMarshaler" Usage="System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.GetInstance pstrCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ICustomMarshaler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstrCookie" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pstrCookie"><span data-ttu-id="18e9c-113">可以由自定义封送拆收器使用的字符串“cookie”参数。</span><span class="sxs-lookup"><span data-stu-id="18e9c-113">String "cookie" parameter that can be used by the custom marshaler.</span></span></param>
        <summary><span data-ttu-id="18e9c-114">返回自定义封送拆收器的实例。</span><span class="sxs-lookup"><span data-stu-id="18e9c-114">Returns an instance of the custom marshaler.</span></span></summary>
        <returns><span data-ttu-id="18e9c-115">自定义封送拆收器的实例。</span><span class="sxs-lookup"><span data-stu-id="18e9c-115">An instance of the custom marshaler.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-116">所有自定义封必须实现此方法，尽管这不是属于<xref:System.Runtime.InteropServices.ICustomMarshaler>接口定义。</span><span class="sxs-lookup"><span data-stu-id="18e9c-116">All custom marshalers must implement this method, although it is not part of the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface definition.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public virtual int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int&#xA;override this.GetNativeDataSize : unit -&gt; int" Usage="enumeratorToEnumVariantMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18e9c-117">返回要封送处理的非托管数据的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="18e9c-117">Returns the size in bytes of the unmanaged data to be marshaled.</span></span></summary>
        <returns><span data-ttu-id="18e9c-118">-1 指示此封送拆收器处理的类型不是值类型。</span><span class="sxs-lookup"><span data-stu-id="18e9c-118">-1 to indicate the type this marshaler handles is not a value type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-119">由于.NET Framework 不支持自定义封送处理的值类型，此方法始终返回-1。</span><span class="sxs-lookup"><span data-stu-id="18e9c-119">Because custom marshaling of value types is not supported in the .NET Framework, this method always returns -1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public virtual IntPtr MarshalManagedToNative (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MarshalManagedToNative (pManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr MarshalManagedToNative(System::Object ^ pManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint&#xA;override this.MarshalManagedToNative : obj -&gt; nativeint" Usage="enumeratorToEnumVariantMarshaler.MarshalManagedToNative pManagedObj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj"><span data-ttu-id="18e9c-120">要转换的托管对象。</span><span class="sxs-lookup"><span data-stu-id="18e9c-120">The managed object to be converted.</span></span></param>
        <summary><span data-ttu-id="18e9c-121">将一个对象从托管代码封送处理到非托管代码。</span><span class="sxs-lookup"><span data-stu-id="18e9c-121">Marshals an object from managed code to unmanaged code.</span></span></summary>
        <returns><span data-ttu-id="18e9c-122">指向非托管对象的指针。</span><span class="sxs-lookup"><span data-stu-id="18e9c-122">A pointer to the unmanaged object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-123">CLR 调用此方法与将该对象从托管代码转换为非托管代码中，某个托管对象的指定实例和它返回一个指向相应的非托管对象，表示该对象的 COM 视图。</span><span class="sxs-lookup"><span data-stu-id="18e9c-123">The CLR calls this method with the specified instance of a managed object to convert that object from managed code to unmanaged code, and it returns a pointer to the appropriate unmanaged object, representing the COM view of that object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18e9c-124"><paramref name="pManagedObj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18e9c-124"><paramref name="pManagedObj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public virtual object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.EnumeratorToEnumVariantMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj&#xA;override this.MarshalNativeToManaged : nativeint -&gt; obj" Usage="enumeratorToEnumVariantMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="18e9c-125">指向要转换的非托管对象的指针。</span><span class="sxs-lookup"><span data-stu-id="18e9c-125">A pointer to the unmanaged object to be converted.</span></span></param>
        <summary><span data-ttu-id="18e9c-126">将一个对象从非托管代码封送处理到托管代码。</span><span class="sxs-lookup"><span data-stu-id="18e9c-126">Marshals an object from unmanaged code to managed code.</span></span></summary>
        <returns><span data-ttu-id="18e9c-127">一个托管对象。</span><span class="sxs-lookup"><span data-stu-id="18e9c-127">A managed object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18e9c-128">CLR 使用指向非托管对象，将该对象从非托管代码转换为托管代码中，指定的指针调用此方法，并返回一个表示托管的视图的非托管数据的托管的对象。</span><span class="sxs-lookup"><span data-stu-id="18e9c-128">The CLR calls this method with the specified pointer to an unmanaged object to convert that object from unmanaged code to managed code, and returns a managed object representing the managed view of the unmanaged data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="18e9c-129"><paramref name="pNativeData" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18e9c-129"><paramref name="pNativeData" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="18e9c-130">未能转换 <paramref name="pNativeData" /> 指向的非托管对象。</span><span class="sxs-lookup"><span data-stu-id="18e9c-130">The unmanaged object that <paramref name="pNativeData" /> points to could not be converted.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

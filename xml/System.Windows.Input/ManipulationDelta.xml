<Type Name="ManipulationDelta" FullName="System.Windows.Input.ManipulationDelta">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0da80755284bf76cf61859a5271b6d5d5f80a642" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64267767" /></Metadata><TypeSignature Language="C#" Value="public class ManipulationDelta" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManipulationDelta extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDelta" />
  <TypeSignature Language="VB.NET" Value="Public Class ManipulationDelta" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDelta" />
  <TypeSignature Language="F#" Value="type ManipulationDelta = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含操作事件发生时聚合的转换数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta>类包含有关操作的位置中的更改的信息。  [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 将更改作为解释<xref:System.Windows.Input.ManipulationDelta.Translation%2A>， <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>，或<xref:System.Windows.Input.ManipulationDelta.Rotation%2A>。 当<xref:System.Windows.UIElement.ManipulationDelta>发生事件时<xref:System.Windows.UIElement>，使用上的属性<xref:System.Windows.Input.ManipulationDelta>对象要转换的对象，应进行操作。  <xref:System.Windows.Input.ManipulationDeltaEventArgs>类提供两个属性的类型<xref:System.Windows.Input.ManipulationDelta>:<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>和<xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>。  
  
 有关操作的详细信息，请参阅[输入概述](~/docs/framework/wpf/advanced/input-overview.md)。  操作响应的应用程序的示例，请参阅[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。  该示例应用<xref:System.Windows.Input.ManipulationDelta.Translation%2A>， <xref:System.Windows.Input.ManipulationDelta.Scale%2A>，并<xref:System.Windows.Input.ManipulationDelta.Rotation%2A>属性来移动、 调整大小和旋转<xref:System.Windows.Shapes.Rectangle>。 此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManipulationDelta (System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Vector translation, float64 rotation, valuetype System.Windows.Vector scale, valuetype System.Windows.Vector expansion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (translation As Vector, rotation As Double, scale As Vector, expansion As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManipulationDelta(System::Windows::Vector translation, double rotation, System::Windows::Vector scale, System::Windows::Vector expansion);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.ManipulationDelta : System.Windows.Vector * double * System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Input.ManipulationDelta" Usage="new System.Windows.Input.ManipulationDelta (translation, rotation, scale, expansion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="translation" Type="System.Windows.Vector" />
        <Parameter Name="rotation" Type="System.Double" />
        <Parameter Name="scale" Type="System.Windows.Vector" />
        <Parameter Name="expansion" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="translation">以[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]表示的操作线性运动。</param>
        <param name="rotation">操作的旋转度数。</param>
        <param name="scale">操作已调整的作为乘数的量。</param>
        <param name="expansion">操作调整的量，用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]表示。</param>
        <summary>初始化 <see cref="T:System.Windows.Input.ManipulationDelta" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expansion">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Expansion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Expansion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expansion As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Expansion { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Expansion : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置操作调整的量，用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]表示。</summary>
        <value>操作调整的量，用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Scale%2A>和<xref:System.Windows.Input.ManipulationDelta.Expansion%2A>属性这两个报表大小调整操作。  两者之间的区别是在其中报告的值的方法。  <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>属性报告中的调整大小操作[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。 <xref:System.Windows.Input.ManipulationDelta.Scale%2A>属性报告作为乘数的值。  如果<xref:System.Windows.Input.ManipulationDelta.Scale%2A>为 0.5，操作被解释为 50%的减少的大小。  如果<xref:System.Windows.Input.ManipulationDelta.Scale%2A>为 2，操作被解释为 100%增加大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public double Rotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Rotation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rotation As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Rotation { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Rotation : double" Usage="System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置操作的旋转度数。</summary>
        <value>操作的旋转度数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A>属性报告操作被解释为围绕一个轴旋转的方式。  轴通常是联系人的启动了操作的两个点之间的点。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。  该示例应用<xref:System.Windows.Input.ManipulationDelta.Translation%2A>， <xref:System.Windows.Input.ManipulationDelta.Scale%2A>，并<xref:System.Windows.Input.ManipulationDelta.Rotation%2A>属性来移动、 调整大小和旋转<xref:System.Windows.Shapes.Rectangle>。 此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Scale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Scale" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Scale" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scale As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Scale { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置操作已调整的作为乘数的量。</summary>
        <value>操作已调整的量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Scale%2A>和<xref:System.Windows.Input.ManipulationDelta.Expansion%2A>属性这两个报表大小调整操作。  两者之间的区别是在其中报告的值的方法。  <xref:System.Windows.Input.ManipulationDelta.Scale%2A>属性报告作为乘数的值。  如果<xref:System.Windows.Input.ManipulationDelta.Scale%2A>为 0.5，操作被解释为 50%的减少的大小。  如果<xref:System.Windows.Input.ManipulationDelta.Scale%2A>为 2，操作被解释为 100%增加大小。 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>属性报告中的调整大小操作[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。  该示例应用<xref:System.Windows.Input.ManipulationDelta.Translation%2A>， <xref:System.Windows.Input.ManipulationDelta.Scale%2A>，并<xref:System.Windows.Input.ManipulationDelta.Rotation%2A>属性来移动、 调整大小和旋转<xref:System.Windows.Shapes.Rectangle>。 此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translation">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Translation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Translation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Translation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Translation As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Translation { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Translation : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Translation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置操作的线性运动。</summary>
        <value>以[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]表示的操作线性运动。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>属性报告操作被解释为在屏幕上水平和垂直移动的方式。  
  
   
  
## Examples  
 下面的示例演示的事件处理程序<xref:System.Windows.UIElement.ManipulationDelta>事件。  该示例应用<xref:System.Windows.Input.ManipulationDelta.Translation%2A>， <xref:System.Windows.Input.ManipulationDelta.Scale%2A>，并<xref:System.Windows.Input.ManipulationDelta.Rotation%2A>属性来移动、 调整大小和旋转<xref:System.Windows.Shapes.Rectangle>。 此示例摘自一个更大的示例中[演练：创建第一个触控应用程序](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db668e025f60a609fef5a61c040a83ec6104d51b" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64205807" /></Metadata><TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <TypeSignature Language="F#" Value="type ICommandSource = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义一个知道如何调用命令的对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 命令源定义一个命令通过该特定对象的调用方式。  例如，如果<xref:System.Windows.Controls.Button>关联的命令，该命令时调用<xref:System.Windows.Controls.Button>单击。  
  
 命令源通常情况下将禁用其自身如果它与关联的命令无法在当前命令目标上执行。  例如，<xref:System.Windows.Controls.MenuItem>与相关联<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令将呈灰色<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令无法执行当前命令目标上。  
  
 通常情况下，命令源将侦听<xref:System.Windows.Input.ICommand.CanExecuteChanged>命令的事件。  当条件更改对命令目标，如丢失键盘焦点时，这会通知命令源。  然后，命令源可以查询命令使用<xref:System.Windows.Input.ICommand.CanExecute%2A>方法。  
  
 中的类的一些[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]实现<xref:System.Windows.Input.ICommandSource>是： <xref:System.Windows.Controls.Primitives.ButtonBase>， <xref:System.Windows.Controls.MenuItem>，和<xref:System.Windows.Documents.Hyperlink>。  
  
 在命令系统中，Windows Presentation Foundation<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上的属性<xref:System.Windows.Input.ICommandSource>时，才适用<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和对应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ICommandSource.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在调用命令源时执行的命令。</summary>
        <value>在调用命令源时执行的命令。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj" Usage="System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示可在执行命令时传递给该命令的用户定义的数据值。</summary>
        <value>命令特定数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Windows.Input.ICommandSource.CommandParameter%2A>用于在执行时向命令传递的特定信息。  该命令由定义的数据类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement" Usage="System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在其上执行该命令的对象。</summary>
        <value>在其上执行该命令的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在命令系统中，Windows Presentation Foundation<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上的属性<xref:System.Windows.Input.ICommandSource>时，才适用<xref:System.Windows.Input.ICommand>是<xref:System.Windows.Input.RoutedCommand>。  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和对应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。  
  
 与一起使用时<xref:System.Windows.Input.RoutedCommand>，命令目标是在其上的对象<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引发事件。 如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>属性未设置，则具有键盘焦点的元素将用作目标。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>
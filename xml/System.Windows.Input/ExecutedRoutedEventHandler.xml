<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ee5a979344397742da82bb0b7af1c58e9dcf79d3" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64206010" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件处理程序所附加到的对象。</param>
    <param name="e">事件数据。</param>
    <summary>表示将处理 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 和 <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> 路由事件以及相关附加事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此委托包含实现逻辑<xref:System.Windows.Input.RoutedCommand>。  将与命令分离的实现逻辑允许从不同的源和类型，调用的命令，并启用集中命令逻辑。  
  
 此委托还可用于<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>并<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>，这是在附加事件<xref:System.Windows.Input.CommandManager>实现很多命令基础结构的类。 但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>来自特定事件<xref:System.Windows.Input.CommandBinding>，而不是不是在工作<xref:System.Windows.Input.CommandManager>级别。  
  
 在<xref:System.Windows.Input.ExecutedRoutedEventArgs>，以下属性一般是相关的编写执行的命令而得出的路由事件的事件处理程序时：  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 报告已执行此命令的目标。 一旦执行该命令，你也可以将<xref:System.Windows.RoutedEventArgs.Source%2A>的详细信息通常在路由事件术语中，为引发路由的事件的对象。  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 报告执行的命令。 如果你使用命令绑定，并编写处理程序可能处理多个命令，此属性很有用。  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 报告已由正在执行的命令传递任何特定于命令的参数。 并非所有命令都使用或需要特定于命令的参数。  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 报告是否源自执行的命令的路由的事件已处理的路由的不同元素。 对于路由的事件处理程序，它是推荐的做法具有处理设置事件时执行有意义的工作的处理程序<xref:System.Windows.RoutedEventArgs.Handled%2A>到`true`。 这可以防止事件再次沿路由的处理典型的事件处理程序。 处理路由的事件的详细信息，请参阅[路由事件标记为已处理，和类处理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 此委托还表示用于处理程序<xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType>并<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>，这是在附加事件<xref:System.Windows.Input.CommandManager>实现很多命令基础结构的类。 但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>来自特定事件<xref:System.Windows.Input.CommandBinding>，而不是不是在工作<xref:System.Windows.Input.CommandManager>级别。  
  
 有关命令的详细信息，请参阅[命令概述](~/docs/framework/wpf/advanced/commanding-overview.md)。  
  
   
  
## Examples  
 此示例将创建<xref:System.Windows.Input.ExecutedRoutedEventHandler>时执行此命令在目标系统上设置可视化属性。 该示例还包括<xref:System.Windows.Input.CanExecuteRoutedEventHandler>相同命令。  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
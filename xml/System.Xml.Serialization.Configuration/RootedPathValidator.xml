<Type Name="RootedPathValidator" FullName="System.Xml.Serialization.Configuration.RootedPathValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe89d386cdf011071377c192e1f2e7cee0c04963" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69441050" /></Metadata><TypeSignature Language="C#" Value="public class RootedPathValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RootedPathValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Configuration.RootedPathValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RootedPathValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RootedPathValidator : System::Configuration::ConfigurationValidatorBase" />
  <TypeSignature Language="F#" Value="type RootedPathValidator = class&#xA;    inherit ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3770c-101">验证控制 <c>tempFilesLocation</c> 配置开关的使用的规则。</span><span class="sxs-lookup"><span data-stu-id="3770c-101">Validates the rules governing the use of the <c>tempFilesLocation</c> configuration switch.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3770c-102">将`WebReference`对象添加到中的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]web 服务时, web 服务发现过程会创建文件。</span><span class="sxs-lookup"><span data-stu-id="3770c-102">When adding a `WebReference` object to a Web service in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], files are created by the Web service discovery process.</span></span>  
  
 <span data-ttu-id="3770c-103">Web 服务客户端通过添加`WebReference`对象了解查找 Web 服务说明 (WSDL) 文档的位置。</span><span class="sxs-lookup"><span data-stu-id="3770c-103">Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object.</span></span> <span data-ttu-id="3770c-104">然后, Web 服务客户端使用`WriteAll`方法将发现的文档保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="3770c-104">The Web service clients then save the discovered documents to the disk by using the `WriteAll` method.</span></span> <span data-ttu-id="3770c-105">例如, 发现的文档可能是 .xsd 架构文件或服务说明。</span><span class="sxs-lookup"><span data-stu-id="3770c-105">For example, the discovered documents may be .xsd schema files or service descriptions.</span></span> <span data-ttu-id="3770c-106">在该过程结束时, 客户端将删除这些文件。</span><span class="sxs-lookup"><span data-stu-id="3770c-106">At the end of the process, the client deletes the files.</span></span> <span data-ttu-id="3770c-107">您可以使用 machine.config 配置文件中指定的`tempFilesLocation` `<xmlSerializer>`元素中的开关更改临时文件夹中文件的默认位置, 如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="3770c-107">You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.web>  
  <system.xml.serialization>  
    <xmlSerializer tempFilesLocation=".."/>  
  </system.xml.serialization>  
</configuration>  
```  
  
 <span data-ttu-id="3770c-108">的`tempFilesLocation`值必须是绝对路径。</span><span class="sxs-lookup"><span data-stu-id="3770c-108">The value of `tempFilesLocation` must be an absolute path.</span></span> <span data-ttu-id="3770c-109">如果指定的路径不是绝对路径, [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]则在<xref:System.Configuration.ConfigurationErrorsException>引用配置节时, 将生成异常。</span><span class="sxs-lookup"><span data-stu-id="3770c-109">If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced.</span></span>  
  
 <span data-ttu-id="3770c-110">此属性的值将被截断以删除前导空格和尾随空格。</span><span class="sxs-lookup"><span data-stu-id="3770c-110">The value of the property is truncated to remove leading and trailing white spaces.</span></span>  
  
 <span data-ttu-id="3770c-111">如果`tempFilesLocation`属性的值由空格组成, 则默认的% TMP% 位置用于编译。</span><span class="sxs-lookup"><span data-stu-id="3770c-111">If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation.</span></span> <span data-ttu-id="3770c-112">如果未指定任何`tempFilesLocation`开关, 则会发生相同的默认行为。</span><span class="sxs-lookup"><span data-stu-id="3770c-112">The same default behavior occurs when no `tempFilesLocation` switch is specified.</span></span>  
  
 <span data-ttu-id="3770c-113">不<xref:System.Xml.Serialization.XmlSerializer>会检查路径是否存在。</span><span class="sxs-lookup"><span data-stu-id="3770c-113">The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists.</span></span> <span data-ttu-id="3770c-114">如果不<xref:System.IO.DirectoryNotFoundException>是, 则生成。</span><span class="sxs-lookup"><span data-stu-id="3770c-114">If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated.</span></span> <span data-ttu-id="3770c-115">如果% TMP% 路径不存在, 则`XmlSerializer`这与的默认行为完全相同。</span><span class="sxs-lookup"><span data-stu-id="3770c-115">This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootedPathValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootedPathValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3770c-116">初始化 <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="3770c-116">Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberSignature Language="F#" Value="override this.CanValidate : Type -&gt; bool" Usage="rootedPathValidator.CanValidate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3770c-117">对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3770c-117">The type of the object.</span></span></param>
        <summary><span data-ttu-id="3770c-118">确定是否可以验证该对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3770c-118">Determines whether the type of the object can be validated.</span></span></summary>
        <returns><span data-ttu-id="3770c-119">如果 <paramref name="type" /> 参数与有效的 <see langword="true" /> 对象匹配，则为 <see langword="XMLSerializer" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3770c-119"><see langword="true" /> if the <paramref name="type" /> parameter matches a valid <see langword="XMLSerializer" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Validate : obj -&gt; unit" Usage="rootedPathValidator.Validate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3770c-120">对象的值。</span><span class="sxs-lookup"><span data-stu-id="3770c-120">The value of an object.</span></span></param>
        <summary><span data-ttu-id="3770c-121">确定对象的值是否有效。</span><span class="sxs-lookup"><span data-stu-id="3770c-121">Determines whether the value of an object is valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3770c-122">要`XmlSerializer`验证的对象作为`Validate`方法的参数传递。</span><span class="sxs-lookup"><span data-stu-id="3770c-122">The `XmlSerializer` object to validate is passed as a parameter of the `Validate` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IApplicationIdentifier" FullName="System.Runtime.Caching.Hosting.IApplicationIdentifier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ee32f32e927a1af2807da9ae33ca9b0756dc164a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70436843" /></Metadata><TypeSignature Language="C#" Value="public interface IApplicationIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IApplicationIdentifier" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IApplicationIdentifier" />
  <TypeSignature Language="VB.NET" Value="Public Interface IApplicationIdentifier" />
  <TypeSignature Language="C++ CLI" Value="public interface class IApplicationIdentifier" />
  <TypeSignature Language="F#" Value="type IApplicationIdentifier = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义应用程序域的标识符，缓存实现可使用这些应用程序域与主机环境进行交互。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 宿主环境（如 ASP.NET）可以<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>使用接口来定义标识单个应用程序域的字符串。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 宿主环境实现<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>接口。 然后，可<xref:System.Runtime.Caching.ObjectCache> <xref:System.Runtime.Caching.ObjectCache.Host%2A>通过属性实现此接口。  
  
 缓存实现使用此引用获取应用程序域的标识符。 在 ASP.NET 中，缓存实现使用应用程序标识符来构造缓存性能计数器的标识符。 这提供了性能计数器实例的名称，当多个应用程序域运行时，这些实例可在应用程序域之间进行区分。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetApplicationId">
      <MemberSignature Language="C#" Value="public string GetApplicationId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetApplicationId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationId () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetApplicationId();" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationId : unit -&gt; string" Usage="iApplicationIdentifier.GetApplicationId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取某个应用程序域的标识符。</summary>
        <returns>当前应用程序域的唯一标识符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法通常由主机环境实现，以便为<xref:System.Runtime.Caching.ObjectCache>实现构造应用程序标识符。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] <xref:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId%2A> <xref:System.Runtime.Caching.ObjectCache>实现使用此信息来标识当前正在运行的应用程序域。  
  
 例如，在 ASP.NET 中，缓存使用应用程序标识符来构造缓存性能计数器的标识符。 缓存调用<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId%2A>由主机环境实现的方法，并且主机返回标识符。 这提供了性能计数器实例的名称，当多个应用程序域运行时，这些实例可在应用程序域之间进行区分。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4039322000fbf90b6347b0ae1bb869bdc85bce68" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69112050" /></Metadata><TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="83174-101">提供用户数据报协议 (UDP) 网络服务。</span><span class="sxs-lookup"><span data-stu-id="83174-101">Provides User Datagram Protocol (UDP) network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-102"><xref:System.Net.Sockets.UdpClient>类提供用于在阻止同步模式下发送和接收无连接 UDP 数据报的简单方法。</span><span class="sxs-lookup"><span data-stu-id="83174-102">The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode.</span></span> <span data-ttu-id="83174-103">由于 UDP 是一种无连接的传输协议, 因此在发送和接收数据之前, 无需建立远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="83174-103">Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data.</span></span> <span data-ttu-id="83174-104">不过, 您可以通过以下两种方式之一来建立默认远程主机的选项:</span><span class="sxs-lookup"><span data-stu-id="83174-104">You do, however, have the option of establishing a default remote host in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="83174-105">使用远程主机名和<xref:System.Net.Sockets.UdpClient>端口号作为参数创建类的实例。</span><span class="sxs-lookup"><span data-stu-id="83174-105">Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.</span></span>  
  
-   <span data-ttu-id="83174-106">创建<xref:System.Net.Sockets.UdpClient>类的实例, 然后<xref:System.Net.Sockets.UdpClient.Connect%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-106">Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span>  
  
 <span data-ttu-id="83174-107">您可以使用中<xref:System.Net.Sockets.UdpClient>提供的任何发送方法将数据发送到远程设备。</span><span class="sxs-lookup"><span data-stu-id="83174-107">You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device.</span></span> <span data-ttu-id="83174-108"><xref:System.Net.Sockets.UdpClient.Receive%2A>使用方法从远程主机接收数据。</span><span class="sxs-lookup"><span data-stu-id="83174-108">Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-109">不要使用主机<xref:System.Net.Sockets.UdpClient.Send%2A>名调用, 或者<xref:System.Net.IPEndPoint>如果已指定默认远程主机, 则不调用。</span><span class="sxs-lookup"><span data-stu-id="83174-109">Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host.</span></span> <span data-ttu-id="83174-110">否则, <xref:System.Net.Sockets.UdpClient>将引发异常。</span><span class="sxs-lookup"><span data-stu-id="83174-110">If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.</span></span>  
  
 <span data-ttu-id="83174-111"><xref:System.Net.Sockets.UdpClient>方法还可用于发送和接收多播数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-111"><xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams.</span></span> <span data-ttu-id="83174-112">使用方法将<xref:System.Net.Sockets.UdpClient>订阅到多播组。 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A></span><span class="sxs-lookup"><span data-stu-id="83174-112">Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group.</span></span> <span data-ttu-id="83174-113"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>使用方法<xref:System.Net.Sockets.UdpClient>从多播组取消订阅。</span><span class="sxs-lookup"><span data-stu-id="83174-113">Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-114">下面的示例使用端口<xref:System.Net.Sockets.UdpClient> 11000 上的主机名`www.contoso.com`建立连接。</span><span class="sxs-lookup"><span data-stu-id="83174-114">The following example establishes a <xref:System.Net.Sockets.UdpClient> connection using the host name `www.contoso.com` on port 11000.</span></span> <span data-ttu-id="83174-115">小型字符串消息将发送到两个单独的远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-115">A small string message is sent to two separate remote host machines.</span></span> <span data-ttu-id="83174-116"><xref:System.Net.Sockets.UdpClient.Receive%2A>方法阻止执行, 直到收到消息。</span><span class="sxs-lookup"><span data-stu-id="83174-116">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received.</span></span> <span data-ttu-id="83174-117">使用传递<xref:System.Net.IPEndPoint>给<xref:System.Net.Sockets.UdpClient.Receive%2A>的将显示响应主机的标识。</span><span class="sxs-lookup"><span data-stu-id="83174-117">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="83174-118">建立传出连接或接受传入的请求。</span><span class="sxs-lookup"><span data-stu-id="83174-118">To establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md"><span data-ttu-id="83174-119">TCP-UDP</span><span class="sxs-lookup"><span data-stu-id="83174-119">TCP-UDP</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-120">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="83174-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="83174-121">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="83174-121">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-122">此构造函数将创建<xref:System.Net.Sockets.UdpClient>一个新的, 并允许基础服务提供程序分配最适当的本地 IPv4 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-122">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.</span></span> <span data-ttu-id="83174-123">如果使用此构造函数, 则<xref:System.Net.Sockets.UdpClient>使用 IPv4 地址系列设置实例, 该地址系列不能通过与 IPv6 目标的 connect 方法调用更改或覆盖。</span><span class="sxs-lookup"><span data-stu-id="83174-123">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-124">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-124">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-125">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-125">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-126">此构造函数不适于联接多播组, 因为它不执行套接字绑定。</span><span class="sxs-lookup"><span data-stu-id="83174-126">This constructor is not suitable for joining a multicast group because it does not perform socket binding.</span></span> <span data-ttu-id="83174-127">此外, 它仅适用于 IPv4 地址类型。</span><span class="sxs-lookup"><span data-stu-id="83174-127">Also, it works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-128">下面的示例演示如何使用无参数构造函数创建<xref:System.Net.Sockets.UdpClient>类的实例。</span><span class="sxs-lookup"><span data-stu-id="83174-128">The following example demonstrates how to use the parameterless constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-129">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-129">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="83174-130">要通过其进行通信的本地端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-130">The local port number from which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="83174-131">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将它绑定到所提供的本地端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-131">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-132">此构造函数将创建<xref:System.Net.Sockets.Socket>一个基础, 并将其绑定到你要从其进行通信的端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-132">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span> <span data-ttu-id="83174-133">如果你只想设置本地端口号, 请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="83174-133">Use this constructor if you are only interested in setting the local port number.</span></span> <span data-ttu-id="83174-134">基础服务提供程序将分配本地 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-134">The underlying service provider will assign the local IP address.</span></span> <span data-ttu-id="83174-135">如果将0传递到构造函数, 则基础服务提供程序将分配端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-135">If you pass 0 to the constructor, the underlying service provider will assign a port number.</span></span> <span data-ttu-id="83174-136">如果使用此构造函数, 则<xref:System.Net.Sockets.UdpClient>使用 IPv4 地址系列设置实例, 该地址系列不能通过与 IPv6 目标的 connect 方法调用更改或覆盖。</span><span class="sxs-lookup"><span data-stu-id="83174-136">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-137">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-137">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-138">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-138">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-139">此构造函数仅适用于 IPv4 地址类型。</span><span class="sxs-lookup"><span data-stu-id="83174-139">This constructor works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-140">下面的示例演示如何使用本地端口号来创建<xref:System.Net.Sockets.UdpClient>类的实例。</span><span class="sxs-lookup"><span data-stu-id="83174-140">The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-141"><paramref name="port" /> 参数大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</span><span class="sxs-lookup"><span data-stu-id="83174-141">The <paramref name="port" /> parameter is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-142">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-142">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="83174-143">一个 <see cref="T:System.Net.IPEndPoint" />，表示将 UDP 连接绑定到的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-143">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which you bind the UDP connection.</span></span></param>
        <summary><span data-ttu-id="83174-144">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-144">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-145">此构造函数将创建<xref:System.Net.Sockets.UdpClient>一个新的, 并<xref:System.Net.IPEndPoint>将其绑定`localEP`到参数所指定的。</span><span class="sxs-lookup"><span data-stu-id="83174-145">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="83174-146">调用此构造函数之前, 必须<xref:System.Net.IPEndPoint>使用要用于发送和接收数据的 IP 地址和端口号来创建。</span><span class="sxs-lookup"><span data-stu-id="83174-146">Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="83174-147">无需指定用于发送和接收数据的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-147">You do not need to specify a local IP address and port number for sending and receiving data.</span></span> <span data-ttu-id="83174-148">如果不这样做, 则基础服务提供程序将分配最适当的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-148">If you do not, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="83174-149">如果使用此构造函数, <xref:System.Net.Sockets.UdpClient>则使用`localEP`由参数指定的地址族设置该实例, 该地址族不能由不同地址族的 connect 方法调用更改或覆盖。</span><span class="sxs-lookup"><span data-stu-id="83174-149">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-150">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-150">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-151">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-151">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-152">下面的示例演示如何使用本地终结点创建<xref:System.Net.Sockets.UdpClient>类的实例。</span><span class="sxs-lookup"><span data-stu-id="83174-152">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-153"><paramref name="localEP" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-153"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-154">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-154">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="83174-155"><see cref="T:System.Net.Sockets.AddressFamily" /> 值之一，它指定套接字的寻址方案。</span><span class="sxs-lookup"><span data-stu-id="83174-155">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span></span></param>
        <summary><span data-ttu-id="83174-156">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="83174-156">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-157">`family`参数确定侦听器是使用 ip 版本4地址 (IPv4) 还是 ip 版本 6 (IPv6) 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-157">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="83174-158">若要使用 IPv4 地址, 请传递<xref:System.Net.Sockets.AddressFamily.InterNetwork>值。</span><span class="sxs-lookup"><span data-stu-id="83174-158">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="83174-159">若要使用 IPv6 地址, 请传递<xref:System.Net.Sockets.AddressFamily.InterNetworkV6>值。</span><span class="sxs-lookup"><span data-stu-id="83174-159">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="83174-160">如果传递任何其他值, 则该方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="83174-160">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="83174-161">如果使用此构造函数, <xref:System.Net.Sockets.UdpClient>则使用`family`由参数指定的地址族设置该实例, 该地址族不能由不同地址族的 connect 方法调用更改或覆盖。</span><span class="sxs-lookup"><span data-stu-id="83174-161">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-162">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-162">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-163">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-163">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-164"><xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>不适于联接多播组, 因为它不执行套接字绑定。</span><span class="sxs-lookup"><span data-stu-id="83174-164">The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> is not suitable for joining a multicast group because it does not perform socket binding.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-165"><paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</span><span class="sxs-lookup"><span data-stu-id="83174-165"><paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-166">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-166">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="83174-167">用来侦听传入的连接尝试的端口。</span><span class="sxs-lookup"><span data-stu-id="83174-167">The port on which to listen for incoming connection attempts.</span></span></param>
        <param name="family"><span data-ttu-id="83174-168"><see cref="T:System.Net.Sockets.AddressFamily" /> 值之一，它指定套接字的寻址方案。</span><span class="sxs-lookup"><span data-stu-id="83174-168">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span></span></param>
        <summary><span data-ttu-id="83174-169">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将它绑定到所提供的本地端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-169">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-170">此构造函数将创建<xref:System.Net.Sockets.Socket>一个基础, 并将其绑定到你要从其进行通信的端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-170">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span>  
  
 <span data-ttu-id="83174-171">`family`参数确定侦听器是使用 ip 版本4地址 (IPv4) 还是 ip 版本 6 (IPv6) 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-171">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="83174-172">若要使用 IPv4 地址, 请传递<xref:System.Net.Sockets.AddressFamily.InterNetwork>值。</span><span class="sxs-lookup"><span data-stu-id="83174-172">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="83174-173">若要使用 IPv6 地址, 请传递<xref:System.Net.Sockets.AddressFamily.InterNetworkV6>值。</span><span class="sxs-lookup"><span data-stu-id="83174-173">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="83174-174">如果传递任何其他值, 则该方法将引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="83174-174">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="83174-175">如果使用此构造函数, <xref:System.Net.Sockets.UdpClient>则使用`family`由参数指定的地址族设置该实例, 该地址族不能由不同地址族的 connect 方法调用更改或覆盖。</span><span class="sxs-lookup"><span data-stu-id="83174-175">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-176">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-176">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-177">获取此代码后, 请参阅[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-177">Once you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-178">下面的代码示例演示如何创建要在多播组中使用的 UDP 客户端。</span><span class="sxs-lookup"><span data-stu-id="83174-178">The following code example shows how to create a UDP client to use in a multicast group.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-179"><paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</span><span class="sxs-lookup"><span data-stu-id="83174-179"><paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-180"><paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</span><span class="sxs-lookup"><span data-stu-id="83174-180"><paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-181">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-181">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="83174-182">要连接到的远程 DNS 主机的名称。</span><span class="sxs-lookup"><span data-stu-id="83174-182">The name of the remote DNS host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="83174-183">要连接到的远程端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-183">The remote port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="83174-184">初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-184">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and establishes a default remote host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-185">此构造函数初始化新<xref:System.Net.Sockets.UdpClient>的, 并`hostname`使用和`port`参数建立远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-185">This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters.</span></span> <span data-ttu-id="83174-186">建立默认远程主机是可选的。</span><span class="sxs-lookup"><span data-stu-id="83174-186">Establishing a default remote host is optional.</span></span> <span data-ttu-id="83174-187">如果使用此构造函数, 则不必在每次调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时都指定远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-187">If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-188">指定默认远程主机仅限该主机。</span><span class="sxs-lookup"><span data-stu-id="83174-188">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="83174-189">可以通过调用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法随时更改默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-189">You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-190">如果要在调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时指定远程主机, 请不要使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="83174-190">If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-191">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-191">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-192">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-192">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-193">下面的示例演示如何使用主机名和端口号<xref:System.Net.Sockets.UdpClient>创建类的实例。</span><span class="sxs-lookup"><span data-stu-id="83174-193">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-194"><paramref name="hostname" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-194"><paramref name="hostname" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-195"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="83174-195"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-196">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-196">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-197">获取或设置一个值，该值指示是否已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-197">Gets or sets a value indicating whether a default remote host has been established.</span></span></summary>
        <value><span data-ttu-id="83174-198">如果连接处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-198"><see langword="true" /> if a connection is active; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-199">派生自的<xref:System.Net.Sockets.UdpClient>类可以使用此属性来确定是否已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-199">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established.</span></span> <span data-ttu-id="83174-200">可以使用适当的构造函数或通过调用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法来建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-200">You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-201">如果确实要建立默认远程主机, 则不能在对的调用<xref:System.Net.Sockets.UdpClient.Send%2A>中指定远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-201">If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="83174-202">一个布尔值，该值指定是启用还是禁用 NAT 遍历。</span><span class="sxs-lookup"><span data-stu-id="83174-202">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="83174-203">启用或禁用针对 <see cref="T:System.Net.Sockets.UdpClient" /> 实例的网络地址转换 (NAT) 遍历。</span><span class="sxs-lookup"><span data-stu-id="83174-203">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.UdpClient" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-204">方法用于为<xref:System.Net.Sockets.UdpClient>实例启用或禁用 NAT 遍历。 <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A></span><span class="sxs-lookup"><span data-stu-id="83174-204">The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span> <span data-ttu-id="83174-205">可以使用 Teredo、6to4 或 ISATAP 隧道来提供 NAT 遍历。</span><span class="sxs-lookup"><span data-stu-id="83174-205">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="83174-206">如果参数为 false, 则关联<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>。 `allowed`</span><span class="sxs-lookup"><span data-stu-id="83174-206">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="83174-207">这会显式禁用<xref:System.Net.Sockets.UdpClient>实例的 NAT 遍历。</span><span class="sxs-lookup"><span data-stu-id="83174-207">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span>  
  
 <span data-ttu-id="83174-208">如果参数为 true, 则关联<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>套接字上的选项设置为<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。 `allowed`</span><span class="sxs-lookup"><span data-stu-id="83174-208">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="83174-209">这可能会允许 NAT 遍历<xref:System.Net.Sockets.UdpClient>系统上的防火墙规则。</span><span class="sxs-lookup"><span data-stu-id="83174-209">This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="83174-210">Teredo 地址是前缀为2001::/32 的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-210">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="83174-211">可以通过正常的 DNS 名称解析来返回 Teredo 地址, 或将其枚举为分配给本地接口的 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-211">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-212">获取从网络接收的可读取的数据量。</span><span class="sxs-lookup"><span data-stu-id="83174-212">Gets the amount of data received from the network that is available to read.</span></span></summary>
        <value><span data-ttu-id="83174-213">从网络接收的数据字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-213">The number of bytes of data received from the network.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-214"><xref:System.Net.Sockets.UdpClient.Available%2A>属性用于确定网络缓冲区中排队以进行读取的数据量。</span><span class="sxs-lookup"><span data-stu-id="83174-214">The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="83174-215">如果数据可用, 则调用<xref:System.Net.Sockets.NetworkStream.Read%2A>以获取数据。</span><span class="sxs-lookup"><span data-stu-id="83174-215">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="83174-216">如果没有可用数据, 属性将<xref:System.Net.Sockets.UdpClient.Available%2A>返回0。</span><span class="sxs-lookup"><span data-stu-id="83174-216">If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.</span></span>  
  
 <span data-ttu-id="83174-217">如果远程主机关闭或关闭连接, 则属性将<xref:System.Net.Sockets.UdpClient.Available%2A> <xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-217">If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-218">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码, 并参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-218">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-219">下面的代码示例演示<xref:System.Net.Sockets.UdpClient.Available%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-219">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Available%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-220">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-220">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-221"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="83174-221">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestCallback"><span data-ttu-id="83174-222">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="83174-222">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="83174-223">一个用户定义的对象，其中包含接收操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="83174-223">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="83174-224">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="83174-224">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="83174-225">从远程主机异步接收数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-225">Receives a datagram from a remote host asynchronously.</span></span></summary>
        <returns><span data-ttu-id="83174-226">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步接收。</span><span class="sxs-lookup"><span data-stu-id="83174-226">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous receive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-227">必须通过<xref:System.Net.Sockets.UdpClient.BeginReceive%2A> <xref:System.Net.Sockets.UdpClient.EndReceive%2A>调用方法完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="83174-227">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method.</span></span> <span data-ttu-id="83174-228">通常, 方法由`requestCallback`委托调用。</span><span class="sxs-lookup"><span data-stu-id="83174-228">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="83174-229">在操作完成之前, 此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-229">This method does not block until the operation is complete.</span></span> <span data-ttu-id="83174-230">若要在操作完成之前一直阻止, 请<xref:System.Net.Sockets.UdpClient.Receive%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-230">To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="83174-231">有关使用异步编程模型的详细信息, 请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-231">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-232">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginReceive%2A>异步接收服务器响应。</span><span class="sxs-lookup"><span data-stu-id="83174-232">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> to asynchronously receive a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-233">将数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-233">Sends a datagram to a remote host asynchronously.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-234">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="83174-234">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-235">要发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-235">The number of bytes to send.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="83174-236">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="83174-236">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="83174-237">一个用户定义的对象，其中包含该发送操作的信息。</span><span class="sxs-lookup"><span data-stu-id="83174-237">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="83174-238">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="83174-238">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="83174-239">将数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-239">Sends a datagram to a remote host asynchronously.</span></span> <span data-ttu-id="83174-240">先前已通过调用 <see cref="Overload:System.Net.Sockets.UdpClient.Connect" /> 指定目标。</span><span class="sxs-lookup"><span data-stu-id="83174-240">The destination was specified previously by a call to <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</span></span></summary>
        <returns><span data-ttu-id="83174-241">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步发送。</span><span class="sxs-lookup"><span data-stu-id="83174-241">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-242">必须通过<xref:System.Net.Sockets.UdpClient.BeginSend%2A> <xref:System.Net.Sockets.UdpClient.EndSend%2A>调用方法完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="83174-242">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="83174-243">通常, 方法由`requestCallback`委托调用。</span><span class="sxs-lookup"><span data-stu-id="83174-243">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="83174-244">在操作完成之前, 此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-244">This method does not block until the operation completes.</span></span> <span data-ttu-id="83174-245">若要在操作完成之前一直阻止, 请使用<xref:System.Net.Sockets.UdpClient.Send%2A>方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="83174-245">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="83174-246">有关使用异步编程模型的详细信息, 请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-246">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-247">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginSend%2A>异步发送服务器请求。</span><span class="sxs-lookup"><span data-stu-id="83174-247">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-248">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="83174-248">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-249">要发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-249">The number of bytes to send.</span></span></param>
        <param name="endPoint"><span data-ttu-id="83174-250"><see cref="T:System.Net.EndPoint" />，它表示数据的目标位置。</span><span class="sxs-lookup"><span data-stu-id="83174-250">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="83174-251">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="83174-251">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="83174-252">一个用户定义的对象，其中包含该发送操作的信息。</span><span class="sxs-lookup"><span data-stu-id="83174-252">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="83174-253">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="83174-253">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="83174-254">将数据报异步发送到目标。</span><span class="sxs-lookup"><span data-stu-id="83174-254">Sends a datagram to a destination asynchronously.</span></span> <span data-ttu-id="83174-255">目标由 <see cref="T:System.Net.EndPoint" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="83174-255">The destination is specified by a <see cref="T:System.Net.EndPoint" />.</span></span></summary>
        <returns><span data-ttu-id="83174-256">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步发送。</span><span class="sxs-lookup"><span data-stu-id="83174-256">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-257">必须通过<xref:System.Net.Sockets.UdpClient.BeginSend%2A> <xref:System.Net.Sockets.UdpClient.EndSend%2A>调用方法完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="83174-257">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="83174-258">通常, 方法由`requestCallback`委托调用。</span><span class="sxs-lookup"><span data-stu-id="83174-258">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="83174-259">在操作完成之前, 此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-259">This method does not block until the operation is complete.</span></span> <span data-ttu-id="83174-260">若要在操作完成之前一直阻止, 请使用<xref:System.Net.Sockets.UdpClient.Send%2A>方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="83174-260">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="83174-261">有关使用异步编程模型的详细信息, 请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-261">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-262">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginSend%2A>异步发送服务器请求。</span><span class="sxs-lookup"><span data-stu-id="83174-262">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-263">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</span><span class="sxs-lookup"><span data-stu-id="83174-263">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-264">要发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-264">The number of bytes to send.</span></span></param>
        <param name="hostname"><span data-ttu-id="83174-265">目标主机。</span><span class="sxs-lookup"><span data-stu-id="83174-265">The destination host.</span></span></param>
        <param name="port"><span data-ttu-id="83174-266">目标端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-266">The destination port number.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="83174-267">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="83174-267">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="83174-268">一个用户定义的对象，其中包含该发送操作的信息。</span><span class="sxs-lookup"><span data-stu-id="83174-268">A user-defined object that contains information about the send operation.</span></span> <span data-ttu-id="83174-269">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="83174-269">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="83174-270">将数据报异步发送到目标。</span><span class="sxs-lookup"><span data-stu-id="83174-270">Sends a datagram to a destination asynchronously.</span></span> <span data-ttu-id="83174-271">目标由主机名和端口号指定。</span><span class="sxs-lookup"><span data-stu-id="83174-271">The destination is specified by the host name and port number.</span></span></summary>
        <returns><span data-ttu-id="83174-272">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步发送。</span><span class="sxs-lookup"><span data-stu-id="83174-272">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-273">必须通过<xref:System.Net.Sockets.UdpClient.BeginSend%2A> <xref:System.Net.Sockets.UdpClient.EndSend%2A>调用方法完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="83174-273">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="83174-274">通常, 方法由`requestCallback`委托调用。</span><span class="sxs-lookup"><span data-stu-id="83174-274">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="83174-275">在操作完成之前, 此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-275">This method does not block until the operation is complete.</span></span> <span data-ttu-id="83174-276">若要在操作完成之前一直阻止, 请使用<xref:System.Net.Sockets.UdpClient.Send%2A>方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="83174-276">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="83174-277">有关使用异步编程模型的详细信息, 请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-277">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-278">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginSend%2A>异步发送服务器请求。</span><span class="sxs-lookup"><span data-stu-id="83174-278">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-279">获取或设置基础网络 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-279">Gets or sets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="83174-280">基础网络 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-280">The underlying Network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-281"><xref:System.Net.Sockets.UdpClient>创建用于<xref:System.Net.Sockets.Socket>通过网络发送和接收数据的。</span><span class="sxs-lookup"><span data-stu-id="83174-281"><xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network.</span></span> <span data-ttu-id="83174-282">派生自的<xref:System.Net.Sockets.UdpClient>类可以使用此属性来获取或设置<xref:System.Net.Sockets.Socket>此属性。</span><span class="sxs-lookup"><span data-stu-id="83174-282">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="83174-283">如果你<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.UdpClient.Client%2A> 需要超出提供的访问权限,请使用从<xref:System.Net.Sockets.UdpClient>返回的基础。</span><span class="sxs-lookup"><span data-stu-id="83174-283">Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides.</span></span> <span data-ttu-id="83174-284">你还可以使用<xref:System.Net.Sockets.UdpClient.Client%2A>将基础<xref:System.Net.Sockets.Socket>设置为现有<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="83174-284">You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="83174-285">如果你想要充分利用使用预先存在<xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.Socket>的的简易性, 这会很有用。</span><span class="sxs-lookup"><span data-stu-id="83174-285">This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-286">下面的示例演示<xref:System.Net.Sockets.UdpClient.Client%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-286">The following example demonstrates the use of the <xref:System.Net.Sockets.UdpClient.Client%2A> property.</span></span> <span data-ttu-id="83174-287">在此示例中, 为基础<xref:System.Net.Sockets.Socket>启用了广播。</span><span class="sxs-lookup"><span data-stu-id="83174-287">In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="83174-288">关闭 UDP 连接。</span><span class="sxs-lookup"><span data-stu-id="83174-288">Closes the UDP connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-289">禁用基础<xref:System.Net.Sockets.Socket>并释放与关联的<xref:System.Net.Sockets.UdpClient>所有托管资源和非托管资源。 <xref:System.Net.Sockets.UdpClient.Close%2A></span><span class="sxs-lookup"><span data-stu-id="83174-289">The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-290">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-290">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-291">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-291">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-292">下面的示例演示如何<xref:System.Net.Sockets.UdpClient>通过<xref:System.Net.Sockets.UdpClient.Close%2A>调用方法来关闭。</span><span class="sxs-lookup"><span data-stu-id="83174-292">The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the <xref:System.Net.Sockets.UdpClient.Close%2A> method.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-293">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-293">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-294">建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-294">Establishes a default remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="endPoint"><span data-ttu-id="83174-295">一个 <see cref="T:System.Net.IPEndPoint" />，它指定要将数据发送到的网络终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-295">An <see cref="T:System.Net.IPEndPoint" /> that specifies the network endpoint to which you intend to send data.</span></span></param>
        <summary><span data-ttu-id="83174-296">使用指定的网络终结点建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-296">Establishes a default remote host using the specified network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-297">方法使用`endPoint`参数中指定的值建立默认远程主机。 <xref:System.Net.Sockets.UdpClient.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="83174-297">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter.</span></span> <span data-ttu-id="83174-298">一旦建立, 就不必在每次调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时都指定远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-298">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="83174-299">建立默认远程主机是可选的。</span><span class="sxs-lookup"><span data-stu-id="83174-299">Establishing a default remote host is optional.</span></span> <span data-ttu-id="83174-300">指定默认远程主机仅限该主机。</span><span class="sxs-lookup"><span data-stu-id="83174-300">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="83174-301">如果要将数据报发送到其他远程主机, 则必须对该<xref:System.Net.Sockets.UdpClient.Connect%2A>方法进行另一次调用, 或在没有默认远程主机的情况下创建另一个。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-301">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="83174-302">如果已建立默认远程主机, 并且还在调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时提供远程主机, <xref:System.Net.Sockets.UdpClient.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="83174-302">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-303">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-303">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-304">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-304">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-305">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法, 则从指定的默认值以外的地址到达的任何数据报都将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="83174-305">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="83174-306">不能使用此方法将默认远程主机设置为广播地址, 除非从<xref:System.Net.Sockets.UdpClient>继承, 使用客户端方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-306">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="83174-307">但是, 如果在调用<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> <xref:System.Net.Sockets.UdpClient.Send%2A>方法时指定, 则可以将数据广播到默认广播地址255.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-307">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-308">如果你的应用程序需要更好地控制广播地址, 也可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-308">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-309">由于 UDP 协议是无连接的, <xref:System.Net.Sockets.UdpClient.Connect%2A>该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-309">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="83174-310">如果打算接收多播<xref:System.Net.Sockets.UdpClient.Connect%2A>数据报, 请不要调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-310">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-311">下面的示例使用<xref:System.Net.IPEndPoint>来建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-311">The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-312">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-312">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-313"><paramref name="endPoint" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-313"><paramref name="endPoint" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-314"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-314">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addr"><span data-ttu-id="83174-315">要将数据发送到的远程主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-315">The <see cref="T:System.Net.IPAddress" /> of the remote host to which you intend to send data.</span></span></param>
        <param name="port"><span data-ttu-id="83174-316">要将数据发送到的端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-316">The port number to which you intend send data.</span></span></param>
        <summary><span data-ttu-id="83174-317">使用指定的 IP 地址和端口号建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-317">Establishes a default remote host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-318">方法使用`addr` 和`port`参数中指定的值建立默认远程主机。 <xref:System.Net.Sockets.UdpClient.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="83174-318">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters.</span></span> <span data-ttu-id="83174-319">一旦建立, 就不必在每次调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时都指定远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-319">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="83174-320">建立默认远程主机是可选的。</span><span class="sxs-lookup"><span data-stu-id="83174-320">Establishing a default remote host is optional.</span></span> <span data-ttu-id="83174-321">指定默认远程主机仅限该主机。</span><span class="sxs-lookup"><span data-stu-id="83174-321">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="83174-322">如果要将数据报发送到其他远程主机, 则必须对该<xref:System.Net.Sockets.UdpClient.Connect%2A>方法进行另一次调用, 或在没有默认远程主机的情况下创建另一个。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-322">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="83174-323">如果已建立默认远程主机, 并且还在调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时提供远程主机, <xref:System.Net.Sockets.UdpClient.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="83174-323">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-324">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-324">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-325">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-325">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-326">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法, 则从指定的默认值以外的地址到达的任何数据报都将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="83174-326">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="83174-327">不能使用此方法将默认远程主机设置为广播地址, 除非从<xref:System.Net.Sockets.UdpClient>继承, 使用客户端方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-327">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="83174-328">但是, 如果在调用<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> <xref:System.Net.Sockets.UdpClient.Send%2A>方法时指定, 则可以将数据广播到默认广播地址255.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-328">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-329">如果你的应用程序需要更好地控制广播地址, 也可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-329">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-330">由于 UDP 协议是无连接的, <xref:System.Net.Sockets.UdpClient.Connect%2A>该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-330">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="83174-331">如果打算接收多播<xref:System.Net.Sockets.UdpClient.Connect%2A>数据报, 请不要调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-331">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-332">下面的示例使用 IP 地址和端口号连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-332">The following example uses an IP address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-333"><see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="83174-333"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-334"><paramref name="addr" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-334"><paramref name="addr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-335"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="83174-335"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-336">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-336">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="83174-337">要将数据发送到的远程主机的 DNS 名称。</span><span class="sxs-lookup"><span data-stu-id="83174-337">The DNS name of the remote host to which you intend send data.</span></span></param>
        <param name="port"><span data-ttu-id="83174-338">要将数据发送到的远程主机上的端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-338">The port number on the remote host to which you intend to send data.</span></span></param>
        <summary><span data-ttu-id="83174-339">使用指定的主机名和端口号建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-339">Establishes a default remote host using the specified host name and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-340">方法使用`port` 和`hostname`参数中指定的值建立默认远程主机。 <xref:System.Net.Sockets.UdpClient.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="83174-340">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters.</span></span> <span data-ttu-id="83174-341">一旦建立, 就不必在每次调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时都指定远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-341">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="83174-342">建立默认远程主机是可选的。</span><span class="sxs-lookup"><span data-stu-id="83174-342">Establishing a default remote host is optional.</span></span> <span data-ttu-id="83174-343">指定默认远程主机仅限该主机。</span><span class="sxs-lookup"><span data-stu-id="83174-343">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="83174-344">如果要将数据报发送到其他远程主机, 则必须对该<xref:System.Net.Sockets.UdpClient.Connect%2A>方法进行另一次调用, 或在没有默认远程主机的情况下创建另一个。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-344">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span>  
  
 <span data-ttu-id="83174-345">如果已建立默认远程主机, 并且还在调用<xref:System.Net.Sockets.UdpClient.Send%2A>方法时提供远程主机, <xref:System.Net.Sockets.UdpClient.Send%2A>将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="83174-345">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-346">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-346">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-347">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-347">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-348">如果调用<xref:System.Net.Sockets.Socket.Connect%2A>方法, 则从指定的默认值以外的地址到达的任何数据报都将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="83174-348">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="83174-349">不能使用此方法将默认远程主机设置为广播地址, 除非从<xref:System.Net.Sockets.UdpClient>继承, 使用客户端方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-349">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="83174-350">但是, 如果在调用<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> <xref:System.Net.Sockets.UdpClient.Send%2A>方法时指定, 则可以将数据广播到默认广播地址255.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-350">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-351">如果你的应用程序需要更好地控制广播地址, 也可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-351">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-352">由于 UDP 协议是无连接的, <xref:System.Net.Sockets.UdpClient.Connect%2A>该方法不会阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-352">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="83174-353">如果打算接收多播<xref:System.Net.Sockets.UdpClient.Connect%2A>数据报, 请不要调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-353">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-354">以下示例使用主机名和端口号来连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-354">The following example uses the host name and port number to connect to a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-355"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-355">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-356"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="83174-356"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-357">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-357">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="83174-358">释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 占用的托管和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="83174-358">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="83174-359"><see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="83174-359"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="83174-360">释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="83174-360">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-361">此方法由公共`Dispose()`方法<xref:System.Object.Finalize%2A>和方法调用。</span><span class="sxs-lookup"><span data-stu-id="83174-361">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="83174-362">`Dispose()`调用受保护`Dispose(Boolean)`的方法, `disposing`并将参数`true`设置为。</span><span class="sxs-lookup"><span data-stu-id="83174-362">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="83174-363"><xref:System.Object.Finalize%2A>在`Dispose` 设置`disposing` 为`false`的情况调用。</span><span class="sxs-lookup"><span data-stu-id="83174-363"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="83174-364">当参数为 true 时, 此方法释放该<xref:System.Net.Sockets.UdpClient>引用的任何托管对象所持有的所有资源。 `disposing`</span><span class="sxs-lookup"><span data-stu-id="83174-364">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references.</span></span> <span data-ttu-id="83174-365">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="83174-365">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="83174-366">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="83174-366">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="83174-367">当重<see langword="Dispose(Boolean)" />写时, 请注意不要引用先前在<see langword="Dispose" />调用时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="83174-367">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="83174-368">有关如何实现<see langword="Dispose(Boolean)" />的详细信息, 请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-368">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="83174-369">有关<see langword="Dispose" /> 和<see cref="M:System.Object.Finalize" />的详细信息, 请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="83174-369">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-370">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否允许将 Internet 协议 (IP) 数据报分段。</span><span class="sxs-lookup"><span data-stu-id="83174-370">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows Internet Protocol (IP) datagrams to be fragmented.</span></span></summary>
        <value><span data-ttu-id="83174-371">如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许数据报分段，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-371"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="83174-372">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="83174-372">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-373">如果数据报的大小超过传输介质的最大传输单位 (MTU), 则需要进行碎片整理。</span><span class="sxs-lookup"><span data-stu-id="83174-373">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="83174-374">数据报可以通过发送主机或中间路由器进行分段。</span><span class="sxs-lookup"><span data-stu-id="83174-374">Datagrams may be fragmented by the sending host or by an intermediate router.</span></span> <span data-ttu-id="83174-375">如果必须将数据报分段, 并<xref:System.Net.Sockets.Socket.DontFragment%2A>设置了选项, 则会丢弃数据报, 并将 Internet 控制消息协议 (ICMP) 错误消息发回到数据报的发件人。</span><span class="sxs-lookup"><span data-stu-id="83174-375">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-376">下面的代码示例演示<xref:System.Net.Sockets.Socket.DontFragment%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-376">The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="83174-377">只能为使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字设置该属性。</span><span class="sxs-lookup"><span data-stu-id="83174-377">This property can be set only for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-378">退出多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-378">Leaves a multicast group.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="83174-379">要退出的多播组的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-379">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span></span></param>
        <summary><span data-ttu-id="83174-380">退出多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-380">Leaves a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-381">方法从由指定<xref:System.Net.IPAddress>的标识的多路广播组收回。 <xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A></span><span class="sxs-lookup"><span data-stu-id="83174-381">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="83174-382">调用<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>方法后, 基础<xref:System.Net.Sockets.Socket>会将 Internet 组管理协议 (IGMP) 数据包发送到路由器, 并从多播组中删除该路由器。</span><span class="sxs-lookup"><span data-stu-id="83174-382">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="83174-383">从组中提取后, 它将无法再接收发送到该组的数据报。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-383">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-384">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-384">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-385">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-385">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-386">下面的示例演示如何通过提供多播地址来删除多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-386">The following example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-387">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-387">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-388">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-388">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-389">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不相符。</span><span class="sxs-lookup"><span data-stu-id="83174-389">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-390"><paramref name="multicastAddr" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-390"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="83174-391">要退出的多播组的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-391">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span></span></param>
        <param name="ifindex"><span data-ttu-id="83174-392">要退出的多播组的本地地址。</span><span class="sxs-lookup"><span data-stu-id="83174-392">The local address of the multicast group to leave.</span></span></param>
        <summary><span data-ttu-id="83174-393">退出多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-393">Leaves a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-394">方法从由指定<xref:System.Net.IPAddress>的标识的多路广播组收回。 <xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A></span><span class="sxs-lookup"><span data-stu-id="83174-394">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="83174-395">调用<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>方法后, 基础<xref:System.Net.Sockets.Socket>会将 Internet 组管理协议 (IGMP) 数据包发送到路由器, 并从多播组中删除该路由器。</span><span class="sxs-lookup"><span data-stu-id="83174-395">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="83174-396">从组中提取后, 它将无法再接收发送到该组的数据报。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-396">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-397">如果收到<xref:System.Net.Sockets.SocketException>, 请<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>使用属性获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-397">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="83174-398">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-398">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-399">下面的代码示例演示如何通过提供多播地址来删除多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-399">The following code example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-400">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-400">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-401">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-401">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-402">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不相符。</span><span class="sxs-lookup"><span data-stu-id="83174-402">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-403"><paramref name="multicastAddr" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-403"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-404">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否可以发送或接收广播数据包。</span><span class="sxs-lookup"><span data-stu-id="83174-404">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> may send or receive broadcast packets.</span></span></summary>
        <value><span data-ttu-id="83174-405">如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许广播数据包，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-405"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows broadcast packets; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="83174-406">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-406">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-407">广播限制为特定子网。</span><span class="sxs-lookup"><span data-stu-id="83174-407">Broadcasting is limited to a specific subnet.</span></span> <span data-ttu-id="83174-408">可以通过将数据包发送到255.255.255.255 来广播到本地子网;或者, 你可以使用定向广播地址, 该地址是 Internet 协议 (IP) 地址的网络部分, 其中的所有位均设置为主机部分。</span><span class="sxs-lookup"><span data-stu-id="83174-408">You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="83174-409">例如, 如果 IP 地址为 192.168.1.40 (a 类地址, 网络部分为前三个八位字节, 主机部分为最后一个八位字节), 则定向广播地址为192.168.1.255。</span><span class="sxs-lookup"><span data-stu-id="83174-409">For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-410">下面的代码示例演示<xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-410">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="83174-411">调用 <see cref="T:System.IAsyncResult" /> 后返回的 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="83174-411">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="83174-412">指定的远程终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-412">The specified remote endpoint.</span></span></param>
        <summary><span data-ttu-id="83174-413">结束挂起的异步接收。</span><span class="sxs-lookup"><span data-stu-id="83174-413">Ends a pending asynchronous receive.</span></span></summary>
        <returns><span data-ttu-id="83174-414">如果成功，则返回包含数据报数据的字节数组。</span><span class="sxs-lookup"><span data-stu-id="83174-414">If successful, an array of bytes that contains datagram data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-415">此方法将在操作完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-415">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="83174-416">若要同步执行此操作, 请<xref:System.Net.Sockets.UdpClient.Receive%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-416">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-417">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginSend%2A>来完成服务器响应的异步接收。</span><span class="sxs-lookup"><span data-stu-id="83174-417">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-418"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-418"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-419">对 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="83174-419"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-420">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />。</span><span class="sxs-lookup"><span data-stu-id="83174-420"><see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-421">尝试访问基础 <see cref="T:System.Net.Sockets.Socket" /> 时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-421">An error occurred when attempting to access the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-422">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-422">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="83174-423">调用 <see cref="T:System.IAsyncResult" /> 后返回的 <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="83174-423">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</span></span></param>
        <summary><span data-ttu-id="83174-424">结束挂起的异步发送。</span><span class="sxs-lookup"><span data-stu-id="83174-424">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="83174-425">如果成功，则返回已发送到 <see cref="T:System.Net.Sockets.UdpClient" /> 的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-425">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-426">此方法将在操作完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-426">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="83174-427">若要同步执行此操作, 请<xref:System.Net.Sockets.UdpClient.Send%2A>使用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-427">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-428">下面的代码示例使用<xref:System.Net.Sockets.UdpClient.BeginSend%2A>来完成服务器请求的异步发送。</span><span class="sxs-lookup"><span data-stu-id="83174-428">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-429"><paramref name="asyncResult" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-429"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-430">对 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法的调用未返回 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="83174-430"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-431">先前曾为异步读取调用过 <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />。</span><span class="sxs-lookup"><span data-stu-id="83174-431"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-432">尝试访问基础套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-432">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-433">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-433">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-434">获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否只允许一个客户端使用端口。</span><span class="sxs-lookup"><span data-stu-id="83174-434">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a port.</span></span></summary>
        <value><span data-ttu-id="83174-435">如果 <see cref="T:System.Net.Sockets.UdpClient" /> 只允许一个客户端使用特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-435"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="83174-436">在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <see langword="true" />；在所有其他版本中，默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-436">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-437">默认情况下, 多个客户端可以使用特定端口;但是, 只有一个客户端可以对发送到端口的网络流量执行操作。</span><span class="sxs-lookup"><span data-stu-id="83174-437">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="83174-438">你可以使用<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>属性来防止多个客户端使用特定端口。</span><span class="sxs-lookup"><span data-stu-id="83174-438">You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="83174-439">在将基础套接字绑定到客户端端口之前, 必须设置此属性。</span><span class="sxs-lookup"><span data-stu-id="83174-439">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="83174-440"><xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>如果调用<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>、、或<xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, 则会将客户端端口绑定为构造函数的副作用, 并且以后不能设置<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>属性 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="83174-440">If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-441">下面的代码示例创建一个<xref:System.Net.Sockets.UdpClient>, 并获取并<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>设置属性。</span><span class="sxs-lookup"><span data-stu-id="83174-441">The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-442">尝试访问基础套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-442">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-443">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-443">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-444">将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-444">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="83174-445">要加入的组的多播 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-445">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <summary><span data-ttu-id="83174-446">将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-446">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-447">方法使用<xref:System.Net.Sockets.UdpClient> 指定<xref:System.Net.IPAddress>的订阅到多播组。 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A></span><span class="sxs-lookup"><span data-stu-id="83174-447">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="83174-448">调用<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>方法后, 基础<xref:System.Net.Sockets.Socket>会将 Internet 组管理协议 (IGMP) 数据包发送到请求多播组成员身份的路由器。</span><span class="sxs-lookup"><span data-stu-id="83174-448">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="83174-449">多播地址范围为224.0.0.0 到239.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-449">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="83174-450">如果在此范围之外指定一个地址, 或者如果请求的路由器未启用多播, <xref:System.Net.Sockets.UdpClient>则将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-450">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-451">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-451">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-452">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-452">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="83174-453">一旦作为多播组的成员与路由器一起列出后, 就能接收发送到指定<xref:System.Net.IPAddress>的多播数据报。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-453">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-454">必须<xref:System.Net.Sockets.UdpClient>使用多播端口号创建, 否则, 将无法接收多播的数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-454">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="83174-455">请不要在<xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>调用方法之前调用方法, 否则<xref:System.Net.Sockets.UdpClient.Receive%2A>方法将不起作用。</span><span class="sxs-lookup"><span data-stu-id="83174-455">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work.</span></span> <span data-ttu-id="83174-456">不需要属于多路广播组即可将数据报发送到多播 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-456">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="83174-457">加入多播组之前, 请确保套接字绑定到端口或终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-457">Before joining a multicast group, make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="83174-458">为此, 可调用接受端口或终结点作为参数的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="83174-458">You do that by calling one of the constructors that accept a port or an endpoint as a parameter.</span></span>  
  
 <span data-ttu-id="83174-459">若要停止接收多播的数据报<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> , 请调用方法<xref:System.Net.IPAddress> , 并提供要从中撤消的组的。</span><span class="sxs-lookup"><span data-stu-id="83174-459">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-460">在 IPv6 情况下, 可以选择多个多播地址范围。</span><span class="sxs-lookup"><span data-stu-id="83174-460">In the IPv6 case, there are several multicast address ranges you can choose from.</span></span> <span data-ttu-id="83174-461">请参阅 IETF RFC 2375。</span><span class="sxs-lookup"><span data-stu-id="83174-461">Please, refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-462">不能对<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>没有特定<xref:System.Net.Sockets.UdpClient>本地端口的构造 ( <xref:System.Net.Sockets.UdpClient.%23ctor>即使用或<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>构造函数) 调用。</span><span class="sxs-lookup"><span data-stu-id="83174-462">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-463">下面的代码示例演示如何通过提供多播地址来联接多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-463">The following code example demonstrates how to join a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-464">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-464">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-465">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-465">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-466">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不相符。</span><span class="sxs-lookup"><span data-stu-id="83174-466">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex"><span data-ttu-id="83174-467">与在其上加入多播组的本地 IP 地址关联的接口索引。</span><span class="sxs-lookup"><span data-stu-id="83174-467">The interface index associated with the local IP address on which to join the multicast group.</span></span></param>
        <param name="multicastAddr"><span data-ttu-id="83174-468">要加入的组的多播 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-468">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <summary><span data-ttu-id="83174-469">将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-469">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-470">加入多播组之前, 请确保套接字绑定到端口或终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-470">Before joining a multicast group, be sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="83174-471">为此, 可以调用接受端口或终结点作为参数的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="83174-471">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
 <span data-ttu-id="83174-472">`infindex`参数用于标识同一链接上的硬件接口。</span><span class="sxs-lookup"><span data-stu-id="83174-472">The `infindex` parameter is used to identify a hardware interface on the same link.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-473">可以从多个多播地址范围中进行选择。</span><span class="sxs-lookup"><span data-stu-id="83174-473">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="83174-474">请参阅 IETF RFC 2375。</span><span class="sxs-lookup"><span data-stu-id="83174-474">Refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-475">不能对<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>没有特定<xref:System.Net.Sockets.UdpClient>本地端口的构造 ( <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType>即使用或<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>构造函数) 调用。</span><span class="sxs-lookup"><span data-stu-id="83174-475">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> constructor).</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-476">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-476">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-477">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-477">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="83174-478">要加入的多播组的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-478">The <see cref="T:System.Net.IPAddress" /> of the multicast group to join.</span></span></param>
        <param name="timeToLive"><span data-ttu-id="83174-479">生存时间 (TTL)，以路由器跃点数为单位。</span><span class="sxs-lookup"><span data-stu-id="83174-479">The Time to Live (TTL), measured in router hops.</span></span></param>
        <summary><span data-ttu-id="83174-480">将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到具有指定生存时间 (TTL) 的多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-480">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group with the specified Time to Live (TTL).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-481">方法使用<xref:System.Net.Sockets.UdpClient> 指定<xref:System.Net.IPAddress>的订阅到多播组。 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A></span><span class="sxs-lookup"><span data-stu-id="83174-481">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="83174-482">调用<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>方法后, 基础<xref:System.Net.Sockets.Socket>会将 Internet 组管理协议 (IGMP) 数据包发送到请求多播组成员身份的路由器。</span><span class="sxs-lookup"><span data-stu-id="83174-482">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="83174-483">多播地址范围为224.0.0.0 到239.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-483">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="83174-484">如果在此范围之外指定一个地址, 或者如果请求的路由器未启用多播, <xref:System.Net.Sockets.UdpClient>则将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-484">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-485">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-485">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-486">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-486">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="83174-487">`timeToLive`参数指定多播数据报在被丢弃之前允许的路由器跃点数。</span><span class="sxs-lookup"><span data-stu-id="83174-487">The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.</span></span> <span data-ttu-id="83174-488">一旦作为多播组的成员与路由器一起列出后, 就能接收发送到指定<xref:System.Net.IPAddress>的多播数据报。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-488">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-489">必须使用多播端口<xref:System.Net.Sockets.UdpClient>号创建, 否则将无法接收多播的数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-489">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="83174-490">请不要在<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>调用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法之前调用方法, 否则 receive 方法将不起作用。</span><span class="sxs-lookup"><span data-stu-id="83174-490">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work.</span></span> <span data-ttu-id="83174-491">不需要属于多路广播组即可将数据报发送到多播 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="83174-491">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="83174-492">联接多播组之前, 请确保已将套接字绑定到端口或终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-492">Before joining a multicast group make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="83174-493">为此, 可以调用接受作为参数的一个或多个端口作为参数的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="83174-493">You do that by calling one of the constructors that accept as parameter a port or an endpoint.</span></span>  
  
 <span data-ttu-id="83174-494">若要停止接收多播的数据报<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> , 请调用方法<xref:System.Net.IPAddress> , 并提供要从中撤消的组的。</span><span class="sxs-lookup"><span data-stu-id="83174-494">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-495">不能对<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>没有特定<xref:System.Net.Sockets.UdpClient>本地端口的构造 ( <xref:System.Net.Sockets.UdpClient.%23ctor>即使用或<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>构造函数) 调用。</span><span class="sxs-lookup"><span data-stu-id="83174-495">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-496">下面的示例演示如何通过提供两个参数、一个多播地址和一个表示 TTL 的数字来联接多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-496">The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="83174-497">所提供的 TTL 不在 0 和 255 之间</span><span class="sxs-lookup"><span data-stu-id="83174-497">The TTL provided is not between 0 and 255</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-498">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-498">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-499">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-499">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-500"><paramref name="multicastAddr" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-500"><paramref name="multicastAddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="83174-501">IP 地址与定义套接字的寻址方案所用的 <see cref="T:System.Net.Sockets.AddressFamily" /> 值不相符。</span><span class="sxs-lookup"><span data-stu-id="83174-501">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="multicastAddr"><span data-ttu-id="83174-502">要加入的组的多播 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-502">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span></span></param>
        <param name="localAddress"><span data-ttu-id="83174-503">本地 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="83174-503">The local <see cref="T:System.Net.IPAddress" />.</span></span></param>
        <summary><span data-ttu-id="83174-504">将 <see cref="T:System.Net.Sockets.UdpClient" /> 添加到多播组。</span><span class="sxs-lookup"><span data-stu-id="83174-504">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-505">加入多播组之前, 请确保已将套接字绑定到端口或终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-505">Before you join a multicast group, be sure that the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="83174-506">为此, 可以调用接受端口或终结点作为参数的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="83174-506">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-507">可以从多个多播地址范围中进行选择。</span><span class="sxs-lookup"><span data-stu-id="83174-507">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="83174-508">你可以在 IETF RFC 2375 中找到它们。</span><span class="sxs-lookup"><span data-stu-id="83174-508">You can find them in the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-509">不能对<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>没有特定<xref:System.Net.Sockets.UdpClient>本地端口的构造 ( <xref:System.Net.Sockets.UdpClient.%23ctor>即使用或<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>构造函数) 调用。</span><span class="sxs-lookup"><span data-stu-id="83174-509">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-510">下面的代码示例演示<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>方法的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-510">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-511">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-511">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-512">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-512">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-513">获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否将输出多播数据包传递给发送应用程序。</span><span class="sxs-lookup"><span data-stu-id="83174-513">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether outgoing multicast packets are delivered to the sending application.</span></span></summary>
        <value><span data-ttu-id="83174-514">如果 <see cref="T:System.Net.Sockets.UdpClient" /> 接收传出的多路广播数据包，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="83174-514"><see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-515">多播是 Internet 上多对多通信的可扩展方法。</span><span class="sxs-lookup"><span data-stu-id="83174-515">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="83174-516">如果某个进程订阅了多播地址, 则该进程发送的任何数据包都将由每个已订阅多路广播地址的进程接收。</span><span class="sxs-lookup"><span data-stu-id="83174-516">If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-517">下面的代码示例演示<xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-517">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive :  -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="83174-518">一个 <see cref="T:System.Net.IPEndPoint" />，它表示从其发送数据的远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-518">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote host from which the data was sent.</span></span></param>
        <summary><span data-ttu-id="83174-519">返回由远程主机发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-519">Returns a UDP datagram that was sent by a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-520">一个 <see cref="T:System.Byte" /> 类型的数组，它包含数据报数据。</span><span class="sxs-lookup"><span data-stu-id="83174-520">An array of type <see cref="T:System.Byte" /> that contains datagram data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-521">此<xref:System.Net.Sockets.UdpClient.Receive%2A>方法将一直阻止到数据报从远程主机到达之前。</span><span class="sxs-lookup"><span data-stu-id="83174-521">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host.</span></span> <span data-ttu-id="83174-522">当数据可用时, 该<xref:System.Net.Sockets.UdpClient.Receive%2A>方法将读取第一个排队数据报, 并将数据部分作为字节数组返回。</span><span class="sxs-lookup"><span data-stu-id="83174-522">When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array.</span></span> <span data-ttu-id="83174-523">此方法用发送`remoteEP`方的<xref:System.Net.IPAddress>和端口号填充参数。</span><span class="sxs-lookup"><span data-stu-id="83174-523">This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.</span></span>  
  
 <span data-ttu-id="83174-524">如果在<xref:System.Net.Sockets.UdpClient.Connect%2A>方法中指定默认远程主机, 则该<xref:System.Net.Sockets.UdpClient.Receive%2A>方法将仅接受来自该主机的数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-524">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only.</span></span> <span data-ttu-id="83174-525">所有其他数据报将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="83174-525">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="83174-526">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-526">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-527">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-527">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-528">如果打算接收多播数据报, 请不要在<xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient.Receive%2A>调用方法之前调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-528">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="83174-529">用于<xref:System.Net.Sockets.UdpClient>接收数据报的必须使用多播端口号来创建。</span><span class="sxs-lookup"><span data-stu-id="83174-529">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-530">下面的示例演示<xref:System.Net.Sockets.UdpClient.Receive%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="83174-530">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="83174-531"><xref:System.Net.Sockets.UdpClient.Receive%2A>方法阻止执行, 直到收到消息。</span><span class="sxs-lookup"><span data-stu-id="83174-531">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until it receives a message.</span></span> <span data-ttu-id="83174-532">使用传递<xref:System.Net.IPEndPoint>给<xref:System.Net.Sockets.UdpClient.Receive%2A>的将显示响应主机的标识。</span><span class="sxs-lookup"><span data-stu-id="83174-532">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-533">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-533">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-534">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-534">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="83174-535">异步返回由远程主机发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-535">Returns a UDP datagram asynchronously that was sent by a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-536">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="83174-536">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-537">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="83174-537">This operation will not block.</span></span> <span data-ttu-id="83174-538">收到 UDP <xref:System.Threading.Tasks.Task%601>数据包后, 将完成返回的 > 对象。</span><span class="sxs-lookup"><span data-stu-id="83174-538">The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.</span></span>  
  
 <span data-ttu-id="83174-539">如果在<xref:System.Net.Sockets.UdpClient.Connect%2A>方法中指定默认远程主机, 则此方法仅接受来自该主机的数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-539">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only.</span></span> <span data-ttu-id="83174-540">所有其他数据报将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="83174-540">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="83174-541">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-541">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-542">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-542">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="83174-543">如果打算接收多播数据报, 请不要在<xref:System.Net.Sockets.UdpClient.Connect%2A>调用此方法之前调用方法。</span><span class="sxs-lookup"><span data-stu-id="83174-543">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method.</span></span> <span data-ttu-id="83174-544">用于<xref:System.Net.Sockets.UdpClient>接收数据报的必须使用多播端口号来创建。</span><span class="sxs-lookup"><span data-stu-id="83174-544">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-545">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="83174-545">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-546">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-546">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-547">将 UDP 数据报发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-547">Sends a UDP datagram to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="83174-548">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-548">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-549">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-549">The number of bytes in the datagram.</span></span></param>
        <summary><span data-ttu-id="83174-550">将 UDP 数据报发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-550">Sends a UDP datagram to a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-551">已发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-551">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-552">此重载将数据报发送到在<xref:System.Net.Sockets.UdpClient.Connect%2A>方法中建立的远程主机, 并返回发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-552">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent.</span></span> <span data-ttu-id="83174-553">如果在调用此重载<xref:System.Net.Sockets.UdpClient.Connect%2A>之前未调用, 则该<xref:System.Net.Sockets.UdpClient.Send%2A>方法将引发<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="83174-553">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-554">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-554">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-555">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-555">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-556">如果要将数据报发送到其他远程主机, 则必须调用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法并指定所需的远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-556">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="83174-557">使用其他<xref:System.Net.Sockets.UdpClient.Send%2A>方法重载之一将数据报发送到广播地址。</span><span class="sxs-lookup"><span data-stu-id="83174-557">Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-558">下面的示例演示<xref:System.Net.Sockets.UdpClient.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="83174-558">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-559">使用此重载之前, 必须建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-559">You must establish a default remote host prior to using this overload.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-560"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-560"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-561"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-561">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-562"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-562">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-563">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-563">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="83174-564">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-564">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-565">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-565">The number of bytes in the datagram.</span></span></param>
        <param name="endPoint"><span data-ttu-id="83174-566">一个 <see cref="T:System.Net.IPEndPoint" />，表示要将数据报发送到的主机和端口。</span><span class="sxs-lookup"><span data-stu-id="83174-566">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span></span></param>
        <summary><span data-ttu-id="83174-567">将 UDP 数据报发送到位于指定远程终结点的主机。</span><span class="sxs-lookup"><span data-stu-id="83174-567">Sends a UDP datagram to the host at the specified remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="83174-568">已发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-568">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-569"><xref:System.Net.Sockets.UdpClient.Send%2A>方法将数据报发送到指定的终结点, 并返回成功发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-569">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="83174-570">在调用此重载之前, 必须首先创建一个<xref:System.Net.IPEndPoint> , 它使用要将数据报传递到的远程主机的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-570">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="83174-571">可以通过<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> <xref:System.Net.IPEndPoint>为的<xref:System.Net.IPAddress.Address%2A>属性指定来将数据报发送到默认广播地址255.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-571">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="83174-572">创建<xref:System.Net.IPEndPoint>后, 将其作为`endPoint`参数传递<xref:System.Net.Sockets.UdpClient.Send%2A>给方法。</span><span class="sxs-lookup"><span data-stu-id="83174-572">After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="83174-573">如果要将数据报发送到任何其他广播地址, 请使用<xref:System.Net.Sockets.UdpClient.Client%2A>方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-573">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="83174-574">你还可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-574">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-575">如果已`endPoint` <xref:System.Net.Sockets.UdpClient.Connect%2A>使用方法建立远程主机, 请不要向此方法提供参数。</span><span class="sxs-lookup"><span data-stu-id="83174-575">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-576">如果这样做, 则<xref:System.Net.Sockets.UdpClient.Send%2A>该方法将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-576">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-577">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-577">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-578">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-578">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-579">下面的示例演示<xref:System.Net.Sockets.UdpClient.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="83174-579">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-580">此示例使用<xref:System.Net.IPEndPoint>指定目标主机。</span><span class="sxs-lookup"><span data-stu-id="83174-580">This example uses an <xref:System.Net.IPEndPoint> to specify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-581"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-581"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-582"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-582"><see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-583"><see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="83174-583"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-584">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-584">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram"><span data-ttu-id="83174-585">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-585">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-586">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-586">The number of bytes in the datagram.</span></span></param>
        <param name="hostname"><span data-ttu-id="83174-587">要将数据报发送到的远程主机的名称。</span><span class="sxs-lookup"><span data-stu-id="83174-587">The name of the remote host to which you intend to send the datagram.</span></span></param>
        <param name="port"><span data-ttu-id="83174-588">要与其进行通信的远程端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-588">The remote port number with which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="83174-589">将 UDP 数据报发送到指定的远程主机上的指定端口。</span><span class="sxs-lookup"><span data-stu-id="83174-589">Sends a UDP datagram to a specified port on a specified remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-590">已发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-590">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-591">方法将数据报发送到`hostname`和`port`参数指定的值, 并返回成功发送的字节数。 <xref:System.Net.Sockets.UdpClient.Send%2A></span><span class="sxs-lookup"><span data-stu-id="83174-591">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="83174-592">可以通过为`hostname`参数值指定 "255.255.255.255", 将数据报发送到默认的广播地址。</span><span class="sxs-lookup"><span data-stu-id="83174-592">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="83174-593">如果要将数据报发送到任何其他广播地址, 请使用<xref:System.Net.Sockets.UdpClient.Client%2A>方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-593">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="83174-594">你还可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-594">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="83174-595">如果已使用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法建立远程主机, 请不要向此方法提供主机名或端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-595">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-596">如果这样做, 则<xref:System.Net.Sockets.UdpClient.Send%2A>该方法将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-596">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-597">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-597">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-598">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-598">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-599">下面的示例演示<xref:System.Net.Sockets.UdpClient.Send%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="83174-599">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="83174-600">此示例使用主机名和端口号来标识目标主机。</span><span class="sxs-lookup"><span data-stu-id="83174-600">This example uses a host name and a port number to identify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-601"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-601"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-602"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-602">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-603"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-603">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-604">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-604">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="83174-605">将 UDP 数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-605">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-606">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-606">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-607">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-607">The number of bytes in the datagram.</span></span></param>
        <summary><span data-ttu-id="83174-608">将 UDP 数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-608">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-609">返回 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="83174-609">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-610">此重载将数据报发送到在<xref:System.Net.Sockets.UdpClient.Connect%2A>方法中建立的远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-610">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-611">如果在调用此重载<xref:System.Net.Sockets.UdpClient.Connect%2A>之前未调用, 则该方法将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-611">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-612">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-612">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-613">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-613">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="83174-614">如果要将数据报发送到其他远程主机, 则必须调用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法并指定所需的远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-614">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="83174-615">使用其他<xref:System.Net.Sockets.UdpClient.SendAsync%2A>方法重载之一将数据报发送到广播地址。</span><span class="sxs-lookup"><span data-stu-id="83174-615">Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-616"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-616"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-617"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-617">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-618"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-618">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-619">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-619">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-620">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-620">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-621">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-621">The number of bytes in the datagram.</span></span></param>
        <param name="endPoint"><span data-ttu-id="83174-622">一个 <see cref="T:System.Net.IPEndPoint" />，表示要将数据报发送到的主机和端口。</span><span class="sxs-lookup"><span data-stu-id="83174-622">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span></span></param>
        <summary><span data-ttu-id="83174-623">将 UDP 数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-623">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-624">返回 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="83174-624">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-625">此方法将数据报发送到指定的终结点。</span><span class="sxs-lookup"><span data-stu-id="83174-625">This method sends datagrams to the specified endpoint.</span></span> <span data-ttu-id="83174-626">在调用此重载之前, 必须首先创建一个<xref:System.Net.IPEndPoint> , 它使用要将数据报传递到的远程主机的 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-626">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="83174-627">可以通过<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> <xref:System.Net.IPEndPoint>为的<xref:System.Net.IPAddress.Address%2A>属性指定来将数据报发送到默认广播地址255.255.255.255。</span><span class="sxs-lookup"><span data-stu-id="83174-627">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="83174-628">创建<xref:System.Net.IPEndPoint>后, 将其`endPoint`作为参数传递给此方法。</span><span class="sxs-lookup"><span data-stu-id="83174-628">After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="83174-629">如果要将数据报发送到任何其他广播地址, 请使用<xref:System.Net.Sockets.UdpClient.Client%2A>方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-629">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="83174-630">你还可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-630">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="83174-631">如果已`endPoint` <xref:System.Net.Sockets.UdpClient.Connect%2A>使用方法建立远程主机, 请不要向此方法提供参数。</span><span class="sxs-lookup"><span data-stu-id="83174-631">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-632">如果执行此操作, 则此方法将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-632">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-633">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-633">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-634">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-634">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-635"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-635"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-636"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-636"><see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-637"><see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="83174-637"><see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-638">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-638">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram"><span data-ttu-id="83174-639">一个 <see cref="T:System.Byte" /> 类型的数组，它指定你打算以字节数组形式发送的 UDP 数据报。</span><span class="sxs-lookup"><span data-stu-id="83174-639">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="83174-640">数据报中的字节数。</span><span class="sxs-lookup"><span data-stu-id="83174-640">The number of bytes in the datagram.</span></span></param>
        <param name="hostname"><span data-ttu-id="83174-641">要将数据报发送到的远程主机的名称。</span><span class="sxs-lookup"><span data-stu-id="83174-641">The name of the remote host to which you intend to send the datagram.</span></span></param>
        <param name="port"><span data-ttu-id="83174-642">要与其进行通信的远程端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-642">The remote port number with which you intend to communicate.</span></span></param>
        <summary><span data-ttu-id="83174-643">将 UDP 数据报异步发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-643">Sends a UDP datagram asynchronously to a remote host.</span></span></summary>
        <returns><span data-ttu-id="83174-644">返回 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="83174-644">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-645">此方法将数据报发送到由`hostname`和`port`参数指定的值。</span><span class="sxs-lookup"><span data-stu-id="83174-645">This method sends datagrams to the values specified by the `hostname` and `port` parameters.</span></span> <span data-ttu-id="83174-646">可以通过为`hostname`参数值指定 "255.255.255.255", 将数据报发送到默认的广播地址。</span><span class="sxs-lookup"><span data-stu-id="83174-646">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="83174-647">如果要将数据报发送到任何其他广播地址, 请使用<xref:System.Net.Sockets.UdpClient.Client%2A>方法获取基础<xref:System.Net.Sockets.Socket>, 并将套接字选项设置为<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="83174-647">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="83174-648">你还可以使用<xref:System.Net.Sockets.Socket>类还原为。</span><span class="sxs-lookup"><span data-stu-id="83174-648">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="83174-649">如果已使用<xref:System.Net.Sockets.UdpClient.Connect%2A>方法建立远程主机, 请不要向此方法提供主机名或端口号。</span><span class="sxs-lookup"><span data-stu-id="83174-649">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="83174-650">如果执行此操作, 则此方法将<xref:System.Net.Sockets.SocketException>引发。</span><span class="sxs-lookup"><span data-stu-id="83174-650">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="83174-651">如果收到<xref:System.Net.Sockets.SocketException>, 请使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="83174-651">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="83174-652">获取此代码后, 可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档, 以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="83174-652">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="83174-653"><paramref name="dgram" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="83174-653"><paramref name="dgram" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="83174-654"><see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</span><span class="sxs-lookup"><span data-stu-id="83174-654">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="83174-655"><see cref="T:System.Net.Sockets.UdpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="83174-655">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="83174-656">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="83174-656">An error occurred when accessing the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="83174-657">释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="83174-657">Releases all resources used by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="83174-658">使用<xref:System.Net.Sockets.UdpClient>完后, 调用 IDisposable。</span><span class="sxs-lookup"><span data-stu-id="83174-658">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="83174-659">IDisposable 方法会使<xref:System.Net.Sockets.UdpClient>处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="83174-659">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.UdpClient> in an unusable state.</span></span> <span data-ttu-id="83174-660">调用 IDisposable 之后, 必须释放对的<xref:System.Net.Sockets.UdpClient>所有引用, 这样垃圾回收器才能收回占用的内存。 <xref:System.Net.Sockets.UdpClient></span><span class="sxs-lookup"><span data-stu-id="83174-660">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.UdpClient> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.UdpClient> was occupying.</span></span> <span data-ttu-id="83174-661">有关详细信息, 请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="83174-661">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="83174-662">在释放对的<xref:System.Net.Sockets.UdpClient>最后一个引用之前, 请始终调用 IDisposable。</span><span class="sxs-lookup"><span data-stu-id="83174-662">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="83174-663">否则，在垃圾回收器调用 <xref:System.Net.Sockets.UdpClient> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="83174-663">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.UdpClient> object's `Finalize` method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="83174-664">获取或设置一个值，它指定由 <see cref="T:System.Net.Sockets.UdpClient" /> 发送的 Internet 协议 (IP) 数据包的生存时间 (TTL)。</span><span class="sxs-lookup"><span data-stu-id="83174-664">Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.UdpClient" />.</span></span></summary>
        <value><span data-ttu-id="83174-665">TTL 值。</span><span class="sxs-lookup"><span data-stu-id="83174-665">The TTL value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="83174-666">TTL 值表示在路由器丢弃数据包并且 Internet 控制消息协议 (ICMP) "超过 TTL" 错误消息返回给发件人之前, 数据包可以遍历的路由器的最大数目。</span><span class="sxs-lookup"><span data-stu-id="83174-666">The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="83174-667">下面的代码示例演示<xref:System.Net.Sockets.UdpClient.Ttl%2A>属性的用法。</span><span class="sxs-lookup"><span data-stu-id="83174-667">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Ttl%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

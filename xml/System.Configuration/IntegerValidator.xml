<Type Name="IntegerValidator" FullName="System.Configuration.IntegerValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9dea97037bb00c7f21dfdbc8972c1afeef9a9131" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69129352" /></Metadata><TypeSignature Language="C#" Value="public class IntegerValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntegerValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IntegerValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class IntegerValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class IntegerValidator : System::Configuration::ConfigurationValidatorBase" />
  <TypeSignature Language="F#" Value="type IntegerValidator = class&#xA;    inherit ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对 <see cref="T:System.Int32" /> 值进行验证。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.IntegerValidator>类用于确保整数满足特定的条件。 在创建<xref:System.Configuration.IntegerValidator>类的实例时, 将建立用于验证的条件。 具有两个参数的构造函数可确保所验证的整数符合最小值和最大值。<xref:System.Configuration.IntegerValidator.%23ctor%2A> 带有<xref:System.Configuration.IntegerValidator.%23ctor%2A>三个参数的构造函数同时检查最小<xref:System.Int32>值和最大值, 以及要验证的值是否在指定的范围内。 具有<xref:System.Configuration.IntegerValidator.%23ctor%2A>四个参数的构造函数检查前面的三个参数, 并<xref:System.Int32>检查该值是否与特定的解析相等。  
  
 <xref:System.Configuration.IntegerValidator.CanValidate%2A>方法确定所验证的对象类型是否与预期的类型匹配。 要验证的对象作为<xref:System.Configuration.IntegerValidator.Validate%2A>方法的参数进行传递。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Configuration.IntegerValidator>类型。  
  
 [!code-csharp[System.Configuration.IntegerValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#1)]
 [!code-vb[System.Configuration.IntegerValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue);" />
      <MemberSignature Language="F#" Value="new System.Configuration.IntegerValidator : int * int -&gt; System.Configuration.IntegerValidator" Usage="new System.Configuration.IntegerValidator (minValue, maxValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">指定最小值的 <see cref="T:System.Int32" /> 对象。</param>
        <param name="maxValue">指定最大值的 <see cref="T:System.Int32" /> 对象。</param>
        <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:System.Configuration.IntegerValidator.%23ctor%2A>构造函数可确保所验证的整数遵循最小和最大长度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer, rangeIsExclusive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="F#" Value="new System.Configuration.IntegerValidator : int * int * bool -&gt; System.Configuration.IntegerValidator" Usage="new System.Configuration.IntegerValidator (minValue, maxValue, rangeIsExclusive)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="minValue">指定最小值的 <see cref="T:System.Int32" /> 对象。</param>
        <param name="maxValue">指定最大值的 <see cref="T:System.Int32" /> 对象。</param>
        <param name="rangeIsExclusive">若指定验证范围是独占的，则为 <see langword="true" />。 非独占意味着要验证的值必须在指定范围内；独占意味着要验证的值必须小于最小值或大于最大值。</param>
        <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建<xref:System.Configuration.IntegerValidator>类的实例时, 此<xref:System.Configuration.IntegerValidator.%23ctor%2A>构造函数同时检查最小值和最<xref:System.Int32>大值, 以及验证范围是否为排他。 `true` <xref:System.Int32> `minValue`当参数设置为时, 值不得介于和`maxValue`参数值之间。 `rangeIsExclusive`  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Configuration.IntegerValidator.%23ctor%2A>构造函数。 此代码示例是为<xref:System.Configuration.IntegerValidator>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Configuration.IntegerValidator#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#2)]
 [!code-vb[System.Configuration.IntegerValidator#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive, int resolution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive, int32 resolution) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer, rangeIsExclusive As Boolean, resolution As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive, int resolution);" />
      <MemberSignature Language="F#" Value="new System.Configuration.IntegerValidator : int * int * bool * int -&gt; System.Configuration.IntegerValidator" Usage="new System.Configuration.IntegerValidator (minValue, maxValue, rangeIsExclusive, resolution)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
        <Parameter Name="resolution" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">一个 <see cref="T:System.Int32" /> 对象，指定整数值的最小长度。</param>
        <param name="maxValue">一个 <see cref="T:System.Int32" /> 对象，指定整数值的最大长度。</param>
        <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，指定验证范围是否独占。</param>
        <param name="resolution">一个 <see cref="T:System.Int32" /> 对象，指定必须匹配的值。</param>
        <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要<xref:System.Int32>验证的值必须等于`resolution`值才能通过验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="resolution" /> 小于 <see langword="0" />。  
  
- 或 - 
 <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberSignature Language="F#" Value="override this.CanValidate : Type -&gt; bool" Usage="integerValidator.CanValidate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">对象的类型。</param>
        <summary>确定是否可以验证该对象的类型。</summary>
        <returns>如果 <paramref name="type" /> 参数与 <see cref="T:System.Int32" /> 值相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Configuration.IntegerValidator.CanValidate%2A> 方法。 此代码示例是为<xref:System.Configuration.IntegerValidator>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Configuration.IntegerValidator#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#3)]
 [!code-vb[System.Configuration.IntegerValidator#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Validate : obj -&gt; unit" Usage="integerValidator.Validate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要验证的值。</param>
        <summary>确定对象的值是否有效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.IntegerValidator>对象包含验证整数对象所需的规则。 创建<xref:System.Configuration.IntegerValidator>类的实例时, 将建立规则。 要验证的整数对象作为<xref:System.Configuration.IntegerValidator.Validate%2A>方法的参数进行传递。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Configuration.IntegerValidator.Validate%2A> 方法。 此代码示例是为<xref:System.Configuration.IntegerValidator>类提供的更大示例的一部分。  
  
 [!code-csharp[System.Configuration.IntegerValidator#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#4)]
 [!code-vb[System.Configuration.IntegerValidator#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9969ebfed1c4d5ee33c68817c29ef43bc01f7aa4" /><Meta Name="ms.sourcegitcommit" Value="ea104bc7868886a205b1df30baed6ca34ff70ecb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/20/2019" /><Meta Name="ms.locfileid" Value="68369008" /></Metadata><TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a5bf1-101">提供对并行循环和区域的支持。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-101">Provides support for parallel loops and regions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-102"><xref:System.Threading.Tasks.Parallel>类为常见操作 (如 for 循环、每个循环和执行一组语句) 提供了基于库的数据并行替换。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-103">此示例演示了使用多个语言构造实现并行循环的几种方法。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="a5bf1-104">的所有公共和受保护<see cref="T:System.Threading.Tasks.Parallel" />的成员都是线程安全的, 可从多个线程并发使用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="a5bf1-105">数据并行（任务并行库）</span><span class="sxs-lookup"><span data-stu-id="a5bf1-105">Data Parallelism (Task Parallel Library)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="a5bf1-106">与 .NET Framework 并行编程的示例</span><span class="sxs-lookup"><span data-stu-id="a5bf1-106">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a5bf1-107">执行 <see langword="for" /> 循环，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-107">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-108">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-108">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-109">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-109">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-110">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-110">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-111">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-111">Executes a <see langword="for" /> loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-112">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-112">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-113">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-114">提供两个参数:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="a5bf1-115">一个<xref:System.Int32>值, 该值表示迭代次数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="a5bf1-116">可用于提前中断循环的实例。<xref:System.Threading.Tasks.ParallelLoopState></span><span class="sxs-lookup"><span data-stu-id="a5bf1-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="a5bf1-117"><xref:System.Threading.Tasks.ParallelLoopState>对象是由编译器创建的; 它不能在用户代码中实例化。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="a5bf1-118">调用方法会`for`通知操作, 在当前的迭代之后, 无需执行迭代。 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A></span><span class="sxs-lookup"><span data-stu-id="a5bf1-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="a5bf1-119">不过, 如果所有迭代尚未执行, 则仍必须执行当前的所有迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="a5bf1-120">因此, 调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>类似于在一种语言 (如C#) 中`for`使用传统循环内的中断操作, 但它不是完美的替代方法:例如, 无法保证当前的迭代不会执行。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="a5bf1-121">如果在不需要当前迭代之前执行所有迭代, 请使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法, 而不是使用。 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A></span><span class="sxs-lookup"><span data-stu-id="a5bf1-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="a5bf1-122">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 会`for`通知循环, 它可能会放弃所有剩余迭代, 而不管它们是在当前迭代之前还是之后, 因为所有必需的工作都已完成。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="a5bf1-123">但是, 与一样<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, 不能保证不会执行其他迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="a5bf1-124">如果某个循环过早结束, 则<xref:System.Threading.Tasks.ParallelLoopResult>返回的结构将包含有关该循环完成的相关信息。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="a5bf1-125">如果`fromInclusive`大于或`toExclusive`等于, 则该方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-126">下面的示例并行执行最多100迭代的循环。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="a5bf1-127">每个迭代都将暂停1到1000毫秒的随机间隔。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="a5bf1-128">随机生成的值确定调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法的循环迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="a5bf1-129">如示例的输出所示, 在调用<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法后, 索引大于属性值的任何迭代都不会开始。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="a5bf1-130">由于调用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法时循环的迭代仍可能会执行, 因此每次迭代都会<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType>调用属性来检查<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>其他迭代是否已调用方法。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="a5bf1-131">如果属性值为`true`, 则迭代会检查<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>属性的值, 如果该值大于当前迭代的索引值, 则会立即返回。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-132"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-132">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-133">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-133">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-134">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-134">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-135">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-135">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-136">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-136">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-137">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-137">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-138">执行 <see langword="for" /> 循环，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-138">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-139">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-139">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-140">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-141">提供迭代次数 (<xref:System.Int32>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="a5bf1-142">如果`fromInclusive`大于或`toExclusive`等于, 则该方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-143">下面的示例<xref:System.Threading.Tasks.Parallel.For%2A>将方法用于100调用的委托, 该委托生成随机字节值并计算其总和。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-144"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-144">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-145">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-145">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-146">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-146">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-147">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-147">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-148">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-148">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-149">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-149">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-150">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-150">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-151">一个 <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 结构，其中包含有关已完成的循环部分的信息。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-152">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-153">提供了以下参数: 迭代计数 (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState>以及可能用于提前断开循环的实例。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="a5bf1-154">调用方法会`for`通知操作: 在当前的迭代之后无需执行迭代, 而在当前迭代之前的所有迭代都将执行。 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A></span><span class="sxs-lookup"><span data-stu-id="a5bf1-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="a5bf1-155">因此, 调用 Break 类似于一种语言 (如`for` C#) 中的传统循环内使用中断操作, 但它不是完美的替代方法:例如, 无法保证当前的迭代不会执行。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="a5bf1-156">如果在不需要当前迭代之前执行所有迭代, 请使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法, 而不是使用。 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A></span><span class="sxs-lookup"><span data-stu-id="a5bf1-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="a5bf1-157">调用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 会`for`通知循环, 它可能会放弃所有剩余迭代, 而不管它们是在当前迭代之前还是之后, 因为所有必需的工作都已完成。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="a5bf1-158">但是, 与一样<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, 不能保证不会执行其他迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="a5bf1-159">如果某个循环过早结束, 则<xref:System.Threading.Tasks.ParallelLoopResult>返回的结构将包含有关该循环完成的相关信息。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="a5bf1-160">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-161"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-161">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-162">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-162">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-163">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-163">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-164">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-164">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-165">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-165">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-166">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-166">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-167">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-167">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-168">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-168">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-169">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-170">提供迭代次数 (<xref:System.Int64>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="a5bf1-171">如果`fromInclusive`大于或`toExclusive`等于, 则该方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-172"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-172">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-173">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-173">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-174">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-174">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-175">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-175">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-176">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-176">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-177">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-177">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-178">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-178">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-179">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-179">Executes a <see langword="for" /> loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-180">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-180">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-181">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-182">提供了以下参数: 迭代计数 (<xref:System.Int32>), <xref:System.Threading.Tasks.ParallelLoopState>以及可能用于提前断开循环的实例。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="a5bf1-183">如果`fromInclusive`大于或`toExclusive`等于, 则该方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-184">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-185"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-185">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-186">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-186">-or-</span></span> 
<span data-ttu-id="a5bf1-187"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-188">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-188">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-189">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-190">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-190">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-191">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-191">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-192">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-192">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-193">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-193">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-194">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-194">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-195">执行 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-195">Executes a <see langword="for" /> loop in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-196">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-196">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-197">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-198">提供迭代次数 (<xref:System.Int32>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="a5bf1-199">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-200">下面的示例演示如何取消并行循环:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-201">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-202"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-202">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-203">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-203">-or-</span></span> 
<span data-ttu-id="a5bf1-204"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-205">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-205">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-206">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-207">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-207">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-208">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-208">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-209">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-209">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-210">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-210">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-211">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-211">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-212">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-212">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-213">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-213">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-214">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-215">提供了以下参数: 迭代计数 (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState>以及可能用于提前断开循环的实例。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="a5bf1-216">如果`fromInclusive`大于或`toExclusive`等于, 则该方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-217">下面的示例演示如何将<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法<xref:System.Threading.Tasks.ParallelOptions>用于对象:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-218">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-219"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-219">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-220">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-220">-or-</span></span> 
<span data-ttu-id="a5bf1-221"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-222">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-222">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-223">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-224">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-224">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-225">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-225">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-226">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-226">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-227">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-227">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-228">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-228">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-229">执行具有 64 位索引的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-229">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-230">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-230">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-231">支持64位索引。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="a5bf1-232">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-233">提供迭代次数 (<xref:System.Int64>) 作为参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="a5bf1-234">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-235">下面的示例演示如何使用<xref:System.Threading.Tasks.ParallelOptions>来指定自定义任务计划程序:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-236">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-237"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-237">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-238">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-238">-or-</span></span> 
<span data-ttu-id="a5bf1-239"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-240">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-240">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-241">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-242">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-242">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-243">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-243">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-244">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-244">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-245">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-245">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-246">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-246">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-247">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-247">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-248">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-248">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-249">执行具有线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-249">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-250">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-250">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-251">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-252">提供了以下参数: 迭代计数 (<xref:System.Int32>) <xref:System.Threading.Tasks.ParallelLoopState> 、可能用于提前中断循环的实例, 以及可能在同一线程上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-253">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-254">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-255">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-256">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-257">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-258">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-259">此<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-260">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="a5bf1-261">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="a5bf1-262">有关使用此方法的示例, 请参阅[如何:编写具有线程局部变量的 Parallel.For 循环](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-263"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-263">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-264">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-264">-or-</span></span> 
<span data-ttu-id="a5bf1-265"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-266">-or-</span></span> 
<span data-ttu-id="a5bf1-267"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-268">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-268">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-269">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-269">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-270">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-270">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-271">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-271">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-272">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-272">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-273">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-273">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-274">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-274">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-275">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-275">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-276">执行具有 64 位索引和线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-276">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-277">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-277">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-278">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-279">提供了以下参数: 迭代计数 (<xref:System.Int64>) <xref:System.Threading.Tasks.ParallelLoopState> 、可能用于提前中断循环的实例, 以及可能在同一任务上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="a5bf1-280">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-281">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-282">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-283">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-284">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-285">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-286">此<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-287">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="a5bf1-288">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="a5bf1-289">有关使用此方法的示例, 请参阅[如何:编写具有线程局部变量的 Parallel.For 循环](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-290"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-290">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-291">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-291">-or-</span></span> 
<span data-ttu-id="a5bf1-292"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-293">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-293">-or-</span></span> 
<span data-ttu-id="a5bf1-294"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-295">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-295">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-296">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-296">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-297">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-297">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-298">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-298">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-299">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-299">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-300">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-300">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-301">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-301">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-302">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-302">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-303">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-303">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-304">执行具有线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-304">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-305">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-305">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-306">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-307">提供了以下参数: 迭代计数 (<xref:System.Int32>) <xref:System.Threading.Tasks.ParallelLoopState> 、可能用于提前中断循环的实例, 以及可能在同一任务上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="a5bf1-308">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-309">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-310">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-311">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-312">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-313">可以在多个线程上同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-314">此<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-315">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="a5bf1-316">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-317">下面的示例使用线程本地变量来计算许多长运算的结果之和。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="a5bf1-318">此示例将并行度限制为四。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-319"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-319">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-320">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-320">-or-</span></span> 
<span data-ttu-id="a5bf1-321"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-322">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-322">-or-</span></span> 
<span data-ttu-id="a5bf1-323"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-324">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-324">-or-</span></span> 
<span data-ttu-id="a5bf1-325"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-326">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-327">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-328">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-328">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-329">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-329">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-330">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-330">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="a5bf1-331">开始索引（含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-331">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="a5bf1-332">结束索引（不含）。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-332">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-333">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-333">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-334">用于返回每个线程的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-334">The function delegate that returns the initial state of the local data for each thread.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-335">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-335">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-336">用于对每个线程的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-336">The delegate that performs a final action on the local state of each thread.</span></span></param>
        <summary><span data-ttu-id="a5bf1-337">执行具有 64 位索引和线程本地数据的 <see langword="for" /> 循环，其中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-337">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-338">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-338">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-339">对于迭代范围 (`fromInclusive`、 `toExclusive`) 中的每个值调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="a5bf1-340">提供了以下参数: 迭代计数 (<xref:System.Int64>) <xref:System.Threading.Tasks.ParallelLoopState> 、可能用于提前中断循环的实例, 以及可能在同一线程上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-341">将为参与循环执行的每个线程调用一次委托,并返回每个线程的初始本地状态。`localInit`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="a5bf1-342">这些初始状态将传递到每个`body`线程上的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="a5bf1-343">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-344">最后, 每个线程上的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-345">每个线程调用一次委托,以便对每个线程的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="a5bf1-346">可以在多个线程上同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-347">此<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-348">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="a5bf1-349">如果`fromInclusive`大于或`toExclusive`等于, 则方法立即返回, 而不执行任何迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-350"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-350">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-351">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-351">-or-</span></span> 
<span data-ttu-id="a5bf1-352"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-353">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-353">-or-</span></span> 
<span data-ttu-id="a5bf1-354"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-355">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-355">-or-</span></span> 
<span data-ttu-id="a5bf1-356"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-357">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-358">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-359">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-359">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-360">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-360">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a5bf1-361">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each " />）操作，其中可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-362"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-362">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-363">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-363">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-364">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-364">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-365">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-366">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-366">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-367">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-368">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-370">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-371"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-371">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-372">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-372">-or-</span></span> 
<span data-ttu-id="a5bf1-373"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-373">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-374">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-375">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-375">-or-</span></span> 
<span data-ttu-id="a5bf1-376">在 <see langword="false" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-377">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-377">-or-</span></span> 
<span data-ttu-id="a5bf1-378">在源可排序的分区程序的所有方法都返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-378">Any methods in the source orderable partitioner return <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-379">从其中某个指定委托引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-379">The exception thrown from one of the specified delegates.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-380">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-380">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-381"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-381">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-382">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-382">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-383">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-383">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-384">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-384">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-385">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-385">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-386">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-386">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-387">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-387">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-388"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-388">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-389">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-389">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-390"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-390">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-391">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-391">-or-</span></span> 
<span data-ttu-id="a5bf1-392"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-392">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-393">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-393">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-394">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-394">-or-</span></span> 
<span data-ttu-id="a5bf1-395"><paramref name="source" /> 分区程序中的方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-395">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-396">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-396">-or-</span></span> 
<span data-ttu-id="a5bf1-397"><paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-397">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-398">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-398">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-399">因包含从指定的委托之一引发的异常而引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-399">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-400"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-400">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-401">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-401">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-402">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-402">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-403">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-403">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-404">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-404">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-405">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-405">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-406">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-406">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-407"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-407">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-408">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-408">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-409">下面的示例演示如何实现用于的范围分区程序<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-409">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-410"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-410">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-411">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-411">-or-</span></span> 
<span data-ttu-id="a5bf1-412"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-412">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-413">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-413">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-414">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-414">-or-</span></span> 
<span data-ttu-id="a5bf1-415">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-415">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-416">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-416">-or-</span></span> 
<span data-ttu-id="a5bf1-417"><paramref name="source" /> 分区程序中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未返回正确的分区数时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-417">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-418">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-418">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-419">因包含从指定的委托之一引发的异常而引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-419">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-420">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-420">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-421">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-421">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-422">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-422">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-423">执行具有 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-423">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-424">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-424">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-425">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-425">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-426">它提供有以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例和当前元素的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-426">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-427"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-427">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-428">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-428">-or-</span></span> 
<span data-ttu-id="a5bf1-429"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-429">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-430">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-430">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-431">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-431">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-432">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-432">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-433">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-433">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-434">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-434">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-435">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-435">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-436">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-436">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-437">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-437">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-438">它附带了以下参数: 当前元素和<xref:System.Threading.Tasks.ParallelLoopState>可用于提前中断循环的实例的实例。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-438">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-439"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-439">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-440">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-440">-or-</span></span> 
<span data-ttu-id="a5bf1-441"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-441">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-442">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-442">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-443">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-443">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-444">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-444">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-445">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-445">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-446">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-446">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-447">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-447">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-448">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-448">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-449">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-449">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-450">它以当前元素作为参数提供。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-450">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-451">下面的示例使用<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29>方法对文本文件中元音和非空白字符的数目进行计数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-451">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="a5bf1-452">在这种情况下<xref:System.Threading.Tasks.ParallelLoopResult> , 将忽略方法返回的值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-452">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="a5bf1-453">请注意, 由于操作可以并行运行, 因此必须确保递增计数器变量是原子操作, 并且多个线程不会尝试同时访问计数器变量。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-453">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="a5bf1-454">为此, 该示例使用`lock`语句 (在中C#) 和`SyncLock`语句 (在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-454">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-455"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-455">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-456">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-456">-or-</span></span> 
<span data-ttu-id="a5bf1-457"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-457">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-458">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-458">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-459">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-459">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-460"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-460">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-461">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-461">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-462">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-462">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-463">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-463">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-464">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-464">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-465">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-465">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-466">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-466">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-467">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-467">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-468"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-468">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-469">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-469">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-470">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-470">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-471"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-471">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-472">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-472">-or-</span></span> 
<span data-ttu-id="a5bf1-473"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-473">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-474">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-474">-or-</span></span> 
<span data-ttu-id="a5bf1-475"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-475">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-476">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-476">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-477">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-477">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-478">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-478">-or-</span></span> 
<span data-ttu-id="a5bf1-479">在 <paramref name="source" /> 可排序的分区程序的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-479">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-480">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-480">-or-</span></span> 
<span data-ttu-id="a5bf1-481">当 <paramref name="source" /> 可排序分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-481">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-482">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-482">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-483">因包含从指定的委托之一引发的异常而引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-483">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-484"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-484">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-485">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-485">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-486">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-486">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-487">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-487">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-488">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-488">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-489">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-489">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-490">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-490">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-491">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-491">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-492"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-492">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-493">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-493">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-494">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-494">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-495">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-495">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-496"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-496">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-497">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-497">-or-</span></span> 
<span data-ttu-id="a5bf1-498"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-498">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-499">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-499">-or-</span></span> 
<span data-ttu-id="a5bf1-500"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-500">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-501">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-501">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-502">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-502">-or-</span></span> 
<span data-ttu-id="a5bf1-503">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-503">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-504">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-504">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-505">因包含从指定的委托之一引发的异常而引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-505">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-506"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-506">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-507">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-507">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-508">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-508">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-509">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-509">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-510">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 中可能会并行运行迭代，而且可以配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-510">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-511">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-511">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-512">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-512">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-513">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-513">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-514"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-514">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-515">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-515">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-516">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-516">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-517">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-517">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-518"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-518">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-519">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-519">-or-</span></span> 
<span data-ttu-id="a5bf1-520"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-520">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-521">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-521">-or-</span></span> 
<span data-ttu-id="a5bf1-522"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-522">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-523">在 <paramref name="source" /> 的分区程序的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-523">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="a5bf1-524">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-524">-or-</span></span> 
<span data-ttu-id="a5bf1-525">在 <paramref name="source" /> 分区程序中的任何方法返回 <see langword="null" /> 时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-525">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-526">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-526">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-527">因包含从指定的委托之一引发的异常而引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-527">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-528">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-528">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-529">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-529">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-530">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-530">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-531">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-531">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-532">执行具有 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-532">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-533">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-533">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-534">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-534">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-535">它提供有以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例和当前元素的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-535">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-536">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-536">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-537"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-537">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-538">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-538">-or-</span></span> 
<span data-ttu-id="a5bf1-539"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-539">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-540">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-540">-or-</span></span> 
<span data-ttu-id="a5bf1-541"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-541">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-542">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-542">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-543">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-543">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-544">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-544">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-545">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-545">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-546">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-546">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-547">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-547">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-548">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-548">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-549">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-549">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-550">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-550">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-551">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-551">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-552">它附带了以下参数: 当前元素和<xref:System.Threading.Tasks.ParallelLoopState>可用于提前中断循环的实例的实例。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-552">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-553">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-553">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-554"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-554">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-555">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-555">-or-</span></span> 
<span data-ttu-id="a5bf1-556"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-556">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-557">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-557">-or-</span></span> 
<span data-ttu-id="a5bf1-558"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-558">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-559">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-559">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-560">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-560">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-561">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-561">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-562">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-562">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-563">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-563">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-564">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-564">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-565">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-565">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="a5bf1-566">执行 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 中可能会并行运行迭代，而且可以匹配配置循环选项。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-566">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-567">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-567">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-568">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-568">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-569">它以当前元素作为参数提供。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-569">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-570">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" />参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-570">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-571"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-571">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-572">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-572">-or-</span></span> 
<span data-ttu-id="a5bf1-573"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-573">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-574">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-574">-or-</span></span> 
<span data-ttu-id="a5bf1-575"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-575">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-576">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-576">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-577">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-577">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-578">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-578">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-579"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-579">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-580">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-580">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-581">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-581">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-582">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-582">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-583">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-583">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-584">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-584">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-585">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-585">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-586">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-586">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-587">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-587">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-588">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-588">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-589"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-589">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-590">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-590">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="a5bf1-591">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-591">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-592">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-592">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-593">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-593">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-594">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-594">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-595">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-595">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-596">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-596">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-597">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-597">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-598">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-598">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-599"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-599">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-600">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-600">-or-</span></span> 
<span data-ttu-id="a5bf1-601"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-601">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-602">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-602">-or-</span></span> 
<span data-ttu-id="a5bf1-603"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-603">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-604">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-604">-or-</span></span> 
<span data-ttu-id="a5bf1-605"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-605">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-606"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-606">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-607">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-607">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-608">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-608">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-609"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-609">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-610">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-610">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-611">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-611">The partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-612">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-612">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-613">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-613">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-614">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-614">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-615">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-615">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-616">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-616">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-617">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-617">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-618">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-618">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-619"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-619">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-620">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-620">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="a5bf1-621">将为参与循环执行的每个线程调用一次委托,并返回每个任务的初始本地状态。`localInit`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-621">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-622">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-622">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-623">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-623">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-624">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-624">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-625">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-625">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-626">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-626">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-627">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-627">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-628">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-628">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-629"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-629">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-630">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-630">-or-</span></span> 
<span data-ttu-id="a5bf1-631"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-631">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-632">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-632">-or-</span></span> 
<span data-ttu-id="a5bf1-633"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-633">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-634">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-634">-or-</span></span> 
<span data-ttu-id="a5bf1-635"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-635">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-636"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-636">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-637">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-637">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-638">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-638">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-639">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-639">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-640">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-640">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-641">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-641">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-642">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-642">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-643">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-643">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-644">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-644">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-645">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-645">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-646">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-646">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-647">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-647">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-648">提供了以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例、当前元素的索引 (<xref:System.Int64>), 以及可能在执行的迭代间共享的某些本地状态。在同一线程上。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-648">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-649">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-649">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-650">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-650">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-651">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-651">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-652">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-652">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-653">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-653">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-654">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-654">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-655">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-655">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-656">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-656">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-657"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-657">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-658">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-658">-or-</span></span> 
<span data-ttu-id="a5bf1-659"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-659">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-660">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-660">-or-</span></span> 
<span data-ttu-id="a5bf1-661"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-661">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-662">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-662">-or-</span></span> 
<span data-ttu-id="a5bf1-663"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-663">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-664">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-664">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-665">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-665">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-666">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-666">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-667">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-667">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-668">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-668">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-669">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-669">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-670">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-670">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-671">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-671">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-672">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-672">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-673">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-673">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-674">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-674">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-675">提供了以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例, 以及可能在同一线程上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-675">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-676">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-676">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-677">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-677">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-678">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-678">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-679">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-679">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-680">每个线程调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-680">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-681">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-681">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-682">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-682">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-683">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-683">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-684">下面的示例演示如何使用具有本地<xref:System.Threading.Tasks.Parallel.ForEach%2A>状态的方法:</span><span class="sxs-lookup"><span data-stu-id="a5bf1-684">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-685"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-685">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-686">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-686">-or-</span></span> 
<span data-ttu-id="a5bf1-687"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-687">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-688">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-688">-or-</span></span> 
<span data-ttu-id="a5bf1-689"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-689">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-690">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-690">-or-</span></span> 
<span data-ttu-id="a5bf1-691"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-691">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-692">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-692">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-693">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-693">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-694"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-694">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-695">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-695">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-696">包含原始数据源的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-696">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-697">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-697">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-698">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-698">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-699">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-699">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-700">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-700">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-701">执行具有 64 位索引和线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-701">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-702">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-702">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-703">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-703">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-704">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-704">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-705"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-705">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-706">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-706">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="a5bf1-707">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-707">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-708">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-708">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-709">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-709">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-710">最后, 每个线程上的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-710">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-711">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-711">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-712">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-712">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-713">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-713">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-714">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-714">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-715"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-715">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-716">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-716">-or-</span></span> 
<span data-ttu-id="a5bf1-717"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-717">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-718">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-718">-or-</span></span> 
<span data-ttu-id="a5bf1-719"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-719">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-720">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-720">-or-</span></span> 
<span data-ttu-id="a5bf1-721"><paramref name="localInit" /> 或 <paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-721">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-722"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-722">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-723">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-723">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-724">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-724">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-725">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-725">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-726">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-726">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-727"><paramref name="source" /> 中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-727">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-728">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-728">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-729">包含原始数据源的分区程序。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-729">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-730">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-730">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-731">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-731">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-732">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-732">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-733">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-733">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-734">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-734">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-735">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-735">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-736">如果要重写默认分区方案, 则会提供此重载。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-736">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="a5bf1-737">例如, 小型循环主体可能会受益于对范围进行分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-737">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="a5bf1-738"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法要求自定义分区程序以支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-738">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="a5bf1-739">此重载适用于具有小型循环主体的方案, 这可能会受益于静态范围分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-739">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="a5bf1-740">分区程序必须支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-740">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="a5bf1-741">有关详细信息, 请参阅[用于 PLINQ 和 TPL 的自定义分区程序](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[如何:实现动态分区](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-741">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="a5bf1-742">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-742">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-743">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-743">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-744">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-744">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-745">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-745">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-746">每个任务调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-746">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-747">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-747">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-748">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-748">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-749">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-749">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-750"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-750">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-751">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-751">-or-</span></span> 
<span data-ttu-id="a5bf1-752"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-752">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-753">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-753">-or-</span></span> 
<span data-ttu-id="a5bf1-754"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-754">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-755">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-755">-or-</span></span> 
<span data-ttu-id="a5bf1-756"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-756">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-757">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-757">-or-</span></span> 
<span data-ttu-id="a5bf1-758"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-758">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5bf1-759"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 属性返回 <see langword="false" />，或者分区程序返回 <see langword="null" /> 分区。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-759">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-760">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-760">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-761">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-761">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-762">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-762">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-763">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-763">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-764">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-764">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-765">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-765">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-766">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-766">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-767">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-767">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-768">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-768">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-769">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-769">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-770">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-770">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-771">执行具有线程本地数据和 64 位索引的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-771">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-772">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-772">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-773">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-773">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-774">提供了以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例、当前元素的索引 (<xref:System.Int64>), 以及可能在执行的迭代间共享的某些本地状态。在同一线程上。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-774">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-775">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-775">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-776">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-776">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-777">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-777">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-778">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-778">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-779">每个线程调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-779">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-780">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-780">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-781">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-781">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-782">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-782">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-783"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-783">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-784">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-784">-or-</span></span> 
<span data-ttu-id="a5bf1-785"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-785">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-786">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-786">-or-</span></span> 
<span data-ttu-id="a5bf1-787"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-787">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-788">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-788">-or-</span></span> 
<span data-ttu-id="a5bf1-789"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-789">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-790">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-790">-or-</span></span> 
<span data-ttu-id="a5bf1-791"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-791">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-792">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-792">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-793">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-793">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-794">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-794">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-795">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-795">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="a5bf1-796">源中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-796">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="a5bf1-797">线程本地数据的类型。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-797">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a5bf1-798">可枚举的数据源。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-798">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-799">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-799">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="a5bf1-800">用于返回每个任务的本地数据的初始状态的函数委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-800">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="a5bf1-801">将为每个迭代调用一次的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-801">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="a5bf1-802">用于对每个任务的本地状态执行一个最终操作的委托。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-802">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="a5bf1-803">执行具有线程本地数据的 <see langword="foreach" />（在 Visual Basic 中为 <see langword="For Each" />）操作，其中在 <see cref="T:System.Collections.IEnumerable" /> 上可能会并行运行迭代，而且可以配置循环选项，可以监视和操作循环的状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-803">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="a5bf1-804">包含有关已完成的循环部分的信息的结构。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-804">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-805">为可`source`枚举中的每个元素调用一次委托。`body`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-805">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="a5bf1-806">提供了以下参数: 当前元素、 <xref:System.Threading.Tasks.ParallelLoopState>可能用于提前跳出循环的实例, 以及可能在同一线程上执行的迭代之间共享的某种本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-806">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="a5bf1-807">对于`localInit`参与循环执行的每个任务, 将调用该委托一次, 并返回这些任务的初始本地状态。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-807">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="a5bf1-808">这些初始状态将传递给每个`body`任务的第一次调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-808">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="a5bf1-809">然后, 每个后续的主体调用都将返回一个可能修改的状态值, 并将其传递给下一个主体调用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-809">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="a5bf1-810">最后, 每个任务的最后一个主体调用返回传递给`localFinally`委托的状态值。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-810">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="a5bf1-811">每个线程调用一次委托,以便对每个任务的本地状态执行最后一个操作。`localFinally`</span><span class="sxs-lookup"><span data-stu-id="a5bf1-811">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="a5bf1-812">可对多个任务同时调用此委托;因此, 必须同步对任何共享变量的访问。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-812">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="a5bf1-813">此<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法在其执行生存期内使用的任务比线程多, 因为现有任务完成并被新任务取代。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-813">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="a5bf1-814">这使基础<xref:System.Threading.Tasks.TaskScheduler>对象有机会添加、更改或删除为循环提供服务的线程。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-814">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-815"><paramref name="source" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-815">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-816">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-816">-or-</span></span> 
<span data-ttu-id="a5bf1-817"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-817">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-818">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-818">-or-</span></span> 
<span data-ttu-id="a5bf1-819"><paramref name="body" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-819">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-820">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-820">-or-</span></span> 
<span data-ttu-id="a5bf1-821"><paramref name="localInit" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-821">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-822">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a5bf1-822">-or-</span></span> 
<span data-ttu-id="a5bf1-823"><paramref name="localFinally" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-823">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-824">在 <paramref name="parallelOptions" /> 取消的 <see cref="T:System.Threading.CancellationToken" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-824">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-825">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-825">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-826">包含在所有线程上引发的全部单个异常的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-826">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="a5bf1-827">并行循环</span><span class="sxs-lookup"><span data-stu-id="a5bf1-827">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a5bf1-828">尽可能并行执行提供的每个操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-828">Executes each of the provided actions, possibly in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions"><span data-ttu-id="a5bf1-829">要执行的 <see cref="T:System.Action" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-829">An array of <see cref="T:System.Action" /> to execute.</span></span></param>
        <summary><span data-ttu-id="a5bf1-830">尽可能并行执行提供的每个操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-830">Executes each of the provided actions, possibly in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-831">此方法可用于执行可能并行执行的一组操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-831">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="a5bf1-832">不保证执行操作的顺序, 或是否并行执行操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-832">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="a5bf1-833">此方法在每个提供的操作都已完成后才会返回, 无论是由于正常终止还是异常终止而发生。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-833">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="a5bf1-834">有关详细信息，请参阅[如何：使用 Parallel.Invoke 执行并行操作](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-834">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5bf1-835">此示例演示如何将<xref:System.Threading.Tasks.Parallel.Invoke%2A>方法与其他方法、匿名委托和 lambda 表达式一起使用。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-835">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-836"><paramref name="actions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-836">The <paramref name="actions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-837">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-837">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a5bf1-838"><paramref name="actions" />数组包含 <see langword="null" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-838">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions"><span data-ttu-id="a5bf1-839">一个对象，用于配置此操作的行为。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-839">An object that configures the behavior of this operation.</span></span></param>
        <param name="actions"><span data-ttu-id="a5bf1-840">要执行的操作数组。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-840">An array of actions to execute.</span></span></param>
        <summary><span data-ttu-id="a5bf1-841">执行所提供的每个操作，而且尽可能并行运行，除非用户取消了操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-841">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5bf1-842">此方法可用于执行可能并行执行的一组操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-842">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="a5bf1-843">与<xref:System.Threading.Tasks.ParallelOptions>结构一起传入的取消标记允许调用方取消整个操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-843">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="a5bf1-844">有关详细信息，请参阅[托管线程中的取消](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-844">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="a5bf1-845">不保证执行操作的顺序, 或是否并行执行操作。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-845">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="a5bf1-846">此方法在每个提供的操作都已完成后才会返回, 无论是由于正常终止还是异常终止而发生。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-846">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="a5bf1-847">有关详细信息，请参阅[如何：使用 Parallel.Invoke 执行并行操作](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-847">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="a5bf1-848"><see cref="T:System.Threading.CancellationToken" /> 处于 <paramref name="parallelOptions" /> 设置。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-848">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a5bf1-849"><paramref name="actions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-849">The <paramref name="actions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="a5bf1-850">或</span><span class="sxs-lookup"><span data-stu-id="a5bf1-850">-or-</span></span> 
<span data-ttu-id="a5bf1-851"><paramref name="parallelOptions" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-851">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="a5bf1-852">当 <paramref name="actions" /> 数组中的任何操作引发异常时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-852">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a5bf1-853"><paramref name="actions" />数组包含 <see langword="null" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-853">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a5bf1-854">在 <paramref name="parallelOptions" /> 中与 <see cref="T:System.Threading.CancellationTokenSource" /> 关联的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</span><span class="sxs-lookup"><span data-stu-id="a5bf1-854">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
